
lichnew.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003528  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  00800060  00003528  000035bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  008000c4  008000c4  00003620  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003620  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000367c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000036b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002600  00000000  00000000  000037e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000866  00000000  00000000  00005de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000173f  00000000  00000000  00006646  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000056c  00000000  00000000  00007d88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c8  00000000  00000000  000082f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000189b  00000000  00000000  000088bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  0000a157  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
       c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 c2 11 	jmp	0x2384	; 0x2384 <__vector_11>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <Check_btn+0x126>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	10 e0       	ldi	r17, 0x00	; 0
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	e8 e2       	ldi	r30, 0x28	; 40
      86:	f5 e3       	ldi	r31, 0x35	; 53
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	a4 3c       	cpi	r26, 0xC4	; 196
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	20 e0       	ldi	r18, 0x00	; 0
      96:	a4 ec       	ldi	r26, 0xC4	; 196
      98:	b0 e0       	ldi	r27, 0x00	; 0
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	aa 3e       	cpi	r26, 0xEA	; 234
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 32 11 	call	0x2264	; 0x2264 <main>
      a8:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <TWI_Init>:
	#ifdef LCD8BIT
		Write8Bit(0x02);
		wait_LCD();
	#else
		Write2Nib(0x02);
		wait_LCD();
      b0:	11 b8       	out	0x01, r1	; 1
      b2:	88 e4       	ldi	r24, 0x48	; 72
      b4:	80 b9       	out	0x00, r24	; 0
      b6:	84 e8       	ldi	r24, 0x84	; 132
      b8:	86 bf       	out	0x36, r24	; 54
      ba:	08 95       	ret

000000bc <TWI_DS1307_wadr>:
      bc:	94 ea       	ldi	r25, 0xA4	; 164
      be:	96 bf       	out	0x36, r25	; 54
      c0:	06 b6       	in	r0, 0x36	; 54
      c2:	07 fe       	sbrs	r0, 7
      c4:	fd cf       	rjmp	.-6      	; 0xc0 <TWI_DS1307_wadr+0x4>
      c6:	91 b1       	in	r25, 0x01	; 1
      c8:	98 7f       	andi	r25, 0xF8	; 248
      ca:	98 30       	cpi	r25, 0x08	; 8
      cc:	11 f0       	breq	.+4      	; 0xd2 <TWI_DS1307_wadr+0x16>
      ce:	81 b1       	in	r24, 0x01	; 1
      d0:	08 95       	ret
      d2:	90 ed       	ldi	r25, 0xD0	; 208
      d4:	93 b9       	out	0x03, r25	; 3
      d6:	94 e8       	ldi	r25, 0x84	; 132
      d8:	96 bf       	out	0x36, r25	; 54
      da:	06 b6       	in	r0, 0x36	; 54
      dc:	07 fe       	sbrs	r0, 7
      de:	fd cf       	rjmp	.-6      	; 0xda <TWI_DS1307_wadr+0x1e>
      e0:	91 b1       	in	r25, 0x01	; 1
      e2:	98 7f       	andi	r25, 0xF8	; 248
      e4:	98 31       	cpi	r25, 0x18	; 24
      e6:	11 f0       	breq	.+4      	; 0xec <TWI_DS1307_wadr+0x30>
      e8:	81 b1       	in	r24, 0x01	; 1
      ea:	08 95       	ret
      ec:	83 b9       	out	0x03, r24	; 3
      ee:	84 e8       	ldi	r24, 0x84	; 132
      f0:	86 bf       	out	0x36, r24	; 54
      f2:	06 b6       	in	r0, 0x36	; 54
      f4:	07 fe       	sbrs	r0, 7
      f6:	fd cf       	rjmp	.-6      	; 0xf2 <TWI_DS1307_wadr+0x36>
      f8:	81 b1       	in	r24, 0x01	; 1
      fa:	88 7f       	andi	r24, 0xF8	; 248
      fc:	88 32       	cpi	r24, 0x28	; 40
      fe:	11 f0       	breq	.+4      	; 0x104 <TWI_DS1307_wadr+0x48>
     100:	81 b1       	in	r24, 0x01	; 1
     102:	08 95       	ret
     104:	84 e9       	ldi	r24, 0x94	; 148
     106:	86 bf       	out	0x36, r24	; 54
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	08 95       	ret

0000010c <TWI_DS1307_wblock>:
     10c:	94 ea       	ldi	r25, 0xA4	; 164
     10e:	96 bf       	out	0x36, r25	; 54
     110:	06 b6       	in	r0, 0x36	; 54
     112:	07 fe       	sbrs	r0, 7
     114:	fd cf       	rjmp	.-6      	; 0x110 <TWI_DS1307_wblock+0x4>
     116:	91 b1       	in	r25, 0x01	; 1
     118:	98 7f       	andi	r25, 0xF8	; 248
     11a:	98 30       	cpi	r25, 0x08	; 8
     11c:	11 f0       	breq	.+4      	; 0x122 <TWI_DS1307_wblock+0x16>
     11e:	81 b1       	in	r24, 0x01	; 1
     120:	08 95       	ret
     122:	90 ed       	ldi	r25, 0xD0	; 208
     124:	93 b9       	out	0x03, r25	; 3
     126:	94 e8       	ldi	r25, 0x84	; 132
     128:	96 bf       	out	0x36, r25	; 54
     12a:	06 b6       	in	r0, 0x36	; 54
     12c:	07 fe       	sbrs	r0, 7
     12e:	fd cf       	rjmp	.-6      	; 0x12a <TWI_DS1307_wblock+0x1e>
     130:	91 b1       	in	r25, 0x01	; 1
     132:	98 7f       	andi	r25, 0xF8	; 248
     134:	98 31       	cpi	r25, 0x18	; 24
     136:	11 f0       	breq	.+4      	; 0x13c <TWI_DS1307_wblock+0x30>
     138:	81 b1       	in	r24, 0x01	; 1
     13a:	08 95       	ret
     13c:	83 b9       	out	0x03, r24	; 3
     13e:	84 e8       	ldi	r24, 0x84	; 132
     140:	86 bf       	out	0x36, r24	; 54
     142:	06 b6       	in	r0, 0x36	; 54
     144:	07 fe       	sbrs	r0, 7
     146:	fd cf       	rjmp	.-6      	; 0x142 <TWI_DS1307_wblock+0x36>
     148:	81 b1       	in	r24, 0x01	; 1
     14a:	88 7f       	andi	r24, 0xF8	; 248
     14c:	88 32       	cpi	r24, 0x28	; 40
     14e:	a1 f0       	breq	.+40     	; 0x178 <TWI_DS1307_wblock+0x6c>
     150:	81 b1       	in	r24, 0x01	; 1
     152:	08 95       	ret
     154:	fb 01       	movw	r30, r22
     156:	e8 0f       	add	r30, r24
     158:	f1 1d       	adc	r31, r1
     15a:	90 81       	ld	r25, Z
     15c:	93 b9       	out	0x03, r25	; 3
     15e:	94 e8       	ldi	r25, 0x84	; 132
     160:	96 bf       	out	0x36, r25	; 54
     162:	06 b6       	in	r0, 0x36	; 54
     164:	07 fe       	sbrs	r0, 7
     166:	fd cf       	rjmp	.-6      	; 0x162 <TWI_DS1307_wblock+0x56>
     168:	91 b1       	in	r25, 0x01	; 1
     16a:	98 7f       	andi	r25, 0xF8	; 248
     16c:	98 32       	cpi	r25, 0x28	; 40
     16e:	11 f0       	breq	.+4      	; 0x174 <TWI_DS1307_wblock+0x68>
     170:	81 b1       	in	r24, 0x01	; 1
     172:	08 95       	ret
     174:	8f 5f       	subi	r24, 0xFF	; 255
     176:	01 c0       	rjmp	.+2      	; 0x17a <TWI_DS1307_wblock+0x6e>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	84 17       	cp	r24, r20
     17c:	58 f3       	brcs	.-42     	; 0x154 <TWI_DS1307_wblock+0x48>
     17e:	84 e9       	ldi	r24, 0x94	; 148
     180:	86 bf       	out	0x36, r24	; 54
     182:	80 e0       	ldi	r24, 0x00	; 0
     184:	08 95       	ret

00000186 <TWI_DS1307_rblock>:
     186:	dc 01       	movw	r26, r24
     188:	84 ea       	ldi	r24, 0xA4	; 164
     18a:	86 bf       	out	0x36, r24	; 54
     18c:	06 b6       	in	r0, 0x36	; 54
     18e:	07 fe       	sbrs	r0, 7
     190:	fd cf       	rjmp	.-6      	; 0x18c <TWI_DS1307_rblock+0x6>
     192:	81 b1       	in	r24, 0x01	; 1
     194:	88 7f       	andi	r24, 0xF8	; 248
     196:	88 30       	cpi	r24, 0x08	; 8
     198:	c9 f7       	brne	.-14     	; 0x18c <TWI_DS1307_rblock+0x6>
     19a:	81 ed       	ldi	r24, 0xD1	; 209
     19c:	83 b9       	out	0x03, r24	; 3
     19e:	84 e8       	ldi	r24, 0x84	; 132
     1a0:	86 bf       	out	0x36, r24	; 54
     1a2:	06 b6       	in	r0, 0x36	; 54
     1a4:	07 fe       	sbrs	r0, 7
     1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <TWI_DS1307_rblock+0x1c>
     1a8:	91 b1       	in	r25, 0x01	; 1
     1aa:	98 7f       	andi	r25, 0xF8	; 248
     1ac:	90 34       	cpi	r25, 0x40	; 64
     1ae:	c9 f7       	brne	.-14     	; 0x1a2 <TWI_DS1307_rblock+0x1c>
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <TWI_DS1307_rblock+0x4c>
     1b4:	84 ec       	ldi	r24, 0xC4	; 196
     1b6:	86 bf       	out	0x36, r24	; 54
     1b8:	06 b6       	in	r0, 0x36	; 54
     1ba:	07 fe       	sbrs	r0, 7
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <TWI_DS1307_rblock+0x32>
     1be:	91 b1       	in	r25, 0x01	; 1
     1c0:	98 7f       	andi	r25, 0xF8	; 248
     1c2:	90 35       	cpi	r25, 0x50	; 80
     1c4:	c9 f7       	brne	.-14     	; 0x1b8 <TWI_DS1307_rblock+0x32>
     1c6:	fd 01       	movw	r30, r26
     1c8:	e2 0f       	add	r30, r18
     1ca:	f1 1d       	adc	r31, r1
     1cc:	83 b1       	in	r24, 0x03	; 3
     1ce:	80 83       	st	Z, r24
     1d0:	2f 5f       	subi	r18, 0xFF	; 255
     1d2:	e2 2f       	mov	r30, r18
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	46 2f       	mov	r20, r22
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	41 50       	subi	r20, 0x01	; 1
     1dc:	51 09       	sbc	r21, r1
     1de:	e4 17       	cp	r30, r20
     1e0:	f5 07       	cpc	r31, r21
     1e2:	44 f3       	brlt	.-48     	; 0x1b4 <TWI_DS1307_rblock+0x2e>
     1e4:	84 e8       	ldi	r24, 0x84	; 132
     1e6:	86 bf       	out	0x36, r24	; 54
     1e8:	06 b6       	in	r0, 0x36	; 54
     1ea:	07 fe       	sbrs	r0, 7
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <TWI_DS1307_rblock+0x62>
     1ee:	91 b1       	in	r25, 0x01	; 1
     1f0:	98 7f       	andi	r25, 0xF8	; 248
     1f2:	98 35       	cpi	r25, 0x58	; 88
     1f4:	c9 f7       	brne	.-14     	; 0x1e8 <TWI_DS1307_rblock+0x62>
     1f6:	86 2f       	mov	r24, r22
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	a8 0f       	add	r26, r24
     1fe:	b9 1f       	adc	r27, r25
     200:	83 b1       	in	r24, 0x03	; 3
     202:	8c 93       	st	X, r24
     204:	84 e9       	ldi	r24, 0x94	; 148
     206:	86 bf       	out	0x36, r24	; 54
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	08 95       	ret

0000020c <Read2Nib>:
     20c:	8b b3       	in	r24, 0x1b	; 27
     20e:	80 6f       	ori	r24, 0xF0	; 240
     210:	8b bb       	out	0x1b, r24	; 27
     212:	8a b3       	in	r24, 0x1a	; 26
     214:	8f 70       	andi	r24, 0x0F	; 15
     216:	8a bb       	out	0x1a, r24	; 26
     218:	8b b3       	in	r24, 0x1b	; 27
     21a:	84 60       	ori	r24, 0x04	; 4
     21c:	8b bb       	out	0x1b, r24	; 27
     21e:	8b b3       	in	r24, 0x1b	; 27
     220:	84 60       	ori	r24, 0x04	; 4
     222:	8b bb       	out	0x1b, r24	; 27
     224:	99 b3       	in	r25, 0x19	; 25
     226:	90 7f       	andi	r25, 0xF0	; 240
     228:	8b b3       	in	r24, 0x1b	; 27
     22a:	8b 7f       	andi	r24, 0xFB	; 251
     22c:	8b bb       	out	0x1b, r24	; 27
     22e:	8b b3       	in	r24, 0x1b	; 27
     230:	84 60       	ori	r24, 0x04	; 4
     232:	8b bb       	out	0x1b, r24	; 27
     234:	8b b3       	in	r24, 0x1b	; 27
     236:	84 60       	ori	r24, 0x04	; 4
     238:	8b bb       	out	0x1b, r24	; 27
     23a:	89 b3       	in	r24, 0x19	; 25
     23c:	2b b3       	in	r18, 0x1b	; 27
     23e:	2b 7f       	andi	r18, 0xFB	; 251
     240:	2b bb       	out	0x1b, r18	; 27
     242:	82 95       	swap	r24
     244:	8f 70       	andi	r24, 0x0F	; 15
     246:	89 2b       	or	r24, r25
     248:	08 95       	ret

0000024a <Write2Nib>:
     24a:	2b b3       	in	r18, 0x1b	; 27
     24c:	2f 70       	andi	r18, 0x0F	; 15
     24e:	38 2f       	mov	r19, r24
     250:	30 7f       	andi	r19, 0xF0	; 240
     252:	40 e1       	ldi	r20, 0x10	; 16
     254:	84 9f       	mul	r24, r20
     256:	c0 01       	movw	r24, r0
     258:	11 24       	eor	r1, r1
     25a:	92 2f       	mov	r25, r18
     25c:	93 2b       	or	r25, r19
     25e:	9b bb       	out	0x1b, r25	; 27
     260:	9b b3       	in	r25, 0x1b	; 27
     262:	94 60       	ori	r25, 0x04	; 4
     264:	9b bb       	out	0x1b, r25	; 27
     266:	9b b3       	in	r25, 0x1b	; 27
     268:	9b 7f       	andi	r25, 0xFB	; 251
     26a:	9b bb       	out	0x1b, r25	; 27
     26c:	82 2b       	or	r24, r18
     26e:	8b bb       	out	0x1b, r24	; 27
     270:	8b b3       	in	r24, 0x1b	; 27
     272:	84 60       	ori	r24, 0x04	; 4
     274:	8b bb       	out	0x1b, r24	; 27
     276:	8b b3       	in	r24, 0x1b	; 27
     278:	8b 7f       	andi	r24, 0xFB	; 251
     27a:	8b bb       	out	0x1b, r24	; 27
     27c:	08 95       	ret

0000027e <wait_LCD>:
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	1f 92       	push	r1
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
     288:	8b b3       	in	r24, 0x1b	; 27
     28a:	8e 7f       	andi	r24, 0xFE	; 254
     28c:	8b bb       	out	0x1b, r24	; 27
     28e:	8b b3       	in	r24, 0x1b	; 27
     290:	82 60       	ori	r24, 0x02	; 2
     292:	8b bb       	out	0x1b, r24	; 27
     294:	0e 94 06 01 	call	0x20c	; 0x20c <Read2Nib>
     298:	89 83       	std	Y+1, r24	; 0x01
     29a:	89 81       	ldd	r24, Y+1	; 0x01
     29c:	88 23       	and	r24, r24
     29e:	a4 f3       	brlt	.-24     	; 0x288 <wait_LCD+0xa>
     2a0:	8b b3       	in	r24, 0x1b	; 27
     2a2:	8d 7f       	andi	r24, 0xFD	; 253
     2a4:	8b bb       	out	0x1b, r24	; 27
     2a6:	8f ef       	ldi	r24, 0xFF	; 255
     2a8:	8a bb       	out	0x1a, r24	; 26
     2aa:	0f 90       	pop	r0
     2ac:	df 91       	pop	r29
     2ae:	cf 91       	pop	r28
     2b0:	08 95       	ret

000002b2 <init_LCD>:
     2b2:	8f ef       	ldi	r24, 0xFF	; 255
     2b4:	8a bb       	out	0x1a, r24	; 26
     2b6:	8a bb       	out	0x1a, r24	; 26
     2b8:	8b b3       	in	r24, 0x1b	; 27
     2ba:	8e 7f       	andi	r24, 0xFE	; 254
     2bc:	8b bb       	out	0x1b, r24	; 27
     2be:	8b b3       	in	r24, 0x1b	; 27
     2c0:	8d 7f       	andi	r24, 0xFD	; 253
     2c2:	8b bb       	out	0x1b, r24	; 27
     2c4:	8b b3       	in	r24, 0x1b	; 27
     2c6:	8b 7f       	andi	r24, 0xFB	; 251
     2c8:	8b bb       	out	0x1b, r24	; 27
     2ca:	8b b3       	in	r24, 0x1b	; 27
     2cc:	84 60       	ori	r24, 0x04	; 4
     2ce:	8b bb       	out	0x1b, r24	; 27
     2d0:	8b b3       	in	r24, 0x1b	; 27
     2d2:	80 62       	ori	r24, 0x20	; 32
     2d4:	8b bb       	out	0x1b, r24	; 27
     2d6:	8b b3       	in	r24, 0x1b	; 27
     2d8:	8b 7f       	andi	r24, 0xFB	; 251
     2da:	8b bb       	out	0x1b, r24	; 27
     2dc:	0e 94 3f 01 	call	0x27e	; 0x27e <wait_LCD>
     2e0:	88 e2       	ldi	r24, 0x28	; 40
     2e2:	0e 94 25 01 	call	0x24a	; 0x24a <Write2Nib>
     2e6:	0e 94 3f 01 	call	0x27e	; 0x27e <wait_LCD>
     2ea:	8b b3       	in	r24, 0x1b	; 27
     2ec:	8e 7f       	andi	r24, 0xFE	; 254
     2ee:	8b bb       	out	0x1b, r24	; 27
     2f0:	8e e0       	ldi	r24, 0x0E	; 14
     2f2:	0e 94 25 01 	call	0x24a	; 0x24a <Write2Nib>
     2f6:	0e 94 3f 01 	call	0x27e	; 0x27e <wait_LCD>
     2fa:	8b b3       	in	r24, 0x1b	; 27
     2fc:	8e 7f       	andi	r24, 0xFE	; 254
     2fe:	8b bb       	out	0x1b, r24	; 27
     300:	86 e0       	ldi	r24, 0x06	; 6
     302:	0e 94 25 01 	call	0x24a	; 0x24a <Write2Nib>
     306:	0e 94 3f 01 	call	0x27e	; 0x27e <wait_LCD>
     30a:	08 95       	ret

0000030c <move_LCD>:
	#endif
}
void move_LCD(uint8_t y,uint8_t x){
	uint8_t Ad;
	Ad=64*(y-1)+(x-1)+0x80; //
     30c:	28 2f       	mov	r18, r24
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	21 50       	subi	r18, 0x01	; 1
     312:	31 09       	sbc	r19, r1
     314:	86 2f       	mov	r24, r22
     316:	90 e4       	ldi	r25, 0x40	; 64
     318:	29 9f       	mul	r18, r25
     31a:	80 0d       	add	r24, r0
     31c:	11 24       	eor	r1, r1
	cbi(CTRL,RS); // the following data is COMMAND
     31e:	9b b3       	in	r25, 0x1b	; 27
     320:	9e 7f       	andi	r25, 0xFE	; 254
     322:	9b bb       	out	0x1b, r25	; 27
	#ifdef LCD8BIT
		Write8Bit(Ad);
		wait_LCD();
	#else
		Write2Nib(Ad);
     324:	81 58       	subi	r24, 0x81	; 129
     326:	0e 94 25 01 	call	0x24a	; 0x24a <Write2Nib>
		wait_LCD();
     32a:	0e 94 3f 01 	call	0x27e	; 0x27e <wait_LCD>
     32e:	08 95       	ret

00000330 <clr_LCD>:
	#endif
}

void clr_LCD(){
	cbi(CTRL,RS); //RS=0 mean the following data is COMMAND (not normal DATA)
     330:	8b b3       	in	r24, 0x1b	; 27
     332:	8e 7f       	andi	r24, 0xFE	; 254
     334:	8b bb       	out	0x1b, r24	; 27
	#ifdef LCD8BIT
		Write8Bit(0x01);
		wait_LCD();
	#else
		Write2Nib(0x01);
     336:	81 e0       	ldi	r24, 0x01	; 1
     338:	0e 94 25 01 	call	0x24a	; 0x24a <Write2Nib>
		wait_LCD();
     33c:	0e 94 3f 01 	call	0x27e	; 0x27e <wait_LCD>
     340:	08 95       	ret

00000342 <putChar_LCD>:

	#endif
}

void putChar_LCD(uint8_t chr){
	sbi(CTRL,RS); //this is a normal DATA
     342:	9b b3       	in	r25, 0x1b	; 27
     344:	91 60       	ori	r25, 0x01	; 1
     346:	9b bb       	out	0x1b, r25	; 27
	#ifdef LCD8BIT
		Write8Bit(chr);
		wait_LCD();
	#else
		Write2Nib(chr);
     348:	0e 94 25 01 	call	0x24a	; 0x24a <Write2Nib>
		wait_LCD();
     34c:	0e 94 3f 01 	call	0x27e	; 0x27e <wait_LCD>
     350:	08 95       	ret

00000352 <print_LCD>:
	#endif
}

void print_LCD(char* str){
     352:	0f 93       	push	r16
     354:	1f 93       	push	r17
     356:	cf 93       	push	r28
     358:	8c 01       	movw	r16, r24
	 unsigned char i;
	 for (i=0; str[i]!=0; i++) putChar_LCD(str[i]);
     35a:	c0 e0       	ldi	r28, 0x00	; 0
     35c:	03 c0       	rjmp	.+6      	; 0x364 <print_LCD+0x12>
     35e:	0e 94 a1 01 	call	0x342	; 0x342 <putChar_LCD>
     362:	cf 5f       	subi	r28, 0xFF	; 255
     364:	f8 01       	movw	r30, r16
     366:	ec 0f       	add	r30, r28
     368:	f1 1d       	adc	r31, r1
     36a:	80 81       	ld	r24, Z
     36c:	81 11       	cpse	r24, r1
     36e:	f7 cf       	rjmp	.-18     	; 0x35e <print_LCD+0xc>
}
     370:	cf 91       	pop	r28
     372:	1f 91       	pop	r17
     374:	0f 91       	pop	r16
     376:	08 95       	ret

00000378 <BCDToDec>:
volatile char SW_time_date = 0;

// chuyen doi nhi phan sang thap phan
uint8_t BCDToDec(uint8_t BCD){
	uint8_t L, H;
	L=BCD & 0x0F;
     378:	38 2f       	mov	r19, r24
     37a:	3f 70       	andi	r19, 0x0F	; 15
	H=(BCD>>4)*10;
     37c:	98 2f       	mov	r25, r24
     37e:	92 95       	swap	r25
     380:	9f 70       	andi	r25, 0x0F	; 15
     382:	99 0f       	add	r25, r25
     384:	29 2f       	mov	r18, r25
     386:	22 0f       	add	r18, r18
     388:	22 0f       	add	r18, r18
     38a:	89 2f       	mov	r24, r25
     38c:	82 0f       	add	r24, r18
	return (H+L);
}
     38e:	83 0f       	add	r24, r19
     390:	08 95       	ret

00000392 <DecToBCD>:
// chuyen doi thap phan sang nhi phan
uint8_t DecToBCD(uint8_t Dec){
	uint8_t L, H;
	L=Dec % 10;
     392:	2d ec       	ldi	r18, 0xCD	; 205
     394:	82 9f       	mul	r24, r18
     396:	21 2d       	mov	r18, r1
     398:	11 24       	eor	r1, r1
     39a:	92 2f       	mov	r25, r18
     39c:	96 95       	lsr	r25
     39e:	96 95       	lsr	r25
     3a0:	96 95       	lsr	r25
     3a2:	99 0f       	add	r25, r25
     3a4:	39 2f       	mov	r19, r25
     3a6:	33 0f       	add	r19, r19
     3a8:	33 0f       	add	r19, r19
     3aa:	93 0f       	add	r25, r19
     3ac:	89 1b       	sub	r24, r25
	H=(Dec/10)<<4;
     3ae:	26 95       	lsr	r18
     3b0:	26 95       	lsr	r18
     3b2:	26 95       	lsr	r18
	return (H+L);
}
     3b4:	30 e1       	ldi	r19, 0x10	; 16
     3b6:	23 9f       	mul	r18, r19
     3b8:	80 0d       	add	r24, r0
     3ba:	11 24       	eor	r1, r1
     3bc:	08 95       	ret

000003be <Decode>:

void Decode(void){
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
    //BCD data converter function from DS1307 to DEC
	Second 	= BCDToDec(tData[0] & 0x7F);
     3c2:	cc ed       	ldi	r28, 0xDC	; 220
     3c4:	d0 e0       	ldi	r29, 0x00	; 0
     3c6:	88 81       	ld	r24, Y
     3c8:	8f 77       	andi	r24, 0x7F	; 127
     3ca:	0e 94 bc 01 	call	0x378	; 0x378 <BCDToDec>
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Second+0x1>
     3d4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Second>

	Minute 	= BCDToDec(tData[1]);
     3d8:	89 81       	ldd	r24, Y+1	; 0x01
     3da:	0e 94 bc 01 	call	0x378	; 0x378 <BCDToDec>
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Minute+0x1>
     3e4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Minute>
	
	if (Mode != 0)
     3e8:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <Mode>
     3ec:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <Mode+0x1>
     3f0:	89 2b       	or	r24, r25
     3f2:	59 f0       	breq	.+22     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	{ 	
		Hour = BCDToDec(tData[2] & 0x1F); //Mode for 12h
     3f4:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <tData+0x2>
     3f8:	8f 71       	andi	r24, 0x1F	; 31
     3fa:	0e 94 bc 01 	call	0x378	; 0x378 <BCDToDec>
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Hour+0x1>
     404:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Hour>
     408:	0a c0       	rjmp	.+20     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
	}
	else 
	{
	  	Hour = BCDToDec(tData[2] & 0x3F); //Mode for 24h	
     40a:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <tData+0x2>
     40e:	8f 73       	andi	r24, 0x3F	; 63
     410:	0e 94 bc 01 	call	0x378	; 0x378 <BCDToDec>
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Hour+0x1>
     41a:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Hour>
	}
	Day		= BCDToDec(tData[3]);
     41e:	cc ed       	ldi	r28, 0xDC	; 220
     420:	d0 e0       	ldi	r29, 0x00	; 0
     422:	8b 81       	ldd	r24, Y+3	; 0x03
     424:	0e 94 bc 01 	call	0x378	; 0x378 <BCDToDec>
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <Day+0x1>
     42e:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Day>
	Date   	= BCDToDec(tData[4]);
     432:	8c 81       	ldd	r24, Y+4	; 0x04
     434:	0e 94 bc 01 	call	0x378	; 0x378 <BCDToDec>
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Date+0x1>
     43e:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Date>
	Month	= BCDToDec(tData[5]);
     442:	8d 81       	ldd	r24, Y+5	; 0x05
     444:	0e 94 bc 01 	call	0x378	; 0x378 <BCDToDec>
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Month+0x1>
     44e:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Month>
	Year	= BCDToDec(tData[6]);
     452:	8e 81       	ldd	r24, Y+6	; 0x06
     454:	0e 94 bc 01 	call	0x378	; 0x378 <BCDToDec>
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Year+0x1>
     45e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Year>
}
     462:	df 91       	pop	r29
     464:	cf 91       	pop	r28
     466:	08 95       	ret

00000468 <Display>:

void Display(void){ 
	clr_LCD();	
     468:	0e 94 98 01 	call	0x330	; 0x330 <clr_LCD>
	//=============PRINT HOUR MINUTE AND SECOND================
	if(set_alarm == true){
     46c:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <set_alarm>
     470:	88 23       	and	r24, r24
     472:	09 f4       	brne	.+2      	; 0x476 <Display+0xe>
     474:	5e c0       	rjmp	.+188    	; 0x532 <Display+0xca>
		clr_LCD;
		print_LCD("Set Alarm: ");
     476:	83 e7       	ldi	r24, 0x73	; 115
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 a9 01 	call	0x352	; 0x352 <print_LCD>
		sprintf(dis, "%i",A_Hour);
     47e:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <A_Hour>
     482:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <A_Hour+0x1>
     486:	9f 93       	push	r25
     488:	8f 93       	push	r24
     48a:	8f e7       	ldi	r24, 0x7F	; 127
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	9f 93       	push	r25
     490:	8f 93       	push	r24
     492:	85 ee       	ldi	r24, 0xE5	; 229
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	9f 93       	push	r25
     498:	8f 93       	push	r24
     49a:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <sprintf>
		move_LCD(2,7);
     49e:	67 e0       	ldi	r22, 0x07	; 7
     4a0:	82 e0       	ldi	r24, 0x02	; 2
     4a2:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
		if(A_Hour<10) putChar_LCD('0');
     4a6:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <A_Hour>
     4aa:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <A_Hour+0x1>
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0a 97       	sbiw	r24, 0x0a	; 10
     4bc:	1c f4       	brge	.+6      	; 0x4c4 <Display+0x5c>
     4be:	80 e3       	ldi	r24, 0x30	; 48
     4c0:	0e 94 a1 01 	call	0x342	; 0x342 <putChar_LCD>
		print_LCD(dis);
     4c4:	85 ee       	ldi	r24, 0xE5	; 229
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 a9 01 	call	0x352	; 0x352 <print_LCD>
		move_LCD(2,9); putChar_LCD(':');
     4cc:	69 e0       	ldi	r22, 0x09	; 9
     4ce:	82 e0       	ldi	r24, 0x02	; 2
     4d0:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
     4d4:	8a e3       	ldi	r24, 0x3A	; 58
     4d6:	0e 94 a1 01 	call	0x342	; 0x342 <putChar_LCD>
		
		sprintf(dis, "%i",A_Minute);
     4da:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <A_Minute>
     4de:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <A_Minute+0x1>
     4e2:	9f 93       	push	r25
     4e4:	8f 93       	push	r24
     4e6:	8f e7       	ldi	r24, 0x7F	; 127
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	9f 93       	push	r25
     4ec:	8f 93       	push	r24
     4ee:	85 ee       	ldi	r24, 0xE5	; 229
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	9f 93       	push	r25
     4f4:	8f 93       	push	r24
     4f6:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <sprintf>
		move_LCD(2,10);
     4fa:	6a e0       	ldi	r22, 0x0A	; 10
     4fc:	82 e0       	ldi	r24, 0x02	; 2
     4fe:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
		if(A_Minute<10) putChar_LCD('0');
     502:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <A_Minute>
     506:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <A_Minute+0x1>
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	0f 90       	pop	r0
     512:	0f 90       	pop	r0
     514:	0f 90       	pop	r0
     516:	0a 97       	sbiw	r24, 0x0a	; 10
     518:	1c f4       	brge	.+6      	; 0x520 <Display+0xb8>
     51a:	80 e3       	ldi	r24, 0x30	; 48
     51c:	0e 94 a1 01 	call	0x342	; 0x342 <putChar_LCD>
		print_LCD(dis);
     520:	85 ee       	ldi	r24, 0xE5	; 229
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 a9 01 	call	0x352	; 0x352 <print_LCD>
		print_LCD("      ");
     528:	82 e8       	ldi	r24, 0x82	; 130
     52a:	90 e0       	ldi	r25, 0x00	; 0
     52c:	0e 94 a9 01 	call	0x352	; 0x352 <print_LCD>
     530:	08 95       	ret
	}
	else{
		
		if(set == false) print_LCD("Time: ");
     532:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <set>
     536:	81 11       	cpse	r24, r1
     538:	04 c0       	rjmp	.+8      	; 0x542 <Display+0xda>
     53a:	89 e8       	ldi	r24, 0x89	; 137
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 a9 01 	call	0x352	; 0x352 <print_LCD>
		if(set == true) print_LCD("SetT: ");
     542:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <set>
     546:	88 23       	and	r24, r24
     548:	21 f0       	breq	.+8      	; 0x552 <Display+0xea>
     54a:	80 e9       	ldi	r24, 0x90	; 144
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 a9 01 	call	0x352	; 0x352 <print_LCD>
		sprintf(dis, "%i",Hour);
     552:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
     556:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
     55a:	9f 93       	push	r25
     55c:	8f 93       	push	r24
     55e:	8f e7       	ldi	r24, 0x7F	; 127
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	9f 93       	push	r25
     564:	8f 93       	push	r24
     566:	85 ee       	ldi	r24, 0xE5	; 229
     568:	90 e0       	ldi	r25, 0x00	; 0
     56a:	9f 93       	push	r25
     56c:	8f 93       	push	r24
     56e:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <sprintf>
		move_LCD(1,7);
     572:	67 e0       	ldi	r22, 0x07	; 7
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
		if(Hour<10) putChar_LCD('0');
     57a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
     57e:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	0a 97       	sbiw	r24, 0x0a	; 10
     590:	1c f4       	brge	.+6      	; 0x598 <Display+0x130>
     592:	80 e3       	ldi	r24, 0x30	; 48
     594:	0e 94 a1 01 	call	0x342	; 0x342 <putChar_LCD>
		print_LCD(dis);
     598:	85 ee       	ldi	r24, 0xE5	; 229
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	0e 94 a9 01 	call	0x352	; 0x352 <print_LCD>
		move_LCD(1,9); putChar_LCD(':');
     5a0:	69 e0       	ldi	r22, 0x09	; 9
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
     5a8:	8a e3       	ldi	r24, 0x3A	; 58
     5aa:	0e 94 a1 01 	call	0x342	; 0x342 <putChar_LCD>
		
		sprintf(dis, "%i",Minute);
     5ae:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
     5b2:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
     5b6:	9f 93       	push	r25
     5b8:	8f 93       	push	r24
     5ba:	8f e7       	ldi	r24, 0x7F	; 127
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	9f 93       	push	r25
     5c0:	8f 93       	push	r24
     5c2:	85 ee       	ldi	r24, 0xE5	; 229
     5c4:	90 e0       	ldi	r25, 0x00	; 0
     5c6:	9f 93       	push	r25
     5c8:	8f 93       	push	r24
     5ca:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <sprintf>
		move_LCD(1,10);
     5ce:	6a e0       	ldi	r22, 0x0A	; 10
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
		if(Minute<10) putChar_LCD('0');
     5d6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
     5da:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	0f 90       	pop	r0
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0a 97       	sbiw	r24, 0x0a	; 10
     5ec:	1c f4       	brge	.+6      	; 0x5f4 <Display+0x18c>
     5ee:	80 e3       	ldi	r24, 0x30	; 48
     5f0:	0e 94 a1 01 	call	0x342	; 0x342 <putChar_LCD>
		print_LCD(dis);
     5f4:	85 ee       	ldi	r24, 0xE5	; 229
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 a9 01 	call	0x352	; 0x352 <print_LCD>
		move_LCD(1,12);putChar_LCD(':');
     5fc:	6c e0       	ldi	r22, 0x0C	; 12
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
     604:	8a e3       	ldi	r24, 0x3A	; 58
     606:	0e 94 a1 01 	call	0x342	; 0x342 <putChar_LCD>
		
		sprintf(dis, "%i",Second);
     60a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
     60e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
     612:	9f 93       	push	r25
     614:	8f 93       	push	r24
     616:	8f e7       	ldi	r24, 0x7F	; 127
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	9f 93       	push	r25
     61c:	8f 93       	push	r24
     61e:	85 ee       	ldi	r24, 0xE5	; 229
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	9f 93       	push	r25
     624:	8f 93       	push	r24
     626:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <sprintf>
		move_LCD(1,13);
     62a:	6d e0       	ldi	r22, 0x0D	; 13
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
		if(Second<10) putChar_LCD('0');
     632:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
     636:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	0a 97       	sbiw	r24, 0x0a	; 10
     648:	1c f4       	brge	.+6      	; 0x650 <Display+0x1e8>
     64a:	80 e3       	ldi	r24, 0x30	; 48
     64c:	0e 94 a1 01 	call	0x342	; 0x342 <putChar_LCD>
		print_LCD(dis);
     650:	85 ee       	ldi	r24, 0xE5	; 229
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	0e 94 a9 01 	call	0x352	; 0x352 <print_LCD>
		if (Mode != 0){ //Mode 12h
     658:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <Mode>
     65c:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <Mode+0x1>
     660:	89 2b       	or	r24, r25
     662:	79 f0       	breq	.+30     	; 0x682 <Display+0x21a>
			move_LCD(1,16);
     664:	60 e1       	ldi	r22, 0x10	; 16
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
			if (bit_is_set(tData[2],5))  putChar_LCD('P'); //AP resister, if AP = 1, print P
     66c:	80 91 de 00 	lds	r24, 0x00DE	; 0x8000de <tData+0x2>
     670:	85 ff       	sbrs	r24, 5
     672:	04 c0       	rjmp	.+8      	; 0x67c <Display+0x214>
     674:	80 e5       	ldi	r24, 0x50	; 80
     676:	0e 94 a1 01 	call	0x342	; 0x342 <putChar_LCD>
     67a:	03 c0       	rjmp	.+6      	; 0x682 <Display+0x21a>
			else putChar_LCD('A');	//AP = 0, print A
     67c:	81 e4       	ldi	r24, 0x41	; 65
     67e:	0e 94 a1 01 	call	0x342	; 0x342 <putChar_LCD>
		}

		//=============PRINT DATE MONTH AND YEAR================
		move_LCD(2,1);
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	82 e0       	ldi	r24, 0x02	; 2
     686:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
		if(set == false) print_LCD("Date: ");// Date: 00-00-00
     68a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <set>
     68e:	81 11       	cpse	r24, r1
     690:	04 c0       	rjmp	.+8      	; 0x69a <Display+0x232>
     692:	87 e9       	ldi	r24, 0x97	; 151
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	0e 94 a9 01 	call	0x352	; 0x352 <print_LCD>
		if(set == true) print_LCD("SetD: ");
     69a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <set>
     69e:	88 23       	and	r24, r24
     6a0:	21 f0       	breq	.+8      	; 0x6aa <Display+0x242>
     6a2:	8e e9       	ldi	r24, 0x9E	; 158
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 a9 01 	call	0x352	; 0x352 <print_LCD>
		if(Date<10) putChar_LCD('0');
     6aa:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
     6ae:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
     6b2:	0a 97       	sbiw	r24, 0x0a	; 10
     6b4:	1c f4       	brge	.+6      	; 0x6bc <Display+0x254>
     6b6:	80 e3       	ldi	r24, 0x30	; 48
     6b8:	0e 94 a1 01 	call	0x342	; 0x342 <putChar_LCD>
		sprintf(dis,"%i",Date);
     6bc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
     6c0:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
     6c4:	9f 93       	push	r25
     6c6:	8f 93       	push	r24
     6c8:	8f e7       	ldi	r24, 0x7F	; 127
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	9f 93       	push	r25
     6ce:	8f 93       	push	r24
     6d0:	85 ee       	ldi	r24, 0xE5	; 229
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	9f 93       	push	r25
     6d6:	8f 93       	push	r24
     6d8:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <sprintf>
		print_LCD(dis);
     6dc:	85 ee       	ldi	r24, 0xE5	; 229
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	0e 94 a9 01 	call	0x352	; 0x352 <print_LCD>
		putChar_LCD('-');
     6e4:	8d e2       	ldi	r24, 0x2D	; 45
     6e6:	0e 94 a1 01 	call	0x342	; 0x342 <putChar_LCD>
		
		if (Month<10) putChar_LCD('0');
     6ea:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     6ee:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     6f2:	0f 90       	pop	r0
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0a 97       	sbiw	r24, 0x0a	; 10
     700:	1c f4       	brge	.+6      	; 0x708 <Display+0x2a0>
     702:	80 e3       	ldi	r24, 0x30	; 48
     704:	0e 94 a1 01 	call	0x342	; 0x342 <putChar_LCD>
		sprintf(dis, "%i",Month);
     708:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     70c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     710:	9f 93       	push	r25
     712:	8f 93       	push	r24
     714:	8f e7       	ldi	r24, 0x7F	; 127
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	9f 93       	push	r25
     71a:	8f 93       	push	r24
     71c:	85 ee       	ldi	r24, 0xE5	; 229
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	9f 93       	push	r25
     722:	8f 93       	push	r24
     724:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <sprintf>
		print_LCD(dis);
     728:	85 ee       	ldi	r24, 0xE5	; 229
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 a9 01 	call	0x352	; 0x352 <print_LCD>
		putChar_LCD('-');
     730:	8d e2       	ldi	r24, 0x2D	; 45
     732:	0e 94 a1 01 	call	0x342	; 0x342 <putChar_LCD>
		
		if(Year<10) putChar_LCD('0');
     736:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Year>
     73a:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Year+0x1>
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0a 97       	sbiw	r24, 0x0a	; 10
     74c:	1c f4       	brge	.+6      	; 0x754 <Display+0x2ec>
     74e:	80 e3       	ldi	r24, 0x30	; 48
     750:	0e 94 a1 01 	call	0x342	; 0x342 <putChar_LCD>
		sprintf(dis, "%i",Year);
     754:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Year>
     758:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Year+0x1>
     75c:	9f 93       	push	r25
     75e:	8f 93       	push	r24
     760:	8f e7       	ldi	r24, 0x7F	; 127
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	9f 93       	push	r25
     766:	8f 93       	push	r24
     768:	85 ee       	ldi	r24, 0xE5	; 229
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	9f 93       	push	r25
     76e:	8f 93       	push	r24
     770:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <sprintf>
		print_LCD(dis);
     774:	85 ee       	ldi	r24, 0xE5	; 229
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 a9 01 	call	0x352	; 0x352 <print_LCD>
		
		print_LCD("  ");
     77c:	86 e8       	ldi	r24, 0x86	; 134
     77e:	90 e0       	ldi	r25, 0x00	; 0
     780:	0e 94 a9 01 	call	0x352	; 0x352 <print_LCD>
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	08 95       	ret

00000792 <FixTime>:
		MAX7219_writeData(MAX7219_DIGIT0,(A_Hour/10));
	}

}
//Write to DS1307 time that want to change
void FixTime(){ 
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
	tData[0] = DecToBCD(Second); 
     796:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
     79a:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
     79e:	0e 94 c9 01 	call	0x392	; 0x392 <DecToBCD>
     7a2:	cc ed       	ldi	r28, 0xDC	; 220
     7a4:	d0 e0       	ldi	r29, 0x00	; 0
     7a6:	88 83       	st	Y, r24
	tData[1] = DecToBCD(Minute); 
     7a8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
     7ac:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
     7b0:	0e 94 c9 01 	call	0x392	; 0x392 <DecToBCD>
     7b4:	89 83       	std	Y+1, r24	; 0x01
	if (Mode != 0) tData[2] = DecToBCD(Hour)|(Mode << 6)|(AP << 5); //mode 12h
     7b6:	80 91 cf 00 	lds	r24, 0x00CF	; 0x8000cf <Mode>
     7ba:	90 91 d0 00 	lds	r25, 0x00D0	; 0x8000d0 <Mode+0x1>
     7be:	89 2b       	or	r24, r25
     7c0:	21 f1       	breq	.+72     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     7c2:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
     7c6:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
     7ca:	0e 94 c9 01 	call	0x392	; 0x392 <DecToBCD>
     7ce:	40 91 cf 00 	lds	r20, 0x00CF	; 0x8000cf <Mode>
     7d2:	50 91 d0 00 	lds	r21, 0x00D0	; 0x8000d0 <Mode+0x1>
     7d6:	00 24       	eor	r0, r0
     7d8:	56 95       	lsr	r21
     7da:	47 95       	ror	r20
     7dc:	07 94       	ror	r0
     7de:	56 95       	lsr	r21
     7e0:	47 95       	ror	r20
     7e2:	07 94       	ror	r0
     7e4:	54 2f       	mov	r21, r20
     7e6:	40 2d       	mov	r20, r0
     7e8:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <AP>
     7ec:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <AP+0x1>
     7f0:	22 0f       	add	r18, r18
     7f2:	33 1f       	adc	r19, r19
     7f4:	22 95       	swap	r18
     7f6:	32 95       	swap	r19
     7f8:	30 7f       	andi	r19, 0xF0	; 240
     7fa:	32 27       	eor	r19, r18
     7fc:	20 7f       	andi	r18, 0xF0	; 240
     7fe:	32 27       	eor	r19, r18
     800:	84 2b       	or	r24, r20
     802:	28 2b       	or	r18, r24
     804:	20 93 de 00 	sts	0x00DE, r18	; 0x8000de <tData+0x2>
     808:	08 c0       	rjmp	.+16     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
	else tData[2] = DecToBCD(Hour);
     80a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
     80e:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
     812:	0e 94 c9 01 	call	0x392	; 0x392 <DecToBCD>
     816:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <tData+0x2>
	tData[3] = DecToBCD(Day);
     81a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Day>
     81e:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Day+0x1>
     822:	0e 94 c9 01 	call	0x392	; 0x392 <DecToBCD>
     826:	cc ed       	ldi	r28, 0xDC	; 220
     828:	d0 e0       	ldi	r29, 0x00	; 0
     82a:	8b 83       	std	Y+3, r24	; 0x03
	tData[4] = DecToBCD(Date);
     82c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
     830:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
     834:	0e 94 c9 01 	call	0x392	; 0x392 <DecToBCD>
     838:	8c 83       	std	Y+4, r24	; 0x04
	tData[5] = DecToBCD(Month); 
     83a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     83e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     842:	0e 94 c9 01 	call	0x392	; 0x392 <DecToBCD>
     846:	8d 83       	std	Y+5, r24	; 0x05
	tData[6] = DecToBCD(Year); 
     848:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Year>
     84c:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Year+0x1>
     850:	0e 94 c9 01 	call	0x392	; 0x392 <DecToBCD>
     854:	8e 83       	std	Y+6, r24	; 0x06
	TWI_DS1307_wblock(0x00, tData, 7); 
     856:	47 e0       	ldi	r20, 0x07	; 7
     858:	be 01       	movw	r22, r28
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	0e 94 86 00 	call	0x10c	; 0x10c <TWI_DS1307_wblock>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     860:	8f ec       	ldi	r24, 0xCF	; 207
     862:	97 e0       	ldi	r25, 0x07	; 7
     864:	01 97       	sbiw	r24, 0x01	; 1
     866:	f1 f7       	brne	.-4      	; 0x864 <__stack+0x5>
     868:	00 c0       	rjmp	.+0      	; 0x86a <__stack+0xb>
     86a:	00 00       	nop
	_delay_ms(1);
	TWI_DS1307_wadr(0x00); 
     86c:	80 e0       	ldi	r24, 0x00	; 0
     86e:	0e 94 5e 00 	call	0xbc	; 0xbc <TWI_DS1307_wadr>
     872:	8f ec       	ldi	r24, 0xCF	; 207
     874:	97 e0       	ldi	r25, 0x07	; 7
     876:	01 97       	sbiw	r24, 0x01	; 1
     878:	f1 f7       	brne	.-4      	; 0x876 <__stack+0x17>
     87a:	00 c0       	rjmp	.+0      	; 0x87c <__stack+0x1d>
     87c:	00 00       	nop
	_delay_ms(1);			
 }
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	08 95       	ret

00000884 <Init_btn>:

void Init_btn(void){

    //------------------Initialize button------------
	BTN_DDR  &= ~((1<<mode)|(1<<incr)|(1<<decr)|(1<<save)|(1<<exit)|(1<<alarm)|(1<<SW));		// set input cho button setting
     884:	81 b3       	in	r24, 0x11	; 17
     886:	80 78       	andi	r24, 0x80	; 128
     888:	81 bb       	out	0x11, r24	; 17
	BTN_DDR |= (1<<BUZ_LED);																// set output cho buzzer + led
     88a:	81 b3       	in	r24, 0x11	; 17
     88c:	80 68       	ori	r24, 0x80	; 128
     88e:	81 bb       	out	0x11, r24	; 17
	BTN_PORT |= (1 << mode)|(1 << incr)|(1 << decr)|(1 << save)|(1 << exit)|(1<<alarm)|(1<<SW);	// set dien tro keo len cho button setting
     890:	82 b3       	in	r24, 0x12	; 18
     892:	8f 67       	ori	r24, 0x7F	; 127
     894:	82 bb       	out	0x12, r24	; 18
     896:	08 95       	ret

00000898 <Check_btn>:
	
	/***********Switch between time and date************/

	// choose displaying time mode or date mode
	//	Default: SW_time_date = false -> display time on 7seg led
	if ((BTN_PIN & (1 << SW)) == 0){
     898:	86 99       	sbic	0x10, 6	; 16
     89a:	0d c0       	rjmp	.+26     	; 0x8b6 <Check_btn+0x1e>
		while((BTN_PIN & (1 << SW)) == 0){
     89c:	86 9b       	sbis	0x10, 6	; 16
     89e:	fe cf       	rjmp	.-4      	; 0x89c <Check_btn+0x4>
			//while den khi tha nut nhan ra
		}
		SW_time_date++;
     8a0:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
     8a4:	8f 5f       	subi	r24, 0xFF	; 255
     8a6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__data_end>
		if(SW_time_date > 3) SW_time_date = 0;
     8aa:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
     8ae:	84 30       	cpi	r24, 0x04	; 4
     8b0:	10 f0       	brcs	.+4      	; 0x8b6 <Check_btn+0x1e>
     8b2:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__data_end>
// 			SW_time_date = false;
// 		}
// 	}

	/*****************setting time******************/
  	if((BTN_PIN & (1 << mode)) == 0){ 	//setting time
     8b6:	82 99       	sbic	0x10, 2	; 16
     8b8:	58 c0       	rjmp	.+176    	; 0x96a <Check_btn+0xd2>
    	while((BTN_PIN & (1 << mode)) == 0){
     8ba:	82 9b       	sbis	0x10, 2	; 16
     8bc:	fe cf       	rjmp	.-4      	; 0x8ba <Check_btn+0x22>
		 //while den khi tha nut nhan ra
		}		
		set = true;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <set>
	  	count++;
     8c4:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     8c8:	8f 5f       	subi	r24, 0xFF	; 255
     8ca:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <count>
		if(count > 6) count = 1;
     8ce:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     8d2:	87 30       	cpi	r24, 0x07	; 7
     8d4:	18 f0       	brcs	.+6      	; 0x8dc <Check_btn+0x44>
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <count>
	  	clr_LCD();
     8dc:	0e 94 98 01 	call	0x330	; 0x330 <clr_LCD>
		Display();		
     8e0:	0e 94 34 02 	call	0x468	; 0x468 <Display>
		if(count == 1){
     8e4:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     8e8:	81 30       	cpi	r24, 0x01	; 1
     8ea:	41 f4       	brne	.+16     	; 0x8fc <Check_btn+0x64>
			move_LCD(2,14);
     8ec:	6e e0       	ldi	r22, 0x0E	; 14
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
			SW_time_date=1;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__data_end>
     8fa:	37 c0       	rjmp	.+110    	; 0x96a <Check_btn+0xd2>
		}
		else if(count == 2){
     8fc:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     900:	82 30       	cpi	r24, 0x02	; 2
     902:	39 f4       	brne	.+14     	; 0x912 <Check_btn+0x7a>
			move_LCD(2,11);
     904:	6b e0       	ldi	r22, 0x0B	; 11
     906:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
			SW_time_date=1;
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__data_end>
     910:	2c c0       	rjmp	.+88     	; 0x96a <Check_btn+0xd2>
		}
		else if(count == 3){
     912:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     916:	83 30       	cpi	r24, 0x03	; 3
     918:	41 f4       	brne	.+16     	; 0x92a <Check_btn+0x92>
			move_LCD(2,8);
     91a:	68 e0       	ldi	r22, 0x08	; 8
     91c:	82 e0       	ldi	r24, 0x02	; 2
     91e:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
			SW_time_date=1;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__data_end>
     928:	20 c0       	rjmp	.+64     	; 0x96a <Check_btn+0xd2>
		}
		else if(count == 4){
     92a:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     92e:	84 30       	cpi	r24, 0x04	; 4
     930:	39 f4       	brne	.+14     	; 0x940 <Check_btn+0xa8>
			move_LCD(1,8);
     932:	68 e0       	ldi	r22, 0x08	; 8
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
			SW_time_date=0;
     93a:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__data_end>
     93e:	15 c0       	rjmp	.+42     	; 0x96a <Check_btn+0xd2>
		}
		else if(count == 5){
     940:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     944:	85 30       	cpi	r24, 0x05	; 5
     946:	39 f4       	brne	.+14     	; 0x956 <Check_btn+0xbe>
			move_LCD(1,11);
     948:	6b e0       	ldi	r22, 0x0B	; 11
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
			SW_time_date=0;
     950:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__data_end>
     954:	0a c0       	rjmp	.+20     	; 0x96a <Check_btn+0xd2>
		}
		else if(count == 6){
     956:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     95a:	86 30       	cpi	r24, 0x06	; 6
     95c:	31 f4       	brne	.+12     	; 0x96a <Check_btn+0xd2>
			move_LCD(1,14);
     95e:	6e e0       	ldi	r22, 0x0E	; 14
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
			SW_time_date=0;
     966:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__data_end>
		}
	}

	if(((BTN_PIN & (1 << incr)) == 0) && set == true){ 
     96a:	80 99       	sbic	0x10, 0	; 16
     96c:	1d c1       	rjmp	.+570    	; 0xba8 <Check_btn+0x310>
     96e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <set>
     972:	88 23       	and	r24, r24
     974:	09 f4       	brne	.+2      	; 0x978 <Check_btn+0xe0>
     976:	18 c1       	rjmp	.+560    	; 0xba8 <Check_btn+0x310>
		while(((BTN_PIN & (1 << incr)) == 0)){	
     978:	80 9b       	sbis	0x10, 0	; 16
     97a:	fe cf       	rjmp	.-4      	; 0x978 <Check_btn+0xe0>
			// while den khi tha nut nhan ra
		}
		if(count == 1) { 
     97c:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     980:	81 30       	cpi	r24, 0x01	; 1
     982:	b1 f4       	brne	.+44     	; 0x9b0 <Check_btn+0x118>
			Year++;
     984:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Year>
     988:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Year+0x1>
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Year+0x1>
     992:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Year>
			if(Year > 99) Year = 0; 
     996:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Year>
     99a:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Year+0x1>
     99e:	84 36       	cpi	r24, 0x64	; 100
     9a0:	91 05       	cpc	r25, r1
     9a2:	0c f4       	brge	.+2      	; 0x9a6 <Check_btn+0x10e>
     9a4:	ff c0       	rjmp	.+510    	; 0xba4 <Check_btn+0x30c>
     9a6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Year+0x1>
     9aa:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Year>
     9ae:	fa c0       	rjmp	.+500    	; 0xba4 <Check_btn+0x30c>
		}
		else if(count == 2) { 
     9b0:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     9b4:	82 30       	cpi	r24, 0x02	; 2
     9b6:	b9 f4       	brne	.+46     	; 0x9e6 <Check_btn+0x14e>
			Month++; 
     9b8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     9bc:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     9c0:	01 96       	adiw	r24, 0x01	; 1
     9c2:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Month+0x1>
     9c6:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Month>
			if(Month > 12) Month = 1; 
     9ca:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     9ce:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     9d2:	0d 97       	sbiw	r24, 0x0d	; 13
     9d4:	0c f4       	brge	.+2      	; 0x9d8 <Check_btn+0x140>
     9d6:	e6 c0       	rjmp	.+460    	; 0xba4 <Check_btn+0x30c>
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Month+0x1>
     9e0:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Month>
     9e4:	df c0       	rjmp	.+446    	; 0xba4 <Check_btn+0x30c>
		}
		else if(count == 3) { 
     9e6:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     9ea:	83 30       	cpi	r24, 0x03	; 3
     9ec:	09 f0       	breq	.+2      	; 0x9f0 <Check_btn+0x158>
     9ee:	93 c0       	rjmp	.+294    	; 0xb16 <Check_btn+0x27e>
			Date++;
     9f0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
     9f4:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
     9f8:	01 96       	adiw	r24, 0x01	; 1
     9fa:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Date+0x1>
     9fe:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Date>
			if(Month == 4 || Month == 6  || Month == 9  || Month == 11)
     a02:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     a06:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     a0a:	04 97       	sbiw	r24, 0x04	; 4
     a0c:	91 f0       	breq	.+36     	; 0xa32 <Check_btn+0x19a>
     a0e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     a12:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     a16:	06 97       	sbiw	r24, 0x06	; 6
     a18:	61 f0       	breq	.+24     	; 0xa32 <Check_btn+0x19a>
     a1a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     a1e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     a22:	09 97       	sbiw	r24, 0x09	; 9
     a24:	31 f0       	breq	.+12     	; 0xa32 <Check_btn+0x19a>
     a26:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     a2a:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     a2e:	0b 97       	sbiw	r24, 0x0b	; 11
     a30:	71 f4       	brne	.+28     	; 0xa4e <Check_btn+0x1b6>
			{
				if(Date > 30)
     a32:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
     a36:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
     a3a:	4f 97       	sbiw	r24, 0x1f	; 31
     a3c:	0c f4       	brge	.+2      	; 0xa40 <Check_btn+0x1a8>
     a3e:	b2 c0       	rjmp	.+356    	; 0xba4 <Check_btn+0x30c>
				Date=1;
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Date+0x1>
     a48:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Date>
     a4c:	ab c0       	rjmp	.+342    	; 0xba4 <Check_btn+0x30c>
			}
			else if(Month == 1 || Month == 3  || Month == 5  || Month == 7 || Month == 8  || Month == 10  || Month == 12)
     a4e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     a52:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	21 f1       	breq	.+72     	; 0xaa2 <Check_btn+0x20a>
     a5a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     a5e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     a62:	03 97       	sbiw	r24, 0x03	; 3
     a64:	f1 f0       	breq	.+60     	; 0xaa2 <Check_btn+0x20a>
     a66:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     a6a:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     a6e:	05 97       	sbiw	r24, 0x05	; 5
     a70:	c1 f0       	breq	.+48     	; 0xaa2 <Check_btn+0x20a>
     a72:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     a76:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     a7a:	07 97       	sbiw	r24, 0x07	; 7
     a7c:	91 f0       	breq	.+36     	; 0xaa2 <Check_btn+0x20a>
     a7e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     a82:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     a86:	08 97       	sbiw	r24, 0x08	; 8
     a88:	61 f0       	breq	.+24     	; 0xaa2 <Check_btn+0x20a>
     a8a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     a8e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     a92:	0a 97       	sbiw	r24, 0x0a	; 10
     a94:	31 f0       	breq	.+12     	; 0xaa2 <Check_btn+0x20a>
     a96:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     a9a:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     a9e:	0c 97       	sbiw	r24, 0x0c	; 12
     aa0:	71 f4       	brne	.+28     	; 0xabe <Check_btn+0x226>
			{
				if(Date >31)
     aa2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
     aa6:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
     aaa:	80 97       	sbiw	r24, 0x20	; 32
     aac:	0c f4       	brge	.+2      	; 0xab0 <Check_btn+0x218>
     aae:	7a c0       	rjmp	.+244    	; 0xba4 <Check_btn+0x30c>
				Date=1;
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Date+0x1>
     ab8:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Date>
     abc:	73 c0       	rjmp	.+230    	; 0xba4 <Check_btn+0x30c>
			}
			
			else if(yyyy/4 == 0 && yyyy/400 == 0)
     abe:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <yyyy>
     ac2:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <yyyy+0x1>
     ac6:	03 96       	adiw	r24, 0x03	; 3
     ac8:	07 97       	sbiw	r24, 0x07	; 7
     aca:	b8 f4       	brcc	.+46     	; 0xafa <Check_btn+0x262>
     acc:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <yyyy>
     ad0:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <yyyy+0x1>
     ad4:	81 57       	subi	r24, 0x71	; 113
     ad6:	9e 4f       	sbci	r25, 0xFE	; 254
     ad8:	8f 31       	cpi	r24, 0x1F	; 31
     ada:	93 40       	sbci	r25, 0x03	; 3
     adc:	70 f4       	brcc	.+28     	; 0xafa <Check_btn+0x262>
			{
				if(Date > 29)
     ade:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
     ae2:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
     ae6:	4e 97       	sbiw	r24, 0x1e	; 30
     ae8:	0c f4       	brge	.+2      	; 0xaec <Check_btn+0x254>
     aea:	5c c0       	rjmp	.+184    	; 0xba4 <Check_btn+0x30c>
				Date=1;
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Date+0x1>
     af4:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Date>
     af8:	55 c0       	rjmp	.+170    	; 0xba4 <Check_btn+0x30c>
			}
			else
			{
				if(Date > 28)
     afa:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
     afe:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
     b02:	4d 97       	sbiw	r24, 0x1d	; 29
     b04:	0c f4       	brge	.+2      	; 0xb08 <Check_btn+0x270>
     b06:	4e c0       	rjmp	.+156    	; 0xba4 <Check_btn+0x30c>
				Date=1;
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Date+0x1>
     b10:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Date>
     b14:	47 c0       	rjmp	.+142    	; 0xba4 <Check_btn+0x30c>
			}
			
		}
		else if(count == 4) {
     b16:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     b1a:	84 30       	cpi	r24, 0x04	; 4
     b1c:	a1 f4       	brne	.+40     	; 0xb46 <Check_btn+0x2ae>
			 Hour++;  
     b1e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
     b22:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
     b26:	01 96       	adiw	r24, 0x01	; 1
     b28:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Hour+0x1>
     b2c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Hour>
			 if(Hour > 23) Hour = 0; 
     b30:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
     b34:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
     b38:	48 97       	sbiw	r24, 0x18	; 24
     b3a:	a4 f1       	brlt	.+104    	; 0xba4 <Check_btn+0x30c>
     b3c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <Hour+0x1>
     b40:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <Hour>
     b44:	2f c0       	rjmp	.+94     	; 0xba4 <Check_btn+0x30c>
		}
		else if(count == 5) { 
     b46:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     b4a:	85 30       	cpi	r24, 0x05	; 5
     b4c:	a1 f4       	brne	.+40     	; 0xb76 <Check_btn+0x2de>
			Minute++; 
     b4e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
     b52:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Minute+0x1>
     b5c:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Minute>
			if(Minute > 59) Minute = 0;
     b60:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
     b64:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
     b68:	cc 97       	sbiw	r24, 0x3c	; 60
     b6a:	e4 f0       	brlt	.+56     	; 0xba4 <Check_btn+0x30c>
     b6c:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Minute+0x1>
     b70:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <Minute>
     b74:	17 c0       	rjmp	.+46     	; 0xba4 <Check_btn+0x30c>
		}
		else if(count == 6) { 
     b76:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     b7a:	86 30       	cpi	r24, 0x06	; 6
     b7c:	99 f4       	brne	.+38     	; 0xba4 <Check_btn+0x30c>
			Second++; 
     b7e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
     b82:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Second+0x1>
     b8c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Second>
			if(Second > 59) Second = 0;
     b90:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
     b94:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
     b98:	cc 97       	sbiw	r24, 0x3c	; 60
     b9a:	24 f0       	brlt	.+8      	; 0xba4 <Check_btn+0x30c>
     b9c:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <Second+0x1>
     ba0:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <Second>
		}
		Display();	
     ba4:	0e 94 34 02 	call	0x468	; 0x468 <Display>
	}
					
	if(((BTN_PIN & (1 << decr)) == 0) && set == true) {
     ba8:	81 99       	sbic	0x10, 1	; 16
     baa:	29 c1       	rjmp	.+594    	; 0xdfe <Check_btn+0x566>
     bac:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <set>
     bb0:	88 23       	and	r24, r24
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <Check_btn+0x31e>
     bb4:	24 c1       	rjmp	.+584    	; 0xdfe <Check_btn+0x566>
		while((BTN_PIN & (1 << decr))== 0){		
     bb6:	81 9b       	sbis	0x10, 1	; 16
     bb8:	fe cf       	rjmp	.-4      	; 0xbb6 <Check_btn+0x31e>
			// while den khi tha nut nhan ra
		}	
		if(count == 1) {
     bba:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	b9 f4       	brne	.+46     	; 0xbf0 <Check_btn+0x358>
			 Year--;
     bc2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Year>
     bc6:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Year+0x1>
     bca:	01 97       	sbiw	r24, 0x01	; 1
     bcc:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Year+0x1>
     bd0:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Year>
			 if(Year < 0) Year = 99;  
     bd4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Year>
     bd8:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Year+0x1>
     bdc:	99 23       	and	r25, r25
     bde:	0c f0       	brlt	.+2      	; 0xbe2 <Check_btn+0x34a>
     be0:	0c c1       	rjmp	.+536    	; 0xdfa <Check_btn+0x562>
     be2:	83 e6       	ldi	r24, 0x63	; 99
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Year+0x1>
     bea:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Year>
     bee:	05 c1       	rjmp	.+522    	; 0xdfa <Check_btn+0x562>
		}
		else if(count == 2) { 
     bf0:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     bf4:	82 30       	cpi	r24, 0x02	; 2
     bf6:	c1 f4       	brne	.+48     	; 0xc28 <Check_btn+0x390>
			Month--; 
     bf8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     bfc:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Month+0x1>
     c06:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Month>
			if(Month < 1 )  Month = 12; 
     c0a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     c0e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     c12:	18 16       	cp	r1, r24
     c14:	19 06       	cpc	r1, r25
     c16:	0c f4       	brge	.+2      	; 0xc1a <Check_btn+0x382>
     c18:	f0 c0       	rjmp	.+480    	; 0xdfa <Check_btn+0x562>
     c1a:	8c e0       	ldi	r24, 0x0C	; 12
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Month+0x1>
     c22:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Month>
     c26:	e9 c0       	rjmp	.+466    	; 0xdfa <Check_btn+0x562>
		}
		else if(count == 3) { 
     c28:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     c2c:	83 30       	cpi	r24, 0x03	; 3
     c2e:	09 f0       	breq	.+2      	; 0xc32 <Check_btn+0x39a>
     c30:	97 c0       	rjmp	.+302    	; 0xd60 <Check_btn+0x4c8>
			Date--;  
     c32:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
     c36:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Date+0x1>
     c40:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Date>
			if(Month == 4 || Month == 6  || Month == 9  || Month == 11)
     c44:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     c48:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     c4c:	04 97       	sbiw	r24, 0x04	; 4
     c4e:	91 f0       	breq	.+36     	; 0xc74 <Check_btn+0x3dc>
     c50:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     c54:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     c58:	06 97       	sbiw	r24, 0x06	; 6
     c5a:	61 f0       	breq	.+24     	; 0xc74 <Check_btn+0x3dc>
     c5c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     c60:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     c64:	09 97       	sbiw	r24, 0x09	; 9
     c66:	31 f0       	breq	.+12     	; 0xc74 <Check_btn+0x3dc>
     c68:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     c6c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     c70:	0b 97       	sbiw	r24, 0x0b	; 11
     c72:	79 f4       	brne	.+30     	; 0xc92 <Check_btn+0x3fa>
			{
				if(Date <1)
     c74:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
     c78:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
     c7c:	18 16       	cp	r1, r24
     c7e:	19 06       	cpc	r1, r25
     c80:	0c f4       	brge	.+2      	; 0xc84 <Check_btn+0x3ec>
     c82:	bb c0       	rjmp	.+374    	; 0xdfa <Check_btn+0x562>
				Date=30;
     c84:	8e e1       	ldi	r24, 0x1E	; 30
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Date+0x1>
     c8c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Date>
     c90:	b4 c0       	rjmp	.+360    	; 0xdfa <Check_btn+0x562>
			}
			else if(Month == 1 || Month == 3  || Month == 5  || Month == 7 || Month == 8  || Month == 10  || Month == 12)
     c92:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     c96:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     c9a:	01 97       	sbiw	r24, 0x01	; 1
     c9c:	21 f1       	breq	.+72     	; 0xce6 <Check_btn+0x44e>
     c9e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     ca2:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     ca6:	03 97       	sbiw	r24, 0x03	; 3
     ca8:	f1 f0       	breq	.+60     	; 0xce6 <Check_btn+0x44e>
     caa:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     cae:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     cb2:	05 97       	sbiw	r24, 0x05	; 5
     cb4:	c1 f0       	breq	.+48     	; 0xce6 <Check_btn+0x44e>
     cb6:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     cba:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     cbe:	07 97       	sbiw	r24, 0x07	; 7
     cc0:	91 f0       	breq	.+36     	; 0xce6 <Check_btn+0x44e>
     cc2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     cc6:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     cca:	08 97       	sbiw	r24, 0x08	; 8
     ccc:	61 f0       	breq	.+24     	; 0xce6 <Check_btn+0x44e>
     cce:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     cd2:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     cd6:	0a 97       	sbiw	r24, 0x0a	; 10
     cd8:	31 f0       	breq	.+12     	; 0xce6 <Check_btn+0x44e>
     cda:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     cde:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     ce2:	0c 97       	sbiw	r24, 0x0c	; 12
     ce4:	79 f4       	brne	.+30     	; 0xd04 <Check_btn+0x46c>
			{
				if(Date <1)
     ce6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
     cea:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
     cee:	18 16       	cp	r1, r24
     cf0:	19 06       	cpc	r1, r25
     cf2:	0c f4       	brge	.+2      	; 0xcf6 <Check_btn+0x45e>
     cf4:	82 c0       	rjmp	.+260    	; 0xdfa <Check_btn+0x562>
				Date=31;
     cf6:	8f e1       	ldi	r24, 0x1F	; 31
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Date+0x1>
     cfe:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Date>
     d02:	7b c0       	rjmp	.+246    	; 0xdfa <Check_btn+0x562>
			}
			
			else if(yyyy/4 == 0 && yyyy/400 == 0)
     d04:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <yyyy>
     d08:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <yyyy+0x1>
     d0c:	03 96       	adiw	r24, 0x03	; 3
     d0e:	07 97       	sbiw	r24, 0x07	; 7
     d10:	c0 f4       	brcc	.+48     	; 0xd42 <Check_btn+0x4aa>
     d12:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <yyyy>
     d16:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <yyyy+0x1>
     d1a:	81 57       	subi	r24, 0x71	; 113
     d1c:	9e 4f       	sbci	r25, 0xFE	; 254
     d1e:	8f 31       	cpi	r24, 0x1F	; 31
     d20:	93 40       	sbci	r25, 0x03	; 3
     d22:	78 f4       	brcc	.+30     	; 0xd42 <Check_btn+0x4aa>
			{
				if(Date <1)
     d24:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
     d28:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
     d2c:	18 16       	cp	r1, r24
     d2e:	19 06       	cpc	r1, r25
     d30:	0c f4       	brge	.+2      	; 0xd34 <Check_btn+0x49c>
     d32:	63 c0       	rjmp	.+198    	; 0xdfa <Check_btn+0x562>
				Date=29;
     d34:	8d e1       	ldi	r24, 0x1D	; 29
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Date+0x1>
     d3c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Date>
     d40:	5c c0       	rjmp	.+184    	; 0xdfa <Check_btn+0x562>
			}
			else
			{
				if(Date <1)
     d42:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
     d46:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
     d4a:	18 16       	cp	r1, r24
     d4c:	19 06       	cpc	r1, r25
     d4e:	0c f4       	brge	.+2      	; 0xd52 <Check_btn+0x4ba>
     d50:	54 c0       	rjmp	.+168    	; 0xdfa <Check_btn+0x562>
				Date=28;
     d52:	8c e1       	ldi	r24, 0x1C	; 28
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Date+0x1>
     d5a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Date>
     d5e:	4d c0       	rjmp	.+154    	; 0xdfa <Check_btn+0x562>
			}
		}
		else if(count == 4) {
     d60:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	b1 f4       	brne	.+44     	; 0xd94 <Check_btn+0x4fc>
			 Hour--;  
     d68:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
     d6c:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
     d70:	01 97       	sbiw	r24, 0x01	; 1
     d72:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Hour+0x1>
     d76:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Hour>
			 if(Hour < 0 )  Hour = 23 ;
     d7a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
     d7e:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
     d82:	99 23       	and	r25, r25
     d84:	d4 f5       	brge	.+116    	; 0xdfa <Check_btn+0x562>
     d86:	87 e1       	ldi	r24, 0x17	; 23
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Hour+0x1>
     d8e:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Hour>
     d92:	33 c0       	rjmp	.+102    	; 0xdfa <Check_btn+0x562>
		}
		else if(count == 5) { 
     d94:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     d98:	85 30       	cpi	r24, 0x05	; 5
     d9a:	b1 f4       	brne	.+44     	; 0xdc8 <Check_btn+0x530>
			Minute--; 
     d9c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
     da0:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
     da4:	01 97       	sbiw	r24, 0x01	; 1
     da6:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Minute+0x1>
     daa:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Minute>
			if(Minute < 0 )  Minute = 59; 
     dae:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
     db2:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
     db6:	99 23       	and	r25, r25
     db8:	04 f5       	brge	.+64     	; 0xdfa <Check_btn+0x562>
     dba:	8b e3       	ldi	r24, 0x3B	; 59
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Minute+0x1>
     dc2:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Minute>
     dc6:	19 c0       	rjmp	.+50     	; 0xdfa <Check_btn+0x562>
		}
		else if(count == 6) { 
     dc8:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     dcc:	86 30       	cpi	r24, 0x06	; 6
     dce:	a9 f4       	brne	.+42     	; 0xdfa <Check_btn+0x562>
			Second--; 
     dd0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
     dd4:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
     dd8:	01 97       	sbiw	r24, 0x01	; 1
     dda:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Second+0x1>
     dde:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Second>
			if(Second < 0 ) Second = 59; 
     de2:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
     de6:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
     dea:	99 23       	and	r25, r25
     dec:	34 f4       	brge	.+12     	; 0xdfa <Check_btn+0x562>
     dee:	8b e3       	ldi	r24, 0x3B	; 59
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Second+0x1>
     df6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Second>
		}
		Display();				
     dfa:	0e 94 34 02 	call	0x468	; 0x468 <Display>
	}
								 
	if(((BTN_PIN & (1 << save)) == 0) && set == true) {	
     dfe:	83 99       	sbic	0x10, 3	; 16
     e00:	0e c0       	rjmp	.+28     	; 0xe1e <Check_btn+0x586>
     e02:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <set>
     e06:	88 23       	and	r24, r24
     e08:	51 f0       	breq	.+20     	; 0xe1e <Check_btn+0x586>
		while((BTN_PIN & (1 << save))== 0){		// while den khi tha nut nhan ra
     e0a:	83 9b       	sbis	0x10, 3	; 16
     e0c:	fe cf       	rjmp	.-4      	; 0xe0a <Check_btn+0x572>
		}
		count = 0; 
     e0e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <count>
		FixTime(); 
     e12:	0e 94 c9 03 	call	0x792	; 0x792 <FixTime>
// 		clr_LCD(); 
// 		print_LCD("Saving......."); 
// 		_delay_ms(500); 
		Display(); 
     e16:	0e 94 34 02 	call	0x468	; 0x468 <Display>
		set = false; 
     e1a:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <set>
	}
	  
	if(((BTN_PIN & (1 << exit)) == 0) && set == true ) { 
     e1e:	84 99       	sbic	0x10, 4	; 16
     e20:	0c c0       	rjmp	.+24     	; 0xe3a <Check_btn+0x5a2>
     e22:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <set>
     e26:	88 23       	and	r24, r24
     e28:	41 f0       	breq	.+16     	; 0xe3a <Check_btn+0x5a2>
		while((BTN_PIN & (1 << exit))== 0){		// while den khi tha nut nhan ra
     e2a:	84 9b       	sbis	0x10, 4	; 16
     e2c:	fe cf       	rjmp	.-4      	; 0xe2a <Check_btn+0x592>
		}
		count = 0;    
     e2e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <count>
// 		clr_LCD();  
// 		print_LCD("Exit....."); 
// 		_delay_ms(500); 
		Display(); 
     e32:	0e 94 34 02 	call	0x468	; 0x468 <Display>
		set = false;	
     e36:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <set>
	}
	/*******************setting alarm******************/
	if((BTN_PIN & (1 << alarm)) == 0){ 	//set bao thuc
     e3a:	85 99       	sbic	0x10, 5	; 16
     e3c:	27 c0       	rjmp	.+78     	; 0xe8c <Check_btn+0x5f4>
		while((BTN_PIN & (1 << alarm)) == 0){ //while den khi tha nut nhan ra
     e3e:	85 9b       	sbis	0x10, 5	; 16
     e40:	fe cf       	rjmp	.-4      	; 0xe3e <Check_btn+0x5a6>

		}
		set_alarm = true;
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <set_alarm>
		SW_time_date=3;
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__data_end>
		count++;
     e4e:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     e52:	8f 5f       	subi	r24, 0xFF	; 255
     e54:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <count>
		if(count > 2) count = 1;
     e58:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     e5c:	83 30       	cpi	r24, 0x03	; 3
     e5e:	18 f0       	brcs	.+6      	; 0xe66 <Check_btn+0x5ce>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <count>
		clr_LCD();
     e66:	0e 94 98 01 	call	0x330	; 0x330 <clr_LCD>
		Display();
     e6a:	0e 94 34 02 	call	0x468	; 0x468 <Display>
		if(count == 1){
     e6e:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	21 f4       	brne	.+8      	; 0xe7e <Check_btn+0x5e6>
			move_LCD(2,8);
     e76:	68 e0       	ldi	r22, 0x08	; 8
     e78:	82 e0       	ldi	r24, 0x02	; 2
     e7a:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
		}
		if(count == 2){
     e7e:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     e82:	82 30       	cpi	r24, 0x02	; 2
     e84:	19 f4       	brne	.+6      	; 0xe8c <Check_btn+0x5f4>
			move_LCD(2,11);
     e86:	6b e0       	ldi	r22, 0x0B	; 11
     e88:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
		}
	}

	if(((BTN_PIN & (1 << incr)) == 0) && set_alarm == true){
     e8c:	80 99       	sbic	0x10, 0	; 16
     e8e:	36 c0       	rjmp	.+108    	; 0xefc <Check_btn+0x664>
     e90:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <set_alarm>
     e94:	88 23       	and	r24, r24
     e96:	91 f1       	breq	.+100    	; 0xefc <Check_btn+0x664>
		while(((BTN_PIN & (1 << incr)) == 0)){		// while den khi tha nut nhan ra
     e98:	80 9b       	sbis	0x10, 0	; 16
     e9a:	fe cf       	rjmp	.-4      	; 0xe98 <Check_btn+0x600>
		}
		if(count == 1) {
     e9c:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	99 f4       	brne	.+38     	; 0xeca <Check_btn+0x632>
			A_Hour++;
     ea4:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <A_Hour>
     ea8:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <A_Hour+0x1>
     eac:	01 96       	adiw	r24, 0x01	; 1
     eae:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <A_Hour+0x1>
     eb2:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <A_Hour>
			if(A_Hour > 23) A_Hour = 0;
     eb6:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <A_Hour>
     eba:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <A_Hour+0x1>
     ebe:	48 97       	sbiw	r24, 0x18	; 24
     ec0:	24 f0       	brlt	.+8      	; 0xeca <Check_btn+0x632>
     ec2:	10 92 ce 00 	sts	0x00CE, r1	; 0x8000ce <A_Hour+0x1>
     ec6:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <A_Hour>
		}
		if(count == 2) {
     eca:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	99 f4       	brne	.+38     	; 0xef8 <Check_btn+0x660>
			A_Minute++;
     ed2:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <A_Minute>
     ed6:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <A_Minute+0x1>
     eda:	01 96       	adiw	r24, 0x01	; 1
     edc:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <A_Minute+0x1>
     ee0:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <A_Minute>
			if(A_Minute > 59) A_Minute = 0;
     ee4:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <A_Minute>
     ee8:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <A_Minute+0x1>
     eec:	cc 97       	sbiw	r24, 0x3c	; 60
     eee:	24 f0       	brlt	.+8      	; 0xef8 <Check_btn+0x660>
     ef0:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <A_Minute+0x1>
     ef4:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <A_Minute>
		}
		Display();
     ef8:	0e 94 34 02 	call	0x468	; 0x468 <Display>
	}
	
	if(((BTN_PIN & (1 << decr)) == 0) && set_alarm == true) {
     efc:	81 99       	sbic	0x10, 1	; 16
     efe:	3a c0       	rjmp	.+116    	; 0xf74 <Check_btn+0x6dc>
     f00:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <set_alarm>
     f04:	88 23       	and	r24, r24
     f06:	b1 f1       	breq	.+108    	; 0xf74 <Check_btn+0x6dc>
		while((BTN_PIN & (1 << decr))== 0){		// while den khi tha nut nhan ra
     f08:	81 9b       	sbis	0x10, 1	; 16
     f0a:	fe cf       	rjmp	.-4      	; 0xf08 <Check_btn+0x670>
		}
		if(count == 1 ){
     f0c:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	a9 f4       	brne	.+42     	; 0xf3e <Check_btn+0x6a6>
			A_Hour--;
     f14:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <A_Hour>
     f18:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <A_Hour+0x1>
     f1c:	01 97       	sbiw	r24, 0x01	; 1
     f1e:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <A_Hour+0x1>
     f22:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <A_Hour>
			if(A_Hour < 0 )  A_Hour = 23 ;
     f26:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <A_Hour>
     f2a:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <A_Hour+0x1>
     f2e:	99 23       	and	r25, r25
     f30:	34 f4       	brge	.+12     	; 0xf3e <Check_btn+0x6a6>
     f32:	87 e1       	ldi	r24, 0x17	; 23
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <A_Hour+0x1>
     f3a:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <A_Hour>
		}
		if(count == 2) {
     f3e:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
     f42:	82 30       	cpi	r24, 0x02	; 2
     f44:	a9 f4       	brne	.+42     	; 0xf70 <Check_btn+0x6d8>
			A_Minute--;
     f46:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <A_Minute>
     f4a:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <A_Minute+0x1>
     f4e:	01 97       	sbiw	r24, 0x01	; 1
     f50:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <A_Minute+0x1>
     f54:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <A_Minute>
			if(A_Minute < 0 )  A_Minute = 59;
     f58:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <A_Minute>
     f5c:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <A_Minute+0x1>
     f60:	99 23       	and	r25, r25
     f62:	34 f4       	brge	.+12     	; 0xf70 <Check_btn+0x6d8>
     f64:	8b e3       	ldi	r24, 0x3B	; 59
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	90 93 cc 00 	sts	0x00CC, r25	; 0x8000cc <A_Minute+0x1>
     f6c:	80 93 cb 00 	sts	0x00CB, r24	; 0x8000cb <A_Minute>
		}
		Display();
     f70:	0e 94 34 02 	call	0x468	; 0x468 <Display>
	}
	
	if(((BTN_PIN & (1 << save)) == 0) && set_alarm == true) {
     f74:	83 99       	sbic	0x10, 3	; 16
     f76:	0f c0       	rjmp	.+30     	; 0xf96 <Check_btn+0x6fe>
     f78:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <set_alarm>
     f7c:	88 23       	and	r24, r24
     f7e:	59 f0       	breq	.+22     	; 0xf96 <Check_btn+0x6fe>
		while((BTN_PIN & (1 << save))== 0){		// while den khi tha nut nhan ra
     f80:	83 9b       	sbis	0x10, 3	; 16
     f82:	fe cf       	rjmp	.-4      	; 0xf80 <Check_btn+0x6e8>
		}
		count = 0;
     f84:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <count>
		EN_alarm = true;
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <EN_alarm>
// 		clr_LCD();
// 		print_LCD("Saving.......");
// 		_delay_ms(500);
		set_alarm = false;
     f8e:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <set_alarm>
		Display();
     f92:	0e 94 34 02 	call	0x468	; 0x468 <Display>
	}
	if(((BTN_PIN & (1 << exit)) == 0) && set_alarm == true ) {
     f96:	84 99       	sbic	0x10, 4	; 16
     f98:	0e c0       	rjmp	.+28     	; 0xfb6 <Check_btn+0x71e>
     f9a:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <set_alarm>
     f9e:	88 23       	and	r24, r24
     fa0:	51 f0       	breq	.+20     	; 0xfb6 <Check_btn+0x71e>
		while((BTN_PIN & (1 << exit))== 0){		// while den khi tha nut nhan ra
     fa2:	84 9b       	sbis	0x10, 4	; 16
     fa4:	fe cf       	rjmp	.-4      	; 0xfa2 <Check_btn+0x70a>
		}
		count = 0;
     fa6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <count>
		EN_alarm = false;
     faa:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <EN_alarm>
// 		clr_LCD();
// 		print_LCD("Exit.....");
// 		_delay_ms(500);
		set_alarm = false;
     fae:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <set_alarm>
		Display();
     fb2:	0e 94 34 02 	call	0x468	; 0x468 <Display>
     fb6:	08 95       	ret

00000fb8 <jdFromDate>:

//-----------------------DOI DUONG LICH - AM LICH---------------------


double jdFromDate(uint8_t dd, uint8_t mm, uint16_t yy)
{
     fb8:	4f 92       	push	r4
     fba:	5f 92       	push	r5
     fbc:	6f 92       	push	r6
     fbe:	7f 92       	push	r7
     fc0:	8f 92       	push	r8
     fc2:	9f 92       	push	r9
     fc4:	af 92       	push	r10
     fc6:	bf 92       	push	r11
     fc8:	cf 92       	push	r12
     fca:	df 92       	push	r13
     fcc:	ef 92       	push	r14
     fce:	ff 92       	push	r15
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	cf 93       	push	r28
     fd6:	df 93       	push	r29
     fd8:	f8 2e       	mov	r15, r24
     fda:	8a 01       	movw	r16, r20
	long double a, y, m, jd;
	a = floorf((14 - mm) / 12);
     fdc:	c6 2f       	mov	r28, r22
     fde:	d0 e0       	ldi	r29, 0x00	; 0
     fe0:	8e e0       	ldi	r24, 0x0E	; 14
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	8c 1b       	sub	r24, r28
     fe6:	9d 0b       	sbc	r25, r29
     fe8:	6c e0       	ldi	r22, 0x0C	; 12
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
     ff0:	07 2e       	mov	r0, r23
     ff2:	00 0c       	add	r0, r0
     ff4:	88 0b       	sbc	r24, r24
     ff6:	99 0b       	sbc	r25, r25
     ff8:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__floatsisf>
     ffc:	0e 94 e7 15 	call	0x2bce	; 0x2bce <floor>
    1000:	4b 01       	movw	r8, r22
    1002:	5c 01       	movw	r10, r24
	y = yy+4800-a;
    1004:	b8 01       	movw	r22, r16
    1006:	60 54       	subi	r22, 0x40	; 64
    1008:	7d 4e       	sbci	r23, 0xED	; 237
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <__floatunsisf>
    1012:	a5 01       	movw	r20, r10
    1014:	94 01       	movw	r18, r8
    1016:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    101a:	2b 01       	movw	r4, r22
    101c:	3c 01       	movw	r6, r24
	m = mm+12*a-3;
    101e:	20 e0       	ldi	r18, 0x00	; 0
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	40 e4       	ldi	r20, 0x40	; 64
    1024:	51 e4       	ldi	r21, 0x41	; 65
    1026:	c5 01       	movw	r24, r10
    1028:	b4 01       	movw	r22, r8
    102a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    102e:	4b 01       	movw	r8, r22
    1030:	5c 01       	movw	r10, r24
    1032:	be 01       	movw	r22, r28
    1034:	dd 0f       	add	r29, r29
    1036:	88 0b       	sbc	r24, r24
    1038:	99 0b       	sbc	r25, r25
    103a:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__floatsisf>
    103e:	a5 01       	movw	r20, r10
    1040:	94 01       	movw	r18, r8
    1042:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1046:	20 e0       	ldi	r18, 0x00	; 0
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	40 e4       	ldi	r20, 0x40	; 64
    104c:	50 e4       	ldi	r21, 0x40	; 64
    104e:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1052:	4b 01       	movw	r8, r22
    1054:	5c 01       	movw	r10, r24
	jd = dd + floorf((153*m+2)/5) + 365*y + floorf(y/4) - floorf(y/100) + floorf(y/400) - 32045;
    1056:	6f 2d       	mov	r22, r15
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__floatsisf>
    1062:	6b 01       	movw	r12, r22
    1064:	7c 01       	movw	r14, r24
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	49 e1       	ldi	r20, 0x19	; 25
    106c:	53 e4       	ldi	r21, 0x43	; 67
    106e:	c5 01       	movw	r24, r10
    1070:	b4 01       	movw	r22, r8
    1072:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e0       	ldi	r20, 0x00	; 0
    107c:	50 e4       	ldi	r21, 0x40	; 64
    107e:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 ea       	ldi	r20, 0xA0	; 160
    1088:	50 e4       	ldi	r21, 0x40	; 64
    108a:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divsf3>
    108e:	0e 94 e7 15 	call	0x2bce	; 0x2bce <floor>
    1092:	9b 01       	movw	r18, r22
    1094:	ac 01       	movw	r20, r24
    1096:	c7 01       	movw	r24, r14
    1098:	b6 01       	movw	r22, r12
    109a:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    109e:	6b 01       	movw	r12, r22
    10a0:	7c 01       	movw	r14, r24
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e8       	ldi	r19, 0x80	; 128
    10a6:	46 eb       	ldi	r20, 0xB6	; 182
    10a8:	53 e4       	ldi	r21, 0x43	; 67
    10aa:	c3 01       	movw	r24, r6
    10ac:	b2 01       	movw	r22, r4
    10ae:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    10b2:	9b 01       	movw	r18, r22
    10b4:	ac 01       	movw	r20, r24
    10b6:	c7 01       	movw	r24, r14
    10b8:	b6 01       	movw	r22, r12
    10ba:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    10be:	6b 01       	movw	r12, r22
    10c0:	7c 01       	movw	r14, r24
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e8       	ldi	r20, 0x80	; 128
    10c8:	5e e3       	ldi	r21, 0x3E	; 62
    10ca:	c3 01       	movw	r24, r6
    10cc:	b2 01       	movw	r22, r4
    10ce:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    10d2:	0e 94 e7 15 	call	0x2bce	; 0x2bce <floor>
    10d6:	9b 01       	movw	r18, r22
    10d8:	ac 01       	movw	r20, r24
    10da:	c7 01       	movw	r24, r14
    10dc:	b6 01       	movw	r22, r12
    10de:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    10e2:	6b 01       	movw	r12, r22
    10e4:	7c 01       	movw	r14, r24
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	48 ec       	ldi	r20, 0xC8	; 200
    10ec:	52 e4       	ldi	r21, 0x42	; 66
    10ee:	c3 01       	movw	r24, r6
    10f0:	b2 01       	movw	r22, r4
    10f2:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divsf3>
    10f6:	0e 94 e7 15 	call	0x2bce	; 0x2bce <floor>
    10fa:	9b 01       	movw	r18, r22
    10fc:	ac 01       	movw	r20, r24
    10fe:	c7 01       	movw	r24, r14
    1100:	b6 01       	movw	r22, r12
    1102:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1106:	4b 01       	movw	r8, r22
    1108:	5c 01       	movw	r10, r24
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	48 ec       	ldi	r20, 0xC8	; 200
    1110:	53 e4       	ldi	r21, 0x43	; 67
    1112:	c3 01       	movw	r24, r6
    1114:	b2 01       	movw	r22, r4
    1116:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divsf3>
    111a:	0e 94 e7 15 	call	0x2bce	; 0x2bce <floor>
    111e:	9b 01       	movw	r18, r22
    1120:	ac 01       	movw	r20, r24
    1122:	c5 01       	movw	r24, r10
    1124:	b4 01       	movw	r22, r8
    1126:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    112a:	20 e0       	ldi	r18, 0x00	; 0
    112c:	3a e5       	ldi	r19, 0x5A	; 90
    112e:	4a ef       	ldi	r20, 0xFA	; 250
    1130:	56 e4       	ldi	r21, 0x46	; 70
    1132:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1136:	4b 01       	movw	r8, r22
    1138:	5c 01       	movw	r10, r24
	if (jd < 2299161) {
    113a:	24 e6       	ldi	r18, 0x64	; 100
    113c:	34 e5       	ldi	r19, 0x54	; 84
    113e:	4c e0       	ldi	r20, 0x0C	; 12
    1140:	5a e4       	ldi	r21, 0x4A	; 74
    1142:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__cmpsf2>
    1146:	88 23       	and	r24, r24
    1148:	54 f4       	brge	.+20     	; 0x115e <jdFromDate+0x1a6>
		jd = dd + floorf((153*m+2)/5) + 365*y + floorf(y/4) - 32083;
    114a:	20 e0       	ldi	r18, 0x00	; 0
    114c:	36 ea       	ldi	r19, 0xA6	; 166
    114e:	4a ef       	ldi	r20, 0xFA	; 250
    1150:	56 e4       	ldi	r21, 0x46	; 70
    1152:	c7 01       	movw	r24, r14
    1154:	b6 01       	movw	r22, r12
    1156:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    115a:	4b 01       	movw	r8, r22
    115c:	5c 01       	movw	r10, r24
	}
	return jd;
}
    115e:	c5 01       	movw	r24, r10
    1160:	b4 01       	movw	r22, r8
    1162:	df 91       	pop	r29
    1164:	cf 91       	pop	r28
    1166:	1f 91       	pop	r17
    1168:	0f 91       	pop	r16
    116a:	ff 90       	pop	r15
    116c:	ef 90       	pop	r14
    116e:	df 90       	pop	r13
    1170:	cf 90       	pop	r12
    1172:	bf 90       	pop	r11
    1174:	af 90       	pop	r10
    1176:	9f 90       	pop	r9
    1178:	8f 90       	pop	r8
    117a:	7f 90       	pop	r7
    117c:	6f 90       	pop	r6
    117e:	5f 90       	pop	r5
    1180:	4f 90       	pop	r4
    1182:	08 95       	ret

00001184 <getNewMoonDay>:

double getNewMoonDay(long double k, int timeZone)
{
    1184:	4f 92       	push	r4
    1186:	5f 92       	push	r5
    1188:	6f 92       	push	r6
    118a:	7f 92       	push	r7
    118c:	8f 92       	push	r8
    118e:	9f 92       	push	r9
    1190:	af 92       	push	r10
    1192:	bf 92       	push	r11
    1194:	cf 92       	push	r12
    1196:	df 92       	push	r13
    1198:	ef 92       	push	r14
    119a:	ff 92       	push	r15
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	cd b7       	in	r28, 0x3d	; 61
    11a2:	de b7       	in	r29, 0x3e	; 62
    11a4:	66 97       	sbiw	r28, 0x16	; 22
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	6b 01       	movw	r12, r22
    11b2:	7c 01       	movw	r14, r24
    11b4:	5e 8b       	std	Y+22, r21	; 0x16
    11b6:	4d 8b       	std	Y+21, r20	; 0x15
	long double T, T2, T3, dr, Jd1, M, Mpr, F, C1, deltat, JdNew;
	T = k/1236.85; // Time in Julian centuries from 1900 January 0.5
    11b8:	23 e3       	ldi	r18, 0x33	; 51
    11ba:	3b e9       	ldi	r19, 0x9B	; 155
    11bc:	4a e9       	ldi	r20, 0x9A	; 154
    11be:	54 e4       	ldi	r21, 0x44	; 68
    11c0:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divsf3>
    11c4:	69 83       	std	Y+1, r22	; 0x01
    11c6:	7a 83       	std	Y+2, r23	; 0x02
    11c8:	8b 83       	std	Y+3, r24	; 0x03
    11ca:	9c 83       	std	Y+4, r25	; 0x04
	T2 = T * T;
    11cc:	9b 01       	movw	r18, r22
    11ce:	ac 01       	movw	r20, r24
    11d0:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    11d4:	6d 83       	std	Y+5, r22	; 0x05
    11d6:	7e 83       	std	Y+6, r23	; 0x06
    11d8:	8f 83       	std	Y+7, r24	; 0x07
    11da:	98 87       	std	Y+8, r25	; 0x08
	T3 = T2 * T;
    11dc:	9b 01       	movw	r18, r22
    11de:	ac 01       	movw	r20, r24
    11e0:	69 81       	ldd	r22, Y+1	; 0x01
    11e2:	7a 81       	ldd	r23, Y+2	; 0x02
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    11ec:	6d 87       	std	Y+13, r22	; 0x0d
    11ee:	7e 87       	std	Y+14, r23	; 0x0e
    11f0:	8f 87       	std	Y+15, r24	; 0x0f
    11f2:	98 8b       	std	Y+16, r25	; 0x10
	dr = M_PI/180;
	Jd1 = 2415020.75933 + 29.53058868*k + 0.0001178*T2 - 0.000000155*T3;
    11f4:	25 ea       	ldi	r18, 0xA5	; 165
    11f6:	3e e3       	ldi	r19, 0x3E	; 62
    11f8:	4c ee       	ldi	r20, 0xEC	; 236
    11fa:	51 e4       	ldi	r21, 0x41	; 65
    11fc:	c7 01       	movw	r24, r14
    11fe:	b6 01       	movw	r22, r12
    1200:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1204:	23 eb       	ldi	r18, 0xB3	; 179
    1206:	36 e6       	ldi	r19, 0x66	; 102
    1208:	43 e1       	ldi	r20, 0x13	; 19
    120a:	5a e4       	ldi	r21, 0x4A	; 74
    120c:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1210:	4b 01       	movw	r8, r22
    1212:	5c 01       	movw	r10, r24
    1214:	25 e6       	ldi	r18, 0x65	; 101
    1216:	3b e0       	ldi	r19, 0x0B	; 11
    1218:	47 ef       	ldi	r20, 0xF7	; 247
    121a:	58 e3       	ldi	r21, 0x38	; 56
    121c:	6d 81       	ldd	r22, Y+5	; 0x05
    121e:	7e 81       	ldd	r23, Y+6	; 0x06
    1220:	8f 81       	ldd	r24, Y+7	; 0x07
    1222:	98 85       	ldd	r25, Y+8	; 0x08
    1224:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1228:	9b 01       	movw	r18, r22
    122a:	ac 01       	movw	r20, r24
    122c:	c5 01       	movw	r24, r10
    122e:	b4 01       	movw	r22, r8
    1230:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1234:	4b 01       	movw	r8, r22
    1236:	5c 01       	movw	r10, r24
    1238:	23 e1       	ldi	r18, 0x13	; 19
    123a:	3e e6       	ldi	r19, 0x6E	; 110
    123c:	46 e2       	ldi	r20, 0x26	; 38
    123e:	54 e3       	ldi	r21, 0x34	; 52
    1240:	6d 85       	ldd	r22, Y+13	; 0x0d
    1242:	7e 85       	ldd	r23, Y+14	; 0x0e
    1244:	8f 85       	ldd	r24, Y+15	; 0x0f
    1246:	98 89       	ldd	r25, Y+16	; 0x10
    1248:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    124c:	9b 01       	movw	r18, r22
    124e:	ac 01       	movw	r20, r24
    1250:	c5 01       	movw	r24, r10
    1252:	b4 01       	movw	r22, r8
    1254:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1258:	4b 01       	movw	r8, r22
    125a:	5c 01       	movw	r10, r24
	Jd1 = Jd1 + 0.00033*sinf((166.56 + 132.87*T - 0.009173*T2)*dr); // Mean new moon
    125c:	28 eb       	ldi	r18, 0xB8	; 184
    125e:	3e ed       	ldi	r19, 0xDE	; 222
    1260:	44 e0       	ldi	r20, 0x04	; 4
    1262:	53 e4       	ldi	r21, 0x43	; 67
    1264:	69 81       	ldd	r22, Y+1	; 0x01
    1266:	7a 81       	ldd	r23, Y+2	; 0x02
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1270:	2c e5       	ldi	r18, 0x5C	; 92
    1272:	3f e8       	ldi	r19, 0x8F	; 143
    1274:	46 e2       	ldi	r20, 0x26	; 38
    1276:	53 e4       	ldi	r21, 0x43	; 67
    1278:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    127c:	2b 01       	movw	r4, r22
    127e:	3c 01       	movw	r6, r24
    1280:	2a e5       	ldi	r18, 0x5A	; 90
    1282:	3a e4       	ldi	r19, 0x4A	; 74
    1284:	46 e1       	ldi	r20, 0x16	; 22
    1286:	5c e3       	ldi	r21, 0x3C	; 60
    1288:	6d 81       	ldd	r22, Y+5	; 0x05
    128a:	7e 81       	ldd	r23, Y+6	; 0x06
    128c:	8f 81       	ldd	r24, Y+7	; 0x07
    128e:	98 85       	ldd	r25, Y+8	; 0x08
    1290:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1294:	9b 01       	movw	r18, r22
    1296:	ac 01       	movw	r20, r24
    1298:	c3 01       	movw	r24, r6
    129a:	b2 01       	movw	r22, r4
    129c:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    12a0:	25 e3       	ldi	r18, 0x35	; 53
    12a2:	3a ef       	ldi	r19, 0xFA	; 250
    12a4:	4e e8       	ldi	r20, 0x8E	; 142
    12a6:	5c e3       	ldi	r21, 0x3C	; 60
    12a8:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    12ac:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <sin>
    12b0:	2a ed       	ldi	r18, 0xDA	; 218
    12b2:	33 e0       	ldi	r19, 0x03	; 3
    12b4:	4d ea       	ldi	r20, 0xAD	; 173
    12b6:	59 e3       	ldi	r21, 0x39	; 57
    12b8:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    12bc:	9b 01       	movw	r18, r22
    12be:	ac 01       	movw	r20, r24
    12c0:	c5 01       	movw	r24, r10
    12c2:	b4 01       	movw	r22, r8
    12c4:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    12c8:	69 8b       	std	Y+17, r22	; 0x11
    12ca:	7a 8b       	std	Y+18, r23	; 0x12
    12cc:	8b 8b       	std	Y+19, r24	; 0x13
    12ce:	9c 8b       	std	Y+20, r25	; 0x14
	M = 359.2242 + 29.10535608*k - 0.0000333*T2 - 0.00000347*T3; // Sun's mean anomaly
    12d0:	25 ec       	ldi	r18, 0xC5	; 197
    12d2:	37 ed       	ldi	r19, 0xD7	; 215
    12d4:	48 ee       	ldi	r20, 0xE8	; 232
    12d6:	51 e4       	ldi	r21, 0x41	; 65
    12d8:	c7 01       	movw	r24, r14
    12da:	b6 01       	movw	r22, r12
    12dc:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    12e0:	23 eb       	ldi	r18, 0xB3	; 179
    12e2:	3c e9       	ldi	r19, 0x9C	; 156
    12e4:	43 eb       	ldi	r20, 0xB3	; 179
    12e6:	53 e4       	ldi	r21, 0x43	; 67
    12e8:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    12ec:	4b 01       	movw	r8, r22
    12ee:	5c 01       	movw	r10, r24
    12f0:	2a e9       	ldi	r18, 0x9A	; 154
    12f2:	3b ea       	ldi	r19, 0xAB	; 171
    12f4:	4b e0       	ldi	r20, 0x0B	; 11
    12f6:	58 e3       	ldi	r21, 0x38	; 56
    12f8:	6d 81       	ldd	r22, Y+5	; 0x05
    12fa:	7e 81       	ldd	r23, Y+6	; 0x06
    12fc:	8f 81       	ldd	r24, Y+7	; 0x07
    12fe:	98 85       	ldd	r25, Y+8	; 0x08
    1300:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1304:	9b 01       	movw	r18, r22
    1306:	ac 01       	movw	r20, r24
    1308:	c5 01       	movw	r24, r10
    130a:	b4 01       	movw	r22, r8
    130c:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1310:	4b 01       	movw	r8, r22
    1312:	5c 01       	movw	r10, r24
    1314:	25 e2       	ldi	r18, 0x25	; 37
    1316:	3e ed       	ldi	r19, 0xDE	; 222
    1318:	48 e6       	ldi	r20, 0x68	; 104
    131a:	56 e3       	ldi	r21, 0x36	; 54
    131c:	6d 85       	ldd	r22, Y+13	; 0x0d
    131e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1320:	8f 85       	ldd	r24, Y+15	; 0x0f
    1322:	98 89       	ldd	r25, Y+16	; 0x10
    1324:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1328:	9b 01       	movw	r18, r22
    132a:	ac 01       	movw	r20, r24
    132c:	c5 01       	movw	r24, r10
    132e:	b4 01       	movw	r22, r8
    1330:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1334:	69 87       	std	Y+9, r22	; 0x09
    1336:	7a 87       	std	Y+10, r23	; 0x0a
    1338:	8b 87       	std	Y+11, r24	; 0x0b
    133a:	9c 87       	std	Y+12, r25	; 0x0c
	Mpr = 306.0253 + 385.81691806*k + 0.0107306*T2 + 0.00001236*T3; // Moon's mean anomaly
    133c:	21 e9       	ldi	r18, 0x91	; 145
    133e:	38 ee       	ldi	r19, 0xE8	; 232
    1340:	40 ec       	ldi	r20, 0xC0	; 192
    1342:	53 e4       	ldi	r21, 0x43	; 67
    1344:	c7 01       	movw	r24, r14
    1346:	b6 01       	movw	r22, r12
    1348:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    134c:	2d e3       	ldi	r18, 0x3D	; 61
    134e:	33 e0       	ldi	r19, 0x03	; 3
    1350:	49 e9       	ldi	r20, 0x99	; 153
    1352:	53 e4       	ldi	r21, 0x43	; 67
    1354:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1358:	4b 01       	movw	r8, r22
    135a:	5c 01       	movw	r10, r24
    135c:	26 e6       	ldi	r18, 0x66	; 102
    135e:	3f ec       	ldi	r19, 0xCF	; 207
    1360:	4f e2       	ldi	r20, 0x2F	; 47
    1362:	5c e3       	ldi	r21, 0x3C	; 60
    1364:	6d 81       	ldd	r22, Y+5	; 0x05
    1366:	7e 81       	ldd	r23, Y+6	; 0x06
    1368:	8f 81       	ldd	r24, Y+7	; 0x07
    136a:	98 85       	ldd	r25, Y+8	; 0x08
    136c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1370:	9b 01       	movw	r18, r22
    1372:	ac 01       	movw	r20, r24
    1374:	c5 01       	movw	r24, r10
    1376:	b4 01       	movw	r22, r8
    1378:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    137c:	4b 01       	movw	r8, r22
    137e:	5c 01       	movw	r10, r24
    1380:	2c ec       	ldi	r18, 0xCC	; 204
    1382:	3d e5       	ldi	r19, 0x5D	; 93
    1384:	4f e4       	ldi	r20, 0x4F	; 79
    1386:	57 e3       	ldi	r21, 0x37	; 55
    1388:	6d 85       	ldd	r22, Y+13	; 0x0d
    138a:	7e 85       	ldd	r23, Y+14	; 0x0e
    138c:	8f 85       	ldd	r24, Y+15	; 0x0f
    138e:	98 89       	ldd	r25, Y+16	; 0x10
    1390:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1394:	9b 01       	movw	r18, r22
    1396:	ac 01       	movw	r20, r24
    1398:	c5 01       	movw	r24, r10
    139a:	b4 01       	movw	r22, r8
    139c:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    13a0:	2b 01       	movw	r4, r22
    13a2:	3c 01       	movw	r6, r24
	F = 21.2964 + 390.67050646*k - 0.0016528*T2 - 0.00000239*T3; // Moon's argument of latitude
    13a4:	23 ed       	ldi	r18, 0xD3	; 211
    13a6:	35 e5       	ldi	r19, 0x55	; 85
    13a8:	43 ec       	ldi	r20, 0xC3	; 195
    13aa:	53 e4       	ldi	r21, 0x43	; 67
    13ac:	c7 01       	movw	r24, r14
    13ae:	b6 01       	movw	r22, r12
    13b0:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    13b4:	27 e0       	ldi	r18, 0x07	; 7
    13b6:	3f e5       	ldi	r19, 0x5F	; 95
    13b8:	4a ea       	ldi	r20, 0xAA	; 170
    13ba:	51 e4       	ldi	r21, 0x41	; 65
    13bc:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    13c0:	6b 01       	movw	r12, r22
    13c2:	7c 01       	movw	r14, r24
    13c4:	24 ec       	ldi	r18, 0xC4	; 196
    13c6:	32 ea       	ldi	r19, 0xA2	; 162
    13c8:	48 ed       	ldi	r20, 0xD8	; 216
    13ca:	5a e3       	ldi	r21, 0x3A	; 58
    13cc:	6d 81       	ldd	r22, Y+5	; 0x05
    13ce:	7e 81       	ldd	r23, Y+6	; 0x06
    13d0:	8f 81       	ldd	r24, Y+7	; 0x07
    13d2:	98 85       	ldd	r25, Y+8	; 0x08
    13d4:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    13d8:	9b 01       	movw	r18, r22
    13da:	ac 01       	movw	r20, r24
    13dc:	c7 01       	movw	r24, r14
    13de:	b6 01       	movw	r22, r12
    13e0:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    13e4:	6b 01       	movw	r12, r22
    13e6:	7c 01       	movw	r14, r24
    13e8:	23 ee       	ldi	r18, 0xE3	; 227
    13ea:	33 e6       	ldi	r19, 0x63	; 99
    13ec:	40 e2       	ldi	r20, 0x20	; 32
    13ee:	56 e3       	ldi	r21, 0x36	; 54
    13f0:	6d 85       	ldd	r22, Y+13	; 0x0d
    13f2:	7e 85       	ldd	r23, Y+14	; 0x0e
    13f4:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f6:	98 89       	ldd	r25, Y+16	; 0x10
    13f8:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    13fc:	9b 01       	movw	r18, r22
    13fe:	ac 01       	movw	r20, r24
    1400:	c7 01       	movw	r24, r14
    1402:	b6 01       	movw	r22, r12
    1404:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1408:	6b 01       	movw	r12, r22
    140a:	7c 01       	movw	r14, r24
	C1=(0.1734 - 0.000393*T)*sinf(M*dr) + 0.0021*sinf(2*dr*M);
    140c:	21 e9       	ldi	r18, 0x91	; 145
    140e:	3b e0       	ldi	r19, 0x0B	; 11
    1410:	4e ec       	ldi	r20, 0xCE	; 206
    1412:	59 e3       	ldi	r21, 0x39	; 57
    1414:	69 81       	ldd	r22, Y+1	; 0x01
    1416:	7a 81       	ldd	r23, Y+2	; 0x02
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1420:	9b 01       	movw	r18, r22
    1422:	ac 01       	movw	r20, r24
    1424:	65 ec       	ldi	r22, 0xC5	; 197
    1426:	7f e8       	ldi	r23, 0x8F	; 143
    1428:	81 e3       	ldi	r24, 0x31	; 49
    142a:	9e e3       	ldi	r25, 0x3E	; 62
    142c:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1430:	4b 01       	movw	r8, r22
    1432:	5c 01       	movw	r10, r24
    1434:	25 e3       	ldi	r18, 0x35	; 53
    1436:	3a ef       	ldi	r19, 0xFA	; 250
    1438:	4e e8       	ldi	r20, 0x8E	; 142
    143a:	5c e3       	ldi	r21, 0x3C	; 60
    143c:	69 85       	ldd	r22, Y+9	; 0x09
    143e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1440:	8b 85       	ldd	r24, Y+11	; 0x0b
    1442:	9c 85       	ldd	r25, Y+12	; 0x0c
    1444:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1448:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <sin>
    144c:	9b 01       	movw	r18, r22
    144e:	ac 01       	movw	r20, r24
    1450:	c5 01       	movw	r24, r10
    1452:	b4 01       	movw	r22, r8
    1454:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1458:	4b 01       	movw	r8, r22
    145a:	5c 01       	movw	r10, r24
    145c:	25 e3       	ldi	r18, 0x35	; 53
    145e:	3a ef       	ldi	r19, 0xFA	; 250
    1460:	4e e0       	ldi	r20, 0x0E	; 14
    1462:	5d e3       	ldi	r21, 0x3D	; 61
    1464:	69 85       	ldd	r22, Y+9	; 0x09
    1466:	7a 85       	ldd	r23, Y+10	; 0x0a
    1468:	8b 85       	ldd	r24, Y+11	; 0x0b
    146a:	9c 85       	ldd	r25, Y+12	; 0x0c
    146c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1470:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <sin>
    1474:	27 e2       	ldi	r18, 0x27	; 39
    1476:	30 ea       	ldi	r19, 0xA0	; 160
    1478:	49 e0       	ldi	r20, 0x09	; 9
    147a:	5b e3       	ldi	r21, 0x3B	; 59
    147c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1480:	9b 01       	movw	r18, r22
    1482:	ac 01       	movw	r20, r24
    1484:	c5 01       	movw	r24, r10
    1486:	b4 01       	movw	r22, r8
    1488:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    148c:	4b 01       	movw	r8, r22
    148e:	5c 01       	movw	r10, r24
	C1 = C1 - 0.4068*sinf(Mpr*dr) + 0.0161*sinf(dr*2*Mpr);
    1490:	25 e3       	ldi	r18, 0x35	; 53
    1492:	3a ef       	ldi	r19, 0xFA	; 250
    1494:	4e e8       	ldi	r20, 0x8E	; 142
    1496:	5c e3       	ldi	r21, 0x3C	; 60
    1498:	c3 01       	movw	r24, r6
    149a:	b2 01       	movw	r22, r4
    149c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    14a0:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <sin>
    14a4:	27 e1       	ldi	r18, 0x17	; 23
    14a6:	38 e4       	ldi	r19, 0x48	; 72
    14a8:	40 ed       	ldi	r20, 0xD0	; 208
    14aa:	5e e3       	ldi	r21, 0x3E	; 62
    14ac:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    14b0:	9b 01       	movw	r18, r22
    14b2:	ac 01       	movw	r20, r24
    14b4:	c5 01       	movw	r24, r10
    14b6:	b4 01       	movw	r22, r8
    14b8:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    14bc:	4b 01       	movw	r8, r22
    14be:	5c 01       	movw	r10, r24
    14c0:	25 e3       	ldi	r18, 0x35	; 53
    14c2:	3a ef       	ldi	r19, 0xFA	; 250
    14c4:	4e e0       	ldi	r20, 0x0E	; 14
    14c6:	5d e3       	ldi	r21, 0x3D	; 61
    14c8:	c3 01       	movw	r24, r6
    14ca:	b2 01       	movw	r22, r4
    14cc:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    14d0:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <sin>
    14d4:	26 e2       	ldi	r18, 0x26	; 38
    14d6:	34 ee       	ldi	r19, 0xE4	; 228
    14d8:	43 e8       	ldi	r20, 0x83	; 131
    14da:	5c e3       	ldi	r21, 0x3C	; 60
    14dc:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    14e0:	9b 01       	movw	r18, r22
    14e2:	ac 01       	movw	r20, r24
    14e4:	c5 01       	movw	r24, r10
    14e6:	b4 01       	movw	r22, r8
    14e8:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    14ec:	4b 01       	movw	r8, r22
    14ee:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0004*sinf(dr*3*Mpr);
    14f0:	20 e5       	ldi	r18, 0x50	; 80
    14f2:	37 e7       	ldi	r19, 0x77	; 119
    14f4:	46 e5       	ldi	r20, 0x56	; 86
    14f6:	5d e3       	ldi	r21, 0x3D	; 61
    14f8:	c3 01       	movw	r24, r6
    14fa:	b2 01       	movw	r22, r4
    14fc:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1500:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <sin>
    1504:	27 e1       	ldi	r18, 0x17	; 23
    1506:	37 eb       	ldi	r19, 0xB7	; 183
    1508:	41 ed       	ldi	r20, 0xD1	; 209
    150a:	59 e3       	ldi	r21, 0x39	; 57
    150c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1510:	9b 01       	movw	r18, r22
    1512:	ac 01       	movw	r20, r24
    1514:	c5 01       	movw	r24, r10
    1516:	b4 01       	movw	r22, r8
    1518:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    151c:	4b 01       	movw	r8, r22
    151e:	5c 01       	movw	r10, r24
	C1 = C1 + 0.0104*sinf(dr*2*F) - 0.0051*sinf(dr*(M+Mpr));
    1520:	25 e3       	ldi	r18, 0x35	; 53
    1522:	3a ef       	ldi	r19, 0xFA	; 250
    1524:	4e e0       	ldi	r20, 0x0E	; 14
    1526:	5d e3       	ldi	r21, 0x3D	; 61
    1528:	c7 01       	movw	r24, r14
    152a:	b6 01       	movw	r22, r12
    152c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1530:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <sin>
    1534:	23 ec       	ldi	r18, 0xC3	; 195
    1536:	34 e6       	ldi	r19, 0x64	; 100
    1538:	4a e2       	ldi	r20, 0x2A	; 42
    153a:	5c e3       	ldi	r21, 0x3C	; 60
    153c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1540:	9b 01       	movw	r18, r22
    1542:	ac 01       	movw	r20, r24
    1544:	c5 01       	movw	r24, r10
    1546:	b4 01       	movw	r22, r8
    1548:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    154c:	4b 01       	movw	r8, r22
    154e:	5c 01       	movw	r10, r24
    1550:	a3 01       	movw	r20, r6
    1552:	92 01       	movw	r18, r4
    1554:	69 85       	ldd	r22, Y+9	; 0x09
    1556:	7a 85       	ldd	r23, Y+10	; 0x0a
    1558:	8b 85       	ldd	r24, Y+11	; 0x0b
    155a:	9c 85       	ldd	r25, Y+12	; 0x0c
    155c:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1560:	25 e3       	ldi	r18, 0x35	; 53
    1562:	3a ef       	ldi	r19, 0xFA	; 250
    1564:	4e e8       	ldi	r20, 0x8E	; 142
    1566:	5c e3       	ldi	r21, 0x3C	; 60
    1568:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    156c:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <sin>
    1570:	27 ee       	ldi	r18, 0xE7	; 231
    1572:	3d e1       	ldi	r19, 0x1D	; 29
    1574:	47 ea       	ldi	r20, 0xA7	; 167
    1576:	5b e3       	ldi	r21, 0x3B	; 59
    1578:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    157c:	9b 01       	movw	r18, r22
    157e:	ac 01       	movw	r20, r24
    1580:	c5 01       	movw	r24, r10
    1582:	b4 01       	movw	r22, r8
    1584:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1588:	4b 01       	movw	r8, r22
    158a:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0074*sinf(dr*(M-Mpr)) + 0.0004*sinf(dr*(2*F+M));
    158c:	a3 01       	movw	r20, r6
    158e:	92 01       	movw	r18, r4
    1590:	69 85       	ldd	r22, Y+9	; 0x09
    1592:	7a 85       	ldd	r23, Y+10	; 0x0a
    1594:	8b 85       	ldd	r24, Y+11	; 0x0b
    1596:	9c 85       	ldd	r25, Y+12	; 0x0c
    1598:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    159c:	25 e3       	ldi	r18, 0x35	; 53
    159e:	3a ef       	ldi	r19, 0xFA	; 250
    15a0:	4e e8       	ldi	r20, 0x8E	; 142
    15a2:	5c e3       	ldi	r21, 0x3C	; 60
    15a4:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    15a8:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <sin>
    15ac:	23 eb       	ldi	r18, 0xB3	; 179
    15ae:	3b e7       	ldi	r19, 0x7B	; 123
    15b0:	42 ef       	ldi	r20, 0xF2	; 242
    15b2:	5b e3       	ldi	r21, 0x3B	; 59
    15b4:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    15b8:	9b 01       	movw	r18, r22
    15ba:	ac 01       	movw	r20, r24
    15bc:	c5 01       	movw	r24, r10
    15be:	b4 01       	movw	r22, r8
    15c0:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    15c4:	4b 01       	movw	r8, r22
    15c6:	5c 01       	movw	r10, r24
    15c8:	a7 01       	movw	r20, r14
    15ca:	96 01       	movw	r18, r12
    15cc:	c7 01       	movw	r24, r14
    15ce:	b6 01       	movw	r22, r12
    15d0:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    15d4:	6b 01       	movw	r12, r22
    15d6:	7c 01       	movw	r14, r24
    15d8:	9b 01       	movw	r18, r22
    15da:	ac 01       	movw	r20, r24
    15dc:	69 85       	ldd	r22, Y+9	; 0x09
    15de:	7a 85       	ldd	r23, Y+10	; 0x0a
    15e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    15e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    15e4:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    15e8:	25 e3       	ldi	r18, 0x35	; 53
    15ea:	3a ef       	ldi	r19, 0xFA	; 250
    15ec:	4e e8       	ldi	r20, 0x8E	; 142
    15ee:	5c e3       	ldi	r21, 0x3C	; 60
    15f0:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    15f4:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <sin>
    15f8:	27 e1       	ldi	r18, 0x17	; 23
    15fa:	37 eb       	ldi	r19, 0xB7	; 183
    15fc:	41 ed       	ldi	r20, 0xD1	; 209
    15fe:	59 e3       	ldi	r21, 0x39	; 57
    1600:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1604:	9b 01       	movw	r18, r22
    1606:	ac 01       	movw	r20, r24
    1608:	c5 01       	movw	r24, r10
    160a:	b4 01       	movw	r22, r8
    160c:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1610:	4b 01       	movw	r8, r22
    1612:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0004*sinf(dr*(2*F-M)) - 0.0006*sinf(dr*(2*F+Mpr));
    1614:	29 85       	ldd	r18, Y+9	; 0x09
    1616:	3a 85       	ldd	r19, Y+10	; 0x0a
    1618:	4b 85       	ldd	r20, Y+11	; 0x0b
    161a:	5c 85       	ldd	r21, Y+12	; 0x0c
    161c:	c7 01       	movw	r24, r14
    161e:	b6 01       	movw	r22, r12
    1620:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1624:	25 e3       	ldi	r18, 0x35	; 53
    1626:	3a ef       	ldi	r19, 0xFA	; 250
    1628:	4e e8       	ldi	r20, 0x8E	; 142
    162a:	5c e3       	ldi	r21, 0x3C	; 60
    162c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1630:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <sin>
    1634:	27 e1       	ldi	r18, 0x17	; 23
    1636:	37 eb       	ldi	r19, 0xB7	; 183
    1638:	41 ed       	ldi	r20, 0xD1	; 209
    163a:	59 e3       	ldi	r21, 0x39	; 57
    163c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1640:	9b 01       	movw	r18, r22
    1642:	ac 01       	movw	r20, r24
    1644:	c5 01       	movw	r24, r10
    1646:	b4 01       	movw	r22, r8
    1648:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    164c:	4b 01       	movw	r8, r22
    164e:	5c 01       	movw	r10, r24
    1650:	a7 01       	movw	r20, r14
    1652:	96 01       	movw	r18, r12
    1654:	c3 01       	movw	r24, r6
    1656:	b2 01       	movw	r22, r4
    1658:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    165c:	25 e3       	ldi	r18, 0x35	; 53
    165e:	3a ef       	ldi	r19, 0xFA	; 250
    1660:	4e e8       	ldi	r20, 0x8E	; 142
    1662:	5c e3       	ldi	r21, 0x3C	; 60
    1664:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1668:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <sin>
    166c:	22 e5       	ldi	r18, 0x52	; 82
    166e:	39 e4       	ldi	r19, 0x49	; 73
    1670:	4d e1       	ldi	r20, 0x1D	; 29
    1672:	5a e3       	ldi	r21, 0x3A	; 58
    1674:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1678:	9b 01       	movw	r18, r22
    167a:	ac 01       	movw	r20, r24
    167c:	c5 01       	movw	r24, r10
    167e:	b4 01       	movw	r22, r8
    1680:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1684:	4b 01       	movw	r8, r22
    1686:	5c 01       	movw	r10, r24
	C1 = C1 + 0.0010*sinf(dr*(2*F-Mpr)) + 0.0005*sinf(dr*(2*Mpr+M));
    1688:	a3 01       	movw	r20, r6
    168a:	92 01       	movw	r18, r4
    168c:	c7 01       	movw	r24, r14
    168e:	b6 01       	movw	r22, r12
    1690:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1694:	25 e3       	ldi	r18, 0x35	; 53
    1696:	3a ef       	ldi	r19, 0xFA	; 250
    1698:	4e e8       	ldi	r20, 0x8E	; 142
    169a:	5c e3       	ldi	r21, 0x3C	; 60
    169c:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    16a0:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <sin>
    16a4:	2f e6       	ldi	r18, 0x6F	; 111
    16a6:	32 e1       	ldi	r19, 0x12	; 18
    16a8:	43 e8       	ldi	r20, 0x83	; 131
    16aa:	5a e3       	ldi	r21, 0x3A	; 58
    16ac:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    16b0:	9b 01       	movw	r18, r22
    16b2:	ac 01       	movw	r20, r24
    16b4:	c5 01       	movw	r24, r10
    16b6:	b4 01       	movw	r22, r8
    16b8:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    16bc:	6b 01       	movw	r12, r22
    16be:	7c 01       	movw	r14, r24
    16c0:	a3 01       	movw	r20, r6
    16c2:	92 01       	movw	r18, r4
    16c4:	c3 01       	movw	r24, r6
    16c6:	b2 01       	movw	r22, r4
    16c8:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    16cc:	9b 01       	movw	r18, r22
    16ce:	ac 01       	movw	r20, r24
    16d0:	69 85       	ldd	r22, Y+9	; 0x09
    16d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    16d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    16d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    16d8:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    16dc:	25 e3       	ldi	r18, 0x35	; 53
    16de:	3a ef       	ldi	r19, 0xFA	; 250
    16e0:	4e e8       	ldi	r20, 0x8E	; 142
    16e2:	5c e3       	ldi	r21, 0x3C	; 60
    16e4:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    16e8:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <sin>
    16ec:	2f e6       	ldi	r18, 0x6F	; 111
    16ee:	32 e1       	ldi	r19, 0x12	; 18
    16f0:	43 e0       	ldi	r20, 0x03	; 3
    16f2:	5a e3       	ldi	r21, 0x3A	; 58
    16f4:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    16f8:	9b 01       	movw	r18, r22
    16fa:	ac 01       	movw	r20, r24
    16fc:	c7 01       	movw	r24, r14
    16fe:	b6 01       	movw	r22, r12
    1700:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1704:	6b 01       	movw	r12, r22
    1706:	7c 01       	movw	r14, r24
	if (T < -11) {
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e3       	ldi	r20, 0x30	; 48
    170e:	51 ec       	ldi	r21, 0xC1	; 193
    1710:	69 81       	ldd	r22, Y+1	; 0x01
    1712:	7a 81       	ldd	r23, Y+2	; 0x02
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__cmpsf2>
    171c:	88 23       	and	r24, r24
    171e:	0c f0       	brlt	.+2      	; 0x1722 <getNewMoonDay+0x59e>
    1720:	51 c0       	rjmp	.+162    	; 0x17c4 <getNewMoonDay+0x640>
		deltat= 0.001 + 0.000839*T + 0.0002261*T2 - 0.00000845*T3 - 0.000000081*T*T3;
    1722:	26 e5       	ldi	r18, 0x56	; 86
    1724:	30 ef       	ldi	r19, 0xF0	; 240
    1726:	4b e5       	ldi	r20, 0x5B	; 91
    1728:	5a e3       	ldi	r21, 0x3A	; 58
    172a:	69 81       	ldd	r22, Y+1	; 0x01
    172c:	7a 81       	ldd	r23, Y+2	; 0x02
    172e:	8b 81       	ldd	r24, Y+3	; 0x03
    1730:	9c 81       	ldd	r25, Y+4	; 0x04
    1732:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1736:	2f e6       	ldi	r18, 0x6F	; 111
    1738:	32 e1       	ldi	r19, 0x12	; 18
    173a:	43 e8       	ldi	r20, 0x83	; 131
    173c:	5a e3       	ldi	r21, 0x3A	; 58
    173e:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1742:	4b 01       	movw	r8, r22
    1744:	5c 01       	movw	r10, r24
    1746:	22 e4       	ldi	r18, 0x42	; 66
    1748:	35 e1       	ldi	r19, 0x15	; 21
    174a:	4d e6       	ldi	r20, 0x6D	; 109
    174c:	59 e3       	ldi	r21, 0x39	; 57
    174e:	6d 81       	ldd	r22, Y+5	; 0x05
    1750:	7e 81       	ldd	r23, Y+6	; 0x06
    1752:	8f 81       	ldd	r24, Y+7	; 0x07
    1754:	98 85       	ldd	r25, Y+8	; 0x08
    1756:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    175a:	9b 01       	movw	r18, r22
    175c:	ac 01       	movw	r20, r24
    175e:	c5 01       	movw	r24, r10
    1760:	b4 01       	movw	r22, r8
    1762:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1766:	4b 01       	movw	r8, r22
    1768:	5c 01       	movw	r10, r24
    176a:	29 e7       	ldi	r18, 0x79	; 121
    176c:	34 ec       	ldi	r19, 0xC4	; 196
    176e:	4d e0       	ldi	r20, 0x0D	; 13
    1770:	57 e3       	ldi	r21, 0x37	; 55
    1772:	6d 85       	ldd	r22, Y+13	; 0x0d
    1774:	7e 85       	ldd	r23, Y+14	; 0x0e
    1776:	8f 85       	ldd	r24, Y+15	; 0x0f
    1778:	98 89       	ldd	r25, Y+16	; 0x10
    177a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    177e:	9b 01       	movw	r18, r22
    1780:	ac 01       	movw	r20, r24
    1782:	c5 01       	movw	r24, r10
    1784:	b4 01       	movw	r22, r8
    1786:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    178a:	4b 01       	movw	r8, r22
    178c:	5c 01       	movw	r10, r24
    178e:	29 e3       	ldi	r18, 0x39	; 57
    1790:	32 ef       	ldi	r19, 0xF2	; 242
    1792:	4d ea       	ldi	r20, 0xAD	; 173
    1794:	53 e3       	ldi	r21, 0x33	; 51
    1796:	69 81       	ldd	r22, Y+1	; 0x01
    1798:	7a 81       	ldd	r23, Y+2	; 0x02
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	9c 81       	ldd	r25, Y+4	; 0x04
    179e:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    17a2:	9b 01       	movw	r18, r22
    17a4:	ac 01       	movw	r20, r24
    17a6:	6d 85       	ldd	r22, Y+13	; 0x0d
    17a8:	7e 85       	ldd	r23, Y+14	; 0x0e
    17aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    17ac:	98 89       	ldd	r25, Y+16	; 0x10
    17ae:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    17b2:	9b 01       	movw	r18, r22
    17b4:	ac 01       	movw	r20, r24
    17b6:	c5 01       	movw	r24, r10
    17b8:	b4 01       	movw	r22, r8
    17ba:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    17be:	4b 01       	movw	r8, r22
    17c0:	5c 01       	movw	r10, r24
    17c2:	24 c0       	rjmp	.+72     	; 0x180c <getNewMoonDay+0x688>
		} else {
		deltat= -0.000278 + 0.000265*T + 0.000262*T2;
    17c4:	23 eb       	ldi	r18, 0xB3	; 179
    17c6:	3f ee       	ldi	r19, 0xEF	; 239
    17c8:	4a e8       	ldi	r20, 0x8A	; 138
    17ca:	59 e3       	ldi	r21, 0x39	; 57
    17cc:	69 81       	ldd	r22, Y+1	; 0x01
    17ce:	7a 81       	ldd	r23, Y+2	; 0x02
    17d0:	8b 81       	ldd	r24, Y+3	; 0x03
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    17d8:	27 e8       	ldi	r18, 0x87	; 135
    17da:	30 ec       	ldi	r19, 0xC0	; 192
    17dc:	41 e9       	ldi	r20, 0x91	; 145
    17de:	59 e3       	ldi	r21, 0x39	; 57
    17e0:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    17e4:	4b 01       	movw	r8, r22
    17e6:	5c 01       	movw	r10, r24
    17e8:	2b e0       	ldi	r18, 0x0B	; 11
    17ea:	3d e5       	ldi	r19, 0x5D	; 93
    17ec:	49 e8       	ldi	r20, 0x89	; 137
    17ee:	59 e3       	ldi	r21, 0x39	; 57
    17f0:	6d 81       	ldd	r22, Y+5	; 0x05
    17f2:	7e 81       	ldd	r23, Y+6	; 0x06
    17f4:	8f 81       	ldd	r24, Y+7	; 0x07
    17f6:	98 85       	ldd	r25, Y+8	; 0x08
    17f8:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    17fc:	9b 01       	movw	r18, r22
    17fe:	ac 01       	movw	r20, r24
    1800:	c5 01       	movw	r24, r10
    1802:	b4 01       	movw	r22, r8
    1804:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1808:	4b 01       	movw	r8, r22
    180a:	5c 01       	movw	r10, r24
	};
	JdNew = Jd1 + C1 - deltat;
    180c:	a7 01       	movw	r20, r14
    180e:	96 01       	movw	r18, r12
    1810:	69 89       	ldd	r22, Y+17	; 0x11
    1812:	7a 89       	ldd	r23, Y+18	; 0x12
    1814:	8b 89       	ldd	r24, Y+19	; 0x13
    1816:	9c 89       	ldd	r25, Y+20	; 0x14
    1818:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    181c:	a5 01       	movw	r20, r10
    181e:	94 01       	movw	r18, r8
    1820:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
	return floorf(JdNew + 0.5 + timeZone/24);
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e0       	ldi	r20, 0x00	; 0
    182a:	5f e3       	ldi	r21, 0x3F	; 63
    182c:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1830:	6b 01       	movw	r12, r22
    1832:	7c 01       	movw	r14, r24
    1834:	8d 89       	ldd	r24, Y+21	; 0x15
    1836:	9e 89       	ldd	r25, Y+22	; 0x16
    1838:	68 e1       	ldi	r22, 0x18	; 24
    183a:	70 e0       	ldi	r23, 0x00	; 0
    183c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    1840:	07 2e       	mov	r0, r23
    1842:	00 0c       	add	r0, r0
    1844:	88 0b       	sbc	r24, r24
    1846:	99 0b       	sbc	r25, r25
    1848:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__floatsisf>
    184c:	9b 01       	movw	r18, r22
    184e:	ac 01       	movw	r20, r24
    1850:	c7 01       	movw	r24, r14
    1852:	b6 01       	movw	r22, r12
    1854:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1858:	0e 94 e7 15 	call	0x2bce	; 0x2bce <floor>
}
    185c:	66 96       	adiw	r28, 0x16	; 22
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	df 91       	pop	r29
    186a:	cf 91       	pop	r28
    186c:	ff 90       	pop	r15
    186e:	ef 90       	pop	r14
    1870:	df 90       	pop	r13
    1872:	cf 90       	pop	r12
    1874:	bf 90       	pop	r11
    1876:	af 90       	pop	r10
    1878:	9f 90       	pop	r9
    187a:	8f 90       	pop	r8
    187c:	7f 90       	pop	r7
    187e:	6f 90       	pop	r6
    1880:	5f 90       	pop	r5
    1882:	4f 90       	pop	r4
    1884:	08 95       	ret

00001886 <getSunLongitude>:

double getSunLongitude(long double jdn, int timeZone)
{
    1886:	4f 92       	push	r4
    1888:	5f 92       	push	r5
    188a:	6f 92       	push	r6
    188c:	7f 92       	push	r7
    188e:	8f 92       	push	r8
    1890:	9f 92       	push	r9
    1892:	af 92       	push	r10
    1894:	bf 92       	push	r11
    1896:	cf 92       	push	r12
    1898:	df 92       	push	r13
    189a:	ef 92       	push	r14
    189c:	ff 92       	push	r15
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	28 97       	sbiw	r28, 0x08	; 8
    18a8:	0f b6       	in	r0, 0x3f	; 63
    18aa:	f8 94       	cli
    18ac:	de bf       	out	0x3e, r29	; 62
    18ae:	0f be       	out	0x3f, r0	; 63
    18b0:	cd bf       	out	0x3d, r28	; 61
    18b2:	5a 01       	movw	r10, r20
	long double T, T2, dr, M, L0, DL, L;
	T = (jdn - 2451545.5 - timeZone/24) / 36525; // Time in Julian centuries from 2000-01-01 12:00:00 GMT
    18b4:	26 e6       	ldi	r18, 0x66	; 102
    18b6:	31 ea       	ldi	r19, 0xA1	; 161
    18b8:	45 e1       	ldi	r20, 0x15	; 21
    18ba:	5a e4       	ldi	r21, 0x4A	; 74
    18bc:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    18c0:	6b 01       	movw	r12, r22
    18c2:	7c 01       	movw	r14, r24
    18c4:	c5 01       	movw	r24, r10
    18c6:	68 e1       	ldi	r22, 0x18	; 24
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    18ce:	07 2e       	mov	r0, r23
    18d0:	00 0c       	add	r0, r0
    18d2:	88 0b       	sbc	r24, r24
    18d4:	99 0b       	sbc	r25, r25
    18d6:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__floatsisf>
    18da:	9b 01       	movw	r18, r22
    18dc:	ac 01       	movw	r20, r24
    18de:	c7 01       	movw	r24, r14
    18e0:	b6 01       	movw	r22, r12
    18e2:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    18e6:	20 e0       	ldi	r18, 0x00	; 0
    18e8:	3d ea       	ldi	r19, 0xAD	; 173
    18ea:	4e e0       	ldi	r20, 0x0E	; 14
    18ec:	57 e4       	ldi	r21, 0x47	; 71
    18ee:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divsf3>
    18f2:	6b 01       	movw	r12, r22
    18f4:	7c 01       	movw	r14, r24
	T2 = T*T;
    18f6:	9b 01       	movw	r18, r22
    18f8:	ac 01       	movw	r20, r24
    18fa:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    18fe:	4b 01       	movw	r8, r22
    1900:	5c 01       	movw	r10, r24
	dr = M_PI/180; // degree to radian
	M = 357.52910 + 35999.05030*T - 0.0001559*T2 - 0.00000048*T*T2; // mean anomaly, degree
    1902:	2d e0       	ldi	r18, 0x0D	; 13
    1904:	3f e9       	ldi	r19, 0x9F	; 159
    1906:	4c e0       	ldi	r20, 0x0C	; 12
    1908:	57 e4       	ldi	r21, 0x47	; 71
    190a:	c7 01       	movw	r24, r14
    190c:	b6 01       	movw	r22, r12
    190e:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1912:	2a eb       	ldi	r18, 0xBA	; 186
    1914:	33 ec       	ldi	r19, 0xC3	; 195
    1916:	42 eb       	ldi	r20, 0xB2	; 178
    1918:	53 e4       	ldi	r21, 0x43	; 67
    191a:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    191e:	2b 01       	movw	r4, r22
    1920:	3c 01       	movw	r6, r24
    1922:	26 e1       	ldi	r18, 0x16	; 22
    1924:	39 e7       	ldi	r19, 0x79	; 121
    1926:	43 e2       	ldi	r20, 0x23	; 35
    1928:	59 e3       	ldi	r21, 0x39	; 57
    192a:	c5 01       	movw	r24, r10
    192c:	b4 01       	movw	r22, r8
    192e:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1932:	9b 01       	movw	r18, r22
    1934:	ac 01       	movw	r20, r24
    1936:	c3 01       	movw	r24, r6
    1938:	b2 01       	movw	r22, r4
    193a:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    193e:	2b 01       	movw	r4, r22
    1940:	3c 01       	movw	r6, r24
    1942:	29 e5       	ldi	r18, 0x59	; 89
    1944:	39 ed       	ldi	r19, 0xD9	; 217
    1946:	40 e0       	ldi	r20, 0x00	; 0
    1948:	55 e3       	ldi	r21, 0x35	; 53
    194a:	c7 01       	movw	r24, r14
    194c:	b6 01       	movw	r22, r12
    194e:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1952:	9b 01       	movw	r18, r22
    1954:	ac 01       	movw	r20, r24
    1956:	c5 01       	movw	r24, r10
    1958:	b4 01       	movw	r22, r8
    195a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    195e:	9b 01       	movw	r18, r22
    1960:	ac 01       	movw	r20, r24
    1962:	c3 01       	movw	r24, r6
    1964:	b2 01       	movw	r22, r4
    1966:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    196a:	2b 01       	movw	r4, r22
    196c:	3c 01       	movw	r6, r24
	L0 = 280.46645 + 36000.76983*T + 0.0003032*T2; // mean longitude, degree
    196e:	25 ec       	ldi	r18, 0xC5	; 197
    1970:	30 ea       	ldi	r19, 0xA0	; 160
    1972:	4c e0       	ldi	r20, 0x0C	; 12
    1974:	57 e4       	ldi	r21, 0x47	; 71
    1976:	c7 01       	movw	r24, r14
    1978:	b6 01       	movw	r22, r12
    197a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    197e:	25 eb       	ldi	r18, 0xB5	; 181
    1980:	3b e3       	ldi	r19, 0x3B	; 59
    1982:	4c e8       	ldi	r20, 0x8C	; 140
    1984:	53 e4       	ldi	r21, 0x43	; 67
    1986:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    198a:	69 83       	std	Y+1, r22	; 0x01
    198c:	7a 83       	std	Y+2, r23	; 0x02
    198e:	8b 83       	std	Y+3, r24	; 0x03
    1990:	9c 83       	std	Y+4, r25	; 0x04
    1992:	21 ed       	ldi	r18, 0xD1	; 209
    1994:	36 ef       	ldi	r19, 0xF6	; 246
    1996:	4e e9       	ldi	r20, 0x9E	; 158
    1998:	59 e3       	ldi	r21, 0x39	; 57
    199a:	c5 01       	movw	r24, r10
    199c:	b4 01       	movw	r22, r8
    199e:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    19a2:	9b 01       	movw	r18, r22
    19a4:	ac 01       	movw	r20, r24
    19a6:	69 81       	ldd	r22, Y+1	; 0x01
    19a8:	7a 81       	ldd	r23, Y+2	; 0x02
    19aa:	8b 81       	ldd	r24, Y+3	; 0x03
    19ac:	9c 81       	ldd	r25, Y+4	; 0x04
    19ae:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    19b2:	69 83       	std	Y+1, r22	; 0x01
    19b4:	7a 83       	std	Y+2, r23	; 0x02
    19b6:	8b 83       	std	Y+3, r24	; 0x03
    19b8:	9c 83       	std	Y+4, r25	; 0x04
	DL = (1.914600 - 0.004817*T - 0.000014*T2)*sinf(dr*M);
    19ba:	2d ee       	ldi	r18, 0xED	; 237
    19bc:	37 ed       	ldi	r19, 0xD7	; 215
    19be:	4d e9       	ldi	r20, 0x9D	; 157
    19c0:	5b e3       	ldi	r21, 0x3B	; 59
    19c2:	c7 01       	movw	r24, r14
    19c4:	b6 01       	movw	r22, r12
    19c6:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    19ca:	9b 01       	movw	r18, r22
    19cc:	ac 01       	movw	r20, r24
    19ce:	6d e9       	ldi	r22, 0x9D	; 157
    19d0:	71 e1       	ldi	r23, 0x11	; 17
    19d2:	85 ef       	ldi	r24, 0xF5	; 245
    19d4:	9f e3       	ldi	r25, 0x3F	; 63
    19d6:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    19da:	6d 83       	std	Y+5, r22	; 0x05
    19dc:	7e 83       	std	Y+6, r23	; 0x06
    19de:	8f 83       	std	Y+7, r24	; 0x07
    19e0:	98 87       	std	Y+8, r25	; 0x08
    19e2:	2b e8       	ldi	r18, 0x8B	; 139
    19e4:	31 ee       	ldi	r19, 0xE1	; 225
    19e6:	4a e6       	ldi	r20, 0x6A	; 106
    19e8:	57 e3       	ldi	r21, 0x37	; 55
    19ea:	c5 01       	movw	r24, r10
    19ec:	b4 01       	movw	r22, r8
    19ee:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    19f2:	9b 01       	movw	r18, r22
    19f4:	ac 01       	movw	r20, r24
    19f6:	6d 81       	ldd	r22, Y+5	; 0x05
    19f8:	7e 81       	ldd	r23, Y+6	; 0x06
    19fa:	8f 81       	ldd	r24, Y+7	; 0x07
    19fc:	98 85       	ldd	r25, Y+8	; 0x08
    19fe:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1a02:	4b 01       	movw	r8, r22
    1a04:	5c 01       	movw	r10, r24
    1a06:	25 e3       	ldi	r18, 0x35	; 53
    1a08:	3a ef       	ldi	r19, 0xFA	; 250
    1a0a:	4e e8       	ldi	r20, 0x8E	; 142
    1a0c:	5c e3       	ldi	r21, 0x3C	; 60
    1a0e:	c3 01       	movw	r24, r6
    1a10:	b2 01       	movw	r22, r4
    1a12:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1a16:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <sin>
    1a1a:	9b 01       	movw	r18, r22
    1a1c:	ac 01       	movw	r20, r24
    1a1e:	c5 01       	movw	r24, r10
    1a20:	b4 01       	movw	r22, r8
    1a22:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1a26:	4b 01       	movw	r8, r22
    1a28:	5c 01       	movw	r10, r24
	DL = DL + (0.019993 - 0.000101*T)*sinf(dr*2*M) + 0.000290*sinf(dr*3*M);
    1a2a:	26 ef       	ldi	r18, 0xF6	; 246
    1a2c:	3f ec       	ldi	r19, 0xCF	; 207
    1a2e:	43 ed       	ldi	r20, 0xD3	; 211
    1a30:	58 e3       	ldi	r21, 0x38	; 56
    1a32:	c7 01       	movw	r24, r14
    1a34:	b6 01       	movw	r22, r12
    1a36:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1a3a:	9b 01       	movw	r18, r22
    1a3c:	ac 01       	movw	r20, r24
    1a3e:	6c e5       	ldi	r22, 0x5C	; 92
    1a40:	78 ec       	ldi	r23, 0xC8	; 200
    1a42:	83 ea       	ldi	r24, 0xA3	; 163
    1a44:	9c e3       	ldi	r25, 0x3C	; 60
    1a46:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1a4a:	6b 01       	movw	r12, r22
    1a4c:	7c 01       	movw	r14, r24
    1a4e:	25 e3       	ldi	r18, 0x35	; 53
    1a50:	3a ef       	ldi	r19, 0xFA	; 250
    1a52:	4e e0       	ldi	r20, 0x0E	; 14
    1a54:	5d e3       	ldi	r21, 0x3D	; 61
    1a56:	c3 01       	movw	r24, r6
    1a58:	b2 01       	movw	r22, r4
    1a5a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1a5e:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <sin>
    1a62:	9b 01       	movw	r18, r22
    1a64:	ac 01       	movw	r20, r24
    1a66:	c7 01       	movw	r24, r14
    1a68:	b6 01       	movw	r22, r12
    1a6a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1a6e:	9b 01       	movw	r18, r22
    1a70:	ac 01       	movw	r20, r24
    1a72:	c5 01       	movw	r24, r10
    1a74:	b4 01       	movw	r22, r8
    1a76:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1a7a:	6b 01       	movw	r12, r22
    1a7c:	7c 01       	movw	r14, r24
    1a7e:	20 e5       	ldi	r18, 0x50	; 80
    1a80:	37 e7       	ldi	r19, 0x77	; 119
    1a82:	46 e5       	ldi	r20, 0x56	; 86
    1a84:	5d e3       	ldi	r21, 0x3D	; 61
    1a86:	c3 01       	movw	r24, r6
    1a88:	b2 01       	movw	r22, r4
    1a8a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1a8e:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <sin>
    1a92:	24 e2       	ldi	r18, 0x24	; 36
    1a94:	3b e0       	ldi	r19, 0x0B	; 11
    1a96:	48 e9       	ldi	r20, 0x98	; 152
    1a98:	59 e3       	ldi	r21, 0x39	; 57
    1a9a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1a9e:	9b 01       	movw	r18, r22
    1aa0:	ac 01       	movw	r20, r24
    1aa2:	c7 01       	movw	r24, r14
    1aa4:	b6 01       	movw	r22, r12
    1aa6:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1aaa:	9b 01       	movw	r18, r22
    1aac:	ac 01       	movw	r20, r24
	L = L0 + DL; // true longitude, degree
    1aae:	69 81       	ldd	r22, Y+1	; 0x01
    1ab0:	7a 81       	ldd	r23, Y+2	; 0x02
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
	L = L*dr;
    1aba:	25 e3       	ldi	r18, 0x35	; 53
    1abc:	3a ef       	ldi	r19, 0xFA	; 250
    1abe:	4e e8       	ldi	r20, 0x8E	; 142
    1ac0:	5c e3       	ldi	r21, 0x3C	; 60
    1ac2:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1ac6:	6b 01       	movw	r12, r22
    1ac8:	7c 01       	movw	r14, r24
	L = L - M_PI*2*(floorf(L/(M_PI*2))); // Normalize to (0, 2*PI)
    1aca:	2b ed       	ldi	r18, 0xDB	; 219
    1acc:	3f e0       	ldi	r19, 0x0F	; 15
    1ace:	49 ec       	ldi	r20, 0xC9	; 201
    1ad0:	50 e4       	ldi	r21, 0x40	; 64
    1ad2:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divsf3>
    1ad6:	0e 94 e7 15 	call	0x2bce	; 0x2bce <floor>
    1ada:	2b ed       	ldi	r18, 0xDB	; 219
    1adc:	3f e0       	ldi	r19, 0x0F	; 15
    1ade:	49 ec       	ldi	r20, 0xC9	; 201
    1ae0:	50 e4       	ldi	r21, 0x40	; 64
    1ae2:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1ae6:	9b 01       	movw	r18, r22
    1ae8:	ac 01       	movw	r20, r24
    1aea:	c7 01       	movw	r24, r14
    1aec:	b6 01       	movw	r22, r12
    1aee:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
	return floorf(L / M_PI * 6);
    1af2:	2b ed       	ldi	r18, 0xDB	; 219
    1af4:	3f e0       	ldi	r19, 0x0F	; 15
    1af6:	49 e4       	ldi	r20, 0x49	; 73
    1af8:	50 e4       	ldi	r21, 0x40	; 64
    1afa:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divsf3>
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 ec       	ldi	r20, 0xC0	; 192
    1b04:	50 e4       	ldi	r21, 0x40	; 64
    1b06:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    1b0a:	0e 94 e7 15 	call	0x2bce	; 0x2bce <floor>
}
    1b0e:	28 96       	adiw	r28, 0x08	; 8
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	df 91       	pop	r29
    1b1c:	cf 91       	pop	r28
    1b1e:	ff 90       	pop	r15
    1b20:	ef 90       	pop	r14
    1b22:	df 90       	pop	r13
    1b24:	cf 90       	pop	r12
    1b26:	bf 90       	pop	r11
    1b28:	af 90       	pop	r10
    1b2a:	9f 90       	pop	r9
    1b2c:	8f 90       	pop	r8
    1b2e:	7f 90       	pop	r7
    1b30:	6f 90       	pop	r6
    1b32:	5f 90       	pop	r5
    1b34:	4f 90       	pop	r4
    1b36:	08 95       	ret

00001b38 <getLunarMonth11>:

double getLunarMonth11(uint16_t yy, int timeZone)
{
    1b38:	8f 92       	push	r8
    1b3a:	9f 92       	push	r9
    1b3c:	af 92       	push	r10
    1b3e:	bf 92       	push	r11
    1b40:	cf 92       	push	r12
    1b42:	df 92       	push	r13
    1b44:	ef 92       	push	r14
    1b46:	ff 92       	push	r15
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	eb 01       	movw	r28, r22
	long double k, off, nm, sunLong;
	off = jdFromDate(31, 12, yy) - 2415021;
    1b4e:	ac 01       	movw	r20, r24
    1b50:	6c e0       	ldi	r22, 0x0C	; 12
    1b52:	8f e1       	ldi	r24, 0x1F	; 31
    1b54:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <jdFromDate>
    1b58:	24 eb       	ldi	r18, 0xB4	; 180
    1b5a:	36 e6       	ldi	r19, 0x66	; 102
    1b5c:	43 e1       	ldi	r20, 0x13	; 19
    1b5e:	5a e4       	ldi	r21, 0x4A	; 74
    1b60:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
	k = floorf(off / 29.530588853);
    1b64:	25 ea       	ldi	r18, 0xA5	; 165
    1b66:	3e e3       	ldi	r19, 0x3E	; 62
    1b68:	4c ee       	ldi	r20, 0xEC	; 236
    1b6a:	51 e4       	ldi	r21, 0x41	; 65
    1b6c:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divsf3>
    1b70:	0e 94 e7 15 	call	0x2bce	; 0x2bce <floor>
    1b74:	4b 01       	movw	r8, r22
    1b76:	5c 01       	movw	r10, r24
	nm = getNewMoonDay(k, timeZone);
    1b78:	ae 01       	movw	r20, r28
    1b7a:	0e 94 c2 08 	call	0x1184	; 0x1184 <getNewMoonDay>
    1b7e:	6b 01       	movw	r12, r22
    1b80:	7c 01       	movw	r14, r24
	sunLong = getSunLongitude(nm, timeZone); // sun longitude at local midnight
    1b82:	ae 01       	movw	r20, r28
    1b84:	0e 94 43 0c 	call	0x1886	; 0x1886 <getSunLongitude>
	if (sunLong >= 9) {
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	40 e1       	ldi	r20, 0x10	; 16
    1b8e:	51 e4       	ldi	r21, 0x41	; 65
    1b90:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__gesf2>
    1b94:	88 23       	and	r24, r24
    1b96:	6c f0       	brlt	.+26     	; 0x1bb2 <getLunarMonth11+0x7a>
		nm = getNewMoonDay(k-1, timeZone);
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e8       	ldi	r20, 0x80	; 128
    1b9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ba0:	c5 01       	movw	r24, r10
    1ba2:	b4 01       	movw	r22, r8
    1ba4:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1ba8:	ae 01       	movw	r20, r28
    1baa:	0e 94 c2 08 	call	0x1184	; 0x1184 <getNewMoonDay>
    1bae:	6b 01       	movw	r12, r22
    1bb0:	7c 01       	movw	r14, r24
	}
	return nm;
}
    1bb2:	c7 01       	movw	r24, r14
    1bb4:	b6 01       	movw	r22, r12
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	df 90       	pop	r13
    1bc0:	cf 90       	pop	r12
    1bc2:	bf 90       	pop	r11
    1bc4:	af 90       	pop	r10
    1bc6:	9f 90       	pop	r9
    1bc8:	8f 90       	pop	r8
    1bca:	08 95       	ret

00001bcc <getLeapMonthOffset>:

double getLeapMonthOffset(long double a11, int timeZone)
{
    1bcc:	2f 92       	push	r2
    1bce:	3f 92       	push	r3
    1bd0:	4f 92       	push	r4
    1bd2:	5f 92       	push	r5
    1bd4:	6f 92       	push	r6
    1bd6:	7f 92       	push	r7
    1bd8:	8f 92       	push	r8
    1bda:	9f 92       	push	r9
    1bdc:	af 92       	push	r10
    1bde:	bf 92       	push	r11
    1be0:	cf 92       	push	r12
    1be2:	df 92       	push	r13
    1be4:	ef 92       	push	r14
    1be6:	ff 92       	push	r15
    1be8:	0f 93       	push	r16
    1bea:	1f 93       	push	r17
    1bec:	cf 93       	push	r28
    1bee:	df 93       	push	r29
    1bf0:	ea 01       	movw	r28, r20
	long double k, last, arc, i;
	k = floorf((a11 - 2415021.076998695) / 29.530588853 + 0.5);
    1bf2:	24 eb       	ldi	r18, 0xB4	; 180
    1bf4:	36 e6       	ldi	r19, 0x66	; 102
    1bf6:	43 e1       	ldi	r20, 0x13	; 19
    1bf8:	5a e4       	ldi	r21, 0x4A	; 74
    1bfa:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1bfe:	25 ea       	ldi	r18, 0xA5	; 165
    1c00:	3e e3       	ldi	r19, 0x3E	; 62
    1c02:	4c ee       	ldi	r20, 0xEC	; 236
    1c04:	51 e4       	ldi	r21, 0x41	; 65
    1c06:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divsf3>
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 e0       	ldi	r20, 0x00	; 0
    1c10:	5f e3       	ldi	r21, 0x3F	; 63
    1c12:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1c16:	0e 94 e7 15 	call	0x2bce	; 0x2bce <floor>
    1c1a:	4b 01       	movw	r8, r22
    1c1c:	5c 01       	movw	r10, r24
	last = 0;
	i = 1; // We start with the month following lunar month 11
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e8       	ldi	r20, 0x80	; 128
    1c24:	5f e3       	ldi	r21, 0x3F	; 63
    1c26:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1c2a:	ae 01       	movw	r20, r28
    1c2c:	0e 94 c2 08 	call	0x1184	; 0x1184 <getNewMoonDay>
    1c30:	ae 01       	movw	r20, r28
    1c32:	0e 94 43 0c 	call	0x1886	; 0x1886 <getSunLongitude>
    1c36:	56 2e       	mov	r5, r22
    1c38:	47 2e       	mov	r4, r23
    1c3a:	38 2e       	mov	r3, r24
    1c3c:	29 2e       	mov	r2, r25
double getLeapMonthOffset(long double a11, int timeZone)
{
	long double k, last, arc, i;
	k = floorf((a11 - 2415021.076998695) / 29.530588853 + 0.5);
	last = 0;
	i = 1; // We start with the month following lunar month 11
    1c3e:	0f 2e       	mov	r0, r31
    1c40:	c1 2c       	mov	r12, r1
    1c42:	d1 2c       	mov	r13, r1
    1c44:	f0 e8       	ldi	r31, 0x80	; 128
    1c46:	ef 2e       	mov	r14, r31
    1c48:	ff e3       	ldi	r31, 0x3F	; 63
    1c4a:	ff 2e       	mov	r15, r31
    1c4c:	f0 2d       	mov	r31, r0
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
	do {
		last = arc;
		i++;
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	40 e8       	ldi	r20, 0x80	; 128
    1c54:	5f e3       	ldi	r21, 0x3F	; 63
    1c56:	c7 01       	movw	r24, r14
    1c58:	b6 01       	movw	r22, r12
    1c5a:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1c5e:	6b 01       	movw	r12, r22
    1c60:	7c 01       	movw	r14, r24
		arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    1c62:	9b 01       	movw	r18, r22
    1c64:	ac 01       	movw	r20, r24
    1c66:	c5 01       	movw	r24, r10
    1c68:	b4 01       	movw	r22, r8
    1c6a:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1c6e:	ae 01       	movw	r20, r28
    1c70:	0e 94 c2 08 	call	0x1184	; 0x1184 <getNewMoonDay>
    1c74:	ae 01       	movw	r20, r28
    1c76:	0e 94 43 0c 	call	0x1886	; 0x1886 <getSunLongitude>
    1c7a:	16 2f       	mov	r17, r22
    1c7c:	07 2f       	mov	r16, r23
    1c7e:	78 2e       	mov	r7, r24
    1c80:	69 2e       	mov	r6, r25
	} while (arc != last && i < 14);
    1c82:	26 2f       	mov	r18, r22
    1c84:	37 2f       	mov	r19, r23
    1c86:	48 2f       	mov	r20, r24
    1c88:	59 2f       	mov	r21, r25
    1c8a:	65 2d       	mov	r22, r5
    1c8c:	74 2d       	mov	r23, r4
    1c8e:	83 2d       	mov	r24, r3
    1c90:	92 2d       	mov	r25, r2
    1c92:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__cmpsf2>
    1c96:	88 23       	and	r24, r24
    1c98:	71 f0       	breq	.+28     	; 0x1cb6 <getLeapMonthOffset+0xea>
	i = 1; // We start with the month following lunar month 11
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
	do {
		last = arc;
		i++;
		arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    1c9a:	51 2e       	mov	r5, r17
    1c9c:	40 2e       	mov	r4, r16
    1c9e:	37 2c       	mov	r3, r7
    1ca0:	26 2c       	mov	r2, r6
	} while (arc != last && i < 14);
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e6       	ldi	r20, 0x60	; 96
    1ca8:	51 e4       	ldi	r21, 0x41	; 65
    1caa:	c7 01       	movw	r24, r14
    1cac:	b6 01       	movw	r22, r12
    1cae:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__cmpsf2>
    1cb2:	88 23       	and	r24, r24
    1cb4:	64 f2       	brlt	.-104    	; 0x1c4e <getLeapMonthOffset+0x82>
	return i-1;
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e8       	ldi	r20, 0x80	; 128
    1cbc:	5f e3       	ldi	r21, 0x3F	; 63
    1cbe:	c7 01       	movw	r24, r14
    1cc0:	b6 01       	movw	r22, r12
    1cc2:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
}
    1cc6:	df 91       	pop	r29
    1cc8:	cf 91       	pop	r28
    1cca:	1f 91       	pop	r17
    1ccc:	0f 91       	pop	r16
    1cce:	ff 90       	pop	r15
    1cd0:	ef 90       	pop	r14
    1cd2:	df 90       	pop	r13
    1cd4:	cf 90       	pop	r12
    1cd6:	bf 90       	pop	r11
    1cd8:	af 90       	pop	r10
    1cda:	9f 90       	pop	r9
    1cdc:	8f 90       	pop	r8
    1cde:	7f 90       	pop	r7
    1ce0:	6f 90       	pop	r6
    1ce2:	5f 90       	pop	r5
    1ce4:	4f 90       	pop	r4
    1ce6:	3f 90       	pop	r3
    1ce8:	2f 90       	pop	r2
    1cea:	08 95       	ret

00001cec <convertSolar2Lunar>:

double convertSolar2Lunar(uint8_t dd, uint8_t mm, uint16_t yy, int timeZone)
{
    1cec:	2f 92       	push	r2
    1cee:	3f 92       	push	r3
    1cf0:	4f 92       	push	r4
    1cf2:	5f 92       	push	r5
    1cf4:	6f 92       	push	r6
    1cf6:	7f 92       	push	r7
    1cf8:	8f 92       	push	r8
    1cfa:	9f 92       	push	r9
    1cfc:	af 92       	push	r10
    1cfe:	bf 92       	push	r11
    1d00:	cf 92       	push	r12
    1d02:	df 92       	push	r13
    1d04:	ef 92       	push	r14
    1d06:	ff 92       	push	r15
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	ea 01       	movw	r28, r20
    1d12:	19 01       	movw	r2, r18
	long double k, dayNumber, monthStart, a11, b11, diff, leapMonthDiff;
	dayNumber = jdFromDate(dd, mm, yy);
    1d14:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <jdFromDate>
    1d18:	4b 01       	movw	r8, r22
    1d1a:	5c 01       	movw	r10, r24
	k = floorf((dayNumber - 2415021.076998695) / 29.530588853);
    1d1c:	24 eb       	ldi	r18, 0xB4	; 180
    1d1e:	36 e6       	ldi	r19, 0x66	; 102
    1d20:	43 e1       	ldi	r20, 0x13	; 19
    1d22:	5a e4       	ldi	r21, 0x4A	; 74
    1d24:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1d28:	25 ea       	ldi	r18, 0xA5	; 165
    1d2a:	3e e3       	ldi	r19, 0x3E	; 62
    1d2c:	4c ee       	ldi	r20, 0xEC	; 236
    1d2e:	51 e4       	ldi	r21, 0x41	; 65
    1d30:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divsf3>
    1d34:	0e 94 e7 15 	call	0x2bce	; 0x2bce <floor>
    1d38:	2b 01       	movw	r4, r22
    1d3a:	3c 01       	movw	r6, r24
	monthStart = getNewMoonDay(k+1, timeZone);
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e8       	ldi	r20, 0x80	; 128
    1d42:	5f e3       	ldi	r21, 0x3F	; 63
    1d44:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1d48:	a1 01       	movw	r20, r2
    1d4a:	0e 94 c2 08 	call	0x1184	; 0x1184 <getNewMoonDay>
    1d4e:	6b 01       	movw	r12, r22
    1d50:	7c 01       	movw	r14, r24
	if (monthStart > dayNumber) {
    1d52:	9b 01       	movw	r18, r22
    1d54:	ac 01       	movw	r20, r24
    1d56:	c5 01       	movw	r24, r10
    1d58:	b4 01       	movw	r22, r8
    1d5a:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__cmpsf2>
    1d5e:	88 23       	and	r24, r24
    1d60:	3c f4       	brge	.+14     	; 0x1d70 <convertSolar2Lunar+0x84>
		monthStart = getNewMoonDay(k, timeZone);
    1d62:	a1 01       	movw	r20, r2
    1d64:	c3 01       	movw	r24, r6
    1d66:	b2 01       	movw	r22, r4
    1d68:	0e 94 c2 08 	call	0x1184	; 0x1184 <getNewMoonDay>
    1d6c:	6b 01       	movw	r12, r22
    1d6e:	7c 01       	movw	r14, r24
	}
	a11 = getLunarMonth11(yy, timeZone);
    1d70:	b1 01       	movw	r22, r2
    1d72:	ce 01       	movw	r24, r28
    1d74:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <getLunarMonth11>
    1d78:	16 2f       	mov	r17, r22
    1d7a:	07 2f       	mov	r16, r23
    1d7c:	78 2e       	mov	r7, r24
    1d7e:	69 2e       	mov	r6, r25
	b11 = a11;
	if (a11 >= monthStart) {
    1d80:	26 2f       	mov	r18, r22
    1d82:	37 2f       	mov	r19, r23
    1d84:	48 2f       	mov	r20, r24
    1d86:	59 2f       	mov	r21, r25
    1d88:	c7 01       	movw	r24, r14
    1d8a:	b6 01       	movw	r22, r12
    1d8c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__cmpsf2>
    1d90:	18 16       	cp	r1, r24
    1d92:	94 f0       	brlt	.+36     	; 0x1db8 <convertSolar2Lunar+0xcc>
		lunarYear = yy;
    1d94:	d0 93 e4 00 	sts	0x00E4, r29	; 0x8000e4 <lunarYear+0x1>
    1d98:	c0 93 e3 00 	sts	0x00E3, r28	; 0x8000e3 <lunarYear>
		a11 = getLunarMonth11(yy-1, timeZone);
    1d9c:	b1 01       	movw	r22, r2
    1d9e:	ce 01       	movw	r24, r28
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <getLunarMonth11>
	monthStart = getNewMoonDay(k+1, timeZone);
	if (monthStart > dayNumber) {
		monthStart = getNewMoonDay(k, timeZone);
	}
	a11 = getLunarMonth11(yy, timeZone);
	b11 = a11;
    1da6:	c1 2f       	mov	r28, r17
    1da8:	d0 2f       	mov	r29, r16
    1daa:	57 2c       	mov	r5, r7
    1dac:	46 2c       	mov	r4, r6
	if (a11 >= monthStart) {
		lunarYear = yy;
		a11 = getLunarMonth11(yy-1, timeZone);
    1dae:	16 2f       	mov	r17, r22
    1db0:	07 2f       	mov	r16, r23
    1db2:	78 2e       	mov	r7, r24
    1db4:	69 2e       	mov	r6, r25
    1db6:	0d c0       	rjmp	.+26     	; 0x1dd2 <convertSolar2Lunar+0xe6>
		} else {
		lunarYear = yy+1;
    1db8:	ce 01       	movw	r24, r28
    1dba:	01 96       	adiw	r24, 0x01	; 1
    1dbc:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <lunarYear+0x1>
    1dc0:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <lunarYear>
		b11 = getLunarMonth11(yy+1, timeZone);
    1dc4:	b1 01       	movw	r22, r2
    1dc6:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <getLunarMonth11>
    1dca:	c6 2f       	mov	r28, r22
    1dcc:	d7 2f       	mov	r29, r23
    1dce:	58 2e       	mov	r5, r24
    1dd0:	49 2e       	mov	r4, r25
	}
	lunarDate = dayNumber-monthStart+1;
    1dd2:	a7 01       	movw	r20, r14
    1dd4:	96 01       	movw	r18, r12
    1dd6:	c5 01       	movw	r24, r10
    1dd8:	b4 01       	movw	r22, r8
    1dda:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e8       	ldi	r20, 0x80	; 128
    1de4:	5f e3       	ldi	r21, 0x3F	; 63
    1de6:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1dea:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__fixsfsi>
    1dee:	70 93 d4 00 	sts	0x00D4, r23	; 0x8000d4 <lunarDate+0x1>
    1df2:	60 93 d3 00 	sts	0x00D3, r22	; 0x8000d3 <lunarDate>
	diff = floorf((monthStart - a11)/29);
    1df6:	21 2f       	mov	r18, r17
    1df8:	30 2f       	mov	r19, r16
    1dfa:	47 2d       	mov	r20, r7
    1dfc:	56 2d       	mov	r21, r6
    1dfe:	c7 01       	movw	r24, r14
    1e00:	b6 01       	movw	r22, r12
    1e02:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1e06:	20 e0       	ldi	r18, 0x00	; 0
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	48 ee       	ldi	r20, 0xE8	; 232
    1e0c:	51 e4       	ldi	r21, 0x41	; 65
    1e0e:	0e 94 02 15 	call	0x2a04	; 0x2a04 <__divsf3>
    1e12:	0e 94 e7 15 	call	0x2bce	; 0x2bce <floor>
    1e16:	6b 01       	movw	r12, r22
    1e18:	7c 01       	movw	r14, r24
	lunarMonth = diff+11;
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	40 e3       	ldi	r20, 0x30	; 48
    1e20:	51 e4       	ldi	r21, 0x41	; 65
    1e22:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1e26:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__fixsfsi>
    1e2a:	70 93 d6 00 	sts	0x00D6, r23	; 0x8000d6 <lunarMonth+0x1>
    1e2e:	60 93 d5 00 	sts	0x00D5, r22	; 0x8000d5 <lunarMonth>
	if (b11 - a11 > 365) {
    1e32:	21 2f       	mov	r18, r17
    1e34:	30 2f       	mov	r19, r16
    1e36:	47 2d       	mov	r20, r7
    1e38:	56 2d       	mov	r21, r6
    1e3a:	6c 2f       	mov	r22, r28
    1e3c:	7d 2f       	mov	r23, r29
    1e3e:	85 2d       	mov	r24, r5
    1e40:	94 2d       	mov	r25, r4
    1e42:	0e 94 90 14 	call	0x2920	; 0x2920 <__subsf3>
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e8       	ldi	r19, 0x80	; 128
    1e4a:	46 eb       	ldi	r20, 0xB6	; 182
    1e4c:	53 e4       	ldi	r21, 0x43	; 67
    1e4e:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__gesf2>
    1e52:	18 16       	cp	r1, r24
    1e54:	ec f4       	brge	.+58     	; 0x1e90 <convertSolar2Lunar+0x1a4>
		leapMonthDiff = getLeapMonthOffset(a11, timeZone);
    1e56:	a1 01       	movw	r20, r2
    1e58:	61 2f       	mov	r22, r17
    1e5a:	70 2f       	mov	r23, r16
    1e5c:	87 2d       	mov	r24, r7
    1e5e:	96 2d       	mov	r25, r6
    1e60:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <getLeapMonthOffset>
    1e64:	9b 01       	movw	r18, r22
    1e66:	ac 01       	movw	r20, r24
		if (diff >= leapMonthDiff) {
    1e68:	c7 01       	movw	r24, r14
    1e6a:	b6 01       	movw	r22, r12
    1e6c:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <__gesf2>
    1e70:	88 23       	and	r24, r24
    1e72:	74 f0       	brlt	.+28     	; 0x1e90 <convertSolar2Lunar+0x1a4>
			lunarMonth = diff + 10;
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e2       	ldi	r20, 0x20	; 32
    1e7a:	51 e4       	ldi	r21, 0x41	; 65
    1e7c:	c7 01       	movw	r24, r14
    1e7e:	b6 01       	movw	r22, r12
    1e80:	0e 94 91 14 	call	0x2922	; 0x2922 <__addsf3>
    1e84:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <__fixsfsi>
    1e88:	70 93 d6 00 	sts	0x00D6, r23	; 0x8000d6 <lunarMonth+0x1>
    1e8c:	60 93 d5 00 	sts	0x00D5, r22	; 0x8000d5 <lunarMonth>
// 			if (diff == leapMonthDiff) {
// 				lunarLeap = 1;
// 			}
		}
	}
	if (lunarMonth > 12) {
    1e90:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <lunarMonth>
    1e94:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <lunarMonth+0x1>
    1e98:	0d 97       	sbiw	r24, 0x0d	; 13
    1e9a:	4c f0       	brlt	.+18     	; 0x1eae <convertSolar2Lunar+0x1c2>
		lunarMonth = lunarMonth - 12;
    1e9c:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <lunarMonth>
    1ea0:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <lunarMonth+0x1>
    1ea4:	0c 97       	sbiw	r24, 0x0c	; 12
    1ea6:	90 93 d6 00 	sts	0x00D6, r25	; 0x8000d6 <lunarMonth+0x1>
    1eaa:	80 93 d5 00 	sts	0x00D5, r24	; 0x8000d5 <lunarMonth>
	}
	if (lunarMonth >= 11 && diff < 4) {
    1eae:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <lunarMonth>
    1eb2:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <lunarMonth+0x1>
    1eb6:	0b 97       	sbiw	r24, 0x0b	; 11
    1eb8:	9c f0       	brlt	.+38     	; 0x1ee0 <convertSolar2Lunar+0x1f4>
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	40 e8       	ldi	r20, 0x80	; 128
    1ec0:	50 e4       	ldi	r21, 0x40	; 64
    1ec2:	c7 01       	movw	r24, r14
    1ec4:	b6 01       	movw	r22, r12
    1ec6:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__cmpsf2>
    1eca:	88 23       	and	r24, r24
    1ecc:	4c f4       	brge	.+18     	; 0x1ee0 <convertSolar2Lunar+0x1f4>
		lunarYear -= 1;
    1ece:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <lunarYear>
    1ed2:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <lunarYear+0x1>
    1ed6:	01 97       	sbiw	r24, 0x01	; 1
    1ed8:	90 93 e4 00 	sts	0x00E4, r25	; 0x8000e4 <lunarYear+0x1>
    1edc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <lunarYear>
	}
}
    1ee0:	df 91       	pop	r29
    1ee2:	cf 91       	pop	r28
    1ee4:	1f 91       	pop	r17
    1ee6:	0f 91       	pop	r16
    1ee8:	ff 90       	pop	r15
    1eea:	ef 90       	pop	r14
    1eec:	df 90       	pop	r13
    1eee:	cf 90       	pop	r12
    1ef0:	bf 90       	pop	r11
    1ef2:	af 90       	pop	r10
    1ef4:	9f 90       	pop	r9
    1ef6:	8f 90       	pop	r8
    1ef8:	7f 90       	pop	r7
    1efa:	6f 90       	pop	r6
    1efc:	5f 90       	pop	r5
    1efe:	4f 90       	pop	r4
    1f00:	3f 90       	pop	r3
    1f02:	2f 90       	pop	r2
    1f04:	08 95       	ret

00001f06 <spiSendByte>:
char digitsInUse = 8;

void spiSendByte (char databyte)
{
	// Copy data into the SPI data register
	SPDR = databyte;
    1f06:	8f b9       	out	0x0f, r24	; 15
	// Wait until transfer is complete
	while (!(SPSR & (1 << SPIF)));
    1f08:	77 9b       	sbis	0x0e, 7	; 14
    1f0a:	fe cf       	rjmp	.-4      	; 0x1f08 <spiSendByte+0x2>
}
    1f0c:	08 95       	ret

00001f0e <MAX7219_writeData>:

void MAX7219_writeData(uint8_t data_register, uint8_t data)
{
    1f0e:	cf 93       	push	r28
    1f10:	c6 2f       	mov	r28, r22
	MAX7219_LOAD0;
    1f12:	98 b3       	in	r25, 0x18	; 24
    1f14:	9f 7e       	andi	r25, 0xEF	; 239
    1f16:	98 bb       	out	0x18, r25	; 24
	// Send the register where the data will be stored
	spiSendByte(data_register);
    1f18:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <spiSendByte>
	// Send the data to be stored
	spiSendByte(data);
    1f1c:	8c 2f       	mov	r24, r28
    1f1e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <spiSendByte>
	MAX7219_LOAD1;
    1f22:	88 b3       	in	r24, 0x18	; 24
    1f24:	80 61       	ori	r24, 0x10	; 16
    1f26:	88 bb       	out	0x18, r24	; 24
}
    1f28:	cf 91       	pop	r28
    1f2a:	08 95       	ret

00001f2c <MAX7219_clearDisplay>:

void MAX7219_clearDisplay()
{
    1f2c:	cf 93       	push	r28
	char i = digitsInUse;
    1f2e:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	// Loop until 0, but don't run for zero
	do {
		// Set each display in use to blank
		MAX7219_writeData(i, MAX7219_CHAR_BLANK);
    1f32:	6f e0       	ldi	r22, 0x0F	; 15
    1f34:	8c 2f       	mov	r24, r28
    1f36:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
	} while (--i);
    1f3a:	c1 50       	subi	r28, 0x01	; 1
    1f3c:	d1 f7       	brne	.-12     	; 0x1f32 <MAX7219_clearDisplay+0x6>
}
    1f3e:	cf 91       	pop	r28
    1f40:	08 95       	ret

00001f42 <Display_7seg>:
		
		print_LCD("  ");
	}
	
}
void Display_7seg (void){
    1f42:	0f 93       	push	r16
    1f44:	1f 93       	push	r17
    1f46:	cf 93       	push	r28
    1f48:	df 93       	push	r29
	/********display time -> hh:mm:ss***************/
	
	if (SW_time_date == 0)
    1f4a:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
    1f4e:	81 11       	cpse	r24, r1
    1f50:	56 c0       	rjmp	.+172    	; 0x1ffe <Display_7seg+0xbc>
	{
		MAX7219_clearDisplay();
    1f52:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    1f56:	6f e0       	ldi	r22, 0x0F	; 15
    1f58:	70 e0       	ldi	r23, 0x00	; 0
    1f5a:	88 e0       	ldi	r24, 0x08	; 8
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    1f62:	6f e0       	ldi	r22, 0x0F	; 15
    1f64:	70 e0       	ldi	r23, 0x00	; 0
    1f66:	87 e0       	ldi	r24, 0x07	; 7
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(Second%10));
    1f6e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    1f72:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    1f76:	ca e0       	ldi	r28, 0x0A	; 10
    1f78:	d0 e0       	ldi	r29, 0x00	; 0
    1f7a:	be 01       	movw	r22, r28
    1f7c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    1f80:	bc 01       	movw	r22, r24
    1f82:	86 e0       	ldi	r24, 0x06	; 6
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(Second/10));
    1f8a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    1f8e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    1f92:	be 01       	movw	r22, r28
    1f94:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    1f98:	85 e0       	ldi	r24, 0x05	; 5
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Minute%10));
    1fa0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    1fa4:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    1fa8:	be 01       	movw	r22, r28
    1faa:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    1fae:	bc 01       	movw	r22, r24
    1fb0:	84 e0       	ldi	r24, 0x04	; 4
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Minute/10));
    1fb8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    1fbc:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    1fc0:	be 01       	movw	r22, r28
    1fc2:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    1fc6:	83 e0       	ldi	r24, 0x03	; 3
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Hour%10));
    1fce:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    1fd2:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    1fd6:	be 01       	movw	r22, r28
    1fd8:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    1fdc:	bc 01       	movw	r22, r24
    1fde:	82 e0       	ldi	r24, 0x02	; 2
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Hour/10));
    1fe6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    1fea:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    1fee:	be 01       	movw	r22, r28
    1ff0:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
    1ffc:	28 c1       	rjmp	.+592    	; 0x224e <Display_7seg+0x30c>
		
	}
	/********display date -> DD:MM:YY***************/
	else if (SW_time_date == 1)
    1ffe:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	09 f0       	breq	.+2      	; 0x2008 <Display_7seg+0xc6>
    2006:	76 c0       	rjmp	.+236    	; 0x20f4 <Display_7seg+0x1b2>
	{
		MAX7219_clearDisplay();
    2008:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
    200c:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <yyyy>
    2010:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <yyyy+0x1>
    2014:	08 ee       	ldi	r16, 0xE8	; 232
    2016:	13 e0       	ldi	r17, 0x03	; 3
    2018:	b8 01       	movw	r22, r16
    201a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    201e:	ca e0       	ldi	r28, 0x0A	; 10
    2020:	d0 e0       	ldi	r29, 0x00	; 0
    2022:	be 01       	movw	r22, r28
    2024:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2028:	bc 01       	movw	r22, r24
    202a:	88 e0       	ldi	r24, 0x08	; 8
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
    2032:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <yyyy>
    2036:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <yyyy+0x1>
    203a:	b8 01       	movw	r22, r16
    203c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2040:	be 01       	movw	r22, r28
    2042:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2046:	cb 01       	movw	r24, r22
    2048:	be 01       	movw	r22, r28
    204a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    204e:	bc 01       	movw	r22, r24
    2050:	87 e0       	ldi	r24, 0x07	; 7
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
    2058:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <yyyy>
    205c:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <yyyy+0x1>
    2060:	b8 01       	movw	r22, r16
    2062:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2066:	64 e6       	ldi	r22, 0x64	; 100
    2068:	70 e0       	ldi	r23, 0x00	; 0
    206a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    206e:	cb 01       	movw	r24, r22
    2070:	be 01       	movw	r22, r28
    2072:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2076:	bc 01       	movw	r22, r24
    2078:	86 e0       	ldi	r24, 0x06	; 6
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
    2080:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <yyyy>
    2084:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <yyyy+0x1>
    2088:	b8 01       	movw	r22, r16
    208a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    208e:	85 e0       	ldi	r24, 0x05	; 5
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    2096:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    209a:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    209e:	be 01       	movw	r22, r28
    20a0:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    20a4:	bc 01       	movw	r22, r24
    20a6:	84 e0       	ldi	r24, 0x04	; 4
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    20ae:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    20b2:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    20b6:	be 01       	movw	r22, r28
    20b8:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    20bc:	83 e0       	ldi	r24, 0x03	; 3
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    20c4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    20c8:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    20cc:	be 01       	movw	r22, r28
    20ce:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    20d2:	bc 01       	movw	r22, r24
    20d4:	82 e0       	ldi	r24, 0x02	; 2
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    20dc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    20e0:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    20e4:	be 01       	movw	r22, r28
    20e6:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
    20f2:	ad c0       	rjmp	.+346    	; 0x224e <Display_7seg+0x30c>
		
	}
	/********display AM LICH *********************/
	else if (SW_time_date==2)
    20f4:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <__data_end>
    20f8:	82 30       	cpi	r24, 0x02	; 2
    20fa:	09 f0       	breq	.+2      	; 0x20fe <Display_7seg+0x1bc>
    20fc:	76 c0       	rjmp	.+236    	; 0x21ea <Display_7seg+0x2a8>
	{
		MAX7219_clearDisplay();
    20fe:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,((lunarYear%1000)%10));
    2102:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <lunarYear>
    2106:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <lunarYear+0x1>
    210a:	08 ee       	ldi	r16, 0xE8	; 232
    210c:	13 e0       	ldi	r17, 0x03	; 3
    210e:	b8 01       	movw	r22, r16
    2110:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2114:	ca e0       	ldi	r28, 0x0A	; 10
    2116:	d0 e0       	ldi	r29, 0x00	; 0
    2118:	be 01       	movw	r22, r28
    211a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    211e:	bc 01       	movw	r22, r24
    2120:	88 e0       	ldi	r24, 0x08	; 8
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,(((lunarYear%1000)/10)%10));
    2128:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <lunarYear>
    212c:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <lunarYear+0x1>
    2130:	b8 01       	movw	r22, r16
    2132:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2136:	be 01       	movw	r22, r28
    2138:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    213c:	cb 01       	movw	r24, r22
    213e:	be 01       	movw	r22, r28
    2140:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2144:	bc 01       	movw	r22, r24
    2146:	87 e0       	ldi	r24, 0x07	; 7
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(((lunarYear%1000)/100)%10));
    214e:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <lunarYear>
    2152:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <lunarYear+0x1>
    2156:	b8 01       	movw	r22, r16
    2158:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    215c:	64 e6       	ldi	r22, 0x64	; 100
    215e:	70 e0       	ldi	r23, 0x00	; 0
    2160:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2164:	cb 01       	movw	r24, r22
    2166:	be 01       	movw	r22, r28
    2168:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    216c:	bc 01       	movw	r22, r24
    216e:	86 e0       	ldi	r24, 0x06	; 6
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(lunarYear/1000));
    2176:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <lunarYear>
    217a:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <lunarYear+0x1>
    217e:	b8 01       	movw	r22, r16
    2180:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2184:	85 e0       	ldi	r24, 0x05	; 5
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(lunarMonth%10));
    218c:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <lunarMonth>
    2190:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <lunarMonth+0x1>
    2194:	be 01       	movw	r22, r28
    2196:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    219a:	bc 01       	movw	r22, r24
    219c:	84 e0       	ldi	r24, 0x04	; 4
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(lunarMonth/10));
    21a4:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <lunarMonth>
    21a8:	90 91 d6 00 	lds	r25, 0x00D6	; 0x8000d6 <lunarMonth+0x1>
    21ac:	be 01       	movw	r22, r28
    21ae:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    21b2:	83 e0       	ldi	r24, 0x03	; 3
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(lunarDate%10));
    21ba:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <lunarDate>
    21be:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <lunarDate+0x1>
    21c2:	be 01       	movw	r22, r28
    21c4:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    21c8:	bc 01       	movw	r22, r24
    21ca:	82 e0       	ldi	r24, 0x02	; 2
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(lunarDate/10));
    21d2:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <lunarDate>
    21d6:	90 91 d4 00 	lds	r25, 0x00D4	; 0x8000d4 <lunarDate+0x1>
    21da:	be 01       	movw	r22, r28
    21dc:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    21e0:	81 e0       	ldi	r24, 0x01	; 1
    21e2:	90 e0       	ldi	r25, 0x00	; 0
    21e4:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
    21e8:	32 c0       	rjmp	.+100    	; 0x224e <Display_7seg+0x30c>
		
	}
	else
	{
		MAX7219_clearDisplay();
    21ea:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT3,(A_Minute%10));
    21ee:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <A_Minute>
    21f2:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <A_Minute+0x1>
    21f6:	ca e0       	ldi	r28, 0x0A	; 10
    21f8:	d0 e0       	ldi	r29, 0x00	; 0
    21fa:	be 01       	movw	r22, r28
    21fc:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2200:	bc 01       	movw	r22, r24
    2202:	84 e0       	ldi	r24, 0x04	; 4
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(A_Minute/10));
    220a:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <A_Minute>
    220e:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <A_Minute+0x1>
    2212:	be 01       	movw	r22, r28
    2214:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2218:	83 e0       	ldi	r24, 0x03	; 3
    221a:	90 e0       	ldi	r25, 0x00	; 0
    221c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(A_Hour%10));
    2220:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <A_Hour>
    2224:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <A_Hour+0x1>
    2228:	be 01       	movw	r22, r28
    222a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    222e:	bc 01       	movw	r22, r24
    2230:	82 e0       	ldi	r24, 0x02	; 2
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(A_Hour/10));
    2238:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <A_Hour>
    223c:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <A_Hour+0x1>
    2240:	be 01       	movw	r22, r28
    2242:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
	}

}
    224e:	df 91       	pop	r29
    2250:	cf 91       	pop	r28
    2252:	1f 91       	pop	r17
    2254:	0f 91       	pop	r16
    2256:	08 95       	ret

00002258 <Init_Timer0>:
	} while (--i);
}

void Init_Timer0(void){
	//Initialize Timer0 to 1s - overflow interrupt--------------------
    TCCR0=(1<<CS02)|(0<<CS01)|(1<<CS00);	//prescaler, clk/1024
    2258:	85 e0       	ldi	r24, 0x05	; 5
    225a:	83 bf       	out	0x33, r24	; 51
	
    TIMSK=(1<<TOIE0);						
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	89 bf       	out	0x39, r24	; 57
    sei();                      			
    2260:	78 94       	sei
    2262:	08 95       	ret

00002264 <main>:
//Main program
int main(void){	
	
	//MAX7219 init
	// SCK MOSI CS/LOAD/SS
	DDRB |= (1 << PIN_SCK) | (1 << PIN_MOSI) | (1 << PIN_SS);
    2264:	87 b3       	in	r24, 0x17	; 23
    2266:	80 6b       	ori	r24, 0xB0	; 176
    2268:	87 bb       	out	0x17, r24	; 23

	// SPI Enable, Master mode
	SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
    226a:	8d b1       	in	r24, 0x0d	; 13
    226c:	82 65       	ori	r24, 0x52	; 82
    226e:	8d b9       	out	0x0d, r24	; 13

	// Decode mode to "Font Code-B"
	MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    2270:	6f ef       	ldi	r22, 0xFF	; 255
    2272:	89 e0       	ldi	r24, 0x09	; 9
    2274:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>

	// Scan limit runs from 0.
	MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, 0x07);
    2278:	67 e0       	ldi	r22, 0x07	; 7
    227a:	8b e0       	ldi	r24, 0x0B	; 11
    227c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_INTENSITY, 0x05);
    2280:	65 e0       	ldi	r22, 0x05	; 5
    2282:	8a e0       	ldi	r24, 0x0A	; 10
    2284:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_POWER, ON);
    2288:	61 e0       	ldi	r22, 0x01	; 1
    228a:	8c e0       	ldi	r24, 0x0C	; 12
    228c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    2290:	6f ef       	ldi	r22, 0xFF	; 255
    2292:	89 e0       	ldi	r24, 0x09	; 9
    2294:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
	
	FixTime();
    2298:	0e 94 c9 03 	call	0x792	; 0x792 <FixTime>
	Init_btn();// KEY_PORT=0xF8;
    229c:	0e 94 42 04 	call	0x884	; 0x884 <Init_btn>

	//Initialize LCD-----------------------
	init_LCD();
    22a0:	0e 94 59 01 	call	0x2b2	; 0x2b2 <init_LCD>
	clr_LCD();	
    22a4:	0e 94 98 01 	call	0x330	; 0x330 <clr_LCD>
	
	move_LCD(1,1);
    22a8:	61 e0       	ldi	r22, 0x01	; 1
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
	print_LCD("Starting....");
    22b0:	85 ea       	ldi	r24, 0xA5	; 165
    22b2:	90 e0       	ldi	r25, 0x00	; 0
    22b4:	0e 94 a9 01 	call	0x352	; 0x352 <print_LCD>
	
	move_LCD(2,1);
    22b8:	61 e0       	ldi	r22, 0x01	; 1
    22ba:	82 e0       	ldi	r24, 0x02	; 2
    22bc:	0e 94 86 01 	call	0x30c	; 0x30c <move_LCD>
	print_LCD(" REAL TIME CLOCK ");
    22c0:	82 eb       	ldi	r24, 0xB2	; 178
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	0e 94 a9 01 	call	0x352	; 0x352 <print_LCD>
    22c8:	2f ef       	ldi	r18, 0xFF	; 255
    22ca:	89 e6       	ldi	r24, 0x69	; 105
    22cc:	98 e1       	ldi	r25, 0x18	; 24
    22ce:	21 50       	subi	r18, 0x01	; 1
    22d0:	80 40       	sbci	r24, 0x00	; 0
    22d2:	90 40       	sbci	r25, 0x00	; 0
    22d4:	e1 f7       	brne	.-8      	; 0x22ce <main+0x6a>
    22d6:	00 c0       	rjmp	.+0      	; 0x22d8 <main+0x74>
    22d8:	00 00       	nop
	_delay_ms(1000);
	//------------------------------------
	Init_Timer0();
    22da:	0e 94 2c 11 	call	0x2258	; 0x2258 <Init_Timer0>
	
	TWI_Init(); 
    22de:	0e 94 58 00 	call	0xb0	; 0xb0 <TWI_Init>
			
	TWI_DS1307_rblock(tData,7); 
    22e2:	67 e0       	ldi	r22, 0x07	; 7
    22e4:	8c ed       	ldi	r24, 0xDC	; 220
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	0e 94 c3 00 	call	0x186	; 0x186 <TWI_DS1307_rblock>
	
	Decode(); 	//BCD data converter function from DS1307 to DEC
    22ec:	0e 94 df 01 	call	0x3be	; 0x3be <Decode>
	Display(); 	//Print on LCD
    22f0:	0e 94 34 02 	call	0x468	; 0x468 <Display>
    22f4:	8f ec       	ldi	r24, 0xCF	; 207
    22f6:	97 e0       	ldi	r25, 0x07	; 7
    22f8:	01 97       	sbiw	r24, 0x01	; 1
    22fa:	f1 f7       	brne	.-4      	; 0x22f8 <main+0x94>
    22fc:	00 c0       	rjmp	.+0      	; 0x22fe <main+0x9a>
    22fe:	00 00       	nop
	_delay_ms(1);	
	
	//************************************************************************************
	while(1){
		Check_btn();
    2300:	0e 94 4c 04 	call	0x898	; 0x898 <Check_btn>
		yyyy=Year+2000;
    2304:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Year>
    2308:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Year+0x1>
    230c:	80 53       	subi	r24, 0x30	; 48
    230e:	98 4f       	sbci	r25, 0xF8	; 248
    2310:	90 93 d2 00 	sts	0x00D2, r25	; 0x8000d2 <yyyy+0x1>
    2314:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <yyyy>
		convertSolar2Lunar(Date, Month, yyyy, timeZone);	
    2318:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <timeZone>
    231c:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <timeZone+0x1>
    2320:	40 91 d1 00 	lds	r20, 0x00D1	; 0x8000d1 <yyyy>
    2324:	50 91 d2 00 	lds	r21, 0x00D2	; 0x8000d2 <yyyy+0x1>
    2328:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Month>
    232c:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <Month+0x1>
    2330:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    2334:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    2338:	0e 94 76 0e 	call	0x1cec	; 0x1cec <convertSolar2Lunar>
		Display_7seg();
    233c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Display_7seg>
		if (Hour == A_Hour && Minute == A_Minute && EN_alarm == true)
    2340:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <Hour>
    2344:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <Hour+0x1>
    2348:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <A_Hour>
    234c:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <A_Hour+0x1>
    2350:	28 17       	cp	r18, r24
    2352:	39 07       	cpc	r19, r25
    2354:	a9 f6       	brne	.-86     	; 0x2300 <main+0x9c>
    2356:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <Minute>
    235a:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <Minute+0x1>
    235e:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <A_Minute>
    2362:	90 91 cc 00 	lds	r25, 0x00CC	; 0x8000cc <A_Minute+0x1>
    2366:	28 17       	cp	r18, r24
    2368:	39 07       	cpc	r19, r25
    236a:	51 f6       	brne	.-108    	; 0x2300 <main+0x9c>
    236c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <EN_alarm>
    2370:	88 23       	and	r24, r24
    2372:	31 f2       	breq	.-116    	; 0x2300 <main+0x9c>
		{	
			Check_btn();
    2374:	0e 94 4c 04 	call	0x898	; 0x898 <Check_btn>
			Display_7seg();
    2378:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Display_7seg>
			BTN_PORT |= (1<<BUZ_LED);
    237c:	82 b3       	in	r24, 0x12	; 18
    237e:	80 68       	ori	r24, 0x80	; 128
    2380:	82 bb       	out	0x12, r24	; 18
    2382:	be cf       	rjmp	.-132    	; 0x2300 <main+0x9c>

00002384 <__vector_11>:
	return 0;
}

char data[5];

ISR(TIMER0_OVF_vect){ 	
    2384:	1f 92       	push	r1
    2386:	0f 92       	push	r0
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	0f 92       	push	r0
    238c:	11 24       	eor	r1, r1
    238e:	0f 93       	push	r16
    2390:	1f 93       	push	r17
    2392:	2f 93       	push	r18
    2394:	3f 93       	push	r19
    2396:	4f 93       	push	r20
    2398:	5f 93       	push	r21
    239a:	6f 93       	push	r22
    239c:	7f 93       	push	r23
    239e:	8f 93       	push	r24
    23a0:	9f 93       	push	r25
    23a2:	af 93       	push	r26
    23a4:	bf 93       	push	r27
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	ef 93       	push	r30
    23ac:	ff 93       	push	r31
	Time_count++;
    23ae:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Time_count>
    23b2:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <Time_count+0x1>
    23b6:	01 96       	adiw	r24, 0x01	; 1
    23b8:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <Time_count+0x1>
    23bc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <Time_count>
	if(Time_count>=10){ 	//1s Exactly
    23c0:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Time_count>
    23c4:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <Time_count+0x1>
    23c8:	0a 97       	sbiw	r24, 0x0a	; 10
    23ca:	58 f1       	brcs	.+86     	; 0x2422 <__vector_11+0x9e>
		                
		if(set == false && set_alarm == false){
    23cc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <set>
    23d0:	81 11       	cpse	r24, r1
    23d2:	23 c0       	rjmp	.+70     	; 0x241a <__vector_11+0x96>
    23d4:	80 91 c7 00 	lds	r24, 0x00C7	; 0x8000c7 <set_alarm>
    23d8:	81 11       	cpse	r24, r1
    23da:	1f c0       	rjmp	.+62     	; 0x241a <__vector_11+0x96>
			//Read DS1307
			TWI_DS1307_wadr(0x00); 				
    23dc:	0e 94 5e 00 	call	0xbc	; 0xbc <TWI_DS1307_wadr>
    23e0:	8f ec       	ldi	r24, 0xCF	; 207
    23e2:	97 e0       	ldi	r25, 0x07	; 7
    23e4:	01 97       	sbiw	r24, 0x01	; 1
    23e6:	f1 f7       	brne	.-4      	; 0x23e4 <__vector_11+0x60>
    23e8:	00 c0       	rjmp	.+0      	; 0x23ea <__vector_11+0x66>
    23ea:	00 00       	nop
			_delay_ms(1);		   				
			TWI_DS1307_rblock(tData,7); 
    23ec:	67 e0       	ldi	r22, 0x07	; 7
    23ee:	8c ed       	ldi	r24, 0xDC	; 220
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	0e 94 c3 00 	call	0x186	; 0x186 <TWI_DS1307_rblock>
					
			//Print result on LCD + 7Seg led		
			if(BCDToDec(tData[0]) !=Second){ 
    23f6:	80 91 dc 00 	lds	r24, 0x00DC	; 0x8000dc <tData>
    23fa:	0e 94 bc 01 	call	0x378	; 0x378 <BCDToDec>
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <Second>
    2404:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <Second+0x1>
    2408:	82 17       	cp	r24, r18
    240a:	93 07       	cpc	r25, r19
    240c:	31 f0       	breq	.+12     	; 0x241a <__vector_11+0x96>
				Decode();			
    240e:	0e 94 df 01 	call	0x3be	; 0x3be <Decode>
				Display();
    2412:	0e 94 34 02 	call	0x468	; 0x468 <Display>
				Display_7seg();
    2416:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <Display_7seg>
			} 
		}
		Time_count=0; 
    241a:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <Time_count+0x1>
    241e:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <Time_count>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==1))	//blink year
    2422:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Time_count>
    2426:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <Time_count+0x1>
    242a:	06 97       	sbiw	r24, 0x06	; 6
    242c:	08 f4       	brcc	.+2      	; 0x2430 <__vector_11+0xac>
    242e:	4e c0       	rjmp	.+156    	; 0x24cc <__vector_11+0x148>
    2430:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Time_count>
    2434:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <Time_count+0x1>
    2438:	0a 97       	sbiw	r24, 0x0a	; 10
    243a:	08 f0       	brcs	.+2      	; 0x243e <__vector_11+0xba>
    243c:	47 c0       	rjmp	.+142    	; 0x24cc <__vector_11+0x148>
    243e:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
    2442:	81 30       	cpi	r24, 0x01	; 1
    2444:	09 f0       	breq	.+2      	; 0x2448 <__vector_11+0xc4>
    2446:	42 c0       	rjmp	.+132    	; 0x24cc <__vector_11+0x148>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    2448:	6f ef       	ldi	r22, 0xFF	; 255
    244a:	89 e0       	ldi	r24, 0x09	; 9
    244c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_clearDisplay();
    2450:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    2454:	6f e0       	ldi	r22, 0x0F	; 15
    2456:	88 e0       	ldi	r24, 0x08	; 8
    2458:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    245c:	6f e0       	ldi	r22, 0x0F	; 15
    245e:	87 e0       	ldi	r24, 0x07	; 7
    2460:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    2464:	6f e0       	ldi	r22, 0x0F	; 15
    2466:	86 e0       	ldi	r24, 0x06	; 6
    2468:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    246c:	6f e0       	ldi	r22, 0x0F	; 15
    246e:	85 e0       	ldi	r24, 0x05	; 5
    2470:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    2474:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    2478:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    247c:	ca e0       	ldi	r28, 0x0A	; 10
    247e:	d0 e0       	ldi	r29, 0x00	; 0
    2480:	be 01       	movw	r22, r28
    2482:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2486:	68 2f       	mov	r22, r24
    2488:	84 e0       	ldi	r24, 0x04	; 4
    248a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    248e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    2492:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    2496:	be 01       	movw	r22, r28
    2498:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    249c:	83 e0       	ldi	r24, 0x03	; 3
    249e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    24a2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    24a6:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    24aa:	be 01       	movw	r22, r28
    24ac:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    24b0:	68 2f       	mov	r22, r24
    24b2:	82 e0       	ldi	r24, 0x02	; 2
    24b4:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    24b8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    24bc:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    24c0:	be 01       	movw	r22, r28
    24c2:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==2))	//blink month
    24cc:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Time_count>
    24d0:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <Time_count+0x1>
    24d4:	06 97       	sbiw	r24, 0x06	; 6
    24d6:	08 f4       	brcc	.+2      	; 0x24da <__vector_11+0x156>
    24d8:	70 c0       	rjmp	.+224    	; 0x25ba <__vector_11+0x236>
    24da:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Time_count>
    24de:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <Time_count+0x1>
    24e2:	0a 97       	sbiw	r24, 0x0a	; 10
    24e4:	08 f0       	brcs	.+2      	; 0x24e8 <__vector_11+0x164>
    24e6:	69 c0       	rjmp	.+210    	; 0x25ba <__vector_11+0x236>
    24e8:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
    24ec:	82 30       	cpi	r24, 0x02	; 2
    24ee:	09 f0       	breq	.+2      	; 0x24f2 <__vector_11+0x16e>
    24f0:	64 c0       	rjmp	.+200    	; 0x25ba <__vector_11+0x236>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    24f2:	6f ef       	ldi	r22, 0xFF	; 255
    24f4:	89 e0       	ldi	r24, 0x09	; 9
    24f6:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_clearDisplay();
    24fa:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
    24fe:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <yyyy>
    2502:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <yyyy+0x1>
    2506:	08 ee       	ldi	r16, 0xE8	; 232
    2508:	13 e0       	ldi	r17, 0x03	; 3
    250a:	b8 01       	movw	r22, r16
    250c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2510:	ca e0       	ldi	r28, 0x0A	; 10
    2512:	d0 e0       	ldi	r29, 0x00	; 0
    2514:	be 01       	movw	r22, r28
    2516:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    251a:	68 2f       	mov	r22, r24
    251c:	88 e0       	ldi	r24, 0x08	; 8
    251e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
    2522:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <yyyy>
    2526:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <yyyy+0x1>
    252a:	b8 01       	movw	r22, r16
    252c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2530:	be 01       	movw	r22, r28
    2532:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2536:	cb 01       	movw	r24, r22
    2538:	be 01       	movw	r22, r28
    253a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    253e:	68 2f       	mov	r22, r24
    2540:	87 e0       	ldi	r24, 0x07	; 7
    2542:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
    2546:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <yyyy>
    254a:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <yyyy+0x1>
    254e:	b8 01       	movw	r22, r16
    2550:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2554:	64 e6       	ldi	r22, 0x64	; 100
    2556:	70 e0       	ldi	r23, 0x00	; 0
    2558:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    255c:	cb 01       	movw	r24, r22
    255e:	be 01       	movw	r22, r28
    2560:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2564:	68 2f       	mov	r22, r24
    2566:	86 e0       	ldi	r24, 0x06	; 6
    2568:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
    256c:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <yyyy>
    2570:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <yyyy+0x1>
    2574:	b8 01       	movw	r22, r16
    2576:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    257a:	85 e0       	ldi	r24, 0x05	; 5
    257c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,MAX7219_CHAR_BLANK);
    2580:	6f e0       	ldi	r22, 0x0F	; 15
    2582:	84 e0       	ldi	r24, 0x04	; 4
    2584:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,MAX7219_CHAR_BLANK);
    2588:	6f e0       	ldi	r22, 0x0F	; 15
    258a:	83 e0       	ldi	r24, 0x03	; 3
    258c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    2590:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    2594:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    2598:	be 01       	movw	r22, r28
    259a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    259e:	68 2f       	mov	r22, r24
    25a0:	82 e0       	ldi	r24, 0x02	; 2
    25a2:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    25a6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    25aa:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    25ae:	be 01       	movw	r22, r28
    25b0:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==3))	//blink date
    25ba:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Time_count>
    25be:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <Time_count+0x1>
    25c2:	06 97       	sbiw	r24, 0x06	; 6
    25c4:	08 f4       	brcc	.+2      	; 0x25c8 <__vector_11+0x244>
    25c6:	70 c0       	rjmp	.+224    	; 0x26a8 <__vector_11+0x324>
    25c8:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Time_count>
    25cc:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <Time_count+0x1>
    25d0:	0a 97       	sbiw	r24, 0x0a	; 10
    25d2:	08 f0       	brcs	.+2      	; 0x25d6 <__vector_11+0x252>
    25d4:	69 c0       	rjmp	.+210    	; 0x26a8 <__vector_11+0x324>
    25d6:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
    25da:	83 30       	cpi	r24, 0x03	; 3
    25dc:	09 f0       	breq	.+2      	; 0x25e0 <__vector_11+0x25c>
    25de:	64 c0       	rjmp	.+200    	; 0x26a8 <__vector_11+0x324>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    25e0:	6f ef       	ldi	r22, 0xFF	; 255
    25e2:	89 e0       	ldi	r24, 0x09	; 9
    25e4:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_clearDisplay();
    25e8:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
    25ec:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <yyyy>
    25f0:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <yyyy+0x1>
    25f4:	08 ee       	ldi	r16, 0xE8	; 232
    25f6:	13 e0       	ldi	r17, 0x03	; 3
    25f8:	b8 01       	movw	r22, r16
    25fa:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    25fe:	ca e0       	ldi	r28, 0x0A	; 10
    2600:	d0 e0       	ldi	r29, 0x00	; 0
    2602:	be 01       	movw	r22, r28
    2604:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2608:	68 2f       	mov	r22, r24
    260a:	88 e0       	ldi	r24, 0x08	; 8
    260c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
    2610:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <yyyy>
    2614:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <yyyy+0x1>
    2618:	b8 01       	movw	r22, r16
    261a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    261e:	be 01       	movw	r22, r28
    2620:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2624:	cb 01       	movw	r24, r22
    2626:	be 01       	movw	r22, r28
    2628:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    262c:	68 2f       	mov	r22, r24
    262e:	87 e0       	ldi	r24, 0x07	; 7
    2630:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
    2634:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <yyyy>
    2638:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <yyyy+0x1>
    263c:	b8 01       	movw	r22, r16
    263e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2642:	64 e6       	ldi	r22, 0x64	; 100
    2644:	70 e0       	ldi	r23, 0x00	; 0
    2646:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    264a:	cb 01       	movw	r24, r22
    264c:	be 01       	movw	r22, r28
    264e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2652:	68 2f       	mov	r22, r24
    2654:	86 e0       	ldi	r24, 0x06	; 6
    2656:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
    265a:	80 91 d1 00 	lds	r24, 0x00D1	; 0x8000d1 <yyyy>
    265e:	90 91 d2 00 	lds	r25, 0x00D2	; 0x8000d2 <yyyy+0x1>
    2662:	b8 01       	movw	r22, r16
    2664:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2668:	85 e0       	ldi	r24, 0x05	; 5
    266a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    266e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    2672:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    2676:	be 01       	movw	r22, r28
    2678:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    267c:	68 2f       	mov	r22, r24
    267e:	84 e0       	ldi	r24, 0x04	; 4
    2680:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    2684:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    2688:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    268c:	be 01       	movw	r22, r28
    268e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2692:	83 e0       	ldi	r24, 0x03	; 3
    2694:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,MAX7219_CHAR_BLANK);
    2698:	6f e0       	ldi	r22, 0x0F	; 15
    269a:	82 e0       	ldi	r24, 0x02	; 2
    269c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,MAX7219_CHAR_BLANK);
    26a0:	6f e0       	ldi	r22, 0x0F	; 15
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==4))	//blink hour
    26a8:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Time_count>
    26ac:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <Time_count+0x1>
    26b0:	06 97       	sbiw	r24, 0x06	; 6
    26b2:	08 f4       	brcc	.+2      	; 0x26b6 <__vector_11+0x332>
    26b4:	4e c0       	rjmp	.+156    	; 0x2752 <__vector_11+0x3ce>
    26b6:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Time_count>
    26ba:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <Time_count+0x1>
    26be:	0a 97       	sbiw	r24, 0x0a	; 10
    26c0:	08 f0       	brcs	.+2      	; 0x26c4 <__vector_11+0x340>
    26c2:	47 c0       	rjmp	.+142    	; 0x2752 <__vector_11+0x3ce>
    26c4:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
    26c8:	84 30       	cpi	r24, 0x04	; 4
    26ca:	09 f0       	breq	.+2      	; 0x26ce <__vector_11+0x34a>
    26cc:	42 c0       	rjmp	.+132    	; 0x2752 <__vector_11+0x3ce>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    26ce:	6f ef       	ldi	r22, 0xFF	; 255
    26d0:	89 e0       	ldi	r24, 0x09	; 9
    26d2:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_clearDisplay();
    26d6:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    26da:	6f e0       	ldi	r22, 0x0F	; 15
    26dc:	88 e0       	ldi	r24, 0x08	; 8
    26de:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    26e2:	6f e0       	ldi	r22, 0x0F	; 15
    26e4:	87 e0       	ldi	r24, 0x07	; 7
    26e6:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(Second%10));
    26ea:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    26ee:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    26f2:	ca e0       	ldi	r28, 0x0A	; 10
    26f4:	d0 e0       	ldi	r29, 0x00	; 0
    26f6:	be 01       	movw	r22, r28
    26f8:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    26fc:	68 2f       	mov	r22, r24
    26fe:	86 e0       	ldi	r24, 0x06	; 6
    2700:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(Second/10));
    2704:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    2708:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    270c:	be 01       	movw	r22, r28
    270e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2712:	85 e0       	ldi	r24, 0x05	; 5
    2714:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Minute%10));
    2718:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    271c:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    2720:	be 01       	movw	r22, r28
    2722:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2726:	68 2f       	mov	r22, r24
    2728:	84 e0       	ldi	r24, 0x04	; 4
    272a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Minute/10));
    272e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    2732:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    2736:	be 01       	movw	r22, r28
    2738:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    273c:	83 e0       	ldi	r24, 0x03	; 3
    273e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,MAX7219_CHAR_BLANK);
    2742:	6f e0       	ldi	r22, 0x0F	; 15
    2744:	82 e0       	ldi	r24, 0x02	; 2
    2746:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,MAX7219_CHAR_BLANK);
    274a:	6f e0       	ldi	r22, 0x0F	; 15
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==5))	//blink min
    2752:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Time_count>
    2756:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <Time_count+0x1>
    275a:	06 97       	sbiw	r24, 0x06	; 6
    275c:	08 f4       	brcc	.+2      	; 0x2760 <__vector_11+0x3dc>
    275e:	4e c0       	rjmp	.+156    	; 0x27fc <__vector_11+0x478>
    2760:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Time_count>
    2764:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <Time_count+0x1>
    2768:	0a 97       	sbiw	r24, 0x0a	; 10
    276a:	08 f0       	brcs	.+2      	; 0x276e <__vector_11+0x3ea>
    276c:	47 c0       	rjmp	.+142    	; 0x27fc <__vector_11+0x478>
    276e:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
    2772:	85 30       	cpi	r24, 0x05	; 5
    2774:	09 f0       	breq	.+2      	; 0x2778 <__vector_11+0x3f4>
    2776:	42 c0       	rjmp	.+132    	; 0x27fc <__vector_11+0x478>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    2778:	6f ef       	ldi	r22, 0xFF	; 255
    277a:	89 e0       	ldi	r24, 0x09	; 9
    277c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_clearDisplay();
    2780:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    2784:	6f e0       	ldi	r22, 0x0F	; 15
    2786:	88 e0       	ldi	r24, 0x08	; 8
    2788:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    278c:	6f e0       	ldi	r22, 0x0F	; 15
    278e:	87 e0       	ldi	r24, 0x07	; 7
    2790:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(Second%10));
    2794:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    2798:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    279c:	ca e0       	ldi	r28, 0x0A	; 10
    279e:	d0 e0       	ldi	r29, 0x00	; 0
    27a0:	be 01       	movw	r22, r28
    27a2:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    27a6:	68 2f       	mov	r22, r24
    27a8:	86 e0       	ldi	r24, 0x06	; 6
    27aa:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(Second/10));
    27ae:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    27b2:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    27b6:	be 01       	movw	r22, r28
    27b8:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    27bc:	85 e0       	ldi	r24, 0x05	; 5
    27be:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,MAX7219_CHAR_BLANK);
    27c2:	6f e0       	ldi	r22, 0x0F	; 15
    27c4:	84 e0       	ldi	r24, 0x04	; 4
    27c6:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,MAX7219_CHAR_BLANK);
    27ca:	6f e0       	ldi	r22, 0x0F	; 15
    27cc:	83 e0       	ldi	r24, 0x03	; 3
    27ce:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Hour%10));
    27d2:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    27d6:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    27da:	be 01       	movw	r22, r28
    27dc:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    27e0:	68 2f       	mov	r22, r24
    27e2:	82 e0       	ldi	r24, 0x02	; 2
    27e4:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Hour/10));
    27e8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    27ec:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    27f0:	be 01       	movw	r22, r28
    27f2:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    27f6:	81 e0       	ldi	r24, 0x01	; 1
    27f8:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==6))	//blink sec
    27fc:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Time_count>
    2800:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <Time_count+0x1>
    2804:	06 97       	sbiw	r24, 0x06	; 6
    2806:	08 f4       	brcc	.+2      	; 0x280a <__vector_11+0x486>
    2808:	4e c0       	rjmp	.+156    	; 0x28a6 <__vector_11+0x522>
    280a:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <Time_count>
    280e:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <Time_count+0x1>
    2812:	0a 97       	sbiw	r24, 0x0a	; 10
    2814:	08 f0       	brcs	.+2      	; 0x2818 <__vector_11+0x494>
    2816:	47 c0       	rjmp	.+142    	; 0x28a6 <__vector_11+0x522>
    2818:	80 91 c5 00 	lds	r24, 0x00C5	; 0x8000c5 <count>
    281c:	86 30       	cpi	r24, 0x06	; 6
    281e:	09 f0       	breq	.+2      	; 0x2822 <__vector_11+0x49e>
    2820:	42 c0       	rjmp	.+132    	; 0x28a6 <__vector_11+0x522>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    2822:	6f ef       	ldi	r22, 0xFF	; 255
    2824:	89 e0       	ldi	r24, 0x09	; 9
    2826:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_clearDisplay();
    282a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    282e:	6f e0       	ldi	r22, 0x0F	; 15
    2830:	88 e0       	ldi	r24, 0x08	; 8
    2832:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    2836:	6f e0       	ldi	r22, 0x0F	; 15
    2838:	87 e0       	ldi	r24, 0x07	; 7
    283a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    283e:	6f e0       	ldi	r22, 0x0F	; 15
    2840:	86 e0       	ldi	r24, 0x06	; 6
    2842:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    2846:	6f e0       	ldi	r22, 0x0F	; 15
    2848:	85 e0       	ldi	r24, 0x05	; 5
    284a:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Minute%10));
    284e:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    2852:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    2856:	ca e0       	ldi	r28, 0x0A	; 10
    2858:	d0 e0       	ldi	r29, 0x00	; 0
    285a:	be 01       	movw	r22, r28
    285c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2860:	68 2f       	mov	r22, r24
    2862:	84 e0       	ldi	r24, 0x04	; 4
    2864:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Minute/10));
    2868:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    286c:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    2870:	be 01       	movw	r22, r28
    2872:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    2876:	83 e0       	ldi	r24, 0x03	; 3
    2878:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Hour%10));
    287c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    2880:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    2884:	be 01       	movw	r22, r28
    2886:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    288a:	68 2f       	mov	r22, r24
    288c:	82 e0       	ldi	r24, 0x02	; 2
    288e:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Hour/10));
    2892:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    2896:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    289a:	be 01       	movw	r22, r28
    289c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__divmodhi4>
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <MAX7219_writeData>
	}
}
    28a6:	ff 91       	pop	r31
    28a8:	ef 91       	pop	r30
    28aa:	df 91       	pop	r29
    28ac:	cf 91       	pop	r28
    28ae:	bf 91       	pop	r27
    28b0:	af 91       	pop	r26
    28b2:	9f 91       	pop	r25
    28b4:	8f 91       	pop	r24
    28b6:	7f 91       	pop	r23
    28b8:	6f 91       	pop	r22
    28ba:	5f 91       	pop	r21
    28bc:	4f 91       	pop	r20
    28be:	3f 91       	pop	r19
    28c0:	2f 91       	pop	r18
    28c2:	1f 91       	pop	r17
    28c4:	0f 91       	pop	r16
    28c6:	0f 90       	pop	r0
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	0f 90       	pop	r0
    28cc:	1f 90       	pop	r1
    28ce:	18 95       	reti

000028d0 <__divmodhi4>:
    28d0:	97 fb       	bst	r25, 7
    28d2:	07 2e       	mov	r0, r23
    28d4:	16 f4       	brtc	.+4      	; 0x28da <__divmodhi4+0xa>
    28d6:	00 94       	com	r0
    28d8:	07 d0       	rcall	.+14     	; 0x28e8 <__divmodhi4_neg1>
    28da:	77 fd       	sbrc	r23, 7
    28dc:	09 d0       	rcall	.+18     	; 0x28f0 <__divmodhi4_neg2>
    28de:	0e 94 7c 14 	call	0x28f8	; 0x28f8 <__udivmodhi4>
    28e2:	07 fc       	sbrc	r0, 7
    28e4:	05 d0       	rcall	.+10     	; 0x28f0 <__divmodhi4_neg2>
    28e6:	3e f4       	brtc	.+14     	; 0x28f6 <__divmodhi4_exit>

000028e8 <__divmodhi4_neg1>:
    28e8:	90 95       	com	r25
    28ea:	81 95       	neg	r24
    28ec:	9f 4f       	sbci	r25, 0xFF	; 255
    28ee:	08 95       	ret

000028f0 <__divmodhi4_neg2>:
    28f0:	70 95       	com	r23
    28f2:	61 95       	neg	r22
    28f4:	7f 4f       	sbci	r23, 0xFF	; 255

000028f6 <__divmodhi4_exit>:
    28f6:	08 95       	ret

000028f8 <__udivmodhi4>:
    28f8:	aa 1b       	sub	r26, r26
    28fa:	bb 1b       	sub	r27, r27
    28fc:	51 e1       	ldi	r21, 0x11	; 17
    28fe:	07 c0       	rjmp	.+14     	; 0x290e <__udivmodhi4_ep>

00002900 <__udivmodhi4_loop>:
    2900:	aa 1f       	adc	r26, r26
    2902:	bb 1f       	adc	r27, r27
    2904:	a6 17       	cp	r26, r22
    2906:	b7 07       	cpc	r27, r23
    2908:	10 f0       	brcs	.+4      	; 0x290e <__udivmodhi4_ep>
    290a:	a6 1b       	sub	r26, r22
    290c:	b7 0b       	sbc	r27, r23

0000290e <__udivmodhi4_ep>:
    290e:	88 1f       	adc	r24, r24
    2910:	99 1f       	adc	r25, r25
    2912:	5a 95       	dec	r21
    2914:	a9 f7       	brne	.-22     	; 0x2900 <__udivmodhi4_loop>
    2916:	80 95       	com	r24
    2918:	90 95       	com	r25
    291a:	bc 01       	movw	r22, r24
    291c:	cd 01       	movw	r24, r26
    291e:	08 95       	ret

00002920 <__subsf3>:
    2920:	50 58       	subi	r21, 0x80	; 128

00002922 <__addsf3>:
    2922:	bb 27       	eor	r27, r27
    2924:	aa 27       	eor	r26, r26
    2926:	0e 94 a8 14 	call	0x2950	; 0x2950 <__addsf3x>
    292a:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__fp_round>
    292e:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__fp_pscA>
    2932:	38 f0       	brcs	.+14     	; 0x2942 <__addsf3+0x20>
    2934:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <__fp_pscB>
    2938:	20 f0       	brcs	.+8      	; 0x2942 <__addsf3+0x20>
    293a:	39 f4       	brne	.+14     	; 0x294a <__addsf3+0x28>
    293c:	9f 3f       	cpi	r25, 0xFF	; 255
    293e:	19 f4       	brne	.+6      	; 0x2946 <__addsf3+0x24>
    2940:	26 f4       	brtc	.+8      	; 0x294a <__addsf3+0x28>
    2942:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <__fp_nan>
    2946:	0e f4       	brtc	.+2      	; 0x294a <__addsf3+0x28>
    2948:	e0 95       	com	r30
    294a:	e7 fb       	bst	r30, 7
    294c:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__fp_inf>

00002950 <__addsf3x>:
    2950:	e9 2f       	mov	r30, r25
    2952:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__fp_split3>
    2956:	58 f3       	brcs	.-42     	; 0x292e <__addsf3+0xc>
    2958:	ba 17       	cp	r27, r26
    295a:	62 07       	cpc	r22, r18
    295c:	73 07       	cpc	r23, r19
    295e:	84 07       	cpc	r24, r20
    2960:	95 07       	cpc	r25, r21
    2962:	20 f0       	brcs	.+8      	; 0x296c <__addsf3x+0x1c>
    2964:	79 f4       	brne	.+30     	; 0x2984 <__addsf3x+0x34>
    2966:	a6 f5       	brtc	.+104    	; 0x29d0 <__addsf3x+0x80>
    2968:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__fp_zero>
    296c:	0e f4       	brtc	.+2      	; 0x2970 <__addsf3x+0x20>
    296e:	e0 95       	com	r30
    2970:	0b 2e       	mov	r0, r27
    2972:	ba 2f       	mov	r27, r26
    2974:	a0 2d       	mov	r26, r0
    2976:	0b 01       	movw	r0, r22
    2978:	b9 01       	movw	r22, r18
    297a:	90 01       	movw	r18, r0
    297c:	0c 01       	movw	r0, r24
    297e:	ca 01       	movw	r24, r20
    2980:	a0 01       	movw	r20, r0
    2982:	11 24       	eor	r1, r1
    2984:	ff 27       	eor	r31, r31
    2986:	59 1b       	sub	r21, r25
    2988:	99 f0       	breq	.+38     	; 0x29b0 <__addsf3x+0x60>
    298a:	59 3f       	cpi	r21, 0xF9	; 249
    298c:	50 f4       	brcc	.+20     	; 0x29a2 <__addsf3x+0x52>
    298e:	50 3e       	cpi	r21, 0xE0	; 224
    2990:	68 f1       	brcs	.+90     	; 0x29ec <__addsf3x+0x9c>
    2992:	1a 16       	cp	r1, r26
    2994:	f0 40       	sbci	r31, 0x00	; 0
    2996:	a2 2f       	mov	r26, r18
    2998:	23 2f       	mov	r18, r19
    299a:	34 2f       	mov	r19, r20
    299c:	44 27       	eor	r20, r20
    299e:	58 5f       	subi	r21, 0xF8	; 248
    29a0:	f3 cf       	rjmp	.-26     	; 0x2988 <__addsf3x+0x38>
    29a2:	46 95       	lsr	r20
    29a4:	37 95       	ror	r19
    29a6:	27 95       	ror	r18
    29a8:	a7 95       	ror	r26
    29aa:	f0 40       	sbci	r31, 0x00	; 0
    29ac:	53 95       	inc	r21
    29ae:	c9 f7       	brne	.-14     	; 0x29a2 <__addsf3x+0x52>
    29b0:	7e f4       	brtc	.+30     	; 0x29d0 <__addsf3x+0x80>
    29b2:	1f 16       	cp	r1, r31
    29b4:	ba 0b       	sbc	r27, r26
    29b6:	62 0b       	sbc	r22, r18
    29b8:	73 0b       	sbc	r23, r19
    29ba:	84 0b       	sbc	r24, r20
    29bc:	ba f0       	brmi	.+46     	; 0x29ec <__addsf3x+0x9c>
    29be:	91 50       	subi	r25, 0x01	; 1
    29c0:	a1 f0       	breq	.+40     	; 0x29ea <__addsf3x+0x9a>
    29c2:	ff 0f       	add	r31, r31
    29c4:	bb 1f       	adc	r27, r27
    29c6:	66 1f       	adc	r22, r22
    29c8:	77 1f       	adc	r23, r23
    29ca:	88 1f       	adc	r24, r24
    29cc:	c2 f7       	brpl	.-16     	; 0x29be <__addsf3x+0x6e>
    29ce:	0e c0       	rjmp	.+28     	; 0x29ec <__addsf3x+0x9c>
    29d0:	ba 0f       	add	r27, r26
    29d2:	62 1f       	adc	r22, r18
    29d4:	73 1f       	adc	r23, r19
    29d6:	84 1f       	adc	r24, r20
    29d8:	48 f4       	brcc	.+18     	; 0x29ec <__addsf3x+0x9c>
    29da:	87 95       	ror	r24
    29dc:	77 95       	ror	r23
    29de:	67 95       	ror	r22
    29e0:	b7 95       	ror	r27
    29e2:	f7 95       	ror	r31
    29e4:	9e 3f       	cpi	r25, 0xFE	; 254
    29e6:	08 f0       	brcs	.+2      	; 0x29ea <__addsf3x+0x9a>
    29e8:	b0 cf       	rjmp	.-160    	; 0x294a <__addsf3+0x28>
    29ea:	93 95       	inc	r25
    29ec:	88 0f       	add	r24, r24
    29ee:	08 f0       	brcs	.+2      	; 0x29f2 <__addsf3x+0xa2>
    29f0:	99 27       	eor	r25, r25
    29f2:	ee 0f       	add	r30, r30
    29f4:	97 95       	ror	r25
    29f6:	87 95       	ror	r24
    29f8:	08 95       	ret

000029fa <__cmpsf2>:
    29fa:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__fp_cmp>
    29fe:	08 f4       	brcc	.+2      	; 0x2a02 <__cmpsf2+0x8>
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	08 95       	ret

00002a04 <__divsf3>:
    2a04:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <__divsf3x>
    2a08:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__fp_round>
    2a0c:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <__fp_pscB>
    2a10:	58 f0       	brcs	.+22     	; 0x2a28 <__divsf3+0x24>
    2a12:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__fp_pscA>
    2a16:	40 f0       	brcs	.+16     	; 0x2a28 <__divsf3+0x24>
    2a18:	29 f4       	brne	.+10     	; 0x2a24 <__divsf3+0x20>
    2a1a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a1c:	29 f0       	breq	.+10     	; 0x2a28 <__divsf3+0x24>
    2a1e:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__fp_inf>
    2a22:	51 11       	cpse	r21, r1
    2a24:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__fp_szero>
    2a28:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <__fp_nan>

00002a2c <__divsf3x>:
    2a2c:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__fp_split3>
    2a30:	68 f3       	brcs	.-38     	; 0x2a0c <__divsf3+0x8>

00002a32 <__divsf3_pse>:
    2a32:	99 23       	and	r25, r25
    2a34:	b1 f3       	breq	.-20     	; 0x2a22 <__divsf3+0x1e>
    2a36:	55 23       	and	r21, r21
    2a38:	91 f3       	breq	.-28     	; 0x2a1e <__divsf3+0x1a>
    2a3a:	95 1b       	sub	r25, r21
    2a3c:	55 0b       	sbc	r21, r21
    2a3e:	bb 27       	eor	r27, r27
    2a40:	aa 27       	eor	r26, r26
    2a42:	62 17       	cp	r22, r18
    2a44:	73 07       	cpc	r23, r19
    2a46:	84 07       	cpc	r24, r20
    2a48:	38 f0       	brcs	.+14     	; 0x2a58 <__divsf3_pse+0x26>
    2a4a:	9f 5f       	subi	r25, 0xFF	; 255
    2a4c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a4e:	22 0f       	add	r18, r18
    2a50:	33 1f       	adc	r19, r19
    2a52:	44 1f       	adc	r20, r20
    2a54:	aa 1f       	adc	r26, r26
    2a56:	a9 f3       	breq	.-22     	; 0x2a42 <__divsf3_pse+0x10>
    2a58:	35 d0       	rcall	.+106    	; 0x2ac4 <__divsf3_pse+0x92>
    2a5a:	0e 2e       	mov	r0, r30
    2a5c:	3a f0       	brmi	.+14     	; 0x2a6c <__divsf3_pse+0x3a>
    2a5e:	e0 e8       	ldi	r30, 0x80	; 128
    2a60:	32 d0       	rcall	.+100    	; 0x2ac6 <__divsf3_pse+0x94>
    2a62:	91 50       	subi	r25, 0x01	; 1
    2a64:	50 40       	sbci	r21, 0x00	; 0
    2a66:	e6 95       	lsr	r30
    2a68:	00 1c       	adc	r0, r0
    2a6a:	ca f7       	brpl	.-14     	; 0x2a5e <__divsf3_pse+0x2c>
    2a6c:	2b d0       	rcall	.+86     	; 0x2ac4 <__divsf3_pse+0x92>
    2a6e:	fe 2f       	mov	r31, r30
    2a70:	29 d0       	rcall	.+82     	; 0x2ac4 <__divsf3_pse+0x92>
    2a72:	66 0f       	add	r22, r22
    2a74:	77 1f       	adc	r23, r23
    2a76:	88 1f       	adc	r24, r24
    2a78:	bb 1f       	adc	r27, r27
    2a7a:	26 17       	cp	r18, r22
    2a7c:	37 07       	cpc	r19, r23
    2a7e:	48 07       	cpc	r20, r24
    2a80:	ab 07       	cpc	r26, r27
    2a82:	b0 e8       	ldi	r27, 0x80	; 128
    2a84:	09 f0       	breq	.+2      	; 0x2a88 <__divsf3_pse+0x56>
    2a86:	bb 0b       	sbc	r27, r27
    2a88:	80 2d       	mov	r24, r0
    2a8a:	bf 01       	movw	r22, r30
    2a8c:	ff 27       	eor	r31, r31
    2a8e:	93 58       	subi	r25, 0x83	; 131
    2a90:	5f 4f       	sbci	r21, 0xFF	; 255
    2a92:	3a f0       	brmi	.+14     	; 0x2aa2 <__divsf3_pse+0x70>
    2a94:	9e 3f       	cpi	r25, 0xFE	; 254
    2a96:	51 05       	cpc	r21, r1
    2a98:	78 f0       	brcs	.+30     	; 0x2ab8 <__divsf3_pse+0x86>
    2a9a:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__fp_inf>
    2a9e:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__fp_szero>
    2aa2:	5f 3f       	cpi	r21, 0xFF	; 255
    2aa4:	e4 f3       	brlt	.-8      	; 0x2a9e <__divsf3_pse+0x6c>
    2aa6:	98 3e       	cpi	r25, 0xE8	; 232
    2aa8:	d4 f3       	brlt	.-12     	; 0x2a9e <__divsf3_pse+0x6c>
    2aaa:	86 95       	lsr	r24
    2aac:	77 95       	ror	r23
    2aae:	67 95       	ror	r22
    2ab0:	b7 95       	ror	r27
    2ab2:	f7 95       	ror	r31
    2ab4:	9f 5f       	subi	r25, 0xFF	; 255
    2ab6:	c9 f7       	brne	.-14     	; 0x2aaa <__divsf3_pse+0x78>
    2ab8:	88 0f       	add	r24, r24
    2aba:	91 1d       	adc	r25, r1
    2abc:	96 95       	lsr	r25
    2abe:	87 95       	ror	r24
    2ac0:	97 f9       	bld	r25, 7
    2ac2:	08 95       	ret
    2ac4:	e1 e0       	ldi	r30, 0x01	; 1
    2ac6:	66 0f       	add	r22, r22
    2ac8:	77 1f       	adc	r23, r23
    2aca:	88 1f       	adc	r24, r24
    2acc:	bb 1f       	adc	r27, r27
    2ace:	62 17       	cp	r22, r18
    2ad0:	73 07       	cpc	r23, r19
    2ad2:	84 07       	cpc	r24, r20
    2ad4:	ba 07       	cpc	r27, r26
    2ad6:	20 f0       	brcs	.+8      	; 0x2ae0 <__divsf3_pse+0xae>
    2ad8:	62 1b       	sub	r22, r18
    2ada:	73 0b       	sbc	r23, r19
    2adc:	84 0b       	sbc	r24, r20
    2ade:	ba 0b       	sbc	r27, r26
    2ae0:	ee 1f       	adc	r30, r30
    2ae2:	88 f7       	brcc	.-30     	; 0x2ac6 <__divsf3_pse+0x94>
    2ae4:	e0 95       	com	r30
    2ae6:	08 95       	ret

00002ae8 <__fixsfsi>:
    2ae8:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <__fixunssfsi>
    2aec:	68 94       	set
    2aee:	b1 11       	cpse	r27, r1
    2af0:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__fp_szero>
    2af4:	08 95       	ret

00002af6 <__fixunssfsi>:
    2af6:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__fp_splitA>
    2afa:	88 f0       	brcs	.+34     	; 0x2b1e <__fixunssfsi+0x28>
    2afc:	9f 57       	subi	r25, 0x7F	; 127
    2afe:	98 f0       	brcs	.+38     	; 0x2b26 <__fixunssfsi+0x30>
    2b00:	b9 2f       	mov	r27, r25
    2b02:	99 27       	eor	r25, r25
    2b04:	b7 51       	subi	r27, 0x17	; 23
    2b06:	b0 f0       	brcs	.+44     	; 0x2b34 <__fixunssfsi+0x3e>
    2b08:	e1 f0       	breq	.+56     	; 0x2b42 <__fixunssfsi+0x4c>
    2b0a:	66 0f       	add	r22, r22
    2b0c:	77 1f       	adc	r23, r23
    2b0e:	88 1f       	adc	r24, r24
    2b10:	99 1f       	adc	r25, r25
    2b12:	1a f0       	brmi	.+6      	; 0x2b1a <__fixunssfsi+0x24>
    2b14:	ba 95       	dec	r27
    2b16:	c9 f7       	brne	.-14     	; 0x2b0a <__fixunssfsi+0x14>
    2b18:	14 c0       	rjmp	.+40     	; 0x2b42 <__fixunssfsi+0x4c>
    2b1a:	b1 30       	cpi	r27, 0x01	; 1
    2b1c:	91 f0       	breq	.+36     	; 0x2b42 <__fixunssfsi+0x4c>
    2b1e:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <__fp_zero>
    2b22:	b1 e0       	ldi	r27, 0x01	; 1
    2b24:	08 95       	ret
    2b26:	0c 94 ad 16 	jmp	0x2d5a	; 0x2d5a <__fp_zero>
    2b2a:	67 2f       	mov	r22, r23
    2b2c:	78 2f       	mov	r23, r24
    2b2e:	88 27       	eor	r24, r24
    2b30:	b8 5f       	subi	r27, 0xF8	; 248
    2b32:	39 f0       	breq	.+14     	; 0x2b42 <__fixunssfsi+0x4c>
    2b34:	b9 3f       	cpi	r27, 0xF9	; 249
    2b36:	cc f3       	brlt	.-14     	; 0x2b2a <__fixunssfsi+0x34>
    2b38:	86 95       	lsr	r24
    2b3a:	77 95       	ror	r23
    2b3c:	67 95       	ror	r22
    2b3e:	b3 95       	inc	r27
    2b40:	d9 f7       	brne	.-10     	; 0x2b38 <__fixunssfsi+0x42>
    2b42:	3e f4       	brtc	.+14     	; 0x2b52 <__fixunssfsi+0x5c>
    2b44:	90 95       	com	r25
    2b46:	80 95       	com	r24
    2b48:	70 95       	com	r23
    2b4a:	61 95       	neg	r22
    2b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b4e:	8f 4f       	sbci	r24, 0xFF	; 255
    2b50:	9f 4f       	sbci	r25, 0xFF	; 255
    2b52:	08 95       	ret

00002b54 <__floatunsisf>:
    2b54:	e8 94       	clt
    2b56:	09 c0       	rjmp	.+18     	; 0x2b6a <__floatsisf+0x12>

00002b58 <__floatsisf>:
    2b58:	97 fb       	bst	r25, 7
    2b5a:	3e f4       	brtc	.+14     	; 0x2b6a <__floatsisf+0x12>
    2b5c:	90 95       	com	r25
    2b5e:	80 95       	com	r24
    2b60:	70 95       	com	r23
    2b62:	61 95       	neg	r22
    2b64:	7f 4f       	sbci	r23, 0xFF	; 255
    2b66:	8f 4f       	sbci	r24, 0xFF	; 255
    2b68:	9f 4f       	sbci	r25, 0xFF	; 255
    2b6a:	99 23       	and	r25, r25
    2b6c:	a9 f0       	breq	.+42     	; 0x2b98 <__floatsisf+0x40>
    2b6e:	f9 2f       	mov	r31, r25
    2b70:	96 e9       	ldi	r25, 0x96	; 150
    2b72:	bb 27       	eor	r27, r27
    2b74:	93 95       	inc	r25
    2b76:	f6 95       	lsr	r31
    2b78:	87 95       	ror	r24
    2b7a:	77 95       	ror	r23
    2b7c:	67 95       	ror	r22
    2b7e:	b7 95       	ror	r27
    2b80:	f1 11       	cpse	r31, r1
    2b82:	f8 cf       	rjmp	.-16     	; 0x2b74 <__floatsisf+0x1c>
    2b84:	fa f4       	brpl	.+62     	; 0x2bc4 <__floatsisf+0x6c>
    2b86:	bb 0f       	add	r27, r27
    2b88:	11 f4       	brne	.+4      	; 0x2b8e <__floatsisf+0x36>
    2b8a:	60 ff       	sbrs	r22, 0
    2b8c:	1b c0       	rjmp	.+54     	; 0x2bc4 <__floatsisf+0x6c>
    2b8e:	6f 5f       	subi	r22, 0xFF	; 255
    2b90:	7f 4f       	sbci	r23, 0xFF	; 255
    2b92:	8f 4f       	sbci	r24, 0xFF	; 255
    2b94:	9f 4f       	sbci	r25, 0xFF	; 255
    2b96:	16 c0       	rjmp	.+44     	; 0x2bc4 <__floatsisf+0x6c>
    2b98:	88 23       	and	r24, r24
    2b9a:	11 f0       	breq	.+4      	; 0x2ba0 <__floatsisf+0x48>
    2b9c:	96 e9       	ldi	r25, 0x96	; 150
    2b9e:	11 c0       	rjmp	.+34     	; 0x2bc2 <__floatsisf+0x6a>
    2ba0:	77 23       	and	r23, r23
    2ba2:	21 f0       	breq	.+8      	; 0x2bac <__floatsisf+0x54>
    2ba4:	9e e8       	ldi	r25, 0x8E	; 142
    2ba6:	87 2f       	mov	r24, r23
    2ba8:	76 2f       	mov	r23, r22
    2baa:	05 c0       	rjmp	.+10     	; 0x2bb6 <__floatsisf+0x5e>
    2bac:	66 23       	and	r22, r22
    2bae:	71 f0       	breq	.+28     	; 0x2bcc <__floatsisf+0x74>
    2bb0:	96 e8       	ldi	r25, 0x86	; 134
    2bb2:	86 2f       	mov	r24, r22
    2bb4:	70 e0       	ldi	r23, 0x00	; 0
    2bb6:	60 e0       	ldi	r22, 0x00	; 0
    2bb8:	2a f0       	brmi	.+10     	; 0x2bc4 <__floatsisf+0x6c>
    2bba:	9a 95       	dec	r25
    2bbc:	66 0f       	add	r22, r22
    2bbe:	77 1f       	adc	r23, r23
    2bc0:	88 1f       	adc	r24, r24
    2bc2:	da f7       	brpl	.-10     	; 0x2bba <__floatsisf+0x62>
    2bc4:	88 0f       	add	r24, r24
    2bc6:	96 95       	lsr	r25
    2bc8:	87 95       	ror	r24
    2bca:	97 f9       	bld	r25, 7
    2bcc:	08 95       	ret

00002bce <floor>:
    2bce:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__fp_trunc>
    2bd2:	90 f0       	brcs	.+36     	; 0x2bf8 <floor+0x2a>
    2bd4:	9f 37       	cpi	r25, 0x7F	; 127
    2bd6:	48 f4       	brcc	.+18     	; 0x2bea <floor+0x1c>
    2bd8:	91 11       	cpse	r25, r1
    2bda:	16 f0       	brts	.+4      	; 0x2be0 <floor+0x12>
    2bdc:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__fp_szero>
    2be0:	60 e0       	ldi	r22, 0x00	; 0
    2be2:	70 e0       	ldi	r23, 0x00	; 0
    2be4:	80 e8       	ldi	r24, 0x80	; 128
    2be6:	9f eb       	ldi	r25, 0xBF	; 191
    2be8:	08 95       	ret
    2bea:	26 f4       	brtc	.+8      	; 0x2bf4 <floor+0x26>
    2bec:	1b 16       	cp	r1, r27
    2bee:	61 1d       	adc	r22, r1
    2bf0:	71 1d       	adc	r23, r1
    2bf2:	81 1d       	adc	r24, r1
    2bf4:	0c 94 28 16 	jmp	0x2c50	; 0x2c50 <__fp_mintl>
    2bf8:	0c 94 43 16 	jmp	0x2c86	; 0x2c86 <__fp_mpack>

00002bfc <__fp_cmp>:
    2bfc:	99 0f       	add	r25, r25
    2bfe:	00 08       	sbc	r0, r0
    2c00:	55 0f       	add	r21, r21
    2c02:	aa 0b       	sbc	r26, r26
    2c04:	e0 e8       	ldi	r30, 0x80	; 128
    2c06:	fe ef       	ldi	r31, 0xFE	; 254
    2c08:	16 16       	cp	r1, r22
    2c0a:	17 06       	cpc	r1, r23
    2c0c:	e8 07       	cpc	r30, r24
    2c0e:	f9 07       	cpc	r31, r25
    2c10:	c0 f0       	brcs	.+48     	; 0x2c42 <__fp_cmp+0x46>
    2c12:	12 16       	cp	r1, r18
    2c14:	13 06       	cpc	r1, r19
    2c16:	e4 07       	cpc	r30, r20
    2c18:	f5 07       	cpc	r31, r21
    2c1a:	98 f0       	brcs	.+38     	; 0x2c42 <__fp_cmp+0x46>
    2c1c:	62 1b       	sub	r22, r18
    2c1e:	73 0b       	sbc	r23, r19
    2c20:	84 0b       	sbc	r24, r20
    2c22:	95 0b       	sbc	r25, r21
    2c24:	39 f4       	brne	.+14     	; 0x2c34 <__fp_cmp+0x38>
    2c26:	0a 26       	eor	r0, r26
    2c28:	61 f0       	breq	.+24     	; 0x2c42 <__fp_cmp+0x46>
    2c2a:	23 2b       	or	r18, r19
    2c2c:	24 2b       	or	r18, r20
    2c2e:	25 2b       	or	r18, r21
    2c30:	21 f4       	brne	.+8      	; 0x2c3a <__fp_cmp+0x3e>
    2c32:	08 95       	ret
    2c34:	0a 26       	eor	r0, r26
    2c36:	09 f4       	brne	.+2      	; 0x2c3a <__fp_cmp+0x3e>
    2c38:	a1 40       	sbci	r26, 0x01	; 1
    2c3a:	a6 95       	lsr	r26
    2c3c:	8f ef       	ldi	r24, 0xFF	; 255
    2c3e:	81 1d       	adc	r24, r1
    2c40:	81 1d       	adc	r24, r1
    2c42:	08 95       	ret

00002c44 <__fp_inf>:
    2c44:	97 f9       	bld	r25, 7
    2c46:	9f 67       	ori	r25, 0x7F	; 127
    2c48:	80 e8       	ldi	r24, 0x80	; 128
    2c4a:	70 e0       	ldi	r23, 0x00	; 0
    2c4c:	60 e0       	ldi	r22, 0x00	; 0
    2c4e:	08 95       	ret

00002c50 <__fp_mintl>:
    2c50:	88 23       	and	r24, r24
    2c52:	71 f4       	brne	.+28     	; 0x2c70 <__fp_mintl+0x20>
    2c54:	77 23       	and	r23, r23
    2c56:	21 f0       	breq	.+8      	; 0x2c60 <__fp_mintl+0x10>
    2c58:	98 50       	subi	r25, 0x08	; 8
    2c5a:	87 2b       	or	r24, r23
    2c5c:	76 2f       	mov	r23, r22
    2c5e:	07 c0       	rjmp	.+14     	; 0x2c6e <__fp_mintl+0x1e>
    2c60:	66 23       	and	r22, r22
    2c62:	11 f4       	brne	.+4      	; 0x2c68 <__fp_mintl+0x18>
    2c64:	99 27       	eor	r25, r25
    2c66:	0d c0       	rjmp	.+26     	; 0x2c82 <__fp_mintl+0x32>
    2c68:	90 51       	subi	r25, 0x10	; 16
    2c6a:	86 2b       	or	r24, r22
    2c6c:	70 e0       	ldi	r23, 0x00	; 0
    2c6e:	60 e0       	ldi	r22, 0x00	; 0
    2c70:	2a f0       	brmi	.+10     	; 0x2c7c <__fp_mintl+0x2c>
    2c72:	9a 95       	dec	r25
    2c74:	66 0f       	add	r22, r22
    2c76:	77 1f       	adc	r23, r23
    2c78:	88 1f       	adc	r24, r24
    2c7a:	da f7       	brpl	.-10     	; 0x2c72 <__fp_mintl+0x22>
    2c7c:	88 0f       	add	r24, r24
    2c7e:	96 95       	lsr	r25
    2c80:	87 95       	ror	r24
    2c82:	97 f9       	bld	r25, 7
    2c84:	08 95       	ret

00002c86 <__fp_mpack>:
    2c86:	9f 3f       	cpi	r25, 0xFF	; 255
    2c88:	31 f0       	breq	.+12     	; 0x2c96 <__fp_mpack_finite+0xc>

00002c8a <__fp_mpack_finite>:
    2c8a:	91 50       	subi	r25, 0x01	; 1
    2c8c:	20 f4       	brcc	.+8      	; 0x2c96 <__fp_mpack_finite+0xc>
    2c8e:	87 95       	ror	r24
    2c90:	77 95       	ror	r23
    2c92:	67 95       	ror	r22
    2c94:	b7 95       	ror	r27
    2c96:	88 0f       	add	r24, r24
    2c98:	91 1d       	adc	r25, r1
    2c9a:	96 95       	lsr	r25
    2c9c:	87 95       	ror	r24
    2c9e:	97 f9       	bld	r25, 7
    2ca0:	08 95       	ret

00002ca2 <__fp_nan>:
    2ca2:	9f ef       	ldi	r25, 0xFF	; 255
    2ca4:	80 ec       	ldi	r24, 0xC0	; 192
    2ca6:	08 95       	ret

00002ca8 <__fp_pscA>:
    2ca8:	00 24       	eor	r0, r0
    2caa:	0a 94       	dec	r0
    2cac:	16 16       	cp	r1, r22
    2cae:	17 06       	cpc	r1, r23
    2cb0:	18 06       	cpc	r1, r24
    2cb2:	09 06       	cpc	r0, r25
    2cb4:	08 95       	ret

00002cb6 <__fp_pscB>:
    2cb6:	00 24       	eor	r0, r0
    2cb8:	0a 94       	dec	r0
    2cba:	12 16       	cp	r1, r18
    2cbc:	13 06       	cpc	r1, r19
    2cbe:	14 06       	cpc	r1, r20
    2cc0:	05 06       	cpc	r0, r21
    2cc2:	08 95       	ret

00002cc4 <__fp_round>:
    2cc4:	09 2e       	mov	r0, r25
    2cc6:	03 94       	inc	r0
    2cc8:	00 0c       	add	r0, r0
    2cca:	11 f4       	brne	.+4      	; 0x2cd0 <__fp_round+0xc>
    2ccc:	88 23       	and	r24, r24
    2cce:	52 f0       	brmi	.+20     	; 0x2ce4 <__fp_round+0x20>
    2cd0:	bb 0f       	add	r27, r27
    2cd2:	40 f4       	brcc	.+16     	; 0x2ce4 <__fp_round+0x20>
    2cd4:	bf 2b       	or	r27, r31
    2cd6:	11 f4       	brne	.+4      	; 0x2cdc <__fp_round+0x18>
    2cd8:	60 ff       	sbrs	r22, 0
    2cda:	04 c0       	rjmp	.+8      	; 0x2ce4 <__fp_round+0x20>
    2cdc:	6f 5f       	subi	r22, 0xFF	; 255
    2cde:	7f 4f       	sbci	r23, 0xFF	; 255
    2ce0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce4:	08 95       	ret

00002ce6 <__fp_split3>:
    2ce6:	57 fd       	sbrc	r21, 7
    2ce8:	90 58       	subi	r25, 0x80	; 128
    2cea:	44 0f       	add	r20, r20
    2cec:	55 1f       	adc	r21, r21
    2cee:	59 f0       	breq	.+22     	; 0x2d06 <__fp_splitA+0x10>
    2cf0:	5f 3f       	cpi	r21, 0xFF	; 255
    2cf2:	71 f0       	breq	.+28     	; 0x2d10 <__fp_splitA+0x1a>
    2cf4:	47 95       	ror	r20

00002cf6 <__fp_splitA>:
    2cf6:	88 0f       	add	r24, r24
    2cf8:	97 fb       	bst	r25, 7
    2cfa:	99 1f       	adc	r25, r25
    2cfc:	61 f0       	breq	.+24     	; 0x2d16 <__fp_splitA+0x20>
    2cfe:	9f 3f       	cpi	r25, 0xFF	; 255
    2d00:	79 f0       	breq	.+30     	; 0x2d20 <__fp_splitA+0x2a>
    2d02:	87 95       	ror	r24
    2d04:	08 95       	ret
    2d06:	12 16       	cp	r1, r18
    2d08:	13 06       	cpc	r1, r19
    2d0a:	14 06       	cpc	r1, r20
    2d0c:	55 1f       	adc	r21, r21
    2d0e:	f2 cf       	rjmp	.-28     	; 0x2cf4 <__fp_split3+0xe>
    2d10:	46 95       	lsr	r20
    2d12:	f1 df       	rcall	.-30     	; 0x2cf6 <__fp_splitA>
    2d14:	08 c0       	rjmp	.+16     	; 0x2d26 <__fp_splitA+0x30>
    2d16:	16 16       	cp	r1, r22
    2d18:	17 06       	cpc	r1, r23
    2d1a:	18 06       	cpc	r1, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	f1 cf       	rjmp	.-30     	; 0x2d02 <__fp_splitA+0xc>
    2d20:	86 95       	lsr	r24
    2d22:	71 05       	cpc	r23, r1
    2d24:	61 05       	cpc	r22, r1
    2d26:	08 94       	sec
    2d28:	08 95       	ret

00002d2a <__fp_trunc>:
    2d2a:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__fp_splitA>
    2d2e:	a0 f0       	brcs	.+40     	; 0x2d58 <__fp_trunc+0x2e>
    2d30:	be e7       	ldi	r27, 0x7E	; 126
    2d32:	b9 17       	cp	r27, r25
    2d34:	88 f4       	brcc	.+34     	; 0x2d58 <__fp_trunc+0x2e>
    2d36:	bb 27       	eor	r27, r27
    2d38:	9f 38       	cpi	r25, 0x8F	; 143
    2d3a:	60 f4       	brcc	.+24     	; 0x2d54 <__fp_trunc+0x2a>
    2d3c:	16 16       	cp	r1, r22
    2d3e:	b1 1d       	adc	r27, r1
    2d40:	67 2f       	mov	r22, r23
    2d42:	78 2f       	mov	r23, r24
    2d44:	88 27       	eor	r24, r24
    2d46:	98 5f       	subi	r25, 0xF8	; 248
    2d48:	f7 cf       	rjmp	.-18     	; 0x2d38 <__fp_trunc+0xe>
    2d4a:	86 95       	lsr	r24
    2d4c:	77 95       	ror	r23
    2d4e:	67 95       	ror	r22
    2d50:	b1 1d       	adc	r27, r1
    2d52:	93 95       	inc	r25
    2d54:	96 39       	cpi	r25, 0x96	; 150
    2d56:	c8 f3       	brcs	.-14     	; 0x2d4a <__fp_trunc+0x20>
    2d58:	08 95       	ret

00002d5a <__fp_zero>:
    2d5a:	e8 94       	clt

00002d5c <__fp_szero>:
    2d5c:	bb 27       	eor	r27, r27
    2d5e:	66 27       	eor	r22, r22
    2d60:	77 27       	eor	r23, r23
    2d62:	cb 01       	movw	r24, r22
    2d64:	97 f9       	bld	r25, 7
    2d66:	08 95       	ret

00002d68 <__gesf2>:
    2d68:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__fp_cmp>
    2d6c:	08 f4       	brcc	.+2      	; 0x2d70 <__gesf2+0x8>
    2d6e:	8f ef       	ldi	r24, 0xFF	; 255
    2d70:	08 95       	ret

00002d72 <__mulsf3>:
    2d72:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3x>
    2d76:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <__fp_round>
    2d7a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__fp_pscA>
    2d7e:	38 f0       	brcs	.+14     	; 0x2d8e <__mulsf3+0x1c>
    2d80:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <__fp_pscB>
    2d84:	20 f0       	brcs	.+8      	; 0x2d8e <__mulsf3+0x1c>
    2d86:	95 23       	and	r25, r21
    2d88:	11 f0       	breq	.+4      	; 0x2d8e <__mulsf3+0x1c>
    2d8a:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__fp_inf>
    2d8e:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <__fp_nan>
    2d92:	11 24       	eor	r1, r1
    2d94:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__fp_szero>

00002d98 <__mulsf3x>:
    2d98:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__fp_split3>
    2d9c:	70 f3       	brcs	.-36     	; 0x2d7a <__mulsf3+0x8>

00002d9e <__mulsf3_pse>:
    2d9e:	95 9f       	mul	r25, r21
    2da0:	c1 f3       	breq	.-16     	; 0x2d92 <__mulsf3+0x20>
    2da2:	95 0f       	add	r25, r21
    2da4:	50 e0       	ldi	r21, 0x00	; 0
    2da6:	55 1f       	adc	r21, r21
    2da8:	62 9f       	mul	r22, r18
    2daa:	f0 01       	movw	r30, r0
    2dac:	72 9f       	mul	r23, r18
    2dae:	bb 27       	eor	r27, r27
    2db0:	f0 0d       	add	r31, r0
    2db2:	b1 1d       	adc	r27, r1
    2db4:	63 9f       	mul	r22, r19
    2db6:	aa 27       	eor	r26, r26
    2db8:	f0 0d       	add	r31, r0
    2dba:	b1 1d       	adc	r27, r1
    2dbc:	aa 1f       	adc	r26, r26
    2dbe:	64 9f       	mul	r22, r20
    2dc0:	66 27       	eor	r22, r22
    2dc2:	b0 0d       	add	r27, r0
    2dc4:	a1 1d       	adc	r26, r1
    2dc6:	66 1f       	adc	r22, r22
    2dc8:	82 9f       	mul	r24, r18
    2dca:	22 27       	eor	r18, r18
    2dcc:	b0 0d       	add	r27, r0
    2dce:	a1 1d       	adc	r26, r1
    2dd0:	62 1f       	adc	r22, r18
    2dd2:	73 9f       	mul	r23, r19
    2dd4:	b0 0d       	add	r27, r0
    2dd6:	a1 1d       	adc	r26, r1
    2dd8:	62 1f       	adc	r22, r18
    2dda:	83 9f       	mul	r24, r19
    2ddc:	a0 0d       	add	r26, r0
    2dde:	61 1d       	adc	r22, r1
    2de0:	22 1f       	adc	r18, r18
    2de2:	74 9f       	mul	r23, r20
    2de4:	33 27       	eor	r19, r19
    2de6:	a0 0d       	add	r26, r0
    2de8:	61 1d       	adc	r22, r1
    2dea:	23 1f       	adc	r18, r19
    2dec:	84 9f       	mul	r24, r20
    2dee:	60 0d       	add	r22, r0
    2df0:	21 1d       	adc	r18, r1
    2df2:	82 2f       	mov	r24, r18
    2df4:	76 2f       	mov	r23, r22
    2df6:	6a 2f       	mov	r22, r26
    2df8:	11 24       	eor	r1, r1
    2dfa:	9f 57       	subi	r25, 0x7F	; 127
    2dfc:	50 40       	sbci	r21, 0x00	; 0
    2dfe:	9a f0       	brmi	.+38     	; 0x2e26 <__mulsf3_pse+0x88>
    2e00:	f1 f0       	breq	.+60     	; 0x2e3e <__mulsf3_pse+0xa0>
    2e02:	88 23       	and	r24, r24
    2e04:	4a f0       	brmi	.+18     	; 0x2e18 <__mulsf3_pse+0x7a>
    2e06:	ee 0f       	add	r30, r30
    2e08:	ff 1f       	adc	r31, r31
    2e0a:	bb 1f       	adc	r27, r27
    2e0c:	66 1f       	adc	r22, r22
    2e0e:	77 1f       	adc	r23, r23
    2e10:	88 1f       	adc	r24, r24
    2e12:	91 50       	subi	r25, 0x01	; 1
    2e14:	50 40       	sbci	r21, 0x00	; 0
    2e16:	a9 f7       	brne	.-22     	; 0x2e02 <__mulsf3_pse+0x64>
    2e18:	9e 3f       	cpi	r25, 0xFE	; 254
    2e1a:	51 05       	cpc	r21, r1
    2e1c:	80 f0       	brcs	.+32     	; 0x2e3e <__mulsf3_pse+0xa0>
    2e1e:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__fp_inf>
    2e22:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__fp_szero>
    2e26:	5f 3f       	cpi	r21, 0xFF	; 255
    2e28:	e4 f3       	brlt	.-8      	; 0x2e22 <__mulsf3_pse+0x84>
    2e2a:	98 3e       	cpi	r25, 0xE8	; 232
    2e2c:	d4 f3       	brlt	.-12     	; 0x2e22 <__mulsf3_pse+0x84>
    2e2e:	86 95       	lsr	r24
    2e30:	77 95       	ror	r23
    2e32:	67 95       	ror	r22
    2e34:	b7 95       	ror	r27
    2e36:	f7 95       	ror	r31
    2e38:	e7 95       	ror	r30
    2e3a:	9f 5f       	subi	r25, 0xFF	; 255
    2e3c:	c1 f7       	brne	.-16     	; 0x2e2e <__mulsf3_pse+0x90>
    2e3e:	fe 2b       	or	r31, r30
    2e40:	88 0f       	add	r24, r24
    2e42:	91 1d       	adc	r25, r1
    2e44:	96 95       	lsr	r25
    2e46:	87 95       	ror	r24
    2e48:	97 f9       	bld	r25, 7
    2e4a:	08 95       	ret

00002e4c <sin>:
    2e4c:	9f 93       	push	r25
    2e4e:	0e 94 30 17 	call	0x2e60	; 0x2e60 <__fp_rempio2>
    2e52:	0f 90       	pop	r0
    2e54:	07 fc       	sbrc	r0, 7
    2e56:	ee 5f       	subi	r30, 0xFE	; 254
    2e58:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__fp_sinus>
    2e5c:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <__fp_nan>

00002e60 <__fp_rempio2>:
    2e60:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <__fp_splitA>
    2e64:	d8 f3       	brcs	.-10     	; 0x2e5c <sin+0x10>
    2e66:	e8 94       	clt
    2e68:	e0 e0       	ldi	r30, 0x00	; 0
    2e6a:	bb 27       	eor	r27, r27
    2e6c:	9f 57       	subi	r25, 0x7F	; 127
    2e6e:	f0 f0       	brcs	.+60     	; 0x2eac <__fp_rempio2+0x4c>
    2e70:	2a ed       	ldi	r18, 0xDA	; 218
    2e72:	3f e0       	ldi	r19, 0x0F	; 15
    2e74:	49 ec       	ldi	r20, 0xC9	; 201
    2e76:	06 c0       	rjmp	.+12     	; 0x2e84 <__fp_rempio2+0x24>
    2e78:	ee 0f       	add	r30, r30
    2e7a:	bb 0f       	add	r27, r27
    2e7c:	66 1f       	adc	r22, r22
    2e7e:	77 1f       	adc	r23, r23
    2e80:	88 1f       	adc	r24, r24
    2e82:	28 f0       	brcs	.+10     	; 0x2e8e <__fp_rempio2+0x2e>
    2e84:	b2 3a       	cpi	r27, 0xA2	; 162
    2e86:	62 07       	cpc	r22, r18
    2e88:	73 07       	cpc	r23, r19
    2e8a:	84 07       	cpc	r24, r20
    2e8c:	28 f0       	brcs	.+10     	; 0x2e98 <__fp_rempio2+0x38>
    2e8e:	b2 5a       	subi	r27, 0xA2	; 162
    2e90:	62 0b       	sbc	r22, r18
    2e92:	73 0b       	sbc	r23, r19
    2e94:	84 0b       	sbc	r24, r20
    2e96:	e3 95       	inc	r30
    2e98:	9a 95       	dec	r25
    2e9a:	72 f7       	brpl	.-36     	; 0x2e78 <__fp_rempio2+0x18>
    2e9c:	80 38       	cpi	r24, 0x80	; 128
    2e9e:	30 f4       	brcc	.+12     	; 0x2eac <__fp_rempio2+0x4c>
    2ea0:	9a 95       	dec	r25
    2ea2:	bb 0f       	add	r27, r27
    2ea4:	66 1f       	adc	r22, r22
    2ea6:	77 1f       	adc	r23, r23
    2ea8:	88 1f       	adc	r24, r24
    2eaa:	d2 f7       	brpl	.-12     	; 0x2ea0 <__fp_rempio2+0x40>
    2eac:	90 48       	sbci	r25, 0x80	; 128
    2eae:	0c 94 45 16 	jmp	0x2c8a	; 0x2c8a <__fp_mpack_finite>

00002eb2 <__fp_sinus>:
    2eb2:	ef 93       	push	r30
    2eb4:	e0 ff       	sbrs	r30, 0
    2eb6:	07 c0       	rjmp	.+14     	; 0x2ec6 <__fp_sinus+0x14>
    2eb8:	a2 ea       	ldi	r26, 0xA2	; 162
    2eba:	2a ed       	ldi	r18, 0xDA	; 218
    2ebc:	3f e0       	ldi	r19, 0x0F	; 15
    2ebe:	49 ec       	ldi	r20, 0xC9	; 201
    2ec0:	5f eb       	ldi	r21, 0xBF	; 191
    2ec2:	0e 94 a8 14 	call	0x2950	; 0x2950 <__addsf3x>
    2ec6:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <__fp_round>
    2eca:	0f 90       	pop	r0
    2ecc:	03 94       	inc	r0
    2ece:	01 fc       	sbrc	r0, 1
    2ed0:	90 58       	subi	r25, 0x80	; 128
    2ed2:	e4 e5       	ldi	r30, 0x54	; 84
    2ed4:	f0 e0       	ldi	r31, 0x00	; 0
    2ed6:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__fp_powsodd>

00002eda <__fp_powsodd>:
    2eda:	9f 93       	push	r25
    2edc:	8f 93       	push	r24
    2ede:	7f 93       	push	r23
    2ee0:	6f 93       	push	r22
    2ee2:	ff 93       	push	r31
    2ee4:	ef 93       	push	r30
    2ee6:	9b 01       	movw	r18, r22
    2ee8:	ac 01       	movw	r20, r24
    2eea:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <__mulsf3>
    2eee:	ef 91       	pop	r30
    2ef0:	ff 91       	pop	r31
    2ef2:	0e 94 81 17 	call	0x2f02	; 0x2f02 <__fp_powser>
    2ef6:	2f 91       	pop	r18
    2ef8:	3f 91       	pop	r19
    2efa:	4f 91       	pop	r20
    2efc:	5f 91       	pop	r21
    2efe:	0c 94 b9 16 	jmp	0x2d72	; 0x2d72 <__mulsf3>

00002f02 <__fp_powser>:
    2f02:	df 93       	push	r29
    2f04:	cf 93       	push	r28
    2f06:	1f 93       	push	r17
    2f08:	0f 93       	push	r16
    2f0a:	ff 92       	push	r15
    2f0c:	ef 92       	push	r14
    2f0e:	df 92       	push	r13
    2f10:	7b 01       	movw	r14, r22
    2f12:	8c 01       	movw	r16, r24
    2f14:	68 94       	set
    2f16:	06 c0       	rjmp	.+12     	; 0x2f24 <__fp_powser+0x22>
    2f18:	da 2e       	mov	r13, r26
    2f1a:	ef 01       	movw	r28, r30
    2f1c:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <__mulsf3x>
    2f20:	fe 01       	movw	r30, r28
    2f22:	e8 94       	clt
    2f24:	a5 91       	lpm	r26, Z+
    2f26:	25 91       	lpm	r18, Z+
    2f28:	35 91       	lpm	r19, Z+
    2f2a:	45 91       	lpm	r20, Z+
    2f2c:	55 91       	lpm	r21, Z+
    2f2e:	a6 f3       	brts	.-24     	; 0x2f18 <__fp_powser+0x16>
    2f30:	ef 01       	movw	r28, r30
    2f32:	0e 94 a8 14 	call	0x2950	; 0x2950 <__addsf3x>
    2f36:	fe 01       	movw	r30, r28
    2f38:	97 01       	movw	r18, r14
    2f3a:	a8 01       	movw	r20, r16
    2f3c:	da 94       	dec	r13
    2f3e:	69 f7       	brne	.-38     	; 0x2f1a <__fp_powser+0x18>
    2f40:	df 90       	pop	r13
    2f42:	ef 90       	pop	r14
    2f44:	ff 90       	pop	r15
    2f46:	0f 91       	pop	r16
    2f48:	1f 91       	pop	r17
    2f4a:	cf 91       	pop	r28
    2f4c:	df 91       	pop	r29
    2f4e:	08 95       	ret

00002f50 <sprintf>:
    2f50:	ae e0       	ldi	r26, 0x0E	; 14
    2f52:	b0 e0       	ldi	r27, 0x00	; 0
    2f54:	ee ea       	ldi	r30, 0xAE	; 174
    2f56:	f7 e1       	ldi	r31, 0x17	; 23
    2f58:	0c 94 69 1a 	jmp	0x34d2	; 0x34d2 <__prologue_saves__+0x1c>
    2f5c:	0d 89       	ldd	r16, Y+21	; 0x15
    2f5e:	1e 89       	ldd	r17, Y+22	; 0x16
    2f60:	86 e0       	ldi	r24, 0x06	; 6
    2f62:	8c 83       	std	Y+4, r24	; 0x04
    2f64:	1a 83       	std	Y+2, r17	; 0x02
    2f66:	09 83       	std	Y+1, r16	; 0x01
    2f68:	8f ef       	ldi	r24, 0xFF	; 255
    2f6a:	9f e7       	ldi	r25, 0x7F	; 127
    2f6c:	9e 83       	std	Y+6, r25	; 0x06
    2f6e:	8d 83       	std	Y+5, r24	; 0x05
    2f70:	ae 01       	movw	r20, r28
    2f72:	47 5e       	subi	r20, 0xE7	; 231
    2f74:	5f 4f       	sbci	r21, 0xFF	; 255
    2f76:	6f 89       	ldd	r22, Y+23	; 0x17
    2f78:	78 8d       	ldd	r23, Y+24	; 0x18
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	01 96       	adiw	r24, 0x01	; 1
    2f7e:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <vfprintf>
    2f82:	ef 81       	ldd	r30, Y+7	; 0x07
    2f84:	f8 85       	ldd	r31, Y+8	; 0x08
    2f86:	e0 0f       	add	r30, r16
    2f88:	f1 1f       	adc	r31, r17
    2f8a:	10 82       	st	Z, r1
    2f8c:	2e 96       	adiw	r28, 0x0e	; 14
    2f8e:	e4 e0       	ldi	r30, 0x04	; 4
    2f90:	0c 94 85 1a 	jmp	0x350a	; 0x350a <__epilogue_restores__+0x1c>

00002f94 <vfprintf>:
    2f94:	ab e0       	ldi	r26, 0x0B	; 11
    2f96:	b0 e0       	ldi	r27, 0x00	; 0
    2f98:	e0 ed       	ldi	r30, 0xD0	; 208
    2f9a:	f7 e1       	ldi	r31, 0x17	; 23
    2f9c:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <__prologue_saves__>
    2fa0:	6c 01       	movw	r12, r24
    2fa2:	7b 01       	movw	r14, r22
    2fa4:	8a 01       	movw	r16, r20
    2fa6:	fc 01       	movw	r30, r24
    2fa8:	17 82       	std	Z+7, r1	; 0x07
    2faa:	16 82       	std	Z+6, r1	; 0x06
    2fac:	83 81       	ldd	r24, Z+3	; 0x03
    2fae:	81 ff       	sbrs	r24, 1
    2fb0:	cc c1       	rjmp	.+920    	; 0x334a <vfprintf+0x3b6>
    2fb2:	ce 01       	movw	r24, r28
    2fb4:	01 96       	adiw	r24, 0x01	; 1
    2fb6:	3c 01       	movw	r6, r24
    2fb8:	f6 01       	movw	r30, r12
    2fba:	93 81       	ldd	r25, Z+3	; 0x03
    2fbc:	f7 01       	movw	r30, r14
    2fbe:	93 fd       	sbrc	r25, 3
    2fc0:	85 91       	lpm	r24, Z+
    2fc2:	93 ff       	sbrs	r25, 3
    2fc4:	81 91       	ld	r24, Z+
    2fc6:	7f 01       	movw	r14, r30
    2fc8:	88 23       	and	r24, r24
    2fca:	09 f4       	brne	.+2      	; 0x2fce <vfprintf+0x3a>
    2fcc:	ba c1       	rjmp	.+884    	; 0x3342 <vfprintf+0x3ae>
    2fce:	85 32       	cpi	r24, 0x25	; 37
    2fd0:	39 f4       	brne	.+14     	; 0x2fe0 <vfprintf+0x4c>
    2fd2:	93 fd       	sbrc	r25, 3
    2fd4:	85 91       	lpm	r24, Z+
    2fd6:	93 ff       	sbrs	r25, 3
    2fd8:	81 91       	ld	r24, Z+
    2fda:	7f 01       	movw	r14, r30
    2fdc:	85 32       	cpi	r24, 0x25	; 37
    2fde:	29 f4       	brne	.+10     	; 0x2fea <vfprintf+0x56>
    2fe0:	b6 01       	movw	r22, r12
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	0e 94 c1 19 	call	0x3382	; 0x3382 <fputc>
    2fe8:	e7 cf       	rjmp	.-50     	; 0x2fb8 <vfprintf+0x24>
    2fea:	91 2c       	mov	r9, r1
    2fec:	21 2c       	mov	r2, r1
    2fee:	31 2c       	mov	r3, r1
    2ff0:	ff e1       	ldi	r31, 0x1F	; 31
    2ff2:	f3 15       	cp	r31, r3
    2ff4:	d8 f0       	brcs	.+54     	; 0x302c <vfprintf+0x98>
    2ff6:	8b 32       	cpi	r24, 0x2B	; 43
    2ff8:	79 f0       	breq	.+30     	; 0x3018 <vfprintf+0x84>
    2ffa:	38 f4       	brcc	.+14     	; 0x300a <vfprintf+0x76>
    2ffc:	80 32       	cpi	r24, 0x20	; 32
    2ffe:	79 f0       	breq	.+30     	; 0x301e <vfprintf+0x8a>
    3000:	83 32       	cpi	r24, 0x23	; 35
    3002:	a1 f4       	brne	.+40     	; 0x302c <vfprintf+0x98>
    3004:	23 2d       	mov	r18, r3
    3006:	20 61       	ori	r18, 0x10	; 16
    3008:	1d c0       	rjmp	.+58     	; 0x3044 <vfprintf+0xb0>
    300a:	8d 32       	cpi	r24, 0x2D	; 45
    300c:	61 f0       	breq	.+24     	; 0x3026 <vfprintf+0x92>
    300e:	80 33       	cpi	r24, 0x30	; 48
    3010:	69 f4       	brne	.+26     	; 0x302c <vfprintf+0x98>
    3012:	23 2d       	mov	r18, r3
    3014:	21 60       	ori	r18, 0x01	; 1
    3016:	16 c0       	rjmp	.+44     	; 0x3044 <vfprintf+0xb0>
    3018:	83 2d       	mov	r24, r3
    301a:	82 60       	ori	r24, 0x02	; 2
    301c:	38 2e       	mov	r3, r24
    301e:	e3 2d       	mov	r30, r3
    3020:	e4 60       	ori	r30, 0x04	; 4
    3022:	3e 2e       	mov	r3, r30
    3024:	2a c0       	rjmp	.+84     	; 0x307a <vfprintf+0xe6>
    3026:	f3 2d       	mov	r31, r3
    3028:	f8 60       	ori	r31, 0x08	; 8
    302a:	1d c0       	rjmp	.+58     	; 0x3066 <vfprintf+0xd2>
    302c:	37 fc       	sbrc	r3, 7
    302e:	2d c0       	rjmp	.+90     	; 0x308a <vfprintf+0xf6>
    3030:	20 ed       	ldi	r18, 0xD0	; 208
    3032:	28 0f       	add	r18, r24
    3034:	2a 30       	cpi	r18, 0x0A	; 10
    3036:	40 f0       	brcs	.+16     	; 0x3048 <vfprintf+0xb4>
    3038:	8e 32       	cpi	r24, 0x2E	; 46
    303a:	b9 f4       	brne	.+46     	; 0x306a <vfprintf+0xd6>
    303c:	36 fc       	sbrc	r3, 6
    303e:	81 c1       	rjmp	.+770    	; 0x3342 <vfprintf+0x3ae>
    3040:	23 2d       	mov	r18, r3
    3042:	20 64       	ori	r18, 0x40	; 64
    3044:	32 2e       	mov	r3, r18
    3046:	19 c0       	rjmp	.+50     	; 0x307a <vfprintf+0xe6>
    3048:	36 fe       	sbrs	r3, 6
    304a:	06 c0       	rjmp	.+12     	; 0x3058 <vfprintf+0xc4>
    304c:	8a e0       	ldi	r24, 0x0A	; 10
    304e:	98 9e       	mul	r9, r24
    3050:	20 0d       	add	r18, r0
    3052:	11 24       	eor	r1, r1
    3054:	92 2e       	mov	r9, r18
    3056:	11 c0       	rjmp	.+34     	; 0x307a <vfprintf+0xe6>
    3058:	ea e0       	ldi	r30, 0x0A	; 10
    305a:	2e 9e       	mul	r2, r30
    305c:	20 0d       	add	r18, r0
    305e:	11 24       	eor	r1, r1
    3060:	22 2e       	mov	r2, r18
    3062:	f3 2d       	mov	r31, r3
    3064:	f0 62       	ori	r31, 0x20	; 32
    3066:	3f 2e       	mov	r3, r31
    3068:	08 c0       	rjmp	.+16     	; 0x307a <vfprintf+0xe6>
    306a:	8c 36       	cpi	r24, 0x6C	; 108
    306c:	21 f4       	brne	.+8      	; 0x3076 <vfprintf+0xe2>
    306e:	83 2d       	mov	r24, r3
    3070:	80 68       	ori	r24, 0x80	; 128
    3072:	38 2e       	mov	r3, r24
    3074:	02 c0       	rjmp	.+4      	; 0x307a <vfprintf+0xe6>
    3076:	88 36       	cpi	r24, 0x68	; 104
    3078:	41 f4       	brne	.+16     	; 0x308a <vfprintf+0xf6>
    307a:	f7 01       	movw	r30, r14
    307c:	93 fd       	sbrc	r25, 3
    307e:	85 91       	lpm	r24, Z+
    3080:	93 ff       	sbrs	r25, 3
    3082:	81 91       	ld	r24, Z+
    3084:	7f 01       	movw	r14, r30
    3086:	81 11       	cpse	r24, r1
    3088:	b3 cf       	rjmp	.-154    	; 0x2ff0 <vfprintf+0x5c>
    308a:	98 2f       	mov	r25, r24
    308c:	9f 7d       	andi	r25, 0xDF	; 223
    308e:	95 54       	subi	r25, 0x45	; 69
    3090:	93 30       	cpi	r25, 0x03	; 3
    3092:	28 f4       	brcc	.+10     	; 0x309e <vfprintf+0x10a>
    3094:	0c 5f       	subi	r16, 0xFC	; 252
    3096:	1f 4f       	sbci	r17, 0xFF	; 255
    3098:	9f e3       	ldi	r25, 0x3F	; 63
    309a:	99 83       	std	Y+1, r25	; 0x01
    309c:	0d c0       	rjmp	.+26     	; 0x30b8 <vfprintf+0x124>
    309e:	83 36       	cpi	r24, 0x63	; 99
    30a0:	31 f0       	breq	.+12     	; 0x30ae <vfprintf+0x11a>
    30a2:	83 37       	cpi	r24, 0x73	; 115
    30a4:	71 f0       	breq	.+28     	; 0x30c2 <vfprintf+0x12e>
    30a6:	83 35       	cpi	r24, 0x53	; 83
    30a8:	09 f0       	breq	.+2      	; 0x30ac <vfprintf+0x118>
    30aa:	59 c0       	rjmp	.+178    	; 0x315e <vfprintf+0x1ca>
    30ac:	21 c0       	rjmp	.+66     	; 0x30f0 <vfprintf+0x15c>
    30ae:	f8 01       	movw	r30, r16
    30b0:	80 81       	ld	r24, Z
    30b2:	89 83       	std	Y+1, r24	; 0x01
    30b4:	0e 5f       	subi	r16, 0xFE	; 254
    30b6:	1f 4f       	sbci	r17, 0xFF	; 255
    30b8:	88 24       	eor	r8, r8
    30ba:	83 94       	inc	r8
    30bc:	91 2c       	mov	r9, r1
    30be:	53 01       	movw	r10, r6
    30c0:	13 c0       	rjmp	.+38     	; 0x30e8 <vfprintf+0x154>
    30c2:	28 01       	movw	r4, r16
    30c4:	f2 e0       	ldi	r31, 0x02	; 2
    30c6:	4f 0e       	add	r4, r31
    30c8:	51 1c       	adc	r5, r1
    30ca:	f8 01       	movw	r30, r16
    30cc:	a0 80       	ld	r10, Z
    30ce:	b1 80       	ldd	r11, Z+1	; 0x01
    30d0:	36 fe       	sbrs	r3, 6
    30d2:	03 c0       	rjmp	.+6      	; 0x30da <vfprintf+0x146>
    30d4:	69 2d       	mov	r22, r9
    30d6:	70 e0       	ldi	r23, 0x00	; 0
    30d8:	02 c0       	rjmp	.+4      	; 0x30de <vfprintf+0x14a>
    30da:	6f ef       	ldi	r22, 0xFF	; 255
    30dc:	7f ef       	ldi	r23, 0xFF	; 255
    30de:	c5 01       	movw	r24, r10
    30e0:	0e 94 b6 19 	call	0x336c	; 0x336c <strnlen>
    30e4:	4c 01       	movw	r8, r24
    30e6:	82 01       	movw	r16, r4
    30e8:	f3 2d       	mov	r31, r3
    30ea:	ff 77       	andi	r31, 0x7F	; 127
    30ec:	3f 2e       	mov	r3, r31
    30ee:	16 c0       	rjmp	.+44     	; 0x311c <vfprintf+0x188>
    30f0:	28 01       	movw	r4, r16
    30f2:	22 e0       	ldi	r18, 0x02	; 2
    30f4:	42 0e       	add	r4, r18
    30f6:	51 1c       	adc	r5, r1
    30f8:	f8 01       	movw	r30, r16
    30fa:	a0 80       	ld	r10, Z
    30fc:	b1 80       	ldd	r11, Z+1	; 0x01
    30fe:	36 fe       	sbrs	r3, 6
    3100:	03 c0       	rjmp	.+6      	; 0x3108 <vfprintf+0x174>
    3102:	69 2d       	mov	r22, r9
    3104:	70 e0       	ldi	r23, 0x00	; 0
    3106:	02 c0       	rjmp	.+4      	; 0x310c <vfprintf+0x178>
    3108:	6f ef       	ldi	r22, 0xFF	; 255
    310a:	7f ef       	ldi	r23, 0xFF	; 255
    310c:	c5 01       	movw	r24, r10
    310e:	0e 94 ab 19 	call	0x3356	; 0x3356 <strnlen_P>
    3112:	4c 01       	movw	r8, r24
    3114:	f3 2d       	mov	r31, r3
    3116:	f0 68       	ori	r31, 0x80	; 128
    3118:	3f 2e       	mov	r3, r31
    311a:	82 01       	movw	r16, r4
    311c:	33 fc       	sbrc	r3, 3
    311e:	1b c0       	rjmp	.+54     	; 0x3156 <vfprintf+0x1c2>
    3120:	82 2d       	mov	r24, r2
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	88 16       	cp	r8, r24
    3126:	99 06       	cpc	r9, r25
    3128:	b0 f4       	brcc	.+44     	; 0x3156 <vfprintf+0x1c2>
    312a:	b6 01       	movw	r22, r12
    312c:	80 e2       	ldi	r24, 0x20	; 32
    312e:	90 e0       	ldi	r25, 0x00	; 0
    3130:	0e 94 c1 19 	call	0x3382	; 0x3382 <fputc>
    3134:	2a 94       	dec	r2
    3136:	f4 cf       	rjmp	.-24     	; 0x3120 <vfprintf+0x18c>
    3138:	f5 01       	movw	r30, r10
    313a:	37 fc       	sbrc	r3, 7
    313c:	85 91       	lpm	r24, Z+
    313e:	37 fe       	sbrs	r3, 7
    3140:	81 91       	ld	r24, Z+
    3142:	5f 01       	movw	r10, r30
    3144:	b6 01       	movw	r22, r12
    3146:	90 e0       	ldi	r25, 0x00	; 0
    3148:	0e 94 c1 19 	call	0x3382	; 0x3382 <fputc>
    314c:	21 10       	cpse	r2, r1
    314e:	2a 94       	dec	r2
    3150:	21 e0       	ldi	r18, 0x01	; 1
    3152:	82 1a       	sub	r8, r18
    3154:	91 08       	sbc	r9, r1
    3156:	81 14       	cp	r8, r1
    3158:	91 04       	cpc	r9, r1
    315a:	71 f7       	brne	.-36     	; 0x3138 <vfprintf+0x1a4>
    315c:	e8 c0       	rjmp	.+464    	; 0x332e <vfprintf+0x39a>
    315e:	84 36       	cpi	r24, 0x64	; 100
    3160:	11 f0       	breq	.+4      	; 0x3166 <vfprintf+0x1d2>
    3162:	89 36       	cpi	r24, 0x69	; 105
    3164:	41 f5       	brne	.+80     	; 0x31b6 <vfprintf+0x222>
    3166:	f8 01       	movw	r30, r16
    3168:	37 fe       	sbrs	r3, 7
    316a:	07 c0       	rjmp	.+14     	; 0x317a <vfprintf+0x1e6>
    316c:	60 81       	ld	r22, Z
    316e:	71 81       	ldd	r23, Z+1	; 0x01
    3170:	82 81       	ldd	r24, Z+2	; 0x02
    3172:	93 81       	ldd	r25, Z+3	; 0x03
    3174:	0c 5f       	subi	r16, 0xFC	; 252
    3176:	1f 4f       	sbci	r17, 0xFF	; 255
    3178:	08 c0       	rjmp	.+16     	; 0x318a <vfprintf+0x1f6>
    317a:	60 81       	ld	r22, Z
    317c:	71 81       	ldd	r23, Z+1	; 0x01
    317e:	07 2e       	mov	r0, r23
    3180:	00 0c       	add	r0, r0
    3182:	88 0b       	sbc	r24, r24
    3184:	99 0b       	sbc	r25, r25
    3186:	0e 5f       	subi	r16, 0xFE	; 254
    3188:	1f 4f       	sbci	r17, 0xFF	; 255
    318a:	f3 2d       	mov	r31, r3
    318c:	ff 76       	andi	r31, 0x6F	; 111
    318e:	3f 2e       	mov	r3, r31
    3190:	97 ff       	sbrs	r25, 7
    3192:	09 c0       	rjmp	.+18     	; 0x31a6 <vfprintf+0x212>
    3194:	90 95       	com	r25
    3196:	80 95       	com	r24
    3198:	70 95       	com	r23
    319a:	61 95       	neg	r22
    319c:	7f 4f       	sbci	r23, 0xFF	; 255
    319e:	8f 4f       	sbci	r24, 0xFF	; 255
    31a0:	9f 4f       	sbci	r25, 0xFF	; 255
    31a2:	f0 68       	ori	r31, 0x80	; 128
    31a4:	3f 2e       	mov	r3, r31
    31a6:	2a e0       	ldi	r18, 0x0A	; 10
    31a8:	30 e0       	ldi	r19, 0x00	; 0
    31aa:	a3 01       	movw	r20, r6
    31ac:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__ultoa_invert>
    31b0:	88 2e       	mov	r8, r24
    31b2:	86 18       	sub	r8, r6
    31b4:	45 c0       	rjmp	.+138    	; 0x3240 <vfprintf+0x2ac>
    31b6:	85 37       	cpi	r24, 0x75	; 117
    31b8:	31 f4       	brne	.+12     	; 0x31c6 <vfprintf+0x232>
    31ba:	23 2d       	mov	r18, r3
    31bc:	2f 7e       	andi	r18, 0xEF	; 239
    31be:	b2 2e       	mov	r11, r18
    31c0:	2a e0       	ldi	r18, 0x0A	; 10
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	25 c0       	rjmp	.+74     	; 0x3210 <vfprintf+0x27c>
    31c6:	93 2d       	mov	r25, r3
    31c8:	99 7f       	andi	r25, 0xF9	; 249
    31ca:	b9 2e       	mov	r11, r25
    31cc:	8f 36       	cpi	r24, 0x6F	; 111
    31ce:	c1 f0       	breq	.+48     	; 0x3200 <vfprintf+0x26c>
    31d0:	18 f4       	brcc	.+6      	; 0x31d8 <vfprintf+0x244>
    31d2:	88 35       	cpi	r24, 0x58	; 88
    31d4:	79 f0       	breq	.+30     	; 0x31f4 <vfprintf+0x260>
    31d6:	b5 c0       	rjmp	.+362    	; 0x3342 <vfprintf+0x3ae>
    31d8:	80 37       	cpi	r24, 0x70	; 112
    31da:	19 f0       	breq	.+6      	; 0x31e2 <vfprintf+0x24e>
    31dc:	88 37       	cpi	r24, 0x78	; 120
    31de:	21 f0       	breq	.+8      	; 0x31e8 <vfprintf+0x254>
    31e0:	b0 c0       	rjmp	.+352    	; 0x3342 <vfprintf+0x3ae>
    31e2:	e9 2f       	mov	r30, r25
    31e4:	e0 61       	ori	r30, 0x10	; 16
    31e6:	be 2e       	mov	r11, r30
    31e8:	b4 fe       	sbrs	r11, 4
    31ea:	0d c0       	rjmp	.+26     	; 0x3206 <vfprintf+0x272>
    31ec:	fb 2d       	mov	r31, r11
    31ee:	f4 60       	ori	r31, 0x04	; 4
    31f0:	bf 2e       	mov	r11, r31
    31f2:	09 c0       	rjmp	.+18     	; 0x3206 <vfprintf+0x272>
    31f4:	34 fe       	sbrs	r3, 4
    31f6:	0a c0       	rjmp	.+20     	; 0x320c <vfprintf+0x278>
    31f8:	29 2f       	mov	r18, r25
    31fa:	26 60       	ori	r18, 0x06	; 6
    31fc:	b2 2e       	mov	r11, r18
    31fe:	06 c0       	rjmp	.+12     	; 0x320c <vfprintf+0x278>
    3200:	28 e0       	ldi	r18, 0x08	; 8
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	05 c0       	rjmp	.+10     	; 0x3210 <vfprintf+0x27c>
    3206:	20 e1       	ldi	r18, 0x10	; 16
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	02 c0       	rjmp	.+4      	; 0x3210 <vfprintf+0x27c>
    320c:	20 e1       	ldi	r18, 0x10	; 16
    320e:	32 e0       	ldi	r19, 0x02	; 2
    3210:	f8 01       	movw	r30, r16
    3212:	b7 fe       	sbrs	r11, 7
    3214:	07 c0       	rjmp	.+14     	; 0x3224 <vfprintf+0x290>
    3216:	60 81       	ld	r22, Z
    3218:	71 81       	ldd	r23, Z+1	; 0x01
    321a:	82 81       	ldd	r24, Z+2	; 0x02
    321c:	93 81       	ldd	r25, Z+3	; 0x03
    321e:	0c 5f       	subi	r16, 0xFC	; 252
    3220:	1f 4f       	sbci	r17, 0xFF	; 255
    3222:	06 c0       	rjmp	.+12     	; 0x3230 <vfprintf+0x29c>
    3224:	60 81       	ld	r22, Z
    3226:	71 81       	ldd	r23, Z+1	; 0x01
    3228:	80 e0       	ldi	r24, 0x00	; 0
    322a:	90 e0       	ldi	r25, 0x00	; 0
    322c:	0e 5f       	subi	r16, 0xFE	; 254
    322e:	1f 4f       	sbci	r17, 0xFF	; 255
    3230:	a3 01       	movw	r20, r6
    3232:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__ultoa_invert>
    3236:	88 2e       	mov	r8, r24
    3238:	86 18       	sub	r8, r6
    323a:	fb 2d       	mov	r31, r11
    323c:	ff 77       	andi	r31, 0x7F	; 127
    323e:	3f 2e       	mov	r3, r31
    3240:	36 fe       	sbrs	r3, 6
    3242:	0d c0       	rjmp	.+26     	; 0x325e <vfprintf+0x2ca>
    3244:	23 2d       	mov	r18, r3
    3246:	2e 7f       	andi	r18, 0xFE	; 254
    3248:	a2 2e       	mov	r10, r18
    324a:	89 14       	cp	r8, r9
    324c:	58 f4       	brcc	.+22     	; 0x3264 <vfprintf+0x2d0>
    324e:	34 fe       	sbrs	r3, 4
    3250:	0b c0       	rjmp	.+22     	; 0x3268 <vfprintf+0x2d4>
    3252:	32 fc       	sbrc	r3, 2
    3254:	09 c0       	rjmp	.+18     	; 0x3268 <vfprintf+0x2d4>
    3256:	83 2d       	mov	r24, r3
    3258:	8e 7e       	andi	r24, 0xEE	; 238
    325a:	a8 2e       	mov	r10, r24
    325c:	05 c0       	rjmp	.+10     	; 0x3268 <vfprintf+0x2d4>
    325e:	b8 2c       	mov	r11, r8
    3260:	a3 2c       	mov	r10, r3
    3262:	03 c0       	rjmp	.+6      	; 0x326a <vfprintf+0x2d6>
    3264:	b8 2c       	mov	r11, r8
    3266:	01 c0       	rjmp	.+2      	; 0x326a <vfprintf+0x2d6>
    3268:	b9 2c       	mov	r11, r9
    326a:	a4 fe       	sbrs	r10, 4
    326c:	0f c0       	rjmp	.+30     	; 0x328c <vfprintf+0x2f8>
    326e:	fe 01       	movw	r30, r28
    3270:	e8 0d       	add	r30, r8
    3272:	f1 1d       	adc	r31, r1
    3274:	80 81       	ld	r24, Z
    3276:	80 33       	cpi	r24, 0x30	; 48
    3278:	21 f4       	brne	.+8      	; 0x3282 <vfprintf+0x2ee>
    327a:	9a 2d       	mov	r25, r10
    327c:	99 7e       	andi	r25, 0xE9	; 233
    327e:	a9 2e       	mov	r10, r25
    3280:	09 c0       	rjmp	.+18     	; 0x3294 <vfprintf+0x300>
    3282:	a2 fe       	sbrs	r10, 2
    3284:	06 c0       	rjmp	.+12     	; 0x3292 <vfprintf+0x2fe>
    3286:	b3 94       	inc	r11
    3288:	b3 94       	inc	r11
    328a:	04 c0       	rjmp	.+8      	; 0x3294 <vfprintf+0x300>
    328c:	8a 2d       	mov	r24, r10
    328e:	86 78       	andi	r24, 0x86	; 134
    3290:	09 f0       	breq	.+2      	; 0x3294 <vfprintf+0x300>
    3292:	b3 94       	inc	r11
    3294:	a3 fc       	sbrc	r10, 3
    3296:	11 c0       	rjmp	.+34     	; 0x32ba <vfprintf+0x326>
    3298:	a0 fe       	sbrs	r10, 0
    329a:	06 c0       	rjmp	.+12     	; 0x32a8 <vfprintf+0x314>
    329c:	b2 14       	cp	r11, r2
    329e:	88 f4       	brcc	.+34     	; 0x32c2 <vfprintf+0x32e>
    32a0:	28 0c       	add	r2, r8
    32a2:	92 2c       	mov	r9, r2
    32a4:	9b 18       	sub	r9, r11
    32a6:	0e c0       	rjmp	.+28     	; 0x32c4 <vfprintf+0x330>
    32a8:	b2 14       	cp	r11, r2
    32aa:	60 f4       	brcc	.+24     	; 0x32c4 <vfprintf+0x330>
    32ac:	b6 01       	movw	r22, r12
    32ae:	80 e2       	ldi	r24, 0x20	; 32
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	0e 94 c1 19 	call	0x3382	; 0x3382 <fputc>
    32b6:	b3 94       	inc	r11
    32b8:	f7 cf       	rjmp	.-18     	; 0x32a8 <vfprintf+0x314>
    32ba:	b2 14       	cp	r11, r2
    32bc:	18 f4       	brcc	.+6      	; 0x32c4 <vfprintf+0x330>
    32be:	2b 18       	sub	r2, r11
    32c0:	02 c0       	rjmp	.+4      	; 0x32c6 <vfprintf+0x332>
    32c2:	98 2c       	mov	r9, r8
    32c4:	21 2c       	mov	r2, r1
    32c6:	a4 fe       	sbrs	r10, 4
    32c8:	10 c0       	rjmp	.+32     	; 0x32ea <vfprintf+0x356>
    32ca:	b6 01       	movw	r22, r12
    32cc:	80 e3       	ldi	r24, 0x30	; 48
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	0e 94 c1 19 	call	0x3382	; 0x3382 <fputc>
    32d4:	a2 fe       	sbrs	r10, 2
    32d6:	17 c0       	rjmp	.+46     	; 0x3306 <vfprintf+0x372>
    32d8:	a1 fc       	sbrc	r10, 1
    32da:	03 c0       	rjmp	.+6      	; 0x32e2 <vfprintf+0x34e>
    32dc:	88 e7       	ldi	r24, 0x78	; 120
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	02 c0       	rjmp	.+4      	; 0x32e6 <vfprintf+0x352>
    32e2:	88 e5       	ldi	r24, 0x58	; 88
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	b6 01       	movw	r22, r12
    32e8:	0c c0       	rjmp	.+24     	; 0x3302 <vfprintf+0x36e>
    32ea:	8a 2d       	mov	r24, r10
    32ec:	86 78       	andi	r24, 0x86	; 134
    32ee:	59 f0       	breq	.+22     	; 0x3306 <vfprintf+0x372>
    32f0:	a1 fe       	sbrs	r10, 1
    32f2:	02 c0       	rjmp	.+4      	; 0x32f8 <vfprintf+0x364>
    32f4:	8b e2       	ldi	r24, 0x2B	; 43
    32f6:	01 c0       	rjmp	.+2      	; 0x32fa <vfprintf+0x366>
    32f8:	80 e2       	ldi	r24, 0x20	; 32
    32fa:	a7 fc       	sbrc	r10, 7
    32fc:	8d e2       	ldi	r24, 0x2D	; 45
    32fe:	b6 01       	movw	r22, r12
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	0e 94 c1 19 	call	0x3382	; 0x3382 <fputc>
    3306:	89 14       	cp	r8, r9
    3308:	38 f4       	brcc	.+14     	; 0x3318 <vfprintf+0x384>
    330a:	b6 01       	movw	r22, r12
    330c:	80 e3       	ldi	r24, 0x30	; 48
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	0e 94 c1 19 	call	0x3382	; 0x3382 <fputc>
    3314:	9a 94       	dec	r9
    3316:	f7 cf       	rjmp	.-18     	; 0x3306 <vfprintf+0x372>
    3318:	8a 94       	dec	r8
    331a:	f3 01       	movw	r30, r6
    331c:	e8 0d       	add	r30, r8
    331e:	f1 1d       	adc	r31, r1
    3320:	80 81       	ld	r24, Z
    3322:	b6 01       	movw	r22, r12
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	0e 94 c1 19 	call	0x3382	; 0x3382 <fputc>
    332a:	81 10       	cpse	r8, r1
    332c:	f5 cf       	rjmp	.-22     	; 0x3318 <vfprintf+0x384>
    332e:	22 20       	and	r2, r2
    3330:	09 f4       	brne	.+2      	; 0x3334 <vfprintf+0x3a0>
    3332:	42 ce       	rjmp	.-892    	; 0x2fb8 <vfprintf+0x24>
    3334:	b6 01       	movw	r22, r12
    3336:	80 e2       	ldi	r24, 0x20	; 32
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	0e 94 c1 19 	call	0x3382	; 0x3382 <fputc>
    333e:	2a 94       	dec	r2
    3340:	f6 cf       	rjmp	.-20     	; 0x332e <vfprintf+0x39a>
    3342:	f6 01       	movw	r30, r12
    3344:	86 81       	ldd	r24, Z+6	; 0x06
    3346:	97 81       	ldd	r25, Z+7	; 0x07
    3348:	02 c0       	rjmp	.+4      	; 0x334e <vfprintf+0x3ba>
    334a:	8f ef       	ldi	r24, 0xFF	; 255
    334c:	9f ef       	ldi	r25, 0xFF	; 255
    334e:	2b 96       	adiw	r28, 0x0b	; 11
    3350:	e2 e1       	ldi	r30, 0x12	; 18
    3352:	0c 94 77 1a 	jmp	0x34ee	; 0x34ee <__epilogue_restores__>

00003356 <strnlen_P>:
    3356:	fc 01       	movw	r30, r24
    3358:	05 90       	lpm	r0, Z+
    335a:	61 50       	subi	r22, 0x01	; 1
    335c:	70 40       	sbci	r23, 0x00	; 0
    335e:	01 10       	cpse	r0, r1
    3360:	d8 f7       	brcc	.-10     	; 0x3358 <strnlen_P+0x2>
    3362:	80 95       	com	r24
    3364:	90 95       	com	r25
    3366:	8e 0f       	add	r24, r30
    3368:	9f 1f       	adc	r25, r31
    336a:	08 95       	ret

0000336c <strnlen>:
    336c:	fc 01       	movw	r30, r24
    336e:	61 50       	subi	r22, 0x01	; 1
    3370:	70 40       	sbci	r23, 0x00	; 0
    3372:	01 90       	ld	r0, Z+
    3374:	01 10       	cpse	r0, r1
    3376:	d8 f7       	brcc	.-10     	; 0x336e <strnlen+0x2>
    3378:	80 95       	com	r24
    337a:	90 95       	com	r25
    337c:	8e 0f       	add	r24, r30
    337e:	9f 1f       	adc	r25, r31
    3380:	08 95       	ret

00003382 <fputc>:
    3382:	0f 93       	push	r16
    3384:	1f 93       	push	r17
    3386:	cf 93       	push	r28
    3388:	df 93       	push	r29
    338a:	fb 01       	movw	r30, r22
    338c:	23 81       	ldd	r18, Z+3	; 0x03
    338e:	21 fd       	sbrc	r18, 1
    3390:	03 c0       	rjmp	.+6      	; 0x3398 <fputc+0x16>
    3392:	8f ef       	ldi	r24, 0xFF	; 255
    3394:	9f ef       	ldi	r25, 0xFF	; 255
    3396:	2c c0       	rjmp	.+88     	; 0x33f0 <fputc+0x6e>
    3398:	22 ff       	sbrs	r18, 2
    339a:	16 c0       	rjmp	.+44     	; 0x33c8 <fputc+0x46>
    339c:	46 81       	ldd	r20, Z+6	; 0x06
    339e:	57 81       	ldd	r21, Z+7	; 0x07
    33a0:	24 81       	ldd	r18, Z+4	; 0x04
    33a2:	35 81       	ldd	r19, Z+5	; 0x05
    33a4:	42 17       	cp	r20, r18
    33a6:	53 07       	cpc	r21, r19
    33a8:	44 f4       	brge	.+16     	; 0x33ba <fputc+0x38>
    33aa:	a0 81       	ld	r26, Z
    33ac:	b1 81       	ldd	r27, Z+1	; 0x01
    33ae:	9d 01       	movw	r18, r26
    33b0:	2f 5f       	subi	r18, 0xFF	; 255
    33b2:	3f 4f       	sbci	r19, 0xFF	; 255
    33b4:	31 83       	std	Z+1, r19	; 0x01
    33b6:	20 83       	st	Z, r18
    33b8:	8c 93       	st	X, r24
    33ba:	26 81       	ldd	r18, Z+6	; 0x06
    33bc:	37 81       	ldd	r19, Z+7	; 0x07
    33be:	2f 5f       	subi	r18, 0xFF	; 255
    33c0:	3f 4f       	sbci	r19, 0xFF	; 255
    33c2:	37 83       	std	Z+7, r19	; 0x07
    33c4:	26 83       	std	Z+6, r18	; 0x06
    33c6:	14 c0       	rjmp	.+40     	; 0x33f0 <fputc+0x6e>
    33c8:	8b 01       	movw	r16, r22
    33ca:	ec 01       	movw	r28, r24
    33cc:	fb 01       	movw	r30, r22
    33ce:	00 84       	ldd	r0, Z+8	; 0x08
    33d0:	f1 85       	ldd	r31, Z+9	; 0x09
    33d2:	e0 2d       	mov	r30, r0
    33d4:	09 95       	icall
    33d6:	89 2b       	or	r24, r25
    33d8:	e1 f6       	brne	.-72     	; 0x3392 <fputc+0x10>
    33da:	d8 01       	movw	r26, r16
    33dc:	16 96       	adiw	r26, 0x06	; 6
    33de:	8d 91       	ld	r24, X+
    33e0:	9c 91       	ld	r25, X
    33e2:	17 97       	sbiw	r26, 0x07	; 7
    33e4:	01 96       	adiw	r24, 0x01	; 1
    33e6:	17 96       	adiw	r26, 0x07	; 7
    33e8:	9c 93       	st	X, r25
    33ea:	8e 93       	st	-X, r24
    33ec:	16 97       	sbiw	r26, 0x06	; 6
    33ee:	ce 01       	movw	r24, r28
    33f0:	df 91       	pop	r29
    33f2:	cf 91       	pop	r28
    33f4:	1f 91       	pop	r17
    33f6:	0f 91       	pop	r16
    33f8:	08 95       	ret

000033fa <__ultoa_invert>:
    33fa:	fa 01       	movw	r30, r20
    33fc:	aa 27       	eor	r26, r26
    33fe:	28 30       	cpi	r18, 0x08	; 8
    3400:	51 f1       	breq	.+84     	; 0x3456 <__ultoa_invert+0x5c>
    3402:	20 31       	cpi	r18, 0x10	; 16
    3404:	81 f1       	breq	.+96     	; 0x3466 <__ultoa_invert+0x6c>
    3406:	e8 94       	clt
    3408:	6f 93       	push	r22
    340a:	6e 7f       	andi	r22, 0xFE	; 254
    340c:	6e 5f       	subi	r22, 0xFE	; 254
    340e:	7f 4f       	sbci	r23, 0xFF	; 255
    3410:	8f 4f       	sbci	r24, 0xFF	; 255
    3412:	9f 4f       	sbci	r25, 0xFF	; 255
    3414:	af 4f       	sbci	r26, 0xFF	; 255
    3416:	b1 e0       	ldi	r27, 0x01	; 1
    3418:	3e d0       	rcall	.+124    	; 0x3496 <__ultoa_invert+0x9c>
    341a:	b4 e0       	ldi	r27, 0x04	; 4
    341c:	3c d0       	rcall	.+120    	; 0x3496 <__ultoa_invert+0x9c>
    341e:	67 0f       	add	r22, r23
    3420:	78 1f       	adc	r23, r24
    3422:	89 1f       	adc	r24, r25
    3424:	9a 1f       	adc	r25, r26
    3426:	a1 1d       	adc	r26, r1
    3428:	68 0f       	add	r22, r24
    342a:	79 1f       	adc	r23, r25
    342c:	8a 1f       	adc	r24, r26
    342e:	91 1d       	adc	r25, r1
    3430:	a1 1d       	adc	r26, r1
    3432:	6a 0f       	add	r22, r26
    3434:	71 1d       	adc	r23, r1
    3436:	81 1d       	adc	r24, r1
    3438:	91 1d       	adc	r25, r1
    343a:	a1 1d       	adc	r26, r1
    343c:	20 d0       	rcall	.+64     	; 0x347e <__ultoa_invert+0x84>
    343e:	09 f4       	brne	.+2      	; 0x3442 <__ultoa_invert+0x48>
    3440:	68 94       	set
    3442:	3f 91       	pop	r19
    3444:	2a e0       	ldi	r18, 0x0A	; 10
    3446:	26 9f       	mul	r18, r22
    3448:	11 24       	eor	r1, r1
    344a:	30 19       	sub	r19, r0
    344c:	30 5d       	subi	r19, 0xD0	; 208
    344e:	31 93       	st	Z+, r19
    3450:	de f6       	brtc	.-74     	; 0x3408 <__ultoa_invert+0xe>
    3452:	cf 01       	movw	r24, r30
    3454:	08 95       	ret
    3456:	46 2f       	mov	r20, r22
    3458:	47 70       	andi	r20, 0x07	; 7
    345a:	40 5d       	subi	r20, 0xD0	; 208
    345c:	41 93       	st	Z+, r20
    345e:	b3 e0       	ldi	r27, 0x03	; 3
    3460:	0f d0       	rcall	.+30     	; 0x3480 <__ultoa_invert+0x86>
    3462:	c9 f7       	brne	.-14     	; 0x3456 <__ultoa_invert+0x5c>
    3464:	f6 cf       	rjmp	.-20     	; 0x3452 <__ultoa_invert+0x58>
    3466:	46 2f       	mov	r20, r22
    3468:	4f 70       	andi	r20, 0x0F	; 15
    346a:	40 5d       	subi	r20, 0xD0	; 208
    346c:	4a 33       	cpi	r20, 0x3A	; 58
    346e:	18 f0       	brcs	.+6      	; 0x3476 <__ultoa_invert+0x7c>
    3470:	49 5d       	subi	r20, 0xD9	; 217
    3472:	31 fd       	sbrc	r19, 1
    3474:	40 52       	subi	r20, 0x20	; 32
    3476:	41 93       	st	Z+, r20
    3478:	02 d0       	rcall	.+4      	; 0x347e <__ultoa_invert+0x84>
    347a:	a9 f7       	brne	.-22     	; 0x3466 <__ultoa_invert+0x6c>
    347c:	ea cf       	rjmp	.-44     	; 0x3452 <__ultoa_invert+0x58>
    347e:	b4 e0       	ldi	r27, 0x04	; 4
    3480:	a6 95       	lsr	r26
    3482:	97 95       	ror	r25
    3484:	87 95       	ror	r24
    3486:	77 95       	ror	r23
    3488:	67 95       	ror	r22
    348a:	ba 95       	dec	r27
    348c:	c9 f7       	brne	.-14     	; 0x3480 <__ultoa_invert+0x86>
    348e:	00 97       	sbiw	r24, 0x00	; 0
    3490:	61 05       	cpc	r22, r1
    3492:	71 05       	cpc	r23, r1
    3494:	08 95       	ret
    3496:	9b 01       	movw	r18, r22
    3498:	ac 01       	movw	r20, r24
    349a:	0a 2e       	mov	r0, r26
    349c:	06 94       	lsr	r0
    349e:	57 95       	ror	r21
    34a0:	47 95       	ror	r20
    34a2:	37 95       	ror	r19
    34a4:	27 95       	ror	r18
    34a6:	ba 95       	dec	r27
    34a8:	c9 f7       	brne	.-14     	; 0x349c <__ultoa_invert+0xa2>
    34aa:	62 0f       	add	r22, r18
    34ac:	73 1f       	adc	r23, r19
    34ae:	84 1f       	adc	r24, r20
    34b0:	95 1f       	adc	r25, r21
    34b2:	a0 1d       	adc	r26, r0
    34b4:	08 95       	ret

000034b6 <__prologue_saves__>:
    34b6:	2f 92       	push	r2
    34b8:	3f 92       	push	r3
    34ba:	4f 92       	push	r4
    34bc:	5f 92       	push	r5
    34be:	6f 92       	push	r6
    34c0:	7f 92       	push	r7
    34c2:	8f 92       	push	r8
    34c4:	9f 92       	push	r9
    34c6:	af 92       	push	r10
    34c8:	bf 92       	push	r11
    34ca:	cf 92       	push	r12
    34cc:	df 92       	push	r13
    34ce:	ef 92       	push	r14
    34d0:	ff 92       	push	r15
    34d2:	0f 93       	push	r16
    34d4:	1f 93       	push	r17
    34d6:	cf 93       	push	r28
    34d8:	df 93       	push	r29
    34da:	cd b7       	in	r28, 0x3d	; 61
    34dc:	de b7       	in	r29, 0x3e	; 62
    34de:	ca 1b       	sub	r28, r26
    34e0:	db 0b       	sbc	r29, r27
    34e2:	0f b6       	in	r0, 0x3f	; 63
    34e4:	f8 94       	cli
    34e6:	de bf       	out	0x3e, r29	; 62
    34e8:	0f be       	out	0x3f, r0	; 63
    34ea:	cd bf       	out	0x3d, r28	; 61
    34ec:	09 94       	ijmp

000034ee <__epilogue_restores__>:
    34ee:	2a 88       	ldd	r2, Y+18	; 0x12
    34f0:	39 88       	ldd	r3, Y+17	; 0x11
    34f2:	48 88       	ldd	r4, Y+16	; 0x10
    34f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    34f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    34f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    34fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    34fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    34fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    3500:	b9 84       	ldd	r11, Y+9	; 0x09
    3502:	c8 84       	ldd	r12, Y+8	; 0x08
    3504:	df 80       	ldd	r13, Y+7	; 0x07
    3506:	ee 80       	ldd	r14, Y+6	; 0x06
    3508:	fd 80       	ldd	r15, Y+5	; 0x05
    350a:	0c 81       	ldd	r16, Y+4	; 0x04
    350c:	1b 81       	ldd	r17, Y+3	; 0x03
    350e:	aa 81       	ldd	r26, Y+2	; 0x02
    3510:	b9 81       	ldd	r27, Y+1	; 0x01
    3512:	ce 0f       	add	r28, r30
    3514:	d1 1d       	adc	r29, r1
    3516:	0f b6       	in	r0, 0x3f	; 63
    3518:	f8 94       	cli
    351a:	de bf       	out	0x3e, r29	; 62
    351c:	0f be       	out	0x3f, r0	; 63
    351e:	cd bf       	out	0x3d, r28	; 61
    3520:	ed 01       	movw	r28, r26
    3522:	08 95       	ret

00003524 <_exit>:
    3524:	f8 94       	cli

00003526 <__stop_program>:
    3526:	ff cf       	rjmp	.-2      	; 0x3526 <__stop_program>
