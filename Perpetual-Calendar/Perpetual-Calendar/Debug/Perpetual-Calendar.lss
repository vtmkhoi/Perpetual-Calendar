
Perpetual-Calendar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f64  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00002f64  00002ff8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000019  0080006a  0080006a  00003002  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003002  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00003034  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00003070  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eb4  00000000  00000000  00003170  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c8  00000000  00000000  00005024  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000127d  00000000  00000000  000057ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  00006a6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a4  00000000  00000000  00006f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016d1  00000000  00000000  000074a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00008b75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__vector_1>
       8:	0c 94 17 13 	jmp	0x262e	; 0x262e <__vector_2>
       c:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__vector_3>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 43 12 	jmp	0x2486	; 0x2486 <__vector_11>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <__stack+0x15f>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	10 e0       	ldi	r17, 0x00	; 0
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	e4 e6       	ldi	r30, 0x64	; 100
      86:	ff e2       	ldi	r31, 0x2F	; 47
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	aa 36       	cpi	r26, 0x6A	; 106
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	20 e0       	ldi	r18, 0x00	; 0
      96:	aa e6       	ldi	r26, 0x6A	; 106
      98:	b0 e0       	ldi	r27, 0x00	; 0
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a3 38       	cpi	r26, 0x83	; 131
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 ed 11 	call	0x23da	; 0x23da <main>
      a8:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <TWI_Init>:
#define TWI_Clear_TWINT	(1 << TWINT)|(1 << TWEN)	//xoa TWIN de bat dau doc, doc xong thi NOT ACK
#define TWI_Read_ACK	(1 << TWINT)|(1 << TWEN)|(1 << TWEA)	//xoa TWIN de bat dau doc, sau khi doc set ACK

//khoi tao TWI
void TWI_Init(void){
	TWSR = 0x00;	//Prescaler=1 chia t?n cho 1
      b0:	11 b8       	out	0x01, r1	; 1
	TWBR = _100K;
      b2:	88 e4       	ldi	r24, 0x48	; 72
      b4:	80 b9       	out	0x00, r24	; 0
	TWCR = (1 << TWINT) | (1 << TWEN);
      b6:	84 e8       	ldi	r24, 0x84	; 132
      b8:	86 bf       	out	0x36, r24	; 54
      ba:	08 95       	ret

000000bc <TWI_DS1307_wadr>:
}

//chon dia chi thanh ghi can thao tac, dummy write
//Addr: dia thi thanh ghi can ghi
uint8_t TWI_DS1307_wadr(uint8_t Addr){
	TWCR = TWI_START;						//goi START condition
      bc:	94 ea       	ldi	r25, 0xA4	; 164
      be:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80) == 0x00);			//cho TWINT bit=1
      c0:	06 b6       	in	r0, 0x36	; 54
      c2:	07 fe       	sbrs	r0, 7
      c4:	fd cf       	rjmp	.-6      	; 0xc0 <TWI_DS1307_wadr+0x4>
	if((TWSR & 0xF8) != 0x08) return TWSR;	//neu goi Start co loi thi thoat
      c6:	91 b1       	in	r25, 0x01	; 1
      c8:	98 7f       	andi	r25, 0xF8	; 248
      ca:	98 30       	cpi	r25, 0x08	; 8
      cc:	11 f0       	breq	.+4      	; 0xd2 <TWI_DS1307_wadr+0x16>
      ce:	81 b1       	in	r24, 0x01	; 1
      d0:	08 95       	ret

	TWDR = (DS1307_SLA << 1) + TWI_W;		//dia chi DS va bit W
      d2:	90 ed       	ldi	r25, 0xD0	; 208
      d4:	93 b9       	out	0x03, r25	; 3
	TWCR = TWI_Clear_TWINT;					//xoa TWINT, bat dau goi SLA
      d6:	94 e8       	ldi	r25, 0x84	; 132
      d8:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80) == 0x00);			//cho TWINT bit=1
      da:	06 b6       	in	r0, 0x36	; 54
      dc:	07 fe       	sbrs	r0, 7
      de:	fd cf       	rjmp	.-6      	; 0xda <TWI_DS1307_wadr+0x1e>
	if((TWSR & 0xF8) != 0x18) return TWSR;	//neu co loi truyen SLA, thoat
      e0:	91 b1       	in	r25, 0x01	; 1
      e2:	98 7f       	andi	r25, 0xF8	; 248
      e4:	98 31       	cpi	r25, 0x18	; 24
      e6:	11 f0       	breq	.+4      	; 0xec <TWI_DS1307_wadr+0x30>
      e8:	81 b1       	in	r24, 0x01	; 1
      ea:	08 95       	ret

	TWDR = Addr;							//goi dia chi thanh ghi can ghi vao
      ec:	83 b9       	out	0x03, r24	; 3
	TWCR = TWI_Clear_TWINT;					//xoa TWINT de bat dau goi
      ee:	84 e8       	ldi	r24, 0x84	; 132
      f0:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80) == 0x00);			//check and wait for TWINT bit=1
      f2:	06 b6       	in	r0, 0x36	; 54
      f4:	07 fe       	sbrs	r0, 7
      f6:	fd cf       	rjmp	.-6      	; 0xf2 <TWI_DS1307_wadr+0x36>
	if((TWSR & 0xF8) != 0x28) return TWSR;	//neu du lieu goi ko thanh cong thi thoat
      f8:	81 b1       	in	r24, 0x01	; 1
      fa:	88 7f       	andi	r24, 0xF8	; 248
      fc:	88 32       	cpi	r24, 0x28	; 40
      fe:	11 f0       	breq	.+4      	; 0x104 <TWI_DS1307_wadr+0x48>
     100:	81 b1       	in	r24, 0x01	; 1
     102:	08 95       	ret
	
	TWCR = TWI_STOP;						//STOP condition
     104:	84 e9       	ldi	r24, 0x94	; 148
     106:	86 bf       	out	0x36, r24	; 54
	return 0;
     108:	80 e0       	ldi	r24, 0x00	; 0
}
     10a:	08 95       	ret

0000010c <TWI_DS1307_wblock>:
//Addr: dia thi thanh ghi can ghi
//Data[]: mang du lieu
//len: so luong byte can ghi
uint8_t TWI_DS1307_wblock(uint8_t Addr, uint8_t Data[], uint8_t len){
	
	TWCR = TWI_START;
     10c:	94 ea       	ldi	r25, 0xA4	; 164
     10e:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80) == 0x00);
     110:	06 b6       	in	r0, 0x36	; 54
     112:	07 fe       	sbrs	r0, 7
     114:	fd cf       	rjmp	.-6      	; 0x110 <TWI_DS1307_wblock+0x4>
	if((TWSR & 0xF8) != 0x08) return TWSR;
     116:	91 b1       	in	r25, 0x01	; 1
     118:	98 7f       	andi	r25, 0xF8	; 248
     11a:	98 30       	cpi	r25, 0x08	; 8
     11c:	11 f0       	breq	.+4      	; 0x122 <TWI_DS1307_wblock+0x16>
     11e:	81 b1       	in	r24, 0x01	; 1
     120:	08 95       	ret
	
	TWDR = (DS1307_SLA << 1) + TWI_W;
     122:	90 ed       	ldi	r25, 0xD0	; 208
     124:	93 b9       	out	0x03, r25	; 3
	TWCR = TWI_Clear_TWINT;
     126:	94 e8       	ldi	r25, 0x84	; 132
     128:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80) == 0x00);
     12a:	06 b6       	in	r0, 0x36	; 54
     12c:	07 fe       	sbrs	r0, 7
     12e:	fd cf       	rjmp	.-6      	; 0x12a <TWI_DS1307_wblock+0x1e>
	if((TWSR & 0xF8) != 0x18) return TWSR;
     130:	91 b1       	in	r25, 0x01	; 1
     132:	98 7f       	andi	r25, 0xF8	; 248
     134:	98 31       	cpi	r25, 0x18	; 24
     136:	11 f0       	breq	.+4      	; 0x13c <TWI_DS1307_wblock+0x30>
     138:	81 b1       	in	r24, 0x01	; 1
     13a:	08 95       	ret
	
	TWDR = Addr;
     13c:	83 b9       	out	0x03, r24	; 3
	TWCR = TWI_Clear_TWINT;
     13e:	84 e8       	ldi	r24, 0x84	; 132
     140:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80) == 0x00);
     142:	06 b6       	in	r0, 0x36	; 54
     144:	07 fe       	sbrs	r0, 7
     146:	fd cf       	rjmp	.-6      	; 0x142 <TWI_DS1307_wblock+0x36>
	if((TWSR & 0xF8) != 0x28) return TWSR;
     148:	81 b1       	in	r24, 0x01	; 1
     14a:	88 7f       	andi	r24, 0xF8	; 248
     14c:	88 32       	cpi	r24, 0x28	; 40
     14e:	a1 f0       	breq	.+40     	; 0x178 <TWI_DS1307_wblock+0x6c>
     150:	81 b1       	in	r24, 0x01	; 1
     152:	08 95       	ret

	for (uint8_t i = 0; i < len; i++){
		TWDR = Data[i];							//chuan bi xuat du lieu
     154:	fb 01       	movw	r30, r22
     156:	e8 0f       	add	r30, r24
     158:	f1 1d       	adc	r31, r1
     15a:	90 81       	ld	r25, Z
     15c:	93 b9       	out	0x03, r25	; 3
		TWCR = TWI_Clear_TWINT;					//xoa TWINT, bat dau send
     15e:	94 e8       	ldi	r25, 0x84	; 132
     160:	96 bf       	out	0x36, r25	; 54
		while((TWCR & 0x80) == 0x00);			//cho TWINT bit=1
     162:	06 b6       	in	r0, 0x36	; 54
     164:	07 fe       	sbrs	r0, 7
     166:	fd cf       	rjmp	.-6      	; 0x162 <TWI_DS1307_wblock+0x56>
		if((TWSR & 0xF8) != 0x28) return TWSR;	//neu status ko phai la 0x28 thi return
     168:	91 b1       	in	r25, 0x01	; 1
     16a:	98 7f       	andi	r25, 0xF8	; 248
     16c:	98 32       	cpi	r25, 0x28	; 40
     16e:	11 f0       	breq	.+4      	; 0x174 <TWI_DS1307_wblock+0x68>
     170:	81 b1       	in	r24, 0x01	; 1
     172:	08 95       	ret
	TWDR = Addr;
	TWCR = TWI_Clear_TWINT;
	while((TWCR & 0x80) == 0x00);
	if((TWSR & 0xF8) != 0x28) return TWSR;

	for (uint8_t i = 0; i < len; i++){
     174:	8f 5f       	subi	r24, 0xFF	; 255
     176:	01 c0       	rjmp	.+2      	; 0x17a <TWI_DS1307_wblock+0x6e>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	84 17       	cp	r24, r20
     17c:	58 f3       	brcs	.-42     	; 0x154 <TWI_DS1307_wblock+0x48>
		TWCR = TWI_Clear_TWINT;					//xoa TWINT, bat dau send
		while((TWCR & 0x80) == 0x00);			//cho TWINT bit=1
		if((TWSR & 0xF8) != 0x28) return TWSR;	//neu status ko phai la 0x28 thi return
	}
	
	TWCR = TWI_STOP;							//STOP condition
     17e:	84 e9       	ldi	r24, 0x94	; 148
     180:	86 bf       	out	0x36, r24	; 54
	return 0;
     182:	80 e0       	ldi	r24, 0x00	; 0
}
     184:	08 95       	ret

00000186 <TWI_DS1307_rblock>:

//doc 1 mang tu DS1307
uint8_t TWI_DS1307_rblock(uint8_t Data[], uint8_t len){
     186:	dc 01       	movw	r26, r24
	uint8_t i;
	
	
	TWCR = TWI_START;
     188:	84 ea       	ldi	r24, 0xA4	; 164
     18a:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x08));
     18c:	06 b6       	in	r0, 0x36	; 54
     18e:	07 fe       	sbrs	r0, 7
     190:	fd cf       	rjmp	.-6      	; 0x18c <TWI_DS1307_rblock+0x6>
     192:	81 b1       	in	r24, 0x01	; 1
     194:	88 7f       	andi	r24, 0xF8	; 248
     196:	88 30       	cpi	r24, 0x08	; 8
     198:	c9 f7       	brne	.-14     	; 0x18c <TWI_DS1307_rblock+0x6>

	TWDR = (DS1307_SLA << 1) + TWI_R;
     19a:	81 ed       	ldi	r24, 0xD1	; 209
     19c:	83 b9       	out	0x03, r24	; 3
	TWCR = TWI_Clear_TWINT;
     19e:	84 e8       	ldi	r24, 0x84	; 132
     1a0:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x40));
     1a2:	06 b6       	in	r0, 0x36	; 54
     1a4:	07 fe       	sbrs	r0, 7
     1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <TWI_DS1307_rblock+0x1c>
     1a8:	91 b1       	in	r25, 0x01	; 1
     1aa:	98 7f       	andi	r25, 0xF8	; 248
     1ac:	90 34       	cpi	r25, 0x40	; 64
     1ae:	c9 f7       	brne	.-14     	; 0x1a2 <TWI_DS1307_rblock+0x1c>
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <TWI_DS1307_rblock+0x4c>
	
	for (i = 0; i < len-1; i++){
		TWCR = TWI_Read_ACK;
     1b4:	84 ec       	ldi	r24, 0xC4	; 196
     1b6:	86 bf       	out	0x36, r24	; 54
		while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x50));
     1b8:	06 b6       	in	r0, 0x36	; 54
     1ba:	07 fe       	sbrs	r0, 7
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <TWI_DS1307_rblock+0x32>
     1be:	91 b1       	in	r25, 0x01	; 1
     1c0:	98 7f       	andi	r25, 0xF8	; 248
     1c2:	90 35       	cpi	r25, 0x50	; 80
     1c4:	c9 f7       	brne	.-14     	; 0x1b8 <TWI_DS1307_rblock+0x32>
		Data[i] = TWDR;
     1c6:	fd 01       	movw	r30, r26
     1c8:	e2 0f       	add	r30, r18
     1ca:	f1 1d       	adc	r31, r1
     1cc:	83 b1       	in	r24, 0x03	; 3
     1ce:	80 83       	st	Z, r24

	TWDR = (DS1307_SLA << 1) + TWI_R;
	TWCR = TWI_Clear_TWINT;
	while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x40));
	
	for (i = 0; i < len-1; i++){
     1d0:	2f 5f       	subi	r18, 0xFF	; 255
     1d2:	e2 2f       	mov	r30, r18
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	46 2f       	mov	r20, r22
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	41 50       	subi	r20, 0x01	; 1
     1dc:	51 09       	sbc	r21, r1
     1de:	e4 17       	cp	r30, r20
     1e0:	f5 07       	cpc	r31, r21
     1e2:	44 f3       	brlt	.-48     	; 0x1b4 <TWI_DS1307_rblock+0x2e>
		TWCR = TWI_Read_ACK;
		while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x50));
		Data[i] = TWDR;
	}
	
	TWCR = TWI_Clear_TWINT;
     1e4:	84 e8       	ldi	r24, 0x84	; 132
     1e6:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x58));
     1e8:	06 b6       	in	r0, 0x36	; 54
     1ea:	07 fe       	sbrs	r0, 7
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <TWI_DS1307_rblock+0x62>
     1ee:	91 b1       	in	r25, 0x01	; 1
     1f0:	98 7f       	andi	r25, 0xF8	; 248
     1f2:	98 35       	cpi	r25, 0x58	; 88
     1f4:	c9 f7       	brne	.-14     	; 0x1e8 <TWI_DS1307_rblock+0x62>
	Data[len-1] = TWDR;
     1f6:	86 2f       	mov	r24, r22
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	a8 0f       	add	r26, r24
     1fe:	b9 1f       	adc	r27, r25
     200:	83 b1       	in	r24, 0x03	; 3
     202:	8c 93       	st	X, r24
	
	TWCR = TWI_STOP;
     204:	84 e9       	ldi	r24, 0x94	; 148
     206:	86 bf       	out	0x36, r24	; 54
	return 0;
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	08 95       	ret

0000020c <BCDToDec>:
char SW_time_date = 0;

// chuyen doi nhi phan sang thap phan
uint8_t BCDToDec(uint8_t BCD){
	uint8_t L, H;
	L=BCD & 0x0F;
     20c:	38 2f       	mov	r19, r24
     20e:	3f 70       	andi	r19, 0x0F	; 15
	H=(BCD>>4)*10;
     210:	98 2f       	mov	r25, r24
     212:	92 95       	swap	r25
     214:	9f 70       	andi	r25, 0x0F	; 15
     216:	99 0f       	add	r25, r25
     218:	29 2f       	mov	r18, r25
     21a:	22 0f       	add	r18, r18
     21c:	22 0f       	add	r18, r18
     21e:	89 2f       	mov	r24, r25
     220:	82 0f       	add	r24, r18
	return (H+L);
}
     222:	83 0f       	add	r24, r19
     224:	08 95       	ret

00000226 <DecToBCD>:
// chuyen doi thap phan sang nhi phan
uint8_t DecToBCD(uint8_t Dec){
	uint8_t L, H;
	L=Dec % 10;
     226:	2d ec       	ldi	r18, 0xCD	; 205
     228:	82 9f       	mul	r24, r18
     22a:	21 2d       	mov	r18, r1
     22c:	11 24       	eor	r1, r1
     22e:	92 2f       	mov	r25, r18
     230:	96 95       	lsr	r25
     232:	96 95       	lsr	r25
     234:	96 95       	lsr	r25
     236:	99 0f       	add	r25, r25
     238:	39 2f       	mov	r19, r25
     23a:	33 0f       	add	r19, r19
     23c:	33 0f       	add	r19, r19
     23e:	93 0f       	add	r25, r19
     240:	89 1b       	sub	r24, r25
	H=(Dec/10)<<4;
     242:	26 95       	lsr	r18
     244:	26 95       	lsr	r18
     246:	26 95       	lsr	r18
	return (H+L);
}
     248:	30 e1       	ldi	r19, 0x10	; 16
     24a:	23 9f       	mul	r18, r19
     24c:	80 0d       	add	r24, r0
     24e:	11 24       	eor	r1, r1
     250:	08 95       	ret

00000252 <Decode>:

void Decode(void){
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
    //BCD data converter function from DS1307 to DEC
	Second 	= BCDToDec(tData[0] & 0x7F);
     256:	ca e7       	ldi	r28, 0x7A	; 122
     258:	d0 e0       	ldi	r29, 0x00	; 0
     25a:	88 81       	ld	r24, Y
     25c:	8f 77       	andi	r24, 0x7F	; 127
     25e:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     262:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <Second>
	Minute 	= BCDToDec(tData[1]);
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     26c:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Minute>
	Hour = BCDToDec(tData[2] & 0x3F);
     270:	8a 81       	ldd	r24, Y+2	; 0x02
     272:	8f 73       	andi	r24, 0x3F	; 63
     274:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     278:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <Hour>
	Day		= BCDToDec(tData[3]);
     27c:	8b 81       	ldd	r24, Y+3	; 0x03
     27e:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     282:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Day>
	Date   	= BCDToDec(tData[4]);
     286:	8c 81       	ldd	r24, Y+4	; 0x04
     288:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     28c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Date>
	Month	= BCDToDec(tData[5]);
     290:	8d 81       	ldd	r24, Y+5	; 0x05
     292:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     296:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Month>
	Year	= BCDToDec(tData[6]);
     29a:	8e 81       	ldd	r24, Y+6	; 0x06
     29c:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2a0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Year>
}
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <FixTime>:

//Write to DS1307 time that want to change
void FixTime()
{
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
	tData[0] = DecToBCD(Second);
     2ae:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <Second>
     2b2:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     2b6:	ca e7       	ldi	r28, 0x7A	; 122
     2b8:	d0 e0       	ldi	r29, 0x00	; 0
     2ba:	88 83       	st	Y, r24
	tData[1] = DecToBCD(Minute);
     2bc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Minute>
     2c0:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     2c4:	89 83       	std	Y+1, r24	; 0x01
	tData[2] = DecToBCD(Hour);
     2c6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <Hour>
     2ca:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     2ce:	8a 83       	std	Y+2, r24	; 0x02
	tData[3] = DecToBCD(Day);
     2d0:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Day>
     2d4:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     2d8:	8b 83       	std	Y+3, r24	; 0x03
	tData[4] = DecToBCD(Date);
     2da:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Date>
     2de:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     2e2:	8c 83       	std	Y+4, r24	; 0x04
	tData[5] = DecToBCD(Month);
     2e4:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Month>
     2e8:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     2ec:	8d 83       	std	Y+5, r24	; 0x05
	tData[6] = DecToBCD(Year);
     2ee:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Year>
     2f2:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     2f6:	8e 83       	std	Y+6, r24	; 0x06
	TWI_DS1307_wblock(0x00, tData, 7);
     2f8:	47 e0       	ldi	r20, 0x07	; 7
     2fa:	be 01       	movw	r22, r28
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	0e 94 86 00 	call	0x10c	; 0x10c <TWI_DS1307_wblock>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     302:	8f ec       	ldi	r24, 0xCF	; 207
     304:	97 e0       	ldi	r25, 0x07	; 7
     306:	01 97       	sbiw	r24, 0x01	; 1
     308:	f1 f7       	brne	.-4      	; 0x306 <FixTime+0x5c>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <FixTime+0x62>
     30c:	00 00       	nop
	_delay_ms(1);
	TWI_DS1307_wadr(0x00);
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	0e 94 5e 00 	call	0xbc	; 0xbc <TWI_DS1307_wadr>
     314:	8f ec       	ldi	r24, 0xCF	; 207
     316:	97 e0       	ldi	r25, 0x07	; 7
     318:	01 97       	sbiw	r24, 0x01	; 1
     31a:	f1 f7       	brne	.-4      	; 0x318 <FixTime+0x6e>
     31c:	00 c0       	rjmp	.+0      	; 0x31e <FixTime+0x74>
     31e:	00 00       	nop
	_delay_ms(1);
}
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <spiSendByte>:

void spiSendByte (char databyte)
{
	// Copy data into the SPI data register
	SPDR = databyte;
     326:	8f b9       	out	0x0f, r24	; 15
	// Wait until transfer is complete
	while (!(SPSR & (1 << SPIF)));
     328:	77 9b       	sbis	0x0e, 7	; 14
     32a:	fe cf       	rjmp	.-4      	; 0x328 <spiSendByte+0x2>
}
     32c:	08 95       	ret

0000032e <MAX7219_writeData>:

void MAX7219_writeData(uint8_t data_register, uint8_t data)
{
     32e:	cf 93       	push	r28
     330:	c6 2f       	mov	r28, r22
	MAX7219_LOAD0;
     332:	98 b3       	in	r25, 0x18	; 24
     334:	9f 7e       	andi	r25, 0xEF	; 239
     336:	98 bb       	out	0x18, r25	; 24
	// Send the register where the data will be stored
	spiSendByte(data_register);
     338:	0e 94 93 01 	call	0x326	; 0x326 <spiSendByte>
	// Send the data to be stored
	spiSendByte(data);
     33c:	8c 2f       	mov	r24, r28
     33e:	0e 94 93 01 	call	0x326	; 0x326 <spiSendByte>
	MAX7219_LOAD1;
     342:	88 b3       	in	r24, 0x18	; 24
     344:	80 61       	ori	r24, 0x10	; 16
     346:	88 bb       	out	0x18, r24	; 24
}
     348:	cf 91       	pop	r28
     34a:	08 95       	ret

0000034c <MAX7219_clearDisplay>:

void MAX7219_clearDisplay()
{
     34c:	cf 93       	push	r28
	char i = digitsInUse;
     34e:	c8 e0       	ldi	r28, 0x08	; 8
	// Loop until 0, but don't run for zero
	do {
		// Set each display in use to blank
		MAX7219_writeData(i, MAX7219_CHAR_BLANK);
     350:	6f e0       	ldi	r22, 0x0F	; 15
     352:	8c 2f       	mov	r24, r28
     354:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
	} while (--i);
     358:	c1 50       	subi	r28, 0x01	; 1
     35a:	d1 f7       	brne	.-12     	; 0x350 <MAX7219_clearDisplay+0x4>
}
     35c:	cf 91       	pop	r28
     35e:	08 95       	ret

00000360 <Display_7seg>:

void Display_7seg (void){
     360:	cf 93       	push	r28
     362:	df 93       	push	r29
	if (blinkmode==0)
     364:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <blinkmode>
     368:	81 11       	cpse	r24, r1
     36a:	2e c3       	rjmp	.+1628   	; 0x9c8 <__stack+0x169>
	{
		/********display time -> hh:mm:ss***************/
		
		if (SW_time_date == 0)
     36c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
     370:	81 11       	cpse	r24, r1
     372:	74 c0       	rjmp	.+232    	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
		{
			MAX7219_clearDisplay();
     374:	0e 94 a6 01 	call	0x34c	; 0x34c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(Minute%10));
     378:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <Minute>
     37c:	cd ec       	ldi	r28, 0xCD	; 205
     37e:	6c 9f       	mul	r22, r28
     380:	81 2d       	mov	r24, r1
     382:	11 24       	eor	r1, r1
     384:	86 95       	lsr	r24
     386:	86 95       	lsr	r24
     388:	86 95       	lsr	r24
     38a:	88 0f       	add	r24, r24
     38c:	98 2f       	mov	r25, r24
     38e:	99 0f       	add	r25, r25
     390:	99 0f       	add	r25, r25
     392:	89 0f       	add	r24, r25
     394:	68 1b       	sub	r22, r24
     396:	88 e0       	ldi	r24, 0x08	; 8
     398:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(Minute/10));
     39c:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <Minute>
     3a0:	6c 9f       	mul	r22, r28
     3a2:	61 2d       	mov	r22, r1
     3a4:	11 24       	eor	r1, r1
     3a6:	66 95       	lsr	r22
     3a8:	66 95       	lsr	r22
     3aa:	66 95       	lsr	r22
     3ac:	87 e0       	ldi	r24, 0x07	; 7
     3ae:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(Hour%10));
     3b2:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <Hour>
     3b6:	6c 9f       	mul	r22, r28
     3b8:	81 2d       	mov	r24, r1
     3ba:	11 24       	eor	r1, r1
     3bc:	86 95       	lsr	r24
     3be:	86 95       	lsr	r24
     3c0:	86 95       	lsr	r24
     3c2:	88 0f       	add	r24, r24
     3c4:	98 2f       	mov	r25, r24
     3c6:	99 0f       	add	r25, r25
     3c8:	99 0f       	add	r25, r25
     3ca:	89 0f       	add	r24, r25
     3cc:	68 1b       	sub	r22, r24
     3ce:	86 e0       	ldi	r24, 0x06	; 6
     3d0:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(Hour/10));
     3d4:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <Hour>
     3d8:	6c 9f       	mul	r22, r28
     3da:	61 2d       	mov	r22, r1
     3dc:	11 24       	eor	r1, r1
     3de:	66 95       	lsr	r22
     3e0:	66 95       	lsr	r22
     3e2:	66 95       	lsr	r22
     3e4:	85 e0       	ldi	r24, 0x05	; 5
     3e6:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
     3ea:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Month>
     3ee:	6c 9f       	mul	r22, r28
     3f0:	81 2d       	mov	r24, r1
     3f2:	11 24       	eor	r1, r1
     3f4:	86 95       	lsr	r24
     3f6:	86 95       	lsr	r24
     3f8:	86 95       	lsr	r24
     3fa:	88 0f       	add	r24, r24
     3fc:	98 2f       	mov	r25, r24
     3fe:	99 0f       	add	r25, r25
     400:	99 0f       	add	r25, r25
     402:	89 0f       	add	r24, r25
     404:	68 1b       	sub	r22, r24
     406:	84 e0       	ldi	r24, 0x04	; 4
     408:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
     40c:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Month>
     410:	6c 9f       	mul	r22, r28
     412:	61 2d       	mov	r22, r1
     414:	11 24       	eor	r1, r1
     416:	66 95       	lsr	r22
     418:	66 95       	lsr	r22
     41a:	66 95       	lsr	r22
     41c:	83 e0       	ldi	r24, 0x03	; 3
     41e:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
     422:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Date>
     426:	6c 9f       	mul	r22, r28
     428:	81 2d       	mov	r24, r1
     42a:	11 24       	eor	r1, r1
     42c:	86 95       	lsr	r24
     42e:	86 95       	lsr	r24
     430:	86 95       	lsr	r24
     432:	88 0f       	add	r24, r24
     434:	98 2f       	mov	r25, r24
     436:	99 0f       	add	r25, r25
     438:	99 0f       	add	r25, r25
     43a:	89 0f       	add	r24, r25
     43c:	68 1b       	sub	r22, r24
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
     444:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Date>
     448:	6c 9f       	mul	r22, r28
     44a:	61 2d       	mov	r22, r1
     44c:	11 24       	eor	r1, r1
     44e:	66 95       	lsr	r22
     450:	66 95       	lsr	r22
     452:	66 95       	lsr	r22
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
     45a:	a3 c7       	rjmp	.+3910   	; 0x13a2 <__stack+0xb43>
			
		}
		/********display date -> DD:MM:YY***************/
		else if (SW_time_date == 1)
     45c:	81 30       	cpi	r24, 0x01	; 1
     45e:	09 f0       	breq	.+2      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     460:	1e c1       	rjmp	.+572    	; 0x69e <__EEPROM_REGION_LENGTH__+0x29e>
		{
			MAX7219_clearDisplay();
     462:	0e 94 a6 01 	call	0x34c	; 0x34c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
     466:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <yyyy>
     46a:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <yyyy+0x1>
     46e:	9f 01       	movw	r18, r30
     470:	36 95       	lsr	r19
     472:	27 95       	ror	r18
     474:	36 95       	lsr	r19
     476:	27 95       	ror	r18
     478:	36 95       	lsr	r19
     47a:	27 95       	ror	r18
     47c:	a5 ec       	ldi	r26, 0xC5	; 197
     47e:	b0 e2       	ldi	r27, 0x20	; 32
     480:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     484:	ac 01       	movw	r20, r24
     486:	52 95       	swap	r21
     488:	42 95       	swap	r20
     48a:	4f 70       	andi	r20, 0x0F	; 15
     48c:	45 27       	eor	r20, r21
     48e:	5f 70       	andi	r21, 0x0F	; 15
     490:	45 27       	eor	r20, r21
     492:	c8 ee       	ldi	r28, 0xE8	; 232
     494:	d3 e0       	ldi	r29, 0x03	; 3
     496:	4c 9f       	mul	r20, r28
     498:	c0 01       	movw	r24, r0
     49a:	4d 9f       	mul	r20, r29
     49c:	90 0d       	add	r25, r0
     49e:	5c 9f       	mul	r21, r28
     4a0:	90 0d       	add	r25, r0
     4a2:	11 24       	eor	r1, r1
     4a4:	af 01       	movw	r20, r30
     4a6:	48 1b       	sub	r20, r24
     4a8:	59 0b       	sbc	r21, r25
     4aa:	9a 01       	movw	r18, r20
     4ac:	ad ec       	ldi	r26, 0xCD	; 205
     4ae:	bc ec       	ldi	r27, 0xCC	; 204
     4b0:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     4b4:	96 95       	lsr	r25
     4b6:	87 95       	ror	r24
     4b8:	96 95       	lsr	r25
     4ba:	87 95       	ror	r24
     4bc:	96 95       	lsr	r25
     4be:	87 95       	ror	r24
     4c0:	bc 01       	movw	r22, r24
     4c2:	66 0f       	add	r22, r22
     4c4:	77 1f       	adc	r23, r23
     4c6:	88 0f       	add	r24, r24
     4c8:	99 1f       	adc	r25, r25
     4ca:	88 0f       	add	r24, r24
     4cc:	99 1f       	adc	r25, r25
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	86 0f       	add	r24, r22
     4d4:	97 1f       	adc	r25, r23
     4d6:	28 1b       	sub	r18, r24
     4d8:	39 0b       	sbc	r19, r25
     4da:	62 2f       	mov	r22, r18
     4dc:	88 e0       	ldi	r24, 0x08	; 8
     4de:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
     4e2:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <yyyy>
     4e6:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <yyyy+0x1>
     4ea:	9a 01       	movw	r18, r20
     4ec:	36 95       	lsr	r19
     4ee:	27 95       	ror	r18
     4f0:	36 95       	lsr	r19
     4f2:	27 95       	ror	r18
     4f4:	36 95       	lsr	r19
     4f6:	27 95       	ror	r18
     4f8:	a5 ec       	ldi	r26, 0xC5	; 197
     4fa:	b0 e2       	ldi	r27, 0x20	; 32
     4fc:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     500:	9c 01       	movw	r18, r24
     502:	32 95       	swap	r19
     504:	22 95       	swap	r18
     506:	2f 70       	andi	r18, 0x0F	; 15
     508:	23 27       	eor	r18, r19
     50a:	3f 70       	andi	r19, 0x0F	; 15
     50c:	23 27       	eor	r18, r19
     50e:	2c 9f       	mul	r18, r28
     510:	c0 01       	movw	r24, r0
     512:	2d 9f       	mul	r18, r29
     514:	90 0d       	add	r25, r0
     516:	3c 9f       	mul	r19, r28
     518:	90 0d       	add	r25, r0
     51a:	11 24       	eor	r1, r1
     51c:	9a 01       	movw	r18, r20
     51e:	28 1b       	sub	r18, r24
     520:	39 0b       	sbc	r19, r25
     522:	ad ec       	ldi	r26, 0xCD	; 205
     524:	bc ec       	ldi	r27, 0xCC	; 204
     526:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     52a:	ac 01       	movw	r20, r24
     52c:	56 95       	lsr	r21
     52e:	47 95       	ror	r20
     530:	56 95       	lsr	r21
     532:	47 95       	ror	r20
     534:	56 95       	lsr	r21
     536:	47 95       	ror	r20
     538:	9a 01       	movw	r18, r20
     53a:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     53e:	96 95       	lsr	r25
     540:	87 95       	ror	r24
     542:	96 95       	lsr	r25
     544:	87 95       	ror	r24
     546:	96 95       	lsr	r25
     548:	87 95       	ror	r24
     54a:	bc 01       	movw	r22, r24
     54c:	66 0f       	add	r22, r22
     54e:	77 1f       	adc	r23, r23
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
     55c:	86 0f       	add	r24, r22
     55e:	97 1f       	adc	r25, r23
     560:	28 1b       	sub	r18, r24
     562:	39 0b       	sbc	r19, r25
     564:	62 2f       	mov	r22, r18
     566:	87 e0       	ldi	r24, 0x07	; 7
     568:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
     56c:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <yyyy>
     570:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <yyyy+0x1>
     574:	9a 01       	movw	r18, r20
     576:	36 95       	lsr	r19
     578:	27 95       	ror	r18
     57a:	36 95       	lsr	r19
     57c:	27 95       	ror	r18
     57e:	36 95       	lsr	r19
     580:	27 95       	ror	r18
     582:	a5 ec       	ldi	r26, 0xC5	; 197
     584:	b0 e2       	ldi	r27, 0x20	; 32
     586:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     58a:	92 95       	swap	r25
     58c:	82 95       	swap	r24
     58e:	8f 70       	andi	r24, 0x0F	; 15
     590:	89 27       	eor	r24, r25
     592:	9f 70       	andi	r25, 0x0F	; 15
     594:	89 27       	eor	r24, r25
     596:	8c 9f       	mul	r24, r28
     598:	90 01       	movw	r18, r0
     59a:	8d 9f       	mul	r24, r29
     59c:	30 0d       	add	r19, r0
     59e:	9c 9f       	mul	r25, r28
     5a0:	30 0d       	add	r19, r0
     5a2:	11 24       	eor	r1, r1
     5a4:	ca 01       	movw	r24, r20
     5a6:	82 1b       	sub	r24, r18
     5a8:	93 0b       	sbc	r25, r19
     5aa:	9c 01       	movw	r18, r24
     5ac:	36 95       	lsr	r19
     5ae:	27 95       	ror	r18
     5b0:	36 95       	lsr	r19
     5b2:	27 95       	ror	r18
     5b4:	ab e7       	ldi	r26, 0x7B	; 123
     5b6:	b4 e1       	ldi	r27, 0x14	; 20
     5b8:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     5bc:	ac 01       	movw	r20, r24
     5be:	56 95       	lsr	r21
     5c0:	47 95       	ror	r20
     5c2:	9a 01       	movw	r18, r20
     5c4:	ad ec       	ldi	r26, 0xCD	; 205
     5c6:	bc ec       	ldi	r27, 0xCC	; 204
     5c8:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     5cc:	96 95       	lsr	r25
     5ce:	87 95       	ror	r24
     5d0:	96 95       	lsr	r25
     5d2:	87 95       	ror	r24
     5d4:	96 95       	lsr	r25
     5d6:	87 95       	ror	r24
     5d8:	bc 01       	movw	r22, r24
     5da:	66 0f       	add	r22, r22
     5dc:	77 1f       	adc	r23, r23
     5de:	88 0f       	add	r24, r24
     5e0:	99 1f       	adc	r25, r25
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	88 0f       	add	r24, r24
     5e8:	99 1f       	adc	r25, r25
     5ea:	86 0f       	add	r24, r22
     5ec:	97 1f       	adc	r25, r23
     5ee:	28 1b       	sub	r18, r24
     5f0:	39 0b       	sbc	r19, r25
     5f2:	62 2f       	mov	r22, r18
     5f4:	86 e0       	ldi	r24, 0x06	; 6
     5f6:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
     5fa:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <yyyy>
     5fe:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <yyyy+0x1>
     602:	36 95       	lsr	r19
     604:	27 95       	ror	r18
     606:	36 95       	lsr	r19
     608:	27 95       	ror	r18
     60a:	36 95       	lsr	r19
     60c:	27 95       	ror	r18
     60e:	a5 ec       	ldi	r26, 0xC5	; 197
     610:	b0 e2       	ldi	r27, 0x20	; 32
     612:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     616:	92 95       	swap	r25
     618:	82 95       	swap	r24
     61a:	8f 70       	andi	r24, 0x0F	; 15
     61c:	89 27       	eor	r24, r25
     61e:	9f 70       	andi	r25, 0x0F	; 15
     620:	89 27       	eor	r24, r25
     622:	68 2f       	mov	r22, r24
     624:	85 e0       	ldi	r24, 0x05	; 5
     626:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
     62a:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Month>
     62e:	cd ec       	ldi	r28, 0xCD	; 205
     630:	6c 9f       	mul	r22, r28
     632:	81 2d       	mov	r24, r1
     634:	11 24       	eor	r1, r1
     636:	86 95       	lsr	r24
     638:	86 95       	lsr	r24
     63a:	86 95       	lsr	r24
     63c:	88 0f       	add	r24, r24
     63e:	98 2f       	mov	r25, r24
     640:	99 0f       	add	r25, r25
     642:	99 0f       	add	r25, r25
     644:	89 0f       	add	r24, r25
     646:	68 1b       	sub	r22, r24
     648:	84 e0       	ldi	r24, 0x04	; 4
     64a:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
     64e:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Month>
     652:	6c 9f       	mul	r22, r28
     654:	61 2d       	mov	r22, r1
     656:	11 24       	eor	r1, r1
     658:	66 95       	lsr	r22
     65a:	66 95       	lsr	r22
     65c:	66 95       	lsr	r22
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
     664:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Date>
     668:	6c 9f       	mul	r22, r28
     66a:	81 2d       	mov	r24, r1
     66c:	11 24       	eor	r1, r1
     66e:	86 95       	lsr	r24
     670:	86 95       	lsr	r24
     672:	86 95       	lsr	r24
     674:	88 0f       	add	r24, r24
     676:	98 2f       	mov	r25, r24
     678:	99 0f       	add	r25, r25
     67a:	99 0f       	add	r25, r25
     67c:	89 0f       	add	r24, r25
     67e:	68 1b       	sub	r22, r24
     680:	82 e0       	ldi	r24, 0x02	; 2
     682:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
     686:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Date>
     68a:	6c 9f       	mul	r22, r28
     68c:	61 2d       	mov	r22, r1
     68e:	11 24       	eor	r1, r1
     690:	66 95       	lsr	r22
     692:	66 95       	lsr	r22
     694:	66 95       	lsr	r22
     696:	81 e0       	ldi	r24, 0x01	; 1
     698:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
     69c:	82 c6       	rjmp	.+3332   	; 0x13a2 <__stack+0xb43>
			
		}
		/********display AM LICH *********************/
		else if (SW_time_date==2)
     69e:	82 30       	cpi	r24, 0x02	; 2
     6a0:	09 f0       	breq	.+2      	; 0x6a4 <__EEPROM_REGION_LENGTH__+0x2a4>
     6a2:	1e c1       	rjmp	.+572    	; 0x8e0 <__stack+0x81>
		{
			MAX7219_clearDisplay();
     6a4:	0e 94 a6 01 	call	0x34c	; 0x34c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,((lunarYear%1000)%10));
     6a8:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <lunarYear>
     6ac:	f0 91 82 00 	lds	r31, 0x0082	; 0x800082 <lunarYear+0x1>
     6b0:	9f 01       	movw	r18, r30
     6b2:	36 95       	lsr	r19
     6b4:	27 95       	ror	r18
     6b6:	36 95       	lsr	r19
     6b8:	27 95       	ror	r18
     6ba:	36 95       	lsr	r19
     6bc:	27 95       	ror	r18
     6be:	a5 ec       	ldi	r26, 0xC5	; 197
     6c0:	b0 e2       	ldi	r27, 0x20	; 32
     6c2:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     6c6:	ac 01       	movw	r20, r24
     6c8:	52 95       	swap	r21
     6ca:	42 95       	swap	r20
     6cc:	4f 70       	andi	r20, 0x0F	; 15
     6ce:	45 27       	eor	r20, r21
     6d0:	5f 70       	andi	r21, 0x0F	; 15
     6d2:	45 27       	eor	r20, r21
     6d4:	c8 ee       	ldi	r28, 0xE8	; 232
     6d6:	d3 e0       	ldi	r29, 0x03	; 3
     6d8:	4c 9f       	mul	r20, r28
     6da:	c0 01       	movw	r24, r0
     6dc:	4d 9f       	mul	r20, r29
     6de:	90 0d       	add	r25, r0
     6e0:	5c 9f       	mul	r21, r28
     6e2:	90 0d       	add	r25, r0
     6e4:	11 24       	eor	r1, r1
     6e6:	af 01       	movw	r20, r30
     6e8:	48 1b       	sub	r20, r24
     6ea:	59 0b       	sbc	r21, r25
     6ec:	9a 01       	movw	r18, r20
     6ee:	ad ec       	ldi	r26, 0xCD	; 205
     6f0:	bc ec       	ldi	r27, 0xCC	; 204
     6f2:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     6f6:	96 95       	lsr	r25
     6f8:	87 95       	ror	r24
     6fa:	96 95       	lsr	r25
     6fc:	87 95       	ror	r24
     6fe:	96 95       	lsr	r25
     700:	87 95       	ror	r24
     702:	bc 01       	movw	r22, r24
     704:	66 0f       	add	r22, r22
     706:	77 1f       	adc	r23, r23
     708:	88 0f       	add	r24, r24
     70a:	99 1f       	adc	r25, r25
     70c:	88 0f       	add	r24, r24
     70e:	99 1f       	adc	r25, r25
     710:	88 0f       	add	r24, r24
     712:	99 1f       	adc	r25, r25
     714:	86 0f       	add	r24, r22
     716:	97 1f       	adc	r25, r23
     718:	28 1b       	sub	r18, r24
     71a:	39 0b       	sbc	r19, r25
     71c:	62 2f       	mov	r22, r18
     71e:	88 e0       	ldi	r24, 0x08	; 8
     720:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(((lunarYear%1000)/10)%10));
     724:	40 91 81 00 	lds	r20, 0x0081	; 0x800081 <lunarYear>
     728:	50 91 82 00 	lds	r21, 0x0082	; 0x800082 <lunarYear+0x1>
     72c:	9a 01       	movw	r18, r20
     72e:	36 95       	lsr	r19
     730:	27 95       	ror	r18
     732:	36 95       	lsr	r19
     734:	27 95       	ror	r18
     736:	36 95       	lsr	r19
     738:	27 95       	ror	r18
     73a:	a5 ec       	ldi	r26, 0xC5	; 197
     73c:	b0 e2       	ldi	r27, 0x20	; 32
     73e:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     742:	9c 01       	movw	r18, r24
     744:	32 95       	swap	r19
     746:	22 95       	swap	r18
     748:	2f 70       	andi	r18, 0x0F	; 15
     74a:	23 27       	eor	r18, r19
     74c:	3f 70       	andi	r19, 0x0F	; 15
     74e:	23 27       	eor	r18, r19
     750:	2c 9f       	mul	r18, r28
     752:	c0 01       	movw	r24, r0
     754:	2d 9f       	mul	r18, r29
     756:	90 0d       	add	r25, r0
     758:	3c 9f       	mul	r19, r28
     75a:	90 0d       	add	r25, r0
     75c:	11 24       	eor	r1, r1
     75e:	9a 01       	movw	r18, r20
     760:	28 1b       	sub	r18, r24
     762:	39 0b       	sbc	r19, r25
     764:	ad ec       	ldi	r26, 0xCD	; 205
     766:	bc ec       	ldi	r27, 0xCC	; 204
     768:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     76c:	ac 01       	movw	r20, r24
     76e:	56 95       	lsr	r21
     770:	47 95       	ror	r20
     772:	56 95       	lsr	r21
     774:	47 95       	ror	r20
     776:	56 95       	lsr	r21
     778:	47 95       	ror	r20
     77a:	9a 01       	movw	r18, r20
     77c:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     780:	96 95       	lsr	r25
     782:	87 95       	ror	r24
     784:	96 95       	lsr	r25
     786:	87 95       	ror	r24
     788:	96 95       	lsr	r25
     78a:	87 95       	ror	r24
     78c:	bc 01       	movw	r22, r24
     78e:	66 0f       	add	r22, r22
     790:	77 1f       	adc	r23, r23
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	88 0f       	add	r24, r24
     798:	99 1f       	adc	r25, r25
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	86 0f       	add	r24, r22
     7a0:	97 1f       	adc	r25, r23
     7a2:	28 1b       	sub	r18, r24
     7a4:	39 0b       	sbc	r19, r25
     7a6:	62 2f       	mov	r22, r18
     7a8:	87 e0       	ldi	r24, 0x07	; 7
     7aa:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(((lunarYear%1000)/100)%10));
     7ae:	40 91 81 00 	lds	r20, 0x0081	; 0x800081 <lunarYear>
     7b2:	50 91 82 00 	lds	r21, 0x0082	; 0x800082 <lunarYear+0x1>
     7b6:	9a 01       	movw	r18, r20
     7b8:	36 95       	lsr	r19
     7ba:	27 95       	ror	r18
     7bc:	36 95       	lsr	r19
     7be:	27 95       	ror	r18
     7c0:	36 95       	lsr	r19
     7c2:	27 95       	ror	r18
     7c4:	a5 ec       	ldi	r26, 0xC5	; 197
     7c6:	b0 e2       	ldi	r27, 0x20	; 32
     7c8:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     7cc:	92 95       	swap	r25
     7ce:	82 95       	swap	r24
     7d0:	8f 70       	andi	r24, 0x0F	; 15
     7d2:	89 27       	eor	r24, r25
     7d4:	9f 70       	andi	r25, 0x0F	; 15
     7d6:	89 27       	eor	r24, r25
     7d8:	8c 9f       	mul	r24, r28
     7da:	90 01       	movw	r18, r0
     7dc:	8d 9f       	mul	r24, r29
     7de:	30 0d       	add	r19, r0
     7e0:	9c 9f       	mul	r25, r28
     7e2:	30 0d       	add	r19, r0
     7e4:	11 24       	eor	r1, r1
     7e6:	ca 01       	movw	r24, r20
     7e8:	82 1b       	sub	r24, r18
     7ea:	93 0b       	sbc	r25, r19
     7ec:	9c 01       	movw	r18, r24
     7ee:	36 95       	lsr	r19
     7f0:	27 95       	ror	r18
     7f2:	36 95       	lsr	r19
     7f4:	27 95       	ror	r18
     7f6:	ab e7       	ldi	r26, 0x7B	; 123
     7f8:	b4 e1       	ldi	r27, 0x14	; 20
     7fa:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     7fe:	ac 01       	movw	r20, r24
     800:	56 95       	lsr	r21
     802:	47 95       	ror	r20
     804:	9a 01       	movw	r18, r20
     806:	ad ec       	ldi	r26, 0xCD	; 205
     808:	bc ec       	ldi	r27, 0xCC	; 204
     80a:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     80e:	96 95       	lsr	r25
     810:	87 95       	ror	r24
     812:	96 95       	lsr	r25
     814:	87 95       	ror	r24
     816:	96 95       	lsr	r25
     818:	87 95       	ror	r24
     81a:	bc 01       	movw	r22, r24
     81c:	66 0f       	add	r22, r22
     81e:	77 1f       	adc	r23, r23
     820:	88 0f       	add	r24, r24
     822:	99 1f       	adc	r25, r25
     824:	88 0f       	add	r24, r24
     826:	99 1f       	adc	r25, r25
     828:	88 0f       	add	r24, r24
     82a:	99 1f       	adc	r25, r25
     82c:	86 0f       	add	r24, r22
     82e:	97 1f       	adc	r25, r23
     830:	28 1b       	sub	r18, r24
     832:	39 0b       	sbc	r19, r25
     834:	62 2f       	mov	r22, r18
     836:	86 e0       	ldi	r24, 0x06	; 6
     838:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(lunarYear/1000));
     83c:	20 91 81 00 	lds	r18, 0x0081	; 0x800081 <lunarYear>
     840:	30 91 82 00 	lds	r19, 0x0082	; 0x800082 <lunarYear+0x1>
     844:	36 95       	lsr	r19
     846:	27 95       	ror	r18
     848:	36 95       	lsr	r19
     84a:	27 95       	ror	r18
     84c:	36 95       	lsr	r19
     84e:	27 95       	ror	r18
     850:	a5 ec       	ldi	r26, 0xC5	; 197
     852:	b0 e2       	ldi	r27, 0x20	; 32
     854:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     858:	92 95       	swap	r25
     85a:	82 95       	swap	r24
     85c:	8f 70       	andi	r24, 0x0F	; 15
     85e:	89 27       	eor	r24, r25
     860:	9f 70       	andi	r25, 0x0F	; 15
     862:	89 27       	eor	r24, r25
     864:	68 2f       	mov	r22, r24
     866:	85 e0       	ldi	r24, 0x05	; 5
     868:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(lunarMonth%10));
     86c:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <lunarMonth>
     870:	cd ec       	ldi	r28, 0xCD	; 205
     872:	6c 9f       	mul	r22, r28
     874:	81 2d       	mov	r24, r1
     876:	11 24       	eor	r1, r1
     878:	86 95       	lsr	r24
     87a:	86 95       	lsr	r24
     87c:	86 95       	lsr	r24
     87e:	88 0f       	add	r24, r24
     880:	98 2f       	mov	r25, r24
     882:	99 0f       	add	r25, r25
     884:	99 0f       	add	r25, r25
     886:	89 0f       	add	r24, r25
     888:	68 1b       	sub	r22, r24
     88a:	84 e0       	ldi	r24, 0x04	; 4
     88c:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(lunarMonth/10));
     890:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <lunarMonth>
     894:	6c 9f       	mul	r22, r28
     896:	61 2d       	mov	r22, r1
     898:	11 24       	eor	r1, r1
     89a:	66 95       	lsr	r22
     89c:	66 95       	lsr	r22
     89e:	66 95       	lsr	r22
     8a0:	83 e0       	ldi	r24, 0x03	; 3
     8a2:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(lunarDate%10));
     8a6:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <lunarDate>
     8aa:	6c 9f       	mul	r22, r28
     8ac:	81 2d       	mov	r24, r1
     8ae:	11 24       	eor	r1, r1
     8b0:	86 95       	lsr	r24
     8b2:	86 95       	lsr	r24
     8b4:	86 95       	lsr	r24
     8b6:	88 0f       	add	r24, r24
     8b8:	98 2f       	mov	r25, r24
     8ba:	99 0f       	add	r25, r25
     8bc:	99 0f       	add	r25, r25
     8be:	89 0f       	add	r24, r25
     8c0:	68 1b       	sub	r22, r24
     8c2:	82 e0       	ldi	r24, 0x02	; 2
     8c4:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(lunarDate/10));
     8c8:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <lunarDate>
     8cc:	6c 9f       	mul	r22, r28
     8ce:	61 2d       	mov	r22, r1
     8d0:	11 24       	eor	r1, r1
     8d2:	66 95       	lsr	r22
     8d4:	66 95       	lsr	r22
     8d6:	66 95       	lsr	r22
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
     8de:	61 c5       	rjmp	.+2754   	; 0x13a2 <__stack+0xb43>
			
		}
		else
		{
			MAX7219_clearDisplay();
     8e0:	0e 94 a6 01 	call	0x34c	; 0x34c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(A_Minute%10));
     8e4:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <A_Minute>
     8e8:	cd ec       	ldi	r28, 0xCD	; 205
     8ea:	6c 9f       	mul	r22, r28
     8ec:	81 2d       	mov	r24, r1
     8ee:	11 24       	eor	r1, r1
     8f0:	86 95       	lsr	r24
     8f2:	86 95       	lsr	r24
     8f4:	86 95       	lsr	r24
     8f6:	88 0f       	add	r24, r24
     8f8:	98 2f       	mov	r25, r24
     8fa:	99 0f       	add	r25, r25
     8fc:	99 0f       	add	r25, r25
     8fe:	89 0f       	add	r24, r25
     900:	68 1b       	sub	r22, r24
     902:	88 e0       	ldi	r24, 0x08	; 8
     904:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(A_Minute/10));
     908:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <A_Minute>
     90c:	6c 9f       	mul	r22, r28
     90e:	61 2d       	mov	r22, r1
     910:	11 24       	eor	r1, r1
     912:	66 95       	lsr	r22
     914:	66 95       	lsr	r22
     916:	66 95       	lsr	r22
     918:	87 e0       	ldi	r24, 0x07	; 7
     91a:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(A_Hour%10));
     91e:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <A_Hour>
     922:	6c 9f       	mul	r22, r28
     924:	81 2d       	mov	r24, r1
     926:	11 24       	eor	r1, r1
     928:	86 95       	lsr	r24
     92a:	86 95       	lsr	r24
     92c:	86 95       	lsr	r24
     92e:	88 0f       	add	r24, r24
     930:	98 2f       	mov	r25, r24
     932:	99 0f       	add	r25, r25
     934:	99 0f       	add	r25, r25
     936:	89 0f       	add	r24, r25
     938:	68 1b       	sub	r22, r24
     93a:	86 e0       	ldi	r24, 0x06	; 6
     93c:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(A_Hour/10));
     940:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <A_Hour>
     944:	6c 9f       	mul	r22, r28
     946:	61 2d       	mov	r22, r1
     948:	11 24       	eor	r1, r1
     94a:	66 95       	lsr	r22
     94c:	66 95       	lsr	r22
     94e:	66 95       	lsr	r22
     950:	85 e0       	ldi	r24, 0x05	; 5
     952:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Minute%10));
     956:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <Minute>
     95a:	6c 9f       	mul	r22, r28
     95c:	81 2d       	mov	r24, r1
     95e:	11 24       	eor	r1, r1
     960:	86 95       	lsr	r24
     962:	86 95       	lsr	r24
     964:	86 95       	lsr	r24
     966:	88 0f       	add	r24, r24
     968:	98 2f       	mov	r25, r24
     96a:	99 0f       	add	r25, r25
     96c:	99 0f       	add	r25, r25
     96e:	89 0f       	add	r24, r25
     970:	68 1b       	sub	r22, r24
     972:	84 e0       	ldi	r24, 0x04	; 4
     974:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Minute/10));
     978:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <Minute>
     97c:	6c 9f       	mul	r22, r28
     97e:	61 2d       	mov	r22, r1
     980:	11 24       	eor	r1, r1
     982:	66 95       	lsr	r22
     984:	66 95       	lsr	r22
     986:	66 95       	lsr	r22
     988:	83 e0       	ldi	r24, 0x03	; 3
     98a:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Hour%10));
     98e:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <Hour>
     992:	6c 9f       	mul	r22, r28
     994:	81 2d       	mov	r24, r1
     996:	11 24       	eor	r1, r1
     998:	86 95       	lsr	r24
     99a:	86 95       	lsr	r24
     99c:	86 95       	lsr	r24
     99e:	88 0f       	add	r24, r24
     9a0:	98 2f       	mov	r25, r24
     9a2:	99 0f       	add	r25, r25
     9a4:	99 0f       	add	r25, r25
     9a6:	89 0f       	add	r24, r25
     9a8:	68 1b       	sub	r22, r24
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Hour/10));
     9b0:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <Hour>
     9b4:	6c 9f       	mul	r22, r28
     9b6:	61 2d       	mov	r22, r1
     9b8:	11 24       	eor	r1, r1
     9ba:	66 95       	lsr	r22
     9bc:	66 95       	lsr	r22
     9be:	66 95       	lsr	r22
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
     9c6:	ed c4       	rjmp	.+2522   	; 0x13a2 <__stack+0xb43>
		}
	} 
	else
	{
		if ((count==1)&&(SW_time_date==0))	//blink date
     9c8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
     9cc:	81 30       	cpi	r24, 0x01	; 1
     9ce:	09 f0       	breq	.+2      	; 0x9d2 <__stack+0x173>
     9d0:	63 c0       	rjmp	.+198    	; 0xa98 <__stack+0x239>
     9d2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
     9d6:	81 11       	cpse	r24, r1
     9d8:	5f c0       	rjmp	.+190    	; 0xa98 <__stack+0x239>
		{
			MAX7219_clearDisplay();
     9da:	0e 94 a6 01 	call	0x34c	; 0x34c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(Minute%10));
     9de:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <Minute>
     9e2:	cd ec       	ldi	r28, 0xCD	; 205
     9e4:	6c 9f       	mul	r22, r28
     9e6:	81 2d       	mov	r24, r1
     9e8:	11 24       	eor	r1, r1
     9ea:	86 95       	lsr	r24
     9ec:	86 95       	lsr	r24
     9ee:	86 95       	lsr	r24
     9f0:	88 0f       	add	r24, r24
     9f2:	98 2f       	mov	r25, r24
     9f4:	99 0f       	add	r25, r25
     9f6:	99 0f       	add	r25, r25
     9f8:	89 0f       	add	r24, r25
     9fa:	68 1b       	sub	r22, r24
     9fc:	88 e0       	ldi	r24, 0x08	; 8
     9fe:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(Minute/10));
     a02:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <Minute>
     a06:	6c 9f       	mul	r22, r28
     a08:	61 2d       	mov	r22, r1
     a0a:	11 24       	eor	r1, r1
     a0c:	66 95       	lsr	r22
     a0e:	66 95       	lsr	r22
     a10:	66 95       	lsr	r22
     a12:	87 e0       	ldi	r24, 0x07	; 7
     a14:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(Hour%10));
     a18:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <Hour>
     a1c:	6c 9f       	mul	r22, r28
     a1e:	81 2d       	mov	r24, r1
     a20:	11 24       	eor	r1, r1
     a22:	86 95       	lsr	r24
     a24:	86 95       	lsr	r24
     a26:	86 95       	lsr	r24
     a28:	88 0f       	add	r24, r24
     a2a:	98 2f       	mov	r25, r24
     a2c:	99 0f       	add	r25, r25
     a2e:	99 0f       	add	r25, r25
     a30:	89 0f       	add	r24, r25
     a32:	68 1b       	sub	r22, r24
     a34:	86 e0       	ldi	r24, 0x06	; 6
     a36:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(Hour/10));
     a3a:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <Hour>
     a3e:	6c 9f       	mul	r22, r28
     a40:	61 2d       	mov	r22, r1
     a42:	11 24       	eor	r1, r1
     a44:	66 95       	lsr	r22
     a46:	66 95       	lsr	r22
     a48:	66 95       	lsr	r22
     a4a:	85 e0       	ldi	r24, 0x05	; 5
     a4c:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
     a50:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Month>
     a54:	6c 9f       	mul	r22, r28
     a56:	81 2d       	mov	r24, r1
     a58:	11 24       	eor	r1, r1
     a5a:	86 95       	lsr	r24
     a5c:	86 95       	lsr	r24
     a5e:	86 95       	lsr	r24
     a60:	88 0f       	add	r24, r24
     a62:	98 2f       	mov	r25, r24
     a64:	99 0f       	add	r25, r25
     a66:	99 0f       	add	r25, r25
     a68:	89 0f       	add	r24, r25
     a6a:	68 1b       	sub	r22, r24
     a6c:	84 e0       	ldi	r24, 0x04	; 4
     a6e:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
     a72:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Month>
     a76:	6c 9f       	mul	r22, r28
     a78:	61 2d       	mov	r22, r1
     a7a:	11 24       	eor	r1, r1
     a7c:	66 95       	lsr	r22
     a7e:	66 95       	lsr	r22
     a80:	66 95       	lsr	r22
     a82:	83 e0       	ldi	r24, 0x03	; 3
     a84:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,MAX7219_CHAR_BLANK);
     a88:	6f e0       	ldi	r22, 0x0F	; 15
     a8a:	82 e0       	ldi	r24, 0x02	; 2
     a8c:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,MAX7219_CHAR_BLANK);
     a90:	6f e0       	ldi	r22, 0x0F	; 15
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
		}
		if ((count==2)&&(SW_time_date==0))	//blink month
     a98:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
     a9c:	82 30       	cpi	r24, 0x02	; 2
     a9e:	09 f0       	breq	.+2      	; 0xaa2 <__stack+0x243>
     aa0:	63 c0       	rjmp	.+198    	; 0xb68 <__stack+0x309>
     aa2:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
     aa6:	81 11       	cpse	r24, r1
     aa8:	5f c0       	rjmp	.+190    	; 0xb68 <__stack+0x309>
		{
			MAX7219_clearDisplay();
     aaa:	0e 94 a6 01 	call	0x34c	; 0x34c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(Minute%10));
     aae:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <Minute>
     ab2:	cd ec       	ldi	r28, 0xCD	; 205
     ab4:	6c 9f       	mul	r22, r28
     ab6:	81 2d       	mov	r24, r1
     ab8:	11 24       	eor	r1, r1
     aba:	86 95       	lsr	r24
     abc:	86 95       	lsr	r24
     abe:	86 95       	lsr	r24
     ac0:	88 0f       	add	r24, r24
     ac2:	98 2f       	mov	r25, r24
     ac4:	99 0f       	add	r25, r25
     ac6:	99 0f       	add	r25, r25
     ac8:	89 0f       	add	r24, r25
     aca:	68 1b       	sub	r22, r24
     acc:	88 e0       	ldi	r24, 0x08	; 8
     ace:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(Minute/10));
     ad2:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <Minute>
     ad6:	6c 9f       	mul	r22, r28
     ad8:	61 2d       	mov	r22, r1
     ada:	11 24       	eor	r1, r1
     adc:	66 95       	lsr	r22
     ade:	66 95       	lsr	r22
     ae0:	66 95       	lsr	r22
     ae2:	87 e0       	ldi	r24, 0x07	; 7
     ae4:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(Hour%10));
     ae8:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <Hour>
     aec:	6c 9f       	mul	r22, r28
     aee:	81 2d       	mov	r24, r1
     af0:	11 24       	eor	r1, r1
     af2:	86 95       	lsr	r24
     af4:	86 95       	lsr	r24
     af6:	86 95       	lsr	r24
     af8:	88 0f       	add	r24, r24
     afa:	98 2f       	mov	r25, r24
     afc:	99 0f       	add	r25, r25
     afe:	99 0f       	add	r25, r25
     b00:	89 0f       	add	r24, r25
     b02:	68 1b       	sub	r22, r24
     b04:	86 e0       	ldi	r24, 0x06	; 6
     b06:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(Hour/10));
     b0a:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <Hour>
     b0e:	6c 9f       	mul	r22, r28
     b10:	61 2d       	mov	r22, r1
     b12:	11 24       	eor	r1, r1
     b14:	66 95       	lsr	r22
     b16:	66 95       	lsr	r22
     b18:	66 95       	lsr	r22
     b1a:	85 e0       	ldi	r24, 0x05	; 5
     b1c:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,MAX7219_CHAR_BLANK);
     b20:	6f e0       	ldi	r22, 0x0F	; 15
     b22:	84 e0       	ldi	r24, 0x04	; 4
     b24:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,MAX7219_CHAR_BLANK);
     b28:	6f e0       	ldi	r22, 0x0F	; 15
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
     b30:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Date>
     b34:	6c 9f       	mul	r22, r28
     b36:	81 2d       	mov	r24, r1
     b38:	11 24       	eor	r1, r1
     b3a:	86 95       	lsr	r24
     b3c:	86 95       	lsr	r24
     b3e:	86 95       	lsr	r24
     b40:	88 0f       	add	r24, r24
     b42:	98 2f       	mov	r25, r24
     b44:	99 0f       	add	r25, r25
     b46:	99 0f       	add	r25, r25
     b48:	89 0f       	add	r24, r25
     b4a:	68 1b       	sub	r22, r24
     b4c:	82 e0       	ldi	r24, 0x02	; 2
     b4e:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
     b52:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Date>
     b56:	6c 9f       	mul	r22, r28
     b58:	61 2d       	mov	r22, r1
     b5a:	11 24       	eor	r1, r1
     b5c:	66 95       	lsr	r22
     b5e:	66 95       	lsr	r22
     b60:	66 95       	lsr	r22
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
		}
		if ((count==3)&&(SW_time_date==0))	//blink hour
     b68:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
     b6c:	83 30       	cpi	r24, 0x03	; 3
     b6e:	09 f0       	breq	.+2      	; 0xb72 <__stack+0x313>
     b70:	63 c0       	rjmp	.+198    	; 0xc38 <__stack+0x3d9>
     b72:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
     b76:	81 11       	cpse	r24, r1
     b78:	5f c0       	rjmp	.+190    	; 0xc38 <__stack+0x3d9>
		{
			MAX7219_clearDisplay();
     b7a:	0e 94 a6 01 	call	0x34c	; 0x34c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(Minute%10));
     b7e:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <Minute>
     b82:	cd ec       	ldi	r28, 0xCD	; 205
     b84:	6c 9f       	mul	r22, r28
     b86:	81 2d       	mov	r24, r1
     b88:	11 24       	eor	r1, r1
     b8a:	86 95       	lsr	r24
     b8c:	86 95       	lsr	r24
     b8e:	86 95       	lsr	r24
     b90:	88 0f       	add	r24, r24
     b92:	98 2f       	mov	r25, r24
     b94:	99 0f       	add	r25, r25
     b96:	99 0f       	add	r25, r25
     b98:	89 0f       	add	r24, r25
     b9a:	68 1b       	sub	r22, r24
     b9c:	88 e0       	ldi	r24, 0x08	; 8
     b9e:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(Minute/10));
     ba2:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <Minute>
     ba6:	6c 9f       	mul	r22, r28
     ba8:	61 2d       	mov	r22, r1
     baa:	11 24       	eor	r1, r1
     bac:	66 95       	lsr	r22
     bae:	66 95       	lsr	r22
     bb0:	66 95       	lsr	r22
     bb2:	87 e0       	ldi	r24, 0x07	; 7
     bb4:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
     bb8:	6f e0       	ldi	r22, 0x0F	; 15
     bba:	86 e0       	ldi	r24, 0x06	; 6
     bbc:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
     bc0:	6f e0       	ldi	r22, 0x0F	; 15
     bc2:	85 e0       	ldi	r24, 0x05	; 5
     bc4:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
     bc8:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Month>
     bcc:	6c 9f       	mul	r22, r28
     bce:	81 2d       	mov	r24, r1
     bd0:	11 24       	eor	r1, r1
     bd2:	86 95       	lsr	r24
     bd4:	86 95       	lsr	r24
     bd6:	86 95       	lsr	r24
     bd8:	88 0f       	add	r24, r24
     bda:	98 2f       	mov	r25, r24
     bdc:	99 0f       	add	r25, r25
     bde:	99 0f       	add	r25, r25
     be0:	89 0f       	add	r24, r25
     be2:	68 1b       	sub	r22, r24
     be4:	84 e0       	ldi	r24, 0x04	; 4
     be6:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
     bea:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Month>
     bee:	6c 9f       	mul	r22, r28
     bf0:	61 2d       	mov	r22, r1
     bf2:	11 24       	eor	r1, r1
     bf4:	66 95       	lsr	r22
     bf6:	66 95       	lsr	r22
     bf8:	66 95       	lsr	r22
     bfa:	83 e0       	ldi	r24, 0x03	; 3
     bfc:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
     c00:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Date>
     c04:	6c 9f       	mul	r22, r28
     c06:	81 2d       	mov	r24, r1
     c08:	11 24       	eor	r1, r1
     c0a:	86 95       	lsr	r24
     c0c:	86 95       	lsr	r24
     c0e:	86 95       	lsr	r24
     c10:	88 0f       	add	r24, r24
     c12:	98 2f       	mov	r25, r24
     c14:	99 0f       	add	r25, r25
     c16:	99 0f       	add	r25, r25
     c18:	89 0f       	add	r24, r25
     c1a:	68 1b       	sub	r22, r24
     c1c:	82 e0       	ldi	r24, 0x02	; 2
     c1e:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
     c22:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Date>
     c26:	6c 9f       	mul	r22, r28
     c28:	61 2d       	mov	r22, r1
     c2a:	11 24       	eor	r1, r1
     c2c:	66 95       	lsr	r22
     c2e:	66 95       	lsr	r22
     c30:	66 95       	lsr	r22
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
		}
		if ((count==4)&&(SW_time_date==0))	//blink min
     c38:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
     c3c:	84 30       	cpi	r24, 0x04	; 4
     c3e:	09 f0       	breq	.+2      	; 0xc42 <__stack+0x3e3>
     c40:	63 c0       	rjmp	.+198    	; 0xd08 <__stack+0x4a9>
     c42:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
     c46:	81 11       	cpse	r24, r1
     c48:	5f c0       	rjmp	.+190    	; 0xd08 <__stack+0x4a9>
		{
			MAX7219_clearDisplay();
     c4a:	0e 94 a6 01 	call	0x34c	; 0x34c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
     c4e:	6f e0       	ldi	r22, 0x0F	; 15
     c50:	88 e0       	ldi	r24, 0x08	; 8
     c52:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
     c56:	6f e0       	ldi	r22, 0x0F	; 15
     c58:	87 e0       	ldi	r24, 0x07	; 7
     c5a:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(Hour%10));
     c5e:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <Hour>
     c62:	cd ec       	ldi	r28, 0xCD	; 205
     c64:	6c 9f       	mul	r22, r28
     c66:	81 2d       	mov	r24, r1
     c68:	11 24       	eor	r1, r1
     c6a:	86 95       	lsr	r24
     c6c:	86 95       	lsr	r24
     c6e:	86 95       	lsr	r24
     c70:	88 0f       	add	r24, r24
     c72:	98 2f       	mov	r25, r24
     c74:	99 0f       	add	r25, r25
     c76:	99 0f       	add	r25, r25
     c78:	89 0f       	add	r24, r25
     c7a:	68 1b       	sub	r22, r24
     c7c:	86 e0       	ldi	r24, 0x06	; 6
     c7e:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(Hour/10));
     c82:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <Hour>
     c86:	6c 9f       	mul	r22, r28
     c88:	61 2d       	mov	r22, r1
     c8a:	11 24       	eor	r1, r1
     c8c:	66 95       	lsr	r22
     c8e:	66 95       	lsr	r22
     c90:	66 95       	lsr	r22
     c92:	85 e0       	ldi	r24, 0x05	; 5
     c94:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
     c98:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Month>
     c9c:	6c 9f       	mul	r22, r28
     c9e:	81 2d       	mov	r24, r1
     ca0:	11 24       	eor	r1, r1
     ca2:	86 95       	lsr	r24
     ca4:	86 95       	lsr	r24
     ca6:	86 95       	lsr	r24
     ca8:	88 0f       	add	r24, r24
     caa:	98 2f       	mov	r25, r24
     cac:	99 0f       	add	r25, r25
     cae:	99 0f       	add	r25, r25
     cb0:	89 0f       	add	r24, r25
     cb2:	68 1b       	sub	r22, r24
     cb4:	84 e0       	ldi	r24, 0x04	; 4
     cb6:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
     cba:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Month>
     cbe:	6c 9f       	mul	r22, r28
     cc0:	61 2d       	mov	r22, r1
     cc2:	11 24       	eor	r1, r1
     cc4:	66 95       	lsr	r22
     cc6:	66 95       	lsr	r22
     cc8:	66 95       	lsr	r22
     cca:	83 e0       	ldi	r24, 0x03	; 3
     ccc:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
     cd0:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Date>
     cd4:	6c 9f       	mul	r22, r28
     cd6:	81 2d       	mov	r24, r1
     cd8:	11 24       	eor	r1, r1
     cda:	86 95       	lsr	r24
     cdc:	86 95       	lsr	r24
     cde:	86 95       	lsr	r24
     ce0:	88 0f       	add	r24, r24
     ce2:	98 2f       	mov	r25, r24
     ce4:	99 0f       	add	r25, r25
     ce6:	99 0f       	add	r25, r25
     ce8:	89 0f       	add	r24, r25
     cea:	68 1b       	sub	r22, r24
     cec:	82 e0       	ldi	r24, 0x02	; 2
     cee:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
     cf2:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Date>
     cf6:	6c 9f       	mul	r22, r28
     cf8:	61 2d       	mov	r22, r1
     cfa:	11 24       	eor	r1, r1
     cfc:	66 95       	lsr	r22
     cfe:	66 95       	lsr	r22
     d00:	66 95       	lsr	r22
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
		}
		if ((count==1)&&(SW_time_date==1))	//blink date
     d08:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	09 f0       	breq	.+2      	; 0xd12 <__stack+0x4b3>
     d10:	0e c1       	rjmp	.+540    	; 0xf2e <__stack+0x6cf>
     d12:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	09 f0       	breq	.+2      	; 0xd1c <__stack+0x4bd>
     d1a:	09 c1       	rjmp	.+530    	; 0xf2e <__stack+0x6cf>
		{
			
			MAX7219_clearDisplay();
     d1c:	0e 94 a6 01 	call	0x34c	; 0x34c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
     d20:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <yyyy>
     d24:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <yyyy+0x1>
     d28:	9f 01       	movw	r18, r30
     d2a:	36 95       	lsr	r19
     d2c:	27 95       	ror	r18
     d2e:	36 95       	lsr	r19
     d30:	27 95       	ror	r18
     d32:	36 95       	lsr	r19
     d34:	27 95       	ror	r18
     d36:	a5 ec       	ldi	r26, 0xC5	; 197
     d38:	b0 e2       	ldi	r27, 0x20	; 32
     d3a:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     d3e:	ac 01       	movw	r20, r24
     d40:	52 95       	swap	r21
     d42:	42 95       	swap	r20
     d44:	4f 70       	andi	r20, 0x0F	; 15
     d46:	45 27       	eor	r20, r21
     d48:	5f 70       	andi	r21, 0x0F	; 15
     d4a:	45 27       	eor	r20, r21
     d4c:	c8 ee       	ldi	r28, 0xE8	; 232
     d4e:	d3 e0       	ldi	r29, 0x03	; 3
     d50:	4c 9f       	mul	r20, r28
     d52:	c0 01       	movw	r24, r0
     d54:	4d 9f       	mul	r20, r29
     d56:	90 0d       	add	r25, r0
     d58:	5c 9f       	mul	r21, r28
     d5a:	90 0d       	add	r25, r0
     d5c:	11 24       	eor	r1, r1
     d5e:	af 01       	movw	r20, r30
     d60:	48 1b       	sub	r20, r24
     d62:	59 0b       	sbc	r21, r25
     d64:	9a 01       	movw	r18, r20
     d66:	ad ec       	ldi	r26, 0xCD	; 205
     d68:	bc ec       	ldi	r27, 0xCC	; 204
     d6a:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     d6e:	96 95       	lsr	r25
     d70:	87 95       	ror	r24
     d72:	96 95       	lsr	r25
     d74:	87 95       	ror	r24
     d76:	96 95       	lsr	r25
     d78:	87 95       	ror	r24
     d7a:	bc 01       	movw	r22, r24
     d7c:	66 0f       	add	r22, r22
     d7e:	77 1f       	adc	r23, r23
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	86 0f       	add	r24, r22
     d8e:	97 1f       	adc	r25, r23
     d90:	28 1b       	sub	r18, r24
     d92:	39 0b       	sbc	r19, r25
     d94:	62 2f       	mov	r22, r18
     d96:	88 e0       	ldi	r24, 0x08	; 8
     d98:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
     d9c:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <yyyy>
     da0:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <yyyy+0x1>
     da4:	9a 01       	movw	r18, r20
     da6:	36 95       	lsr	r19
     da8:	27 95       	ror	r18
     daa:	36 95       	lsr	r19
     dac:	27 95       	ror	r18
     dae:	36 95       	lsr	r19
     db0:	27 95       	ror	r18
     db2:	a5 ec       	ldi	r26, 0xC5	; 197
     db4:	b0 e2       	ldi	r27, 0x20	; 32
     db6:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     dba:	9c 01       	movw	r18, r24
     dbc:	32 95       	swap	r19
     dbe:	22 95       	swap	r18
     dc0:	2f 70       	andi	r18, 0x0F	; 15
     dc2:	23 27       	eor	r18, r19
     dc4:	3f 70       	andi	r19, 0x0F	; 15
     dc6:	23 27       	eor	r18, r19
     dc8:	2c 9f       	mul	r18, r28
     dca:	c0 01       	movw	r24, r0
     dcc:	2d 9f       	mul	r18, r29
     dce:	90 0d       	add	r25, r0
     dd0:	3c 9f       	mul	r19, r28
     dd2:	90 0d       	add	r25, r0
     dd4:	11 24       	eor	r1, r1
     dd6:	9a 01       	movw	r18, r20
     dd8:	28 1b       	sub	r18, r24
     dda:	39 0b       	sbc	r19, r25
     ddc:	ad ec       	ldi	r26, 0xCD	; 205
     dde:	bc ec       	ldi	r27, 0xCC	; 204
     de0:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     de4:	ac 01       	movw	r20, r24
     de6:	56 95       	lsr	r21
     de8:	47 95       	ror	r20
     dea:	56 95       	lsr	r21
     dec:	47 95       	ror	r20
     dee:	56 95       	lsr	r21
     df0:	47 95       	ror	r20
     df2:	9a 01       	movw	r18, r20
     df4:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     df8:	96 95       	lsr	r25
     dfa:	87 95       	ror	r24
     dfc:	96 95       	lsr	r25
     dfe:	87 95       	ror	r24
     e00:	96 95       	lsr	r25
     e02:	87 95       	ror	r24
     e04:	bc 01       	movw	r22, r24
     e06:	66 0f       	add	r22, r22
     e08:	77 1f       	adc	r23, r23
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	86 0f       	add	r24, r22
     e18:	97 1f       	adc	r25, r23
     e1a:	28 1b       	sub	r18, r24
     e1c:	39 0b       	sbc	r19, r25
     e1e:	62 2f       	mov	r22, r18
     e20:	87 e0       	ldi	r24, 0x07	; 7
     e22:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
     e26:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <yyyy>
     e2a:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <yyyy+0x1>
     e2e:	9a 01       	movw	r18, r20
     e30:	36 95       	lsr	r19
     e32:	27 95       	ror	r18
     e34:	36 95       	lsr	r19
     e36:	27 95       	ror	r18
     e38:	36 95       	lsr	r19
     e3a:	27 95       	ror	r18
     e3c:	a5 ec       	ldi	r26, 0xC5	; 197
     e3e:	b0 e2       	ldi	r27, 0x20	; 32
     e40:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     e44:	92 95       	swap	r25
     e46:	82 95       	swap	r24
     e48:	8f 70       	andi	r24, 0x0F	; 15
     e4a:	89 27       	eor	r24, r25
     e4c:	9f 70       	andi	r25, 0x0F	; 15
     e4e:	89 27       	eor	r24, r25
     e50:	8c 9f       	mul	r24, r28
     e52:	90 01       	movw	r18, r0
     e54:	8d 9f       	mul	r24, r29
     e56:	30 0d       	add	r19, r0
     e58:	9c 9f       	mul	r25, r28
     e5a:	30 0d       	add	r19, r0
     e5c:	11 24       	eor	r1, r1
     e5e:	ca 01       	movw	r24, r20
     e60:	82 1b       	sub	r24, r18
     e62:	93 0b       	sbc	r25, r19
     e64:	9c 01       	movw	r18, r24
     e66:	36 95       	lsr	r19
     e68:	27 95       	ror	r18
     e6a:	36 95       	lsr	r19
     e6c:	27 95       	ror	r18
     e6e:	ab e7       	ldi	r26, 0x7B	; 123
     e70:	b4 e1       	ldi	r27, 0x14	; 20
     e72:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     e76:	ac 01       	movw	r20, r24
     e78:	56 95       	lsr	r21
     e7a:	47 95       	ror	r20
     e7c:	9a 01       	movw	r18, r20
     e7e:	ad ec       	ldi	r26, 0xCD	; 205
     e80:	bc ec       	ldi	r27, 0xCC	; 204
     e82:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     e86:	96 95       	lsr	r25
     e88:	87 95       	ror	r24
     e8a:	96 95       	lsr	r25
     e8c:	87 95       	ror	r24
     e8e:	96 95       	lsr	r25
     e90:	87 95       	ror	r24
     e92:	bc 01       	movw	r22, r24
     e94:	66 0f       	add	r22, r22
     e96:	77 1f       	adc	r23, r23
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	86 0f       	add	r24, r22
     ea6:	97 1f       	adc	r25, r23
     ea8:	28 1b       	sub	r18, r24
     eaa:	39 0b       	sbc	r19, r25
     eac:	62 2f       	mov	r22, r18
     eae:	86 e0       	ldi	r24, 0x06	; 6
     eb0:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
     eb4:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <yyyy>
     eb8:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <yyyy+0x1>
     ebc:	36 95       	lsr	r19
     ebe:	27 95       	ror	r18
     ec0:	36 95       	lsr	r19
     ec2:	27 95       	ror	r18
     ec4:	36 95       	lsr	r19
     ec6:	27 95       	ror	r18
     ec8:	a5 ec       	ldi	r26, 0xC5	; 197
     eca:	b0 e2       	ldi	r27, 0x20	; 32
     ecc:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     ed0:	92 95       	swap	r25
     ed2:	82 95       	swap	r24
     ed4:	8f 70       	andi	r24, 0x0F	; 15
     ed6:	89 27       	eor	r24, r25
     ed8:	9f 70       	andi	r25, 0x0F	; 15
     eda:	89 27       	eor	r24, r25
     edc:	68 2f       	mov	r22, r24
     ede:	85 e0       	ldi	r24, 0x05	; 5
     ee0:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
     ee4:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Month>
     ee8:	cd ec       	ldi	r28, 0xCD	; 205
     eea:	6c 9f       	mul	r22, r28
     eec:	81 2d       	mov	r24, r1
     eee:	11 24       	eor	r1, r1
     ef0:	86 95       	lsr	r24
     ef2:	86 95       	lsr	r24
     ef4:	86 95       	lsr	r24
     ef6:	88 0f       	add	r24, r24
     ef8:	98 2f       	mov	r25, r24
     efa:	99 0f       	add	r25, r25
     efc:	99 0f       	add	r25, r25
     efe:	89 0f       	add	r24, r25
     f00:	68 1b       	sub	r22, r24
     f02:	84 e0       	ldi	r24, 0x04	; 4
     f04:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
     f08:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Month>
     f0c:	6c 9f       	mul	r22, r28
     f0e:	61 2d       	mov	r22, r1
     f10:	11 24       	eor	r1, r1
     f12:	66 95       	lsr	r22
     f14:	66 95       	lsr	r22
     f16:	66 95       	lsr	r22
     f18:	83 e0       	ldi	r24, 0x03	; 3
     f1a:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,MAX7219_CHAR_BLANK);
     f1e:	6f e0       	ldi	r22, 0x0F	; 15
     f20:	82 e0       	ldi	r24, 0x02	; 2
     f22:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,MAX7219_CHAR_BLANK);
     f26:	6f e0       	ldi	r22, 0x0F	; 15
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
		}
		if ((count==2)&&(SW_time_date==1))	//blink month
     f2e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
     f32:	82 30       	cpi	r24, 0x02	; 2
     f34:	09 f0       	breq	.+2      	; 0xf38 <__stack+0x6d9>
     f36:	0e c1       	rjmp	.+540    	; 0x1154 <__stack+0x8f5>
     f38:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
     f3c:	81 30       	cpi	r24, 0x01	; 1
     f3e:	09 f0       	breq	.+2      	; 0xf42 <__stack+0x6e3>
     f40:	09 c1       	rjmp	.+530    	; 0x1154 <__stack+0x8f5>
		{
			
			MAX7219_clearDisplay();
     f42:	0e 94 a6 01 	call	0x34c	; 0x34c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
     f46:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <yyyy>
     f4a:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <yyyy+0x1>
     f4e:	9f 01       	movw	r18, r30
     f50:	36 95       	lsr	r19
     f52:	27 95       	ror	r18
     f54:	36 95       	lsr	r19
     f56:	27 95       	ror	r18
     f58:	36 95       	lsr	r19
     f5a:	27 95       	ror	r18
     f5c:	a5 ec       	ldi	r26, 0xC5	; 197
     f5e:	b0 e2       	ldi	r27, 0x20	; 32
     f60:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     f64:	ac 01       	movw	r20, r24
     f66:	52 95       	swap	r21
     f68:	42 95       	swap	r20
     f6a:	4f 70       	andi	r20, 0x0F	; 15
     f6c:	45 27       	eor	r20, r21
     f6e:	5f 70       	andi	r21, 0x0F	; 15
     f70:	45 27       	eor	r20, r21
     f72:	c8 ee       	ldi	r28, 0xE8	; 232
     f74:	d3 e0       	ldi	r29, 0x03	; 3
     f76:	4c 9f       	mul	r20, r28
     f78:	c0 01       	movw	r24, r0
     f7a:	4d 9f       	mul	r20, r29
     f7c:	90 0d       	add	r25, r0
     f7e:	5c 9f       	mul	r21, r28
     f80:	90 0d       	add	r25, r0
     f82:	11 24       	eor	r1, r1
     f84:	af 01       	movw	r20, r30
     f86:	48 1b       	sub	r20, r24
     f88:	59 0b       	sbc	r21, r25
     f8a:	9a 01       	movw	r18, r20
     f8c:	ad ec       	ldi	r26, 0xCD	; 205
     f8e:	bc ec       	ldi	r27, 0xCC	; 204
     f90:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     f94:	96 95       	lsr	r25
     f96:	87 95       	ror	r24
     f98:	96 95       	lsr	r25
     f9a:	87 95       	ror	r24
     f9c:	96 95       	lsr	r25
     f9e:	87 95       	ror	r24
     fa0:	bc 01       	movw	r22, r24
     fa2:	66 0f       	add	r22, r22
     fa4:	77 1f       	adc	r23, r23
     fa6:	88 0f       	add	r24, r24
     fa8:	99 1f       	adc	r25, r25
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	86 0f       	add	r24, r22
     fb4:	97 1f       	adc	r25, r23
     fb6:	28 1b       	sub	r18, r24
     fb8:	39 0b       	sbc	r19, r25
     fba:	62 2f       	mov	r22, r18
     fbc:	88 e0       	ldi	r24, 0x08	; 8
     fbe:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
     fc2:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <yyyy>
     fc6:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <yyyy+0x1>
     fca:	9a 01       	movw	r18, r20
     fcc:	36 95       	lsr	r19
     fce:	27 95       	ror	r18
     fd0:	36 95       	lsr	r19
     fd2:	27 95       	ror	r18
     fd4:	36 95       	lsr	r19
     fd6:	27 95       	ror	r18
     fd8:	a5 ec       	ldi	r26, 0xC5	; 197
     fda:	b0 e2       	ldi	r27, 0x20	; 32
     fdc:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
     fe0:	9c 01       	movw	r18, r24
     fe2:	32 95       	swap	r19
     fe4:	22 95       	swap	r18
     fe6:	2f 70       	andi	r18, 0x0F	; 15
     fe8:	23 27       	eor	r18, r19
     fea:	3f 70       	andi	r19, 0x0F	; 15
     fec:	23 27       	eor	r18, r19
     fee:	2c 9f       	mul	r18, r28
     ff0:	c0 01       	movw	r24, r0
     ff2:	2d 9f       	mul	r18, r29
     ff4:	90 0d       	add	r25, r0
     ff6:	3c 9f       	mul	r19, r28
     ff8:	90 0d       	add	r25, r0
     ffa:	11 24       	eor	r1, r1
     ffc:	9a 01       	movw	r18, r20
     ffe:	28 1b       	sub	r18, r24
    1000:	39 0b       	sbc	r19, r25
    1002:	ad ec       	ldi	r26, 0xCD	; 205
    1004:	bc ec       	ldi	r27, 0xCC	; 204
    1006:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
    100a:	ac 01       	movw	r20, r24
    100c:	56 95       	lsr	r21
    100e:	47 95       	ror	r20
    1010:	56 95       	lsr	r21
    1012:	47 95       	ror	r20
    1014:	56 95       	lsr	r21
    1016:	47 95       	ror	r20
    1018:	9a 01       	movw	r18, r20
    101a:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
    101e:	96 95       	lsr	r25
    1020:	87 95       	ror	r24
    1022:	96 95       	lsr	r25
    1024:	87 95       	ror	r24
    1026:	96 95       	lsr	r25
    1028:	87 95       	ror	r24
    102a:	bc 01       	movw	r22, r24
    102c:	66 0f       	add	r22, r22
    102e:	77 1f       	adc	r23, r23
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	88 0f       	add	r24, r24
    1036:	99 1f       	adc	r25, r25
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	86 0f       	add	r24, r22
    103e:	97 1f       	adc	r25, r23
    1040:	28 1b       	sub	r18, r24
    1042:	39 0b       	sbc	r19, r25
    1044:	62 2f       	mov	r22, r18
    1046:	87 e0       	ldi	r24, 0x07	; 7
    1048:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
    104c:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <yyyy>
    1050:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <yyyy+0x1>
    1054:	9a 01       	movw	r18, r20
    1056:	36 95       	lsr	r19
    1058:	27 95       	ror	r18
    105a:	36 95       	lsr	r19
    105c:	27 95       	ror	r18
    105e:	36 95       	lsr	r19
    1060:	27 95       	ror	r18
    1062:	a5 ec       	ldi	r26, 0xC5	; 197
    1064:	b0 e2       	ldi	r27, 0x20	; 32
    1066:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
    106a:	92 95       	swap	r25
    106c:	82 95       	swap	r24
    106e:	8f 70       	andi	r24, 0x0F	; 15
    1070:	89 27       	eor	r24, r25
    1072:	9f 70       	andi	r25, 0x0F	; 15
    1074:	89 27       	eor	r24, r25
    1076:	8c 9f       	mul	r24, r28
    1078:	90 01       	movw	r18, r0
    107a:	8d 9f       	mul	r24, r29
    107c:	30 0d       	add	r19, r0
    107e:	9c 9f       	mul	r25, r28
    1080:	30 0d       	add	r19, r0
    1082:	11 24       	eor	r1, r1
    1084:	ca 01       	movw	r24, r20
    1086:	82 1b       	sub	r24, r18
    1088:	93 0b       	sbc	r25, r19
    108a:	9c 01       	movw	r18, r24
    108c:	36 95       	lsr	r19
    108e:	27 95       	ror	r18
    1090:	36 95       	lsr	r19
    1092:	27 95       	ror	r18
    1094:	ab e7       	ldi	r26, 0x7B	; 123
    1096:	b4 e1       	ldi	r27, 0x14	; 20
    1098:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
    109c:	ac 01       	movw	r20, r24
    109e:	56 95       	lsr	r21
    10a0:	47 95       	ror	r20
    10a2:	9a 01       	movw	r18, r20
    10a4:	ad ec       	ldi	r26, 0xCD	; 205
    10a6:	bc ec       	ldi	r27, 0xCC	; 204
    10a8:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
    10ac:	96 95       	lsr	r25
    10ae:	87 95       	ror	r24
    10b0:	96 95       	lsr	r25
    10b2:	87 95       	ror	r24
    10b4:	96 95       	lsr	r25
    10b6:	87 95       	ror	r24
    10b8:	bc 01       	movw	r22, r24
    10ba:	66 0f       	add	r22, r22
    10bc:	77 1f       	adc	r23, r23
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	88 0f       	add	r24, r24
    10c4:	99 1f       	adc	r25, r25
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	86 0f       	add	r24, r22
    10cc:	97 1f       	adc	r25, r23
    10ce:	28 1b       	sub	r18, r24
    10d0:	39 0b       	sbc	r19, r25
    10d2:	62 2f       	mov	r22, r18
    10d4:	86 e0       	ldi	r24, 0x06	; 6
    10d6:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
    10da:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <yyyy>
    10de:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <yyyy+0x1>
    10e2:	36 95       	lsr	r19
    10e4:	27 95       	ror	r18
    10e6:	36 95       	lsr	r19
    10e8:	27 95       	ror	r18
    10ea:	36 95       	lsr	r19
    10ec:	27 95       	ror	r18
    10ee:	a5 ec       	ldi	r26, 0xC5	; 197
    10f0:	b0 e2       	ldi	r27, 0x20	; 32
    10f2:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__umulhisi3>
    10f6:	92 95       	swap	r25
    10f8:	82 95       	swap	r24
    10fa:	8f 70       	andi	r24, 0x0F	; 15
    10fc:	89 27       	eor	r24, r25
    10fe:	9f 70       	andi	r25, 0x0F	; 15
    1100:	89 27       	eor	r24, r25
    1102:	68 2f       	mov	r22, r24
    1104:	85 e0       	ldi	r24, 0x05	; 5
    1106:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,MAX7219_CHAR_BLANK);
    110a:	6f e0       	ldi	r22, 0x0F	; 15
    110c:	84 e0       	ldi	r24, 0x04	; 4
    110e:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,MAX7219_CHAR_BLANK);
    1112:	6f e0       	ldi	r22, 0x0F	; 15
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    111a:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Date>
    111e:	cd ec       	ldi	r28, 0xCD	; 205
    1120:	6c 9f       	mul	r22, r28
    1122:	81 2d       	mov	r24, r1
    1124:	11 24       	eor	r1, r1
    1126:	86 95       	lsr	r24
    1128:	86 95       	lsr	r24
    112a:	86 95       	lsr	r24
    112c:	88 0f       	add	r24, r24
    112e:	98 2f       	mov	r25, r24
    1130:	99 0f       	add	r25, r25
    1132:	99 0f       	add	r25, r25
    1134:	89 0f       	add	r24, r25
    1136:	68 1b       	sub	r22, r24
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    113e:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Date>
    1142:	6c 9f       	mul	r22, r28
    1144:	61 2d       	mov	r22, r1
    1146:	11 24       	eor	r1, r1
    1148:	66 95       	lsr	r22
    114a:	66 95       	lsr	r22
    114c:	66 95       	lsr	r22
    114e:	81 e0       	ldi	r24, 0x01	; 1
    1150:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
		}
		if ((count==3)&&(SW_time_date==1))	//blink year
    1154:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
    1158:	83 30       	cpi	r24, 0x03	; 3
    115a:	09 f0       	breq	.+2      	; 0x115e <__stack+0x8ff>
    115c:	50 c0       	rjmp	.+160    	; 0x11fe <__stack+0x99f>
    115e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	09 f0       	breq	.+2      	; 0x1168 <__stack+0x909>
    1166:	4b c0       	rjmp	.+150    	; 0x11fe <__stack+0x99f>
		{
			
			MAX7219_clearDisplay();
    1168:	0e 94 a6 01 	call	0x34c	; 0x34c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    116c:	6f e0       	ldi	r22, 0x0F	; 15
    116e:	88 e0       	ldi	r24, 0x08	; 8
    1170:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    1174:	6f e0       	ldi	r22, 0x0F	; 15
    1176:	87 e0       	ldi	r24, 0x07	; 7
    1178:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    117c:	6f e0       	ldi	r22, 0x0F	; 15
    117e:	86 e0       	ldi	r24, 0x06	; 6
    1180:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    1184:	6f e0       	ldi	r22, 0x0F	; 15
    1186:	85 e0       	ldi	r24, 0x05	; 5
    1188:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    118c:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Month>
    1190:	cd ec       	ldi	r28, 0xCD	; 205
    1192:	6c 9f       	mul	r22, r28
    1194:	81 2d       	mov	r24, r1
    1196:	11 24       	eor	r1, r1
    1198:	86 95       	lsr	r24
    119a:	86 95       	lsr	r24
    119c:	86 95       	lsr	r24
    119e:	88 0f       	add	r24, r24
    11a0:	98 2f       	mov	r25, r24
    11a2:	99 0f       	add	r25, r25
    11a4:	99 0f       	add	r25, r25
    11a6:	89 0f       	add	r24, r25
    11a8:	68 1b       	sub	r22, r24
    11aa:	84 e0       	ldi	r24, 0x04	; 4
    11ac:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    11b0:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Month>
    11b4:	6c 9f       	mul	r22, r28
    11b6:	61 2d       	mov	r22, r1
    11b8:	11 24       	eor	r1, r1
    11ba:	66 95       	lsr	r22
    11bc:	66 95       	lsr	r22
    11be:	66 95       	lsr	r22
    11c0:	83 e0       	ldi	r24, 0x03	; 3
    11c2:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    11c6:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Date>
    11ca:	6c 9f       	mul	r22, r28
    11cc:	81 2d       	mov	r24, r1
    11ce:	11 24       	eor	r1, r1
    11d0:	86 95       	lsr	r24
    11d2:	86 95       	lsr	r24
    11d4:	86 95       	lsr	r24
    11d6:	88 0f       	add	r24, r24
    11d8:	98 2f       	mov	r25, r24
    11da:	99 0f       	add	r25, r25
    11dc:	99 0f       	add	r25, r25
    11de:	89 0f       	add	r24, r25
    11e0:	68 1b       	sub	r22, r24
    11e2:	82 e0       	ldi	r24, 0x02	; 2
    11e4:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    11e8:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <Date>
    11ec:	6c 9f       	mul	r22, r28
    11ee:	61 2d       	mov	r22, r1
    11f0:	11 24       	eor	r1, r1
    11f2:	66 95       	lsr	r22
    11f4:	66 95       	lsr	r22
    11f6:	66 95       	lsr	r22
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
		}
		if ((count==1)&&(SW_time_date==3))	//blink A_HOUR
    11fe:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
    1202:	81 30       	cpi	r24, 0x01	; 1
    1204:	09 f0       	breq	.+2      	; 0x1208 <__stack+0x9a9>
    1206:	64 c0       	rjmp	.+200    	; 0x12d0 <__stack+0xa71>
    1208:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
    120c:	83 30       	cpi	r24, 0x03	; 3
    120e:	09 f0       	breq	.+2      	; 0x1212 <__stack+0x9b3>
    1210:	5f c0       	rjmp	.+190    	; 0x12d0 <__stack+0xa71>
		{
			
			MAX7219_clearDisplay();
    1212:	0e 94 a6 01 	call	0x34c	; 0x34c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(A_Minute%10));
    1216:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <A_Minute>
    121a:	cd ec       	ldi	r28, 0xCD	; 205
    121c:	6c 9f       	mul	r22, r28
    121e:	81 2d       	mov	r24, r1
    1220:	11 24       	eor	r1, r1
    1222:	86 95       	lsr	r24
    1224:	86 95       	lsr	r24
    1226:	86 95       	lsr	r24
    1228:	88 0f       	add	r24, r24
    122a:	98 2f       	mov	r25, r24
    122c:	99 0f       	add	r25, r25
    122e:	99 0f       	add	r25, r25
    1230:	89 0f       	add	r24, r25
    1232:	68 1b       	sub	r22, r24
    1234:	88 e0       	ldi	r24, 0x08	; 8
    1236:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(A_Minute/10));
    123a:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <A_Minute>
    123e:	6c 9f       	mul	r22, r28
    1240:	61 2d       	mov	r22, r1
    1242:	11 24       	eor	r1, r1
    1244:	66 95       	lsr	r22
    1246:	66 95       	lsr	r22
    1248:	66 95       	lsr	r22
    124a:	87 e0       	ldi	r24, 0x07	; 7
    124c:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    1250:	6f e0       	ldi	r22, 0x0F	; 15
    1252:	86 e0       	ldi	r24, 0x06	; 6
    1254:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    1258:	6f e0       	ldi	r22, 0x0F	; 15
    125a:	85 e0       	ldi	r24, 0x05	; 5
    125c:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Minute%10));
    1260:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <Minute>
    1264:	6c 9f       	mul	r22, r28
    1266:	81 2d       	mov	r24, r1
    1268:	11 24       	eor	r1, r1
    126a:	86 95       	lsr	r24
    126c:	86 95       	lsr	r24
    126e:	86 95       	lsr	r24
    1270:	88 0f       	add	r24, r24
    1272:	98 2f       	mov	r25, r24
    1274:	99 0f       	add	r25, r25
    1276:	99 0f       	add	r25, r25
    1278:	89 0f       	add	r24, r25
    127a:	68 1b       	sub	r22, r24
    127c:	84 e0       	ldi	r24, 0x04	; 4
    127e:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Minute/10));
    1282:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <Minute>
    1286:	6c 9f       	mul	r22, r28
    1288:	61 2d       	mov	r22, r1
    128a:	11 24       	eor	r1, r1
    128c:	66 95       	lsr	r22
    128e:	66 95       	lsr	r22
    1290:	66 95       	lsr	r22
    1292:	83 e0       	ldi	r24, 0x03	; 3
    1294:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Hour%10));
    1298:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <Hour>
    129c:	6c 9f       	mul	r22, r28
    129e:	81 2d       	mov	r24, r1
    12a0:	11 24       	eor	r1, r1
    12a2:	86 95       	lsr	r24
    12a4:	86 95       	lsr	r24
    12a6:	86 95       	lsr	r24
    12a8:	88 0f       	add	r24, r24
    12aa:	98 2f       	mov	r25, r24
    12ac:	99 0f       	add	r25, r25
    12ae:	99 0f       	add	r25, r25
    12b0:	89 0f       	add	r24, r25
    12b2:	68 1b       	sub	r22, r24
    12b4:	82 e0       	ldi	r24, 0x02	; 2
    12b6:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Hour/10));
    12ba:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <Hour>
    12be:	6c 9f       	mul	r22, r28
    12c0:	61 2d       	mov	r22, r1
    12c2:	11 24       	eor	r1, r1
    12c4:	66 95       	lsr	r22
    12c6:	66 95       	lsr	r22
    12c8:	66 95       	lsr	r22
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>

		}
		if ((count==2)&&(SW_time_date==3))	//blink A_MIN
    12d0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
    12d4:	82 30       	cpi	r24, 0x02	; 2
    12d6:	09 f0       	breq	.+2      	; 0x12da <__stack+0xa7b>
    12d8:	64 c0       	rjmp	.+200    	; 0x13a2 <__stack+0xb43>
    12da:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
    12de:	83 30       	cpi	r24, 0x03	; 3
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <__stack+0xa85>
    12e2:	5f c0       	rjmp	.+190    	; 0x13a2 <__stack+0xb43>
		{
			
			MAX7219_clearDisplay();
    12e4:	0e 94 a6 01 	call	0x34c	; 0x34c <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    12e8:	6f e0       	ldi	r22, 0x0F	; 15
    12ea:	88 e0       	ldi	r24, 0x08	; 8
    12ec:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    12f0:	6f e0       	ldi	r22, 0x0F	; 15
    12f2:	87 e0       	ldi	r24, 0x07	; 7
    12f4:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(A_Hour%10));
    12f8:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <A_Hour>
    12fc:	cd ec       	ldi	r28, 0xCD	; 205
    12fe:	6c 9f       	mul	r22, r28
    1300:	81 2d       	mov	r24, r1
    1302:	11 24       	eor	r1, r1
    1304:	86 95       	lsr	r24
    1306:	86 95       	lsr	r24
    1308:	86 95       	lsr	r24
    130a:	88 0f       	add	r24, r24
    130c:	98 2f       	mov	r25, r24
    130e:	99 0f       	add	r25, r25
    1310:	99 0f       	add	r25, r25
    1312:	89 0f       	add	r24, r25
    1314:	68 1b       	sub	r22, r24
    1316:	86 e0       	ldi	r24, 0x06	; 6
    1318:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(A_Hour/10));
    131c:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <A_Hour>
    1320:	6c 9f       	mul	r22, r28
    1322:	61 2d       	mov	r22, r1
    1324:	11 24       	eor	r1, r1
    1326:	66 95       	lsr	r22
    1328:	66 95       	lsr	r22
    132a:	66 95       	lsr	r22
    132c:	85 e0       	ldi	r24, 0x05	; 5
    132e:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Minute%10));
    1332:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <Minute>
    1336:	6c 9f       	mul	r22, r28
    1338:	81 2d       	mov	r24, r1
    133a:	11 24       	eor	r1, r1
    133c:	86 95       	lsr	r24
    133e:	86 95       	lsr	r24
    1340:	86 95       	lsr	r24
    1342:	88 0f       	add	r24, r24
    1344:	98 2f       	mov	r25, r24
    1346:	99 0f       	add	r25, r25
    1348:	99 0f       	add	r25, r25
    134a:	89 0f       	add	r24, r25
    134c:	68 1b       	sub	r22, r24
    134e:	84 e0       	ldi	r24, 0x04	; 4
    1350:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Minute/10));
    1354:	60 91 69 00 	lds	r22, 0x0069	; 0x800069 <Minute>
    1358:	6c 9f       	mul	r22, r28
    135a:	61 2d       	mov	r22, r1
    135c:	11 24       	eor	r1, r1
    135e:	66 95       	lsr	r22
    1360:	66 95       	lsr	r22
    1362:	66 95       	lsr	r22
    1364:	83 e0       	ldi	r24, 0x03	; 3
    1366:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Hour%10));
    136a:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <Hour>
    136e:	6c 9f       	mul	r22, r28
    1370:	81 2d       	mov	r24, r1
    1372:	11 24       	eor	r1, r1
    1374:	86 95       	lsr	r24
    1376:	86 95       	lsr	r24
    1378:	86 95       	lsr	r24
    137a:	88 0f       	add	r24, r24
    137c:	98 2f       	mov	r25, r24
    137e:	99 0f       	add	r25, r25
    1380:	99 0f       	add	r25, r25
    1382:	89 0f       	add	r24, r25
    1384:	68 1b       	sub	r22, r24
    1386:	82 e0       	ldi	r24, 0x02	; 2
    1388:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Hour/10));
    138c:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <Hour>
    1390:	6c 9f       	mul	r22, r28
    1392:	61 2d       	mov	r22, r1
    1394:	11 24       	eor	r1, r1
    1396:	66 95       	lsr	r22
    1398:	66 95       	lsr	r22
    139a:	66 95       	lsr	r22
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
		}
	}
	

}
    13a2:	df 91       	pop	r29
    13a4:	cf 91       	pop	r28
    13a6:	08 95       	ret

000013a8 <jdFromDate>:

//-----------------------DOI DUONG LICH - AM LICH---------------------

double jdFromDate(uint8_t dd, uint8_t mm, uint16_t yy)
{
    13a8:	4f 92       	push	r4
    13aa:	5f 92       	push	r5
    13ac:	6f 92       	push	r6
    13ae:	7f 92       	push	r7
    13b0:	8f 92       	push	r8
    13b2:	9f 92       	push	r9
    13b4:	af 92       	push	r10
    13b6:	bf 92       	push	r11
    13b8:	cf 92       	push	r12
    13ba:	df 92       	push	r13
    13bc:	ef 92       	push	r14
    13be:	ff 92       	push	r15
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	f8 2e       	mov	r15, r24
    13ca:	8a 01       	movw	r16, r20
	long double a, y, m, jd;
	a = floorf((14 - mm) / 12);
    13cc:	c6 2f       	mov	r28, r22
    13ce:	d0 e0       	ldi	r29, 0x00	; 0
    13d0:	8e e0       	ldi	r24, 0x0E	; 14
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	8c 1b       	sub	r24, r28
    13d6:	9d 0b       	sbc	r25, r29
    13d8:	6c e0       	ldi	r22, 0x0C	; 12
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <__divmodhi4>
    13e0:	07 2e       	mov	r0, r23
    13e2:	00 0c       	add	r0, r0
    13e4:	88 0b       	sbc	r24, r24
    13e6:	99 0b       	sbc	r25, r25
    13e8:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__floatsisf>
    13ec:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <floor>
    13f0:	4b 01       	movw	r8, r22
    13f2:	5c 01       	movw	r10, r24
	y = yy+4800-a;
    13f4:	b8 01       	movw	r22, r16
    13f6:	60 54       	subi	r22, 0x40	; 64
    13f8:	7d 4e       	sbci	r23, 0xED	; 237
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <__floatunsisf>
    1402:	a5 01       	movw	r20, r10
    1404:	94 01       	movw	r18, r8
    1406:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    140a:	2b 01       	movw	r4, r22
    140c:	3c 01       	movw	r6, r24
	m = mm+12*a-3;
    140e:	20 e0       	ldi	r18, 0x00	; 0
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	40 e4       	ldi	r20, 0x40	; 64
    1414:	51 e4       	ldi	r21, 0x41	; 65
    1416:	c5 01       	movw	r24, r10
    1418:	b4 01       	movw	r22, r8
    141a:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    141e:	4b 01       	movw	r8, r22
    1420:	5c 01       	movw	r10, r24
    1422:	be 01       	movw	r22, r28
    1424:	dd 0f       	add	r29, r29
    1426:	88 0b       	sbc	r24, r24
    1428:	99 0b       	sbc	r25, r25
    142a:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__floatsisf>
    142e:	a5 01       	movw	r20, r10
    1430:	94 01       	movw	r18, r8
    1432:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	40 e4       	ldi	r20, 0x40	; 64
    143c:	50 e4       	ldi	r21, 0x40	; 64
    143e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1442:	4b 01       	movw	r8, r22
    1444:	5c 01       	movw	r10, r24
	jd = dd + floorf((153*m+2)/5) + 365*y + floorf(y/4) - floorf(y/100) + floorf(y/400) - 32045;
    1446:	6f 2d       	mov	r22, r15
    1448:	70 e0       	ldi	r23, 0x00	; 0
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 7d 15 	call	0x2afa	; 0x2afa <__floatsisf>
    1452:	6b 01       	movw	r12, r22
    1454:	7c 01       	movw	r14, r24
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	49 e1       	ldi	r20, 0x19	; 25
    145c:	53 e4       	ldi	r21, 0x43	; 67
    145e:	c5 01       	movw	r24, r10
    1460:	b4 01       	movw	r22, r8
    1462:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	40 e0       	ldi	r20, 0x00	; 0
    146c:	50 e4       	ldi	r21, 0x40	; 64
    146e:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 ea       	ldi	r20, 0xA0	; 160
    1478:	50 e4       	ldi	r21, 0x40	; 64
    147a:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__divsf3>
    147e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <floor>
    1482:	9b 01       	movw	r18, r22
    1484:	ac 01       	movw	r20, r24
    1486:	c7 01       	movw	r24, r14
    1488:	b6 01       	movw	r22, r12
    148a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    148e:	6b 01       	movw	r12, r22
    1490:	7c 01       	movw	r14, r24
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	30 e8       	ldi	r19, 0x80	; 128
    1496:	46 eb       	ldi	r20, 0xB6	; 182
    1498:	53 e4       	ldi	r21, 0x43	; 67
    149a:	c3 01       	movw	r24, r6
    149c:	b2 01       	movw	r22, r4
    149e:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    14a2:	9b 01       	movw	r18, r22
    14a4:	ac 01       	movw	r20, r24
    14a6:	c7 01       	movw	r24, r14
    14a8:	b6 01       	movw	r22, r12
    14aa:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    14ae:	6b 01       	movw	r12, r22
    14b0:	7c 01       	movw	r14, r24
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e8       	ldi	r20, 0x80	; 128
    14b8:	5e e3       	ldi	r21, 0x3E	; 62
    14ba:	c3 01       	movw	r24, r6
    14bc:	b2 01       	movw	r22, r4
    14be:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    14c2:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <floor>
    14c6:	9b 01       	movw	r18, r22
    14c8:	ac 01       	movw	r20, r24
    14ca:	c7 01       	movw	r24, r14
    14cc:	b6 01       	movw	r22, r12
    14ce:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    14d2:	6b 01       	movw	r12, r22
    14d4:	7c 01       	movw	r14, r24
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	48 ec       	ldi	r20, 0xC8	; 200
    14dc:	52 e4       	ldi	r21, 0x42	; 66
    14de:	c3 01       	movw	r24, r6
    14e0:	b2 01       	movw	r22, r4
    14e2:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__divsf3>
    14e6:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <floor>
    14ea:	9b 01       	movw	r18, r22
    14ec:	ac 01       	movw	r20, r24
    14ee:	c7 01       	movw	r24, r14
    14f0:	b6 01       	movw	r22, r12
    14f2:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    14f6:	4b 01       	movw	r8, r22
    14f8:	5c 01       	movw	r10, r24
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	48 ec       	ldi	r20, 0xC8	; 200
    1500:	53 e4       	ldi	r21, 0x43	; 67
    1502:	c3 01       	movw	r24, r6
    1504:	b2 01       	movw	r22, r4
    1506:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__divsf3>
    150a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <floor>
    150e:	9b 01       	movw	r18, r22
    1510:	ac 01       	movw	r20, r24
    1512:	c5 01       	movw	r24, r10
    1514:	b4 01       	movw	r22, r8
    1516:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	3a e5       	ldi	r19, 0x5A	; 90
    151e:	4a ef       	ldi	r20, 0xFA	; 250
    1520:	56 e4       	ldi	r21, 0x46	; 70
    1522:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1526:	4b 01       	movw	r8, r22
    1528:	5c 01       	movw	r10, r24
	if (jd < 2299161) {
    152a:	24 e6       	ldi	r18, 0x64	; 100
    152c:	34 e5       	ldi	r19, 0x54	; 84
    152e:	4c e0       	ldi	r20, 0x0C	; 12
    1530:	5a e4       	ldi	r21, 0x4A	; 74
    1532:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__cmpsf2>
    1536:	88 23       	and	r24, r24
    1538:	54 f4       	brge	.+20     	; 0x154e <jdFromDate+0x1a6>
		jd = dd + floorf((153*m+2)/5) + 365*y + floorf(y/4) - 32083;
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	36 ea       	ldi	r19, 0xA6	; 166
    153e:	4a ef       	ldi	r20, 0xFA	; 250
    1540:	56 e4       	ldi	r21, 0x46	; 70
    1542:	c7 01       	movw	r24, r14
    1544:	b6 01       	movw	r22, r12
    1546:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    154a:	4b 01       	movw	r8, r22
    154c:	5c 01       	movw	r10, r24
	}
	return jd;
}
    154e:	c5 01       	movw	r24, r10
    1550:	b4 01       	movw	r22, r8
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	df 90       	pop	r13
    1560:	cf 90       	pop	r12
    1562:	bf 90       	pop	r11
    1564:	af 90       	pop	r10
    1566:	9f 90       	pop	r9
    1568:	8f 90       	pop	r8
    156a:	7f 90       	pop	r7
    156c:	6f 90       	pop	r6
    156e:	5f 90       	pop	r5
    1570:	4f 90       	pop	r4
    1572:	08 95       	ret

00001574 <getNewMoonDay>:

double getNewMoonDay(long double k)
{
    1574:	4f 92       	push	r4
    1576:	5f 92       	push	r5
    1578:	6f 92       	push	r6
    157a:	7f 92       	push	r7
    157c:	8f 92       	push	r8
    157e:	9f 92       	push	r9
    1580:	af 92       	push	r10
    1582:	bf 92       	push	r11
    1584:	cf 92       	push	r12
    1586:	df 92       	push	r13
    1588:	ef 92       	push	r14
    158a:	ff 92       	push	r15
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	64 97       	sbiw	r28, 0x14	; 20
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	de bf       	out	0x3e, r29	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	cd bf       	out	0x3d, r28	; 61
    15a0:	6b 01       	movw	r12, r22
    15a2:	7c 01       	movw	r14, r24
	long double T, T2, T3, dr, Jd1, M, Mpr, F, C1, deltat, JdNew;
	T = k/1236.85; // Time in Julian centuries from 1900 January 0.5
    15a4:	23 e3       	ldi	r18, 0x33	; 51
    15a6:	3b e9       	ldi	r19, 0x9B	; 155
    15a8:	4a e9       	ldi	r20, 0x9A	; 154
    15aa:	54 e4       	ldi	r21, 0x44	; 68
    15ac:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__divsf3>
    15b0:	69 83       	std	Y+1, r22	; 0x01
    15b2:	7a 83       	std	Y+2, r23	; 0x02
    15b4:	8b 83       	std	Y+3, r24	; 0x03
    15b6:	9c 83       	std	Y+4, r25	; 0x04
	T2 = T * T;
    15b8:	9b 01       	movw	r18, r22
    15ba:	ac 01       	movw	r20, r24
    15bc:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    15c0:	6d 83       	std	Y+5, r22	; 0x05
    15c2:	7e 83       	std	Y+6, r23	; 0x06
    15c4:	8f 83       	std	Y+7, r24	; 0x07
    15c6:	98 87       	std	Y+8, r25	; 0x08
	T3 = T2 * T;
    15c8:	9b 01       	movw	r18, r22
    15ca:	ac 01       	movw	r20, r24
    15cc:	69 81       	ldd	r22, Y+1	; 0x01
    15ce:	7a 81       	ldd	r23, Y+2	; 0x02
    15d0:	8b 81       	ldd	r24, Y+3	; 0x03
    15d2:	9c 81       	ldd	r25, Y+4	; 0x04
    15d4:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    15d8:	6d 87       	std	Y+13, r22	; 0x0d
    15da:	7e 87       	std	Y+14, r23	; 0x0e
    15dc:	8f 87       	std	Y+15, r24	; 0x0f
    15de:	98 8b       	std	Y+16, r25	; 0x10
	dr = M_PI/180;
	Jd1 = 2415020.75933 + 29.53058868*k + 0.0001178*T2 - 0.000000155*T3;
    15e0:	25 ea       	ldi	r18, 0xA5	; 165
    15e2:	3e e3       	ldi	r19, 0x3E	; 62
    15e4:	4c ee       	ldi	r20, 0xEC	; 236
    15e6:	51 e4       	ldi	r21, 0x41	; 65
    15e8:	c7 01       	movw	r24, r14
    15ea:	b6 01       	movw	r22, r12
    15ec:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    15f0:	23 eb       	ldi	r18, 0xB3	; 179
    15f2:	36 e6       	ldi	r19, 0x66	; 102
    15f4:	43 e1       	ldi	r20, 0x13	; 19
    15f6:	5a e4       	ldi	r21, 0x4A	; 74
    15f8:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    15fc:	4b 01       	movw	r8, r22
    15fe:	5c 01       	movw	r10, r24
    1600:	25 e6       	ldi	r18, 0x65	; 101
    1602:	3b e0       	ldi	r19, 0x0B	; 11
    1604:	47 ef       	ldi	r20, 0xF7	; 247
    1606:	58 e3       	ldi	r21, 0x38	; 56
    1608:	6d 81       	ldd	r22, Y+5	; 0x05
    160a:	7e 81       	ldd	r23, Y+6	; 0x06
    160c:	8f 81       	ldd	r24, Y+7	; 0x07
    160e:	98 85       	ldd	r25, Y+8	; 0x08
    1610:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1614:	9b 01       	movw	r18, r22
    1616:	ac 01       	movw	r20, r24
    1618:	c5 01       	movw	r24, r10
    161a:	b4 01       	movw	r22, r8
    161c:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1620:	4b 01       	movw	r8, r22
    1622:	5c 01       	movw	r10, r24
    1624:	23 e1       	ldi	r18, 0x13	; 19
    1626:	3e e6       	ldi	r19, 0x6E	; 110
    1628:	46 e2       	ldi	r20, 0x26	; 38
    162a:	54 e3       	ldi	r21, 0x34	; 52
    162c:	6d 85       	ldd	r22, Y+13	; 0x0d
    162e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1630:	8f 85       	ldd	r24, Y+15	; 0x0f
    1632:	98 89       	ldd	r25, Y+16	; 0x10
    1634:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1638:	9b 01       	movw	r18, r22
    163a:	ac 01       	movw	r20, r24
    163c:	c5 01       	movw	r24, r10
    163e:	b4 01       	movw	r22, r8
    1640:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1644:	4b 01       	movw	r8, r22
    1646:	5c 01       	movw	r10, r24
	Jd1 = Jd1 + 0.00033*sinf((166.56 + 132.87*T - 0.009173*T2)*dr); // Mean new moon
    1648:	28 eb       	ldi	r18, 0xB8	; 184
    164a:	3e ed       	ldi	r19, 0xDE	; 222
    164c:	44 e0       	ldi	r20, 0x04	; 4
    164e:	53 e4       	ldi	r21, 0x43	; 67
    1650:	69 81       	ldd	r22, Y+1	; 0x01
    1652:	7a 81       	ldd	r23, Y+2	; 0x02
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    165c:	2c e5       	ldi	r18, 0x5C	; 92
    165e:	3f e8       	ldi	r19, 0x8F	; 143
    1660:	46 e2       	ldi	r20, 0x26	; 38
    1662:	53 e4       	ldi	r21, 0x43	; 67
    1664:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1668:	2b 01       	movw	r4, r22
    166a:	3c 01       	movw	r6, r24
    166c:	2a e5       	ldi	r18, 0x5A	; 90
    166e:	3a e4       	ldi	r19, 0x4A	; 74
    1670:	46 e1       	ldi	r20, 0x16	; 22
    1672:	5c e3       	ldi	r21, 0x3C	; 60
    1674:	6d 81       	ldd	r22, Y+5	; 0x05
    1676:	7e 81       	ldd	r23, Y+6	; 0x06
    1678:	8f 81       	ldd	r24, Y+7	; 0x07
    167a:	98 85       	ldd	r25, Y+8	; 0x08
    167c:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1680:	9b 01       	movw	r18, r22
    1682:	ac 01       	movw	r20, r24
    1684:	c3 01       	movw	r24, r6
    1686:	b2 01       	movw	r22, r4
    1688:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    168c:	25 e3       	ldi	r18, 0x35	; 53
    168e:	3a ef       	ldi	r19, 0xFA	; 250
    1690:	4e e8       	ldi	r20, 0x8E	; 142
    1692:	5c e3       	ldi	r21, 0x3C	; 60
    1694:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1698:	0e 94 f7 16 	call	0x2dee	; 0x2dee <sin>
    169c:	2a ed       	ldi	r18, 0xDA	; 218
    169e:	33 e0       	ldi	r19, 0x03	; 3
    16a0:	4d ea       	ldi	r20, 0xAD	; 173
    16a2:	59 e3       	ldi	r21, 0x39	; 57
    16a4:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    16a8:	9b 01       	movw	r18, r22
    16aa:	ac 01       	movw	r20, r24
    16ac:	c5 01       	movw	r24, r10
    16ae:	b4 01       	movw	r22, r8
    16b0:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    16b4:	69 8b       	std	Y+17, r22	; 0x11
    16b6:	7a 8b       	std	Y+18, r23	; 0x12
    16b8:	8b 8b       	std	Y+19, r24	; 0x13
    16ba:	9c 8b       	std	Y+20, r25	; 0x14
	M = 359.2242 + 29.10535608*k - 0.0000333*T2 - 0.00000347*T3; // Sun's mean anomaly
    16bc:	25 ec       	ldi	r18, 0xC5	; 197
    16be:	37 ed       	ldi	r19, 0xD7	; 215
    16c0:	48 ee       	ldi	r20, 0xE8	; 232
    16c2:	51 e4       	ldi	r21, 0x41	; 65
    16c4:	c7 01       	movw	r24, r14
    16c6:	b6 01       	movw	r22, r12
    16c8:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    16cc:	23 eb       	ldi	r18, 0xB3	; 179
    16ce:	3c e9       	ldi	r19, 0x9C	; 156
    16d0:	43 eb       	ldi	r20, 0xB3	; 179
    16d2:	53 e4       	ldi	r21, 0x43	; 67
    16d4:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    16d8:	4b 01       	movw	r8, r22
    16da:	5c 01       	movw	r10, r24
    16dc:	2a e9       	ldi	r18, 0x9A	; 154
    16de:	3b ea       	ldi	r19, 0xAB	; 171
    16e0:	4b e0       	ldi	r20, 0x0B	; 11
    16e2:	58 e3       	ldi	r21, 0x38	; 56
    16e4:	6d 81       	ldd	r22, Y+5	; 0x05
    16e6:	7e 81       	ldd	r23, Y+6	; 0x06
    16e8:	8f 81       	ldd	r24, Y+7	; 0x07
    16ea:	98 85       	ldd	r25, Y+8	; 0x08
    16ec:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    16f0:	9b 01       	movw	r18, r22
    16f2:	ac 01       	movw	r20, r24
    16f4:	c5 01       	movw	r24, r10
    16f6:	b4 01       	movw	r22, r8
    16f8:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    16fc:	4b 01       	movw	r8, r22
    16fe:	5c 01       	movw	r10, r24
    1700:	25 e2       	ldi	r18, 0x25	; 37
    1702:	3e ed       	ldi	r19, 0xDE	; 222
    1704:	48 e6       	ldi	r20, 0x68	; 104
    1706:	56 e3       	ldi	r21, 0x36	; 54
    1708:	6d 85       	ldd	r22, Y+13	; 0x0d
    170a:	7e 85       	ldd	r23, Y+14	; 0x0e
    170c:	8f 85       	ldd	r24, Y+15	; 0x0f
    170e:	98 89       	ldd	r25, Y+16	; 0x10
    1710:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1714:	9b 01       	movw	r18, r22
    1716:	ac 01       	movw	r20, r24
    1718:	c5 01       	movw	r24, r10
    171a:	b4 01       	movw	r22, r8
    171c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1720:	69 87       	std	Y+9, r22	; 0x09
    1722:	7a 87       	std	Y+10, r23	; 0x0a
    1724:	8b 87       	std	Y+11, r24	; 0x0b
    1726:	9c 87       	std	Y+12, r25	; 0x0c
	Mpr = 306.0253 + 385.81691806*k + 0.0107306*T2 + 0.00001236*T3; // Moon's mean anomaly
    1728:	21 e9       	ldi	r18, 0x91	; 145
    172a:	38 ee       	ldi	r19, 0xE8	; 232
    172c:	40 ec       	ldi	r20, 0xC0	; 192
    172e:	53 e4       	ldi	r21, 0x43	; 67
    1730:	c7 01       	movw	r24, r14
    1732:	b6 01       	movw	r22, r12
    1734:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1738:	2d e3       	ldi	r18, 0x3D	; 61
    173a:	33 e0       	ldi	r19, 0x03	; 3
    173c:	49 e9       	ldi	r20, 0x99	; 153
    173e:	53 e4       	ldi	r21, 0x43	; 67
    1740:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1744:	4b 01       	movw	r8, r22
    1746:	5c 01       	movw	r10, r24
    1748:	26 e6       	ldi	r18, 0x66	; 102
    174a:	3f ec       	ldi	r19, 0xCF	; 207
    174c:	4f e2       	ldi	r20, 0x2F	; 47
    174e:	5c e3       	ldi	r21, 0x3C	; 60
    1750:	6d 81       	ldd	r22, Y+5	; 0x05
    1752:	7e 81       	ldd	r23, Y+6	; 0x06
    1754:	8f 81       	ldd	r24, Y+7	; 0x07
    1756:	98 85       	ldd	r25, Y+8	; 0x08
    1758:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    175c:	9b 01       	movw	r18, r22
    175e:	ac 01       	movw	r20, r24
    1760:	c5 01       	movw	r24, r10
    1762:	b4 01       	movw	r22, r8
    1764:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1768:	4b 01       	movw	r8, r22
    176a:	5c 01       	movw	r10, r24
    176c:	2c ec       	ldi	r18, 0xCC	; 204
    176e:	3d e5       	ldi	r19, 0x5D	; 93
    1770:	4f e4       	ldi	r20, 0x4F	; 79
    1772:	57 e3       	ldi	r21, 0x37	; 55
    1774:	6d 85       	ldd	r22, Y+13	; 0x0d
    1776:	7e 85       	ldd	r23, Y+14	; 0x0e
    1778:	8f 85       	ldd	r24, Y+15	; 0x0f
    177a:	98 89       	ldd	r25, Y+16	; 0x10
    177c:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1780:	9b 01       	movw	r18, r22
    1782:	ac 01       	movw	r20, r24
    1784:	c5 01       	movw	r24, r10
    1786:	b4 01       	movw	r22, r8
    1788:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    178c:	2b 01       	movw	r4, r22
    178e:	3c 01       	movw	r6, r24
	F = 21.2964 + 390.67050646*k - 0.0016528*T2 - 0.00000239*T3; // Moon's argument of latitude
    1790:	23 ed       	ldi	r18, 0xD3	; 211
    1792:	35 e5       	ldi	r19, 0x55	; 85
    1794:	43 ec       	ldi	r20, 0xC3	; 195
    1796:	53 e4       	ldi	r21, 0x43	; 67
    1798:	c7 01       	movw	r24, r14
    179a:	b6 01       	movw	r22, r12
    179c:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    17a0:	27 e0       	ldi	r18, 0x07	; 7
    17a2:	3f e5       	ldi	r19, 0x5F	; 95
    17a4:	4a ea       	ldi	r20, 0xAA	; 170
    17a6:	51 e4       	ldi	r21, 0x41	; 65
    17a8:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    17ac:	6b 01       	movw	r12, r22
    17ae:	7c 01       	movw	r14, r24
    17b0:	24 ec       	ldi	r18, 0xC4	; 196
    17b2:	32 ea       	ldi	r19, 0xA2	; 162
    17b4:	48 ed       	ldi	r20, 0xD8	; 216
    17b6:	5a e3       	ldi	r21, 0x3A	; 58
    17b8:	6d 81       	ldd	r22, Y+5	; 0x05
    17ba:	7e 81       	ldd	r23, Y+6	; 0x06
    17bc:	8f 81       	ldd	r24, Y+7	; 0x07
    17be:	98 85       	ldd	r25, Y+8	; 0x08
    17c0:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    17c4:	9b 01       	movw	r18, r22
    17c6:	ac 01       	movw	r20, r24
    17c8:	c7 01       	movw	r24, r14
    17ca:	b6 01       	movw	r22, r12
    17cc:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    17d0:	6b 01       	movw	r12, r22
    17d2:	7c 01       	movw	r14, r24
    17d4:	23 ee       	ldi	r18, 0xE3	; 227
    17d6:	33 e6       	ldi	r19, 0x63	; 99
    17d8:	40 e2       	ldi	r20, 0x20	; 32
    17da:	56 e3       	ldi	r21, 0x36	; 54
    17dc:	6d 85       	ldd	r22, Y+13	; 0x0d
    17de:	7e 85       	ldd	r23, Y+14	; 0x0e
    17e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17e2:	98 89       	ldd	r25, Y+16	; 0x10
    17e4:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    17e8:	9b 01       	movw	r18, r22
    17ea:	ac 01       	movw	r20, r24
    17ec:	c7 01       	movw	r24, r14
    17ee:	b6 01       	movw	r22, r12
    17f0:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    17f4:	6b 01       	movw	r12, r22
    17f6:	7c 01       	movw	r14, r24
	C1=(0.1734 - 0.000393*T)*sinf(M*dr) + 0.0021*sinf(2*dr*M);
    17f8:	21 e9       	ldi	r18, 0x91	; 145
    17fa:	3b e0       	ldi	r19, 0x0B	; 11
    17fc:	4e ec       	ldi	r20, 0xCE	; 206
    17fe:	59 e3       	ldi	r21, 0x39	; 57
    1800:	69 81       	ldd	r22, Y+1	; 0x01
    1802:	7a 81       	ldd	r23, Y+2	; 0x02
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    180c:	9b 01       	movw	r18, r22
    180e:	ac 01       	movw	r20, r24
    1810:	65 ec       	ldi	r22, 0xC5	; 197
    1812:	7f e8       	ldi	r23, 0x8F	; 143
    1814:	81 e3       	ldi	r24, 0x31	; 49
    1816:	9e e3       	ldi	r25, 0x3E	; 62
    1818:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    181c:	4b 01       	movw	r8, r22
    181e:	5c 01       	movw	r10, r24
    1820:	25 e3       	ldi	r18, 0x35	; 53
    1822:	3a ef       	ldi	r19, 0xFA	; 250
    1824:	4e e8       	ldi	r20, 0x8E	; 142
    1826:	5c e3       	ldi	r21, 0x3C	; 60
    1828:	69 85       	ldd	r22, Y+9	; 0x09
    182a:	7a 85       	ldd	r23, Y+10	; 0x0a
    182c:	8b 85       	ldd	r24, Y+11	; 0x0b
    182e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1830:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1834:	0e 94 f7 16 	call	0x2dee	; 0x2dee <sin>
    1838:	9b 01       	movw	r18, r22
    183a:	ac 01       	movw	r20, r24
    183c:	c5 01       	movw	r24, r10
    183e:	b4 01       	movw	r22, r8
    1840:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1844:	4b 01       	movw	r8, r22
    1846:	5c 01       	movw	r10, r24
    1848:	25 e3       	ldi	r18, 0x35	; 53
    184a:	3a ef       	ldi	r19, 0xFA	; 250
    184c:	4e e0       	ldi	r20, 0x0E	; 14
    184e:	5d e3       	ldi	r21, 0x3D	; 61
    1850:	69 85       	ldd	r22, Y+9	; 0x09
    1852:	7a 85       	ldd	r23, Y+10	; 0x0a
    1854:	8b 85       	ldd	r24, Y+11	; 0x0b
    1856:	9c 85       	ldd	r25, Y+12	; 0x0c
    1858:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    185c:	0e 94 f7 16 	call	0x2dee	; 0x2dee <sin>
    1860:	27 e2       	ldi	r18, 0x27	; 39
    1862:	30 ea       	ldi	r19, 0xA0	; 160
    1864:	49 e0       	ldi	r20, 0x09	; 9
    1866:	5b e3       	ldi	r21, 0x3B	; 59
    1868:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    186c:	9b 01       	movw	r18, r22
    186e:	ac 01       	movw	r20, r24
    1870:	c5 01       	movw	r24, r10
    1872:	b4 01       	movw	r22, r8
    1874:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1878:	4b 01       	movw	r8, r22
    187a:	5c 01       	movw	r10, r24
	C1 = C1 - 0.4068*sinf(Mpr*dr) + 0.0161*sinf(dr*2*Mpr);
    187c:	25 e3       	ldi	r18, 0x35	; 53
    187e:	3a ef       	ldi	r19, 0xFA	; 250
    1880:	4e e8       	ldi	r20, 0x8E	; 142
    1882:	5c e3       	ldi	r21, 0x3C	; 60
    1884:	c3 01       	movw	r24, r6
    1886:	b2 01       	movw	r22, r4
    1888:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    188c:	0e 94 f7 16 	call	0x2dee	; 0x2dee <sin>
    1890:	27 e1       	ldi	r18, 0x17	; 23
    1892:	38 e4       	ldi	r19, 0x48	; 72
    1894:	40 ed       	ldi	r20, 0xD0	; 208
    1896:	5e e3       	ldi	r21, 0x3E	; 62
    1898:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    189c:	9b 01       	movw	r18, r22
    189e:	ac 01       	movw	r20, r24
    18a0:	c5 01       	movw	r24, r10
    18a2:	b4 01       	movw	r22, r8
    18a4:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    18a8:	4b 01       	movw	r8, r22
    18aa:	5c 01       	movw	r10, r24
    18ac:	25 e3       	ldi	r18, 0x35	; 53
    18ae:	3a ef       	ldi	r19, 0xFA	; 250
    18b0:	4e e0       	ldi	r20, 0x0E	; 14
    18b2:	5d e3       	ldi	r21, 0x3D	; 61
    18b4:	c3 01       	movw	r24, r6
    18b6:	b2 01       	movw	r22, r4
    18b8:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    18bc:	0e 94 f7 16 	call	0x2dee	; 0x2dee <sin>
    18c0:	26 e2       	ldi	r18, 0x26	; 38
    18c2:	34 ee       	ldi	r19, 0xE4	; 228
    18c4:	43 e8       	ldi	r20, 0x83	; 131
    18c6:	5c e3       	ldi	r21, 0x3C	; 60
    18c8:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    18cc:	9b 01       	movw	r18, r22
    18ce:	ac 01       	movw	r20, r24
    18d0:	c5 01       	movw	r24, r10
    18d2:	b4 01       	movw	r22, r8
    18d4:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    18d8:	4b 01       	movw	r8, r22
    18da:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0004*sinf(dr*3*Mpr);
    18dc:	20 e5       	ldi	r18, 0x50	; 80
    18de:	37 e7       	ldi	r19, 0x77	; 119
    18e0:	46 e5       	ldi	r20, 0x56	; 86
    18e2:	5d e3       	ldi	r21, 0x3D	; 61
    18e4:	c3 01       	movw	r24, r6
    18e6:	b2 01       	movw	r22, r4
    18e8:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    18ec:	0e 94 f7 16 	call	0x2dee	; 0x2dee <sin>
    18f0:	27 e1       	ldi	r18, 0x17	; 23
    18f2:	37 eb       	ldi	r19, 0xB7	; 183
    18f4:	41 ed       	ldi	r20, 0xD1	; 209
    18f6:	59 e3       	ldi	r21, 0x39	; 57
    18f8:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    18fc:	9b 01       	movw	r18, r22
    18fe:	ac 01       	movw	r20, r24
    1900:	c5 01       	movw	r24, r10
    1902:	b4 01       	movw	r22, r8
    1904:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1908:	4b 01       	movw	r8, r22
    190a:	5c 01       	movw	r10, r24
	C1 = C1 + 0.0104*sinf(dr*2*F) - 0.0051*sinf(dr*(M+Mpr));
    190c:	25 e3       	ldi	r18, 0x35	; 53
    190e:	3a ef       	ldi	r19, 0xFA	; 250
    1910:	4e e0       	ldi	r20, 0x0E	; 14
    1912:	5d e3       	ldi	r21, 0x3D	; 61
    1914:	c7 01       	movw	r24, r14
    1916:	b6 01       	movw	r22, r12
    1918:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    191c:	0e 94 f7 16 	call	0x2dee	; 0x2dee <sin>
    1920:	23 ec       	ldi	r18, 0xC3	; 195
    1922:	34 e6       	ldi	r19, 0x64	; 100
    1924:	4a e2       	ldi	r20, 0x2A	; 42
    1926:	5c e3       	ldi	r21, 0x3C	; 60
    1928:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    192c:	9b 01       	movw	r18, r22
    192e:	ac 01       	movw	r20, r24
    1930:	c5 01       	movw	r24, r10
    1932:	b4 01       	movw	r22, r8
    1934:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1938:	4b 01       	movw	r8, r22
    193a:	5c 01       	movw	r10, r24
    193c:	a3 01       	movw	r20, r6
    193e:	92 01       	movw	r18, r4
    1940:	69 85       	ldd	r22, Y+9	; 0x09
    1942:	7a 85       	ldd	r23, Y+10	; 0x0a
    1944:	8b 85       	ldd	r24, Y+11	; 0x0b
    1946:	9c 85       	ldd	r25, Y+12	; 0x0c
    1948:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    194c:	25 e3       	ldi	r18, 0x35	; 53
    194e:	3a ef       	ldi	r19, 0xFA	; 250
    1950:	4e e8       	ldi	r20, 0x8E	; 142
    1952:	5c e3       	ldi	r21, 0x3C	; 60
    1954:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1958:	0e 94 f7 16 	call	0x2dee	; 0x2dee <sin>
    195c:	27 ee       	ldi	r18, 0xE7	; 231
    195e:	3d e1       	ldi	r19, 0x1D	; 29
    1960:	47 ea       	ldi	r20, 0xA7	; 167
    1962:	5b e3       	ldi	r21, 0x3B	; 59
    1964:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1968:	9b 01       	movw	r18, r22
    196a:	ac 01       	movw	r20, r24
    196c:	c5 01       	movw	r24, r10
    196e:	b4 01       	movw	r22, r8
    1970:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1974:	4b 01       	movw	r8, r22
    1976:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0074*sinf(dr*(M-Mpr)) + 0.0004*sinf(dr*(2*F+M));
    1978:	a3 01       	movw	r20, r6
    197a:	92 01       	movw	r18, r4
    197c:	69 85       	ldd	r22, Y+9	; 0x09
    197e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1980:	8b 85       	ldd	r24, Y+11	; 0x0b
    1982:	9c 85       	ldd	r25, Y+12	; 0x0c
    1984:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1988:	25 e3       	ldi	r18, 0x35	; 53
    198a:	3a ef       	ldi	r19, 0xFA	; 250
    198c:	4e e8       	ldi	r20, 0x8E	; 142
    198e:	5c e3       	ldi	r21, 0x3C	; 60
    1990:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1994:	0e 94 f7 16 	call	0x2dee	; 0x2dee <sin>
    1998:	23 eb       	ldi	r18, 0xB3	; 179
    199a:	3b e7       	ldi	r19, 0x7B	; 123
    199c:	42 ef       	ldi	r20, 0xF2	; 242
    199e:	5b e3       	ldi	r21, 0x3B	; 59
    19a0:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    19a4:	9b 01       	movw	r18, r22
    19a6:	ac 01       	movw	r20, r24
    19a8:	c5 01       	movw	r24, r10
    19aa:	b4 01       	movw	r22, r8
    19ac:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    19b0:	4b 01       	movw	r8, r22
    19b2:	5c 01       	movw	r10, r24
    19b4:	a7 01       	movw	r20, r14
    19b6:	96 01       	movw	r18, r12
    19b8:	c7 01       	movw	r24, r14
    19ba:	b6 01       	movw	r22, r12
    19bc:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    19c0:	6b 01       	movw	r12, r22
    19c2:	7c 01       	movw	r14, r24
    19c4:	9b 01       	movw	r18, r22
    19c6:	ac 01       	movw	r20, r24
    19c8:	69 85       	ldd	r22, Y+9	; 0x09
    19ca:	7a 85       	ldd	r23, Y+10	; 0x0a
    19cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    19ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    19d0:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    19d4:	25 e3       	ldi	r18, 0x35	; 53
    19d6:	3a ef       	ldi	r19, 0xFA	; 250
    19d8:	4e e8       	ldi	r20, 0x8E	; 142
    19da:	5c e3       	ldi	r21, 0x3C	; 60
    19dc:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    19e0:	0e 94 f7 16 	call	0x2dee	; 0x2dee <sin>
    19e4:	27 e1       	ldi	r18, 0x17	; 23
    19e6:	37 eb       	ldi	r19, 0xB7	; 183
    19e8:	41 ed       	ldi	r20, 0xD1	; 209
    19ea:	59 e3       	ldi	r21, 0x39	; 57
    19ec:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    19f0:	9b 01       	movw	r18, r22
    19f2:	ac 01       	movw	r20, r24
    19f4:	c5 01       	movw	r24, r10
    19f6:	b4 01       	movw	r22, r8
    19f8:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    19fc:	4b 01       	movw	r8, r22
    19fe:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0004*sinf(dr*(2*F-M)) - 0.0006*sinf(dr*(2*F+Mpr));
    1a00:	29 85       	ldd	r18, Y+9	; 0x09
    1a02:	3a 85       	ldd	r19, Y+10	; 0x0a
    1a04:	4b 85       	ldd	r20, Y+11	; 0x0b
    1a06:	5c 85       	ldd	r21, Y+12	; 0x0c
    1a08:	c7 01       	movw	r24, r14
    1a0a:	b6 01       	movw	r22, r12
    1a0c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1a10:	25 e3       	ldi	r18, 0x35	; 53
    1a12:	3a ef       	ldi	r19, 0xFA	; 250
    1a14:	4e e8       	ldi	r20, 0x8E	; 142
    1a16:	5c e3       	ldi	r21, 0x3C	; 60
    1a18:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1a1c:	0e 94 f7 16 	call	0x2dee	; 0x2dee <sin>
    1a20:	27 e1       	ldi	r18, 0x17	; 23
    1a22:	37 eb       	ldi	r19, 0xB7	; 183
    1a24:	41 ed       	ldi	r20, 0xD1	; 209
    1a26:	59 e3       	ldi	r21, 0x39	; 57
    1a28:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1a2c:	9b 01       	movw	r18, r22
    1a2e:	ac 01       	movw	r20, r24
    1a30:	c5 01       	movw	r24, r10
    1a32:	b4 01       	movw	r22, r8
    1a34:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1a38:	4b 01       	movw	r8, r22
    1a3a:	5c 01       	movw	r10, r24
    1a3c:	a7 01       	movw	r20, r14
    1a3e:	96 01       	movw	r18, r12
    1a40:	c3 01       	movw	r24, r6
    1a42:	b2 01       	movw	r22, r4
    1a44:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1a48:	25 e3       	ldi	r18, 0x35	; 53
    1a4a:	3a ef       	ldi	r19, 0xFA	; 250
    1a4c:	4e e8       	ldi	r20, 0x8E	; 142
    1a4e:	5c e3       	ldi	r21, 0x3C	; 60
    1a50:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1a54:	0e 94 f7 16 	call	0x2dee	; 0x2dee <sin>
    1a58:	22 e5       	ldi	r18, 0x52	; 82
    1a5a:	39 e4       	ldi	r19, 0x49	; 73
    1a5c:	4d e1       	ldi	r20, 0x1D	; 29
    1a5e:	5a e3       	ldi	r21, 0x3A	; 58
    1a60:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1a64:	9b 01       	movw	r18, r22
    1a66:	ac 01       	movw	r20, r24
    1a68:	c5 01       	movw	r24, r10
    1a6a:	b4 01       	movw	r22, r8
    1a6c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1a70:	4b 01       	movw	r8, r22
    1a72:	5c 01       	movw	r10, r24
	C1 = C1 + 0.0010*sinf(dr*(2*F-Mpr)) + 0.0005*sinf(dr*(2*Mpr+M));
    1a74:	a3 01       	movw	r20, r6
    1a76:	92 01       	movw	r18, r4
    1a78:	c7 01       	movw	r24, r14
    1a7a:	b6 01       	movw	r22, r12
    1a7c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1a80:	25 e3       	ldi	r18, 0x35	; 53
    1a82:	3a ef       	ldi	r19, 0xFA	; 250
    1a84:	4e e8       	ldi	r20, 0x8E	; 142
    1a86:	5c e3       	ldi	r21, 0x3C	; 60
    1a88:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1a8c:	0e 94 f7 16 	call	0x2dee	; 0x2dee <sin>
    1a90:	2f e6       	ldi	r18, 0x6F	; 111
    1a92:	32 e1       	ldi	r19, 0x12	; 18
    1a94:	43 e8       	ldi	r20, 0x83	; 131
    1a96:	5a e3       	ldi	r21, 0x3A	; 58
    1a98:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1a9c:	9b 01       	movw	r18, r22
    1a9e:	ac 01       	movw	r20, r24
    1aa0:	c5 01       	movw	r24, r10
    1aa2:	b4 01       	movw	r22, r8
    1aa4:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1aa8:	6b 01       	movw	r12, r22
    1aaa:	7c 01       	movw	r14, r24
    1aac:	a3 01       	movw	r20, r6
    1aae:	92 01       	movw	r18, r4
    1ab0:	c3 01       	movw	r24, r6
    1ab2:	b2 01       	movw	r22, r4
    1ab4:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1ab8:	9b 01       	movw	r18, r22
    1aba:	ac 01       	movw	r20, r24
    1abc:	69 85       	ldd	r22, Y+9	; 0x09
    1abe:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ac0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ac2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ac4:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1ac8:	25 e3       	ldi	r18, 0x35	; 53
    1aca:	3a ef       	ldi	r19, 0xFA	; 250
    1acc:	4e e8       	ldi	r20, 0x8E	; 142
    1ace:	5c e3       	ldi	r21, 0x3C	; 60
    1ad0:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1ad4:	0e 94 f7 16 	call	0x2dee	; 0x2dee <sin>
    1ad8:	2f e6       	ldi	r18, 0x6F	; 111
    1ada:	32 e1       	ldi	r19, 0x12	; 18
    1adc:	43 e0       	ldi	r20, 0x03	; 3
    1ade:	5a e3       	ldi	r21, 0x3A	; 58
    1ae0:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1ae4:	9b 01       	movw	r18, r22
    1ae6:	ac 01       	movw	r20, r24
    1ae8:	c7 01       	movw	r24, r14
    1aea:	b6 01       	movw	r22, r12
    1aec:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1af0:	6b 01       	movw	r12, r22
    1af2:	7c 01       	movw	r14, r24
	if (T < -11) {
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e3       	ldi	r20, 0x30	; 48
    1afa:	51 ec       	ldi	r21, 0xC1	; 193
    1afc:	69 81       	ldd	r22, Y+1	; 0x01
    1afe:	7a 81       	ldd	r23, Y+2	; 0x02
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	9c 81       	ldd	r25, Y+4	; 0x04
    1b04:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__cmpsf2>
    1b08:	88 23       	and	r24, r24
    1b0a:	0c f0       	brlt	.+2      	; 0x1b0e <getNewMoonDay+0x59a>
    1b0c:	51 c0       	rjmp	.+162    	; 0x1bb0 <getNewMoonDay+0x63c>
		deltat= 0.001 + 0.000839*T + 0.0002261*T2 - 0.00000845*T3 - 0.000000081*T*T3;
    1b0e:	26 e5       	ldi	r18, 0x56	; 86
    1b10:	30 ef       	ldi	r19, 0xF0	; 240
    1b12:	4b e5       	ldi	r20, 0x5B	; 91
    1b14:	5a e3       	ldi	r21, 0x3A	; 58
    1b16:	69 81       	ldd	r22, Y+1	; 0x01
    1b18:	7a 81       	ldd	r23, Y+2	; 0x02
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1e:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1b22:	2f e6       	ldi	r18, 0x6F	; 111
    1b24:	32 e1       	ldi	r19, 0x12	; 18
    1b26:	43 e8       	ldi	r20, 0x83	; 131
    1b28:	5a e3       	ldi	r21, 0x3A	; 58
    1b2a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1b2e:	4b 01       	movw	r8, r22
    1b30:	5c 01       	movw	r10, r24
    1b32:	22 e4       	ldi	r18, 0x42	; 66
    1b34:	35 e1       	ldi	r19, 0x15	; 21
    1b36:	4d e6       	ldi	r20, 0x6D	; 109
    1b38:	59 e3       	ldi	r21, 0x39	; 57
    1b3a:	6d 81       	ldd	r22, Y+5	; 0x05
    1b3c:	7e 81       	ldd	r23, Y+6	; 0x06
    1b3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1b40:	98 85       	ldd	r25, Y+8	; 0x08
    1b42:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1b46:	9b 01       	movw	r18, r22
    1b48:	ac 01       	movw	r20, r24
    1b4a:	c5 01       	movw	r24, r10
    1b4c:	b4 01       	movw	r22, r8
    1b4e:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1b52:	4b 01       	movw	r8, r22
    1b54:	5c 01       	movw	r10, r24
    1b56:	29 e7       	ldi	r18, 0x79	; 121
    1b58:	34 ec       	ldi	r19, 0xC4	; 196
    1b5a:	4d e0       	ldi	r20, 0x0D	; 13
    1b5c:	57 e3       	ldi	r21, 0x37	; 55
    1b5e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b60:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b64:	98 89       	ldd	r25, Y+16	; 0x10
    1b66:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1b6a:	9b 01       	movw	r18, r22
    1b6c:	ac 01       	movw	r20, r24
    1b6e:	c5 01       	movw	r24, r10
    1b70:	b4 01       	movw	r22, r8
    1b72:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1b76:	4b 01       	movw	r8, r22
    1b78:	5c 01       	movw	r10, r24
    1b7a:	29 e3       	ldi	r18, 0x39	; 57
    1b7c:	32 ef       	ldi	r19, 0xF2	; 242
    1b7e:	4d ea       	ldi	r20, 0xAD	; 173
    1b80:	53 e3       	ldi	r21, 0x33	; 51
    1b82:	69 81       	ldd	r22, Y+1	; 0x01
    1b84:	7a 81       	ldd	r23, Y+2	; 0x02
    1b86:	8b 81       	ldd	r24, Y+3	; 0x03
    1b88:	9c 81       	ldd	r25, Y+4	; 0x04
    1b8a:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1b8e:	9b 01       	movw	r18, r22
    1b90:	ac 01       	movw	r20, r24
    1b92:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b94:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b98:	98 89       	ldd	r25, Y+16	; 0x10
    1b9a:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1b9e:	9b 01       	movw	r18, r22
    1ba0:	ac 01       	movw	r20, r24
    1ba2:	c5 01       	movw	r24, r10
    1ba4:	b4 01       	movw	r22, r8
    1ba6:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1baa:	4b 01       	movw	r8, r22
    1bac:	5c 01       	movw	r10, r24
    1bae:	24 c0       	rjmp	.+72     	; 0x1bf8 <getNewMoonDay+0x684>
		} else {
		deltat= -0.000278 + 0.000265*T + 0.000262*T2;
    1bb0:	23 eb       	ldi	r18, 0xB3	; 179
    1bb2:	3f ee       	ldi	r19, 0xEF	; 239
    1bb4:	4a e8       	ldi	r20, 0x8A	; 138
    1bb6:	59 e3       	ldi	r21, 0x39	; 57
    1bb8:	69 81       	ldd	r22, Y+1	; 0x01
    1bba:	7a 81       	ldd	r23, Y+2	; 0x02
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc0:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1bc4:	27 e8       	ldi	r18, 0x87	; 135
    1bc6:	30 ec       	ldi	r19, 0xC0	; 192
    1bc8:	41 e9       	ldi	r20, 0x91	; 145
    1bca:	59 e3       	ldi	r21, 0x39	; 57
    1bcc:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1bd0:	4b 01       	movw	r8, r22
    1bd2:	5c 01       	movw	r10, r24
    1bd4:	2b e0       	ldi	r18, 0x0B	; 11
    1bd6:	3d e5       	ldi	r19, 0x5D	; 93
    1bd8:	49 e8       	ldi	r20, 0x89	; 137
    1bda:	59 e3       	ldi	r21, 0x39	; 57
    1bdc:	6d 81       	ldd	r22, Y+5	; 0x05
    1bde:	7e 81       	ldd	r23, Y+6	; 0x06
    1be0:	8f 81       	ldd	r24, Y+7	; 0x07
    1be2:	98 85       	ldd	r25, Y+8	; 0x08
    1be4:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1be8:	9b 01       	movw	r18, r22
    1bea:	ac 01       	movw	r20, r24
    1bec:	c5 01       	movw	r24, r10
    1bee:	b4 01       	movw	r22, r8
    1bf0:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1bf4:	4b 01       	movw	r8, r22
    1bf6:	5c 01       	movw	r10, r24
	};
	JdNew = Jd1 + C1 - deltat;
    1bf8:	a7 01       	movw	r20, r14
    1bfa:	96 01       	movw	r18, r12
    1bfc:	69 89       	ldd	r22, Y+17	; 0x11
    1bfe:	7a 89       	ldd	r23, Y+18	; 0x12
    1c00:	8b 89       	ldd	r24, Y+19	; 0x13
    1c02:	9c 89       	ldd	r25, Y+20	; 0x14
    1c04:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1c08:	a5 01       	movw	r20, r10
    1c0a:	94 01       	movw	r18, r8
    1c0c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
	return floorf(JdNew + 0.5 + timeZone/24);
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e0       	ldi	r20, 0x00	; 0
    1c16:	5f e3       	ldi	r21, 0x3F	; 63
    1c18:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1c1c:	6b 01       	movw	r12, r22
    1c1e:	7c 01       	movw	r14, r24
    1c20:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1c24:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1c28:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    1c2c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	40 ec       	ldi	r20, 0xC0	; 192
    1c36:	51 e4       	ldi	r21, 0x41	; 65
    1c38:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__divsf3>
    1c3c:	9b 01       	movw	r18, r22
    1c3e:	ac 01       	movw	r20, r24
    1c40:	c7 01       	movw	r24, r14
    1c42:	b6 01       	movw	r22, r12
    1c44:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1c48:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <floor>
}
    1c4c:	64 96       	adiw	r28, 0x14	; 20
    1c4e:	0f b6       	in	r0, 0x3f	; 63
    1c50:	f8 94       	cli
    1c52:	de bf       	out	0x3e, r29	; 62
    1c54:	0f be       	out	0x3f, r0	; 63
    1c56:	cd bf       	out	0x3d, r28	; 61
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	ff 90       	pop	r15
    1c5e:	ef 90       	pop	r14
    1c60:	df 90       	pop	r13
    1c62:	cf 90       	pop	r12
    1c64:	bf 90       	pop	r11
    1c66:	af 90       	pop	r10
    1c68:	9f 90       	pop	r9
    1c6a:	8f 90       	pop	r8
    1c6c:	7f 90       	pop	r7
    1c6e:	6f 90       	pop	r6
    1c70:	5f 90       	pop	r5
    1c72:	4f 90       	pop	r4
    1c74:	08 95       	ret

00001c76 <getSunLongitude>:

double getSunLongitude(long double jdn)
{
    1c76:	4f 92       	push	r4
    1c78:	5f 92       	push	r5
    1c7a:	6f 92       	push	r6
    1c7c:	7f 92       	push	r7
    1c7e:	8f 92       	push	r8
    1c80:	9f 92       	push	r9
    1c82:	af 92       	push	r10
    1c84:	bf 92       	push	r11
    1c86:	cf 92       	push	r12
    1c88:	df 92       	push	r13
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	cf 93       	push	r28
    1c90:	df 93       	push	r29
    1c92:	cd b7       	in	r28, 0x3d	; 61
    1c94:	de b7       	in	r29, 0x3e	; 62
    1c96:	28 97       	sbiw	r28, 0x08	; 8
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
	long double T, T2, dr, M, L0, DL, L;
	T = (jdn - 2451545.5 - timeZone/24) / 36525; // Time in Julian centuries from 2000-01-01 12:00:00 GMT
    1ca2:	26 e6       	ldi	r18, 0x66	; 102
    1ca4:	31 ea       	ldi	r19, 0xA1	; 161
    1ca6:	45 e1       	ldi	r20, 0x15	; 21
    1ca8:	5a e4       	ldi	r21, 0x4A	; 74
    1caa:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1cae:	6b 01       	movw	r12, r22
    1cb0:	7c 01       	movw	r14, r24
    1cb2:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1cb6:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1cba:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    1cbe:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 ec       	ldi	r20, 0xC0	; 192
    1cc8:	51 e4       	ldi	r21, 0x41	; 65
    1cca:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__divsf3>
    1cce:	9b 01       	movw	r18, r22
    1cd0:	ac 01       	movw	r20, r24
    1cd2:	c7 01       	movw	r24, r14
    1cd4:	b6 01       	movw	r22, r12
    1cd6:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	3d ea       	ldi	r19, 0xAD	; 173
    1cde:	4e e0       	ldi	r20, 0x0E	; 14
    1ce0:	57 e4       	ldi	r21, 0x47	; 71
    1ce2:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__divsf3>
    1ce6:	6b 01       	movw	r12, r22
    1ce8:	7c 01       	movw	r14, r24
	T2 = T*T;
    1cea:	9b 01       	movw	r18, r22
    1cec:	ac 01       	movw	r20, r24
    1cee:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1cf2:	4b 01       	movw	r8, r22
    1cf4:	5c 01       	movw	r10, r24
	dr = M_PI/180; // degree to radian
	M = 357.52910 + 35999.05030*T - 0.0001559*T2 - 0.00000048*T*T2; // mean anomaly, degree
    1cf6:	2d e0       	ldi	r18, 0x0D	; 13
    1cf8:	3f e9       	ldi	r19, 0x9F	; 159
    1cfa:	4c e0       	ldi	r20, 0x0C	; 12
    1cfc:	57 e4       	ldi	r21, 0x47	; 71
    1cfe:	c7 01       	movw	r24, r14
    1d00:	b6 01       	movw	r22, r12
    1d02:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1d06:	2a eb       	ldi	r18, 0xBA	; 186
    1d08:	33 ec       	ldi	r19, 0xC3	; 195
    1d0a:	42 eb       	ldi	r20, 0xB2	; 178
    1d0c:	53 e4       	ldi	r21, 0x43	; 67
    1d0e:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1d12:	2b 01       	movw	r4, r22
    1d14:	3c 01       	movw	r6, r24
    1d16:	26 e1       	ldi	r18, 0x16	; 22
    1d18:	39 e7       	ldi	r19, 0x79	; 121
    1d1a:	43 e2       	ldi	r20, 0x23	; 35
    1d1c:	59 e3       	ldi	r21, 0x39	; 57
    1d1e:	c5 01       	movw	r24, r10
    1d20:	b4 01       	movw	r22, r8
    1d22:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1d26:	9b 01       	movw	r18, r22
    1d28:	ac 01       	movw	r20, r24
    1d2a:	c3 01       	movw	r24, r6
    1d2c:	b2 01       	movw	r22, r4
    1d2e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1d32:	2b 01       	movw	r4, r22
    1d34:	3c 01       	movw	r6, r24
    1d36:	29 e5       	ldi	r18, 0x59	; 89
    1d38:	39 ed       	ldi	r19, 0xD9	; 217
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	55 e3       	ldi	r21, 0x35	; 53
    1d3e:	c7 01       	movw	r24, r14
    1d40:	b6 01       	movw	r22, r12
    1d42:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1d46:	9b 01       	movw	r18, r22
    1d48:	ac 01       	movw	r20, r24
    1d4a:	c5 01       	movw	r24, r10
    1d4c:	b4 01       	movw	r22, r8
    1d4e:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1d52:	9b 01       	movw	r18, r22
    1d54:	ac 01       	movw	r20, r24
    1d56:	c3 01       	movw	r24, r6
    1d58:	b2 01       	movw	r22, r4
    1d5a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1d5e:	2b 01       	movw	r4, r22
    1d60:	3c 01       	movw	r6, r24
	L0 = 280.46645 + 36000.76983*T + 0.0003032*T2; // mean longitude, degree
    1d62:	25 ec       	ldi	r18, 0xC5	; 197
    1d64:	30 ea       	ldi	r19, 0xA0	; 160
    1d66:	4c e0       	ldi	r20, 0x0C	; 12
    1d68:	57 e4       	ldi	r21, 0x47	; 71
    1d6a:	c7 01       	movw	r24, r14
    1d6c:	b6 01       	movw	r22, r12
    1d6e:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1d72:	25 eb       	ldi	r18, 0xB5	; 181
    1d74:	3b e3       	ldi	r19, 0x3B	; 59
    1d76:	4c e8       	ldi	r20, 0x8C	; 140
    1d78:	53 e4       	ldi	r21, 0x43	; 67
    1d7a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1d7e:	69 83       	std	Y+1, r22	; 0x01
    1d80:	7a 83       	std	Y+2, r23	; 0x02
    1d82:	8b 83       	std	Y+3, r24	; 0x03
    1d84:	9c 83       	std	Y+4, r25	; 0x04
    1d86:	21 ed       	ldi	r18, 0xD1	; 209
    1d88:	36 ef       	ldi	r19, 0xF6	; 246
    1d8a:	4e e9       	ldi	r20, 0x9E	; 158
    1d8c:	59 e3       	ldi	r21, 0x39	; 57
    1d8e:	c5 01       	movw	r24, r10
    1d90:	b4 01       	movw	r22, r8
    1d92:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1d96:	9b 01       	movw	r18, r22
    1d98:	ac 01       	movw	r20, r24
    1d9a:	69 81       	ldd	r22, Y+1	; 0x01
    1d9c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1da6:	69 83       	std	Y+1, r22	; 0x01
    1da8:	7a 83       	std	Y+2, r23	; 0x02
    1daa:	8b 83       	std	Y+3, r24	; 0x03
    1dac:	9c 83       	std	Y+4, r25	; 0x04
	DL = (1.914600 - 0.004817*T - 0.000014*T2)*sinf(dr*M);
    1dae:	2d ee       	ldi	r18, 0xED	; 237
    1db0:	37 ed       	ldi	r19, 0xD7	; 215
    1db2:	4d e9       	ldi	r20, 0x9D	; 157
    1db4:	5b e3       	ldi	r21, 0x3B	; 59
    1db6:	c7 01       	movw	r24, r14
    1db8:	b6 01       	movw	r22, r12
    1dba:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1dbe:	9b 01       	movw	r18, r22
    1dc0:	ac 01       	movw	r20, r24
    1dc2:	6d e9       	ldi	r22, 0x9D	; 157
    1dc4:	71 e1       	ldi	r23, 0x11	; 17
    1dc6:	85 ef       	ldi	r24, 0xF5	; 245
    1dc8:	9f e3       	ldi	r25, 0x3F	; 63
    1dca:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1dce:	6d 83       	std	Y+5, r22	; 0x05
    1dd0:	7e 83       	std	Y+6, r23	; 0x06
    1dd2:	8f 83       	std	Y+7, r24	; 0x07
    1dd4:	98 87       	std	Y+8, r25	; 0x08
    1dd6:	2b e8       	ldi	r18, 0x8B	; 139
    1dd8:	31 ee       	ldi	r19, 0xE1	; 225
    1dda:	4a e6       	ldi	r20, 0x6A	; 106
    1ddc:	57 e3       	ldi	r21, 0x37	; 55
    1dde:	c5 01       	movw	r24, r10
    1de0:	b4 01       	movw	r22, r8
    1de2:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1de6:	9b 01       	movw	r18, r22
    1de8:	ac 01       	movw	r20, r24
    1dea:	6d 81       	ldd	r22, Y+5	; 0x05
    1dec:	7e 81       	ldd	r23, Y+6	; 0x06
    1dee:	8f 81       	ldd	r24, Y+7	; 0x07
    1df0:	98 85       	ldd	r25, Y+8	; 0x08
    1df2:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1df6:	4b 01       	movw	r8, r22
    1df8:	5c 01       	movw	r10, r24
    1dfa:	25 e3       	ldi	r18, 0x35	; 53
    1dfc:	3a ef       	ldi	r19, 0xFA	; 250
    1dfe:	4e e8       	ldi	r20, 0x8E	; 142
    1e00:	5c e3       	ldi	r21, 0x3C	; 60
    1e02:	c3 01       	movw	r24, r6
    1e04:	b2 01       	movw	r22, r4
    1e06:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1e0a:	0e 94 f7 16 	call	0x2dee	; 0x2dee <sin>
    1e0e:	9b 01       	movw	r18, r22
    1e10:	ac 01       	movw	r20, r24
    1e12:	c5 01       	movw	r24, r10
    1e14:	b4 01       	movw	r22, r8
    1e16:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1e1a:	4b 01       	movw	r8, r22
    1e1c:	5c 01       	movw	r10, r24
	DL = DL + (0.019993 - 0.000101*T)*sinf(dr*2*M) + 0.000290*sinf(dr*3*M);
    1e1e:	26 ef       	ldi	r18, 0xF6	; 246
    1e20:	3f ec       	ldi	r19, 0xCF	; 207
    1e22:	43 ed       	ldi	r20, 0xD3	; 211
    1e24:	58 e3       	ldi	r21, 0x38	; 56
    1e26:	c7 01       	movw	r24, r14
    1e28:	b6 01       	movw	r22, r12
    1e2a:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1e2e:	9b 01       	movw	r18, r22
    1e30:	ac 01       	movw	r20, r24
    1e32:	6c e5       	ldi	r22, 0x5C	; 92
    1e34:	78 ec       	ldi	r23, 0xC8	; 200
    1e36:	83 ea       	ldi	r24, 0xA3	; 163
    1e38:	9c e3       	ldi	r25, 0x3C	; 60
    1e3a:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1e3e:	6b 01       	movw	r12, r22
    1e40:	7c 01       	movw	r14, r24
    1e42:	25 e3       	ldi	r18, 0x35	; 53
    1e44:	3a ef       	ldi	r19, 0xFA	; 250
    1e46:	4e e0       	ldi	r20, 0x0E	; 14
    1e48:	5d e3       	ldi	r21, 0x3D	; 61
    1e4a:	c3 01       	movw	r24, r6
    1e4c:	b2 01       	movw	r22, r4
    1e4e:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1e52:	0e 94 f7 16 	call	0x2dee	; 0x2dee <sin>
    1e56:	9b 01       	movw	r18, r22
    1e58:	ac 01       	movw	r20, r24
    1e5a:	c7 01       	movw	r24, r14
    1e5c:	b6 01       	movw	r22, r12
    1e5e:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1e62:	9b 01       	movw	r18, r22
    1e64:	ac 01       	movw	r20, r24
    1e66:	c5 01       	movw	r24, r10
    1e68:	b4 01       	movw	r22, r8
    1e6a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1e6e:	6b 01       	movw	r12, r22
    1e70:	7c 01       	movw	r14, r24
    1e72:	20 e5       	ldi	r18, 0x50	; 80
    1e74:	37 e7       	ldi	r19, 0x77	; 119
    1e76:	46 e5       	ldi	r20, 0x56	; 86
    1e78:	5d e3       	ldi	r21, 0x3D	; 61
    1e7a:	c3 01       	movw	r24, r6
    1e7c:	b2 01       	movw	r22, r4
    1e7e:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1e82:	0e 94 f7 16 	call	0x2dee	; 0x2dee <sin>
    1e86:	24 e2       	ldi	r18, 0x24	; 36
    1e88:	3b e0       	ldi	r19, 0x0B	; 11
    1e8a:	48 e9       	ldi	r20, 0x98	; 152
    1e8c:	59 e3       	ldi	r21, 0x39	; 57
    1e8e:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1e92:	9b 01       	movw	r18, r22
    1e94:	ac 01       	movw	r20, r24
    1e96:	c7 01       	movw	r24, r14
    1e98:	b6 01       	movw	r22, r12
    1e9a:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1e9e:	9b 01       	movw	r18, r22
    1ea0:	ac 01       	movw	r20, r24
	L = L0 + DL; // true longitude, degree
    1ea2:	69 81       	ldd	r22, Y+1	; 0x01
    1ea4:	7a 81       	ldd	r23, Y+2	; 0x02
    1ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    1eaa:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
	L = L*dr;
    1eae:	25 e3       	ldi	r18, 0x35	; 53
    1eb0:	3a ef       	ldi	r19, 0xFA	; 250
    1eb2:	4e e8       	ldi	r20, 0x8E	; 142
    1eb4:	5c e3       	ldi	r21, 0x3C	; 60
    1eb6:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1eba:	6b 01       	movw	r12, r22
    1ebc:	7c 01       	movw	r14, r24
	L = L - M_PI*2*(floorf(L/(M_PI*2))); // Normalize to (0, 2*PI)
    1ebe:	2b ed       	ldi	r18, 0xDB	; 219
    1ec0:	3f e0       	ldi	r19, 0x0F	; 15
    1ec2:	49 ec       	ldi	r20, 0xC9	; 201
    1ec4:	50 e4       	ldi	r21, 0x40	; 64
    1ec6:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__divsf3>
    1eca:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <floor>
    1ece:	2b ed       	ldi	r18, 0xDB	; 219
    1ed0:	3f e0       	ldi	r19, 0x0F	; 15
    1ed2:	49 ec       	ldi	r20, 0xC9	; 201
    1ed4:	50 e4       	ldi	r21, 0x40	; 64
    1ed6:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1eda:	9b 01       	movw	r18, r22
    1edc:	ac 01       	movw	r20, r24
    1ede:	c7 01       	movw	r24, r14
    1ee0:	b6 01       	movw	r22, r12
    1ee2:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
	return floorf(L / M_PI * 6);
    1ee6:	2b ed       	ldi	r18, 0xDB	; 219
    1ee8:	3f e0       	ldi	r19, 0x0F	; 15
    1eea:	49 e4       	ldi	r20, 0x49	; 73
    1eec:	50 e4       	ldi	r21, 0x40	; 64
    1eee:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__divsf3>
    1ef2:	20 e0       	ldi	r18, 0x00	; 0
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	40 ec       	ldi	r20, 0xC0	; 192
    1ef8:	50 e4       	ldi	r21, 0x40	; 64
    1efa:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    1efe:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <floor>
}
    1f02:	28 96       	adiw	r28, 0x08	; 8
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	ff 90       	pop	r15
    1f14:	ef 90       	pop	r14
    1f16:	df 90       	pop	r13
    1f18:	cf 90       	pop	r12
    1f1a:	bf 90       	pop	r11
    1f1c:	af 90       	pop	r10
    1f1e:	9f 90       	pop	r9
    1f20:	8f 90       	pop	r8
    1f22:	7f 90       	pop	r7
    1f24:	6f 90       	pop	r6
    1f26:	5f 90       	pop	r5
    1f28:	4f 90       	pop	r4
    1f2a:	08 95       	ret

00001f2c <getLunarMonth11>:

double getLunarMonth11(uint16_t yy)
{
    1f2c:	8f 92       	push	r8
    1f2e:	9f 92       	push	r9
    1f30:	af 92       	push	r10
    1f32:	bf 92       	push	r11
    1f34:	cf 92       	push	r12
    1f36:	df 92       	push	r13
    1f38:	ef 92       	push	r14
    1f3a:	ff 92       	push	r15
	long double k, off, nm, sunLong;
	off = jdFromDate(31, 12, yy) - 2415021;
    1f3c:	ac 01       	movw	r20, r24
    1f3e:	6c e0       	ldi	r22, 0x0C	; 12
    1f40:	8f e1       	ldi	r24, 0x1F	; 31
    1f42:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <jdFromDate>
    1f46:	24 eb       	ldi	r18, 0xB4	; 180
    1f48:	36 e6       	ldi	r19, 0x66	; 102
    1f4a:	43 e1       	ldi	r20, 0x13	; 19
    1f4c:	5a e4       	ldi	r21, 0x4A	; 74
    1f4e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
	k = floorf(off / 29.530588853);
    1f52:	25 ea       	ldi	r18, 0xA5	; 165
    1f54:	3e e3       	ldi	r19, 0x3E	; 62
    1f56:	4c ee       	ldi	r20, 0xEC	; 236
    1f58:	51 e4       	ldi	r21, 0x41	; 65
    1f5a:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__divsf3>
    1f5e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <floor>
    1f62:	4b 01       	movw	r8, r22
    1f64:	5c 01       	movw	r10, r24
	nm = getNewMoonDay(k);
    1f66:	0e 94 ba 0a 	call	0x1574	; 0x1574 <getNewMoonDay>
    1f6a:	6b 01       	movw	r12, r22
    1f6c:	7c 01       	movw	r14, r24
	sunLong = getSunLongitude(nm); // sun longitude at local midnight
    1f6e:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <getSunLongitude>
	if (sunLong >= 9) {
    1f72:	20 e0       	ldi	r18, 0x00	; 0
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	40 e1       	ldi	r20, 0x10	; 16
    1f78:	51 e4       	ldi	r21, 0x41	; 65
    1f7a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__gesf2>
    1f7e:	88 23       	and	r24, r24
    1f80:	64 f0       	brlt	.+24     	; 0x1f9a <getLunarMonth11+0x6e>
		nm = getNewMoonDay(k-1);
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	40 e8       	ldi	r20, 0x80	; 128
    1f88:	5f e3       	ldi	r21, 0x3F	; 63
    1f8a:	c5 01       	movw	r24, r10
    1f8c:	b4 01       	movw	r22, r8
    1f8e:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1f92:	0e 94 ba 0a 	call	0x1574	; 0x1574 <getNewMoonDay>
    1f96:	6b 01       	movw	r12, r22
    1f98:	7c 01       	movw	r14, r24
	}
	return nm;
}
    1f9a:	c7 01       	movw	r24, r14
    1f9c:	b6 01       	movw	r22, r12
    1f9e:	ff 90       	pop	r15
    1fa0:	ef 90       	pop	r14
    1fa2:	df 90       	pop	r13
    1fa4:	cf 90       	pop	r12
    1fa6:	bf 90       	pop	r11
    1fa8:	af 90       	pop	r10
    1faa:	9f 90       	pop	r9
    1fac:	8f 90       	pop	r8
    1fae:	08 95       	ret

00001fb0 <getLeapMonthOffset>:

double getLeapMonthOffset(long double a11)
{
    1fb0:	4f 92       	push	r4
    1fb2:	5f 92       	push	r5
    1fb4:	6f 92       	push	r6
    1fb6:	7f 92       	push	r7
    1fb8:	8f 92       	push	r8
    1fba:	9f 92       	push	r9
    1fbc:	af 92       	push	r10
    1fbe:	bf 92       	push	r11
    1fc0:	cf 92       	push	r12
    1fc2:	df 92       	push	r13
    1fc4:	ef 92       	push	r14
    1fc6:	ff 92       	push	r15
    1fc8:	0f 93       	push	r16
    1fca:	1f 93       	push	r17
    1fcc:	cf 93       	push	r28
    1fce:	df 93       	push	r29
	long double k, last, arc, i;
	k = floorf((a11 - 2415021.076998695) / 29.530588853 + 0.5);
    1fd0:	24 eb       	ldi	r18, 0xB4	; 180
    1fd2:	36 e6       	ldi	r19, 0x66	; 102
    1fd4:	43 e1       	ldi	r20, 0x13	; 19
    1fd6:	5a e4       	ldi	r21, 0x4A	; 74
    1fd8:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    1fdc:	25 ea       	ldi	r18, 0xA5	; 165
    1fde:	3e e3       	ldi	r19, 0x3E	; 62
    1fe0:	4c ee       	ldi	r20, 0xEC	; 236
    1fe2:	51 e4       	ldi	r21, 0x41	; 65
    1fe4:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__divsf3>
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	5f e3       	ldi	r21, 0x3F	; 63
    1ff0:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    1ff4:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <floor>
    1ff8:	4b 01       	movw	r8, r22
    1ffa:	5c 01       	movw	r10, r24
	last = 0;
	i = 1; // We start with the month following lunar month 11
	arc = getSunLongitude(getNewMoonDay(k+i));
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e8       	ldi	r20, 0x80	; 128
    2002:	5f e3       	ldi	r21, 0x3F	; 63
    2004:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    2008:	0e 94 ba 0a 	call	0x1574	; 0x1574 <getNewMoonDay>
    200c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <getSunLongitude>
    2010:	76 2e       	mov	r7, r22
    2012:	67 2e       	mov	r6, r23
    2014:	58 2e       	mov	r5, r24
    2016:	49 2e       	mov	r4, r25
double getLeapMonthOffset(long double a11)
{
	long double k, last, arc, i;
	k = floorf((a11 - 2415021.076998695) / 29.530588853 + 0.5);
	last = 0;
	i = 1; // We start with the month following lunar month 11
    2018:	0f 2e       	mov	r0, r31
    201a:	c1 2c       	mov	r12, r1
    201c:	d1 2c       	mov	r13, r1
    201e:	f0 e8       	ldi	r31, 0x80	; 128
    2020:	ef 2e       	mov	r14, r31
    2022:	ff e3       	ldi	r31, 0x3F	; 63
    2024:	ff 2e       	mov	r15, r31
    2026:	f0 2d       	mov	r31, r0
	arc = getSunLongitude(getNewMoonDay(k+i));
	do {
		last = arc;
		i++;
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	c7 01       	movw	r24, r14
    2032:	b6 01       	movw	r22, r12
    2034:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    2038:	6b 01       	movw	r12, r22
    203a:	7c 01       	movw	r14, r24
		arc = getSunLongitude(getNewMoonDay(k+i));
    203c:	9b 01       	movw	r18, r22
    203e:	ac 01       	movw	r20, r24
    2040:	c5 01       	movw	r24, r10
    2042:	b4 01       	movw	r22, r8
    2044:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    2048:	0e 94 ba 0a 	call	0x1574	; 0x1574 <getNewMoonDay>
    204c:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <getSunLongitude>
    2050:	d6 2f       	mov	r29, r22
    2052:	c7 2f       	mov	r28, r23
    2054:	18 2f       	mov	r17, r24
    2056:	09 2f       	mov	r16, r25
	} while (arc != last && i < 14);
    2058:	26 2f       	mov	r18, r22
    205a:	37 2f       	mov	r19, r23
    205c:	48 2f       	mov	r20, r24
    205e:	59 2f       	mov	r21, r25
    2060:	67 2d       	mov	r22, r7
    2062:	76 2d       	mov	r23, r6
    2064:	85 2d       	mov	r24, r5
    2066:	94 2d       	mov	r25, r4
    2068:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__cmpsf2>
    206c:	88 23       	and	r24, r24
    206e:	71 f0       	breq	.+28     	; 0x208c <getLeapMonthOffset+0xdc>
	i = 1; // We start with the month following lunar month 11
	arc = getSunLongitude(getNewMoonDay(k+i));
	do {
		last = arc;
		i++;
		arc = getSunLongitude(getNewMoonDay(k+i));
    2070:	7d 2e       	mov	r7, r29
    2072:	6c 2e       	mov	r6, r28
    2074:	51 2e       	mov	r5, r17
    2076:	40 2e       	mov	r4, r16
	} while (arc != last && i < 14);
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e6       	ldi	r20, 0x60	; 96
    207e:	51 e4       	ldi	r21, 0x41	; 65
    2080:	c7 01       	movw	r24, r14
    2082:	b6 01       	movw	r22, r12
    2084:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__cmpsf2>
    2088:	88 23       	and	r24, r24
    208a:	74 f2       	brlt	.-100    	; 0x2028 <getLeapMonthOffset+0x78>
	return i-1;
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	40 e8       	ldi	r20, 0x80	; 128
    2092:	5f e3       	ldi	r21, 0x3F	; 63
    2094:	c7 01       	movw	r24, r14
    2096:	b6 01       	movw	r22, r12
    2098:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
}
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	1f 91       	pop	r17
    20a2:	0f 91       	pop	r16
    20a4:	ff 90       	pop	r15
    20a6:	ef 90       	pop	r14
    20a8:	df 90       	pop	r13
    20aa:	cf 90       	pop	r12
    20ac:	bf 90       	pop	r11
    20ae:	af 90       	pop	r10
    20b0:	9f 90       	pop	r9
    20b2:	8f 90       	pop	r8
    20b4:	7f 90       	pop	r7
    20b6:	6f 90       	pop	r6
    20b8:	5f 90       	pop	r5
    20ba:	4f 90       	pop	r4
    20bc:	08 95       	ret

000020be <convertSolar2Lunar>:

double convertSolar2Lunar(uint8_t dd, uint8_t mm, uint16_t yy)
{
    20be:	4f 92       	push	r4
    20c0:	5f 92       	push	r5
    20c2:	6f 92       	push	r6
    20c4:	7f 92       	push	r7
    20c6:	8f 92       	push	r8
    20c8:	9f 92       	push	r9
    20ca:	af 92       	push	r10
    20cc:	bf 92       	push	r11
    20ce:	cf 92       	push	r12
    20d0:	df 92       	push	r13
    20d2:	ef 92       	push	r14
    20d4:	ff 92       	push	r15
    20d6:	0f 93       	push	r16
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	ea 01       	movw	r28, r20
	long double k, dayNumber, monthStart, a11, b11, diff, leapMonthDiff;
	dayNumber = jdFromDate(dd, mm, yy);
    20e0:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <jdFromDate>
    20e4:	4b 01       	movw	r8, r22
    20e6:	5c 01       	movw	r10, r24
	k = floorf((dayNumber - 2415021.076998695) / 29.530588853);
    20e8:	24 eb       	ldi	r18, 0xB4	; 180
    20ea:	36 e6       	ldi	r19, 0x66	; 102
    20ec:	43 e1       	ldi	r20, 0x13	; 19
    20ee:	5a e4       	ldi	r21, 0x4A	; 74
    20f0:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    20f4:	25 ea       	ldi	r18, 0xA5	; 165
    20f6:	3e e3       	ldi	r19, 0x3E	; 62
    20f8:	4c ee       	ldi	r20, 0xEC	; 236
    20fa:	51 e4       	ldi	r21, 0x41	; 65
    20fc:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__divsf3>
    2100:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <floor>
    2104:	2b 01       	movw	r4, r22
    2106:	3c 01       	movw	r6, r24
	monthStart = getNewMoonDay(k+1);
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e8       	ldi	r20, 0x80	; 128
    210e:	5f e3       	ldi	r21, 0x3F	; 63
    2110:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    2114:	0e 94 ba 0a 	call	0x1574	; 0x1574 <getNewMoonDay>
    2118:	6b 01       	movw	r12, r22
    211a:	7c 01       	movw	r14, r24
	if (monthStart > dayNumber) {
    211c:	9b 01       	movw	r18, r22
    211e:	ac 01       	movw	r20, r24
    2120:	c5 01       	movw	r24, r10
    2122:	b4 01       	movw	r22, r8
    2124:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__cmpsf2>
    2128:	88 23       	and	r24, r24
    212a:	34 f4       	brge	.+12     	; 0x2138 <convertSolar2Lunar+0x7a>
		monthStart = getNewMoonDay(k);
    212c:	c3 01       	movw	r24, r6
    212e:	b2 01       	movw	r22, r4
    2130:	0e 94 ba 0a 	call	0x1574	; 0x1574 <getNewMoonDay>
    2134:	6b 01       	movw	r12, r22
    2136:	7c 01       	movw	r14, r24
	}
	a11 = getLunarMonth11(yy);
    2138:	ce 01       	movw	r24, r28
    213a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <getLunarMonth11>
    213e:	16 2f       	mov	r17, r22
    2140:	07 2f       	mov	r16, r23
    2142:	78 2e       	mov	r7, r24
    2144:	69 2e       	mov	r6, r25
	b11 = a11;
	if (a11 >= monthStart) {
    2146:	26 2f       	mov	r18, r22
    2148:	37 2f       	mov	r19, r23
    214a:	48 2f       	mov	r20, r24
    214c:	59 2f       	mov	r21, r25
    214e:	c7 01       	movw	r24, r14
    2150:	b6 01       	movw	r22, r12
    2152:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__cmpsf2>
    2156:	18 16       	cp	r1, r24
    2158:	8c f0       	brlt	.+34     	; 0x217c <convertSolar2Lunar+0xbe>
		lunarYear = yy;
    215a:	d0 93 82 00 	sts	0x0082, r29	; 0x800082 <lunarYear+0x1>
    215e:	c0 93 81 00 	sts	0x0081, r28	; 0x800081 <lunarYear>
		a11 = getLunarMonth11(yy-1);
    2162:	ce 01       	movw	r24, r28
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <getLunarMonth11>
	monthStart = getNewMoonDay(k+1);
	if (monthStart > dayNumber) {
		monthStart = getNewMoonDay(k);
	}
	a11 = getLunarMonth11(yy);
	b11 = a11;
    216a:	c1 2f       	mov	r28, r17
    216c:	d0 2f       	mov	r29, r16
    216e:	57 2c       	mov	r5, r7
    2170:	46 2c       	mov	r4, r6
	if (a11 >= monthStart) {
		lunarYear = yy;
		a11 = getLunarMonth11(yy-1);
    2172:	16 2f       	mov	r17, r22
    2174:	07 2f       	mov	r16, r23
    2176:	78 2e       	mov	r7, r24
    2178:	69 2e       	mov	r6, r25
    217a:	0c c0       	rjmp	.+24     	; 0x2194 <convertSolar2Lunar+0xd6>
		} else {
		lunarYear = yy+1;
    217c:	ce 01       	movw	r24, r28
    217e:	01 96       	adiw	r24, 0x01	; 1
    2180:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <lunarYear+0x1>
    2184:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <lunarYear>
		b11 = getLunarMonth11(yy+1);
    2188:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <getLunarMonth11>
    218c:	c6 2f       	mov	r28, r22
    218e:	d7 2f       	mov	r29, r23
    2190:	58 2e       	mov	r5, r24
    2192:	49 2e       	mov	r4, r25
	}
	lunarDate = dayNumber-monthStart+1;
    2194:	a7 01       	movw	r20, r14
    2196:	96 01       	movw	r18, r12
    2198:	c5 01       	movw	r24, r10
    219a:	b4 01       	movw	r22, r8
    219c:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    21a0:	20 e0       	ldi	r18, 0x00	; 0
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	40 e8       	ldi	r20, 0x80	; 128
    21a6:	5f e3       	ldi	r21, 0x3F	; 63
    21a8:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    21ac:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__fixunssfsi>
    21b0:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <lunarDate>
	diff = floorf((monthStart - a11)/29);
    21b4:	21 2f       	mov	r18, r17
    21b6:	30 2f       	mov	r19, r16
    21b8:	47 2d       	mov	r20, r7
    21ba:	56 2d       	mov	r21, r6
    21bc:	c7 01       	movw	r24, r14
    21be:	b6 01       	movw	r22, r12
    21c0:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	48 ee       	ldi	r20, 0xE8	; 232
    21ca:	51 e4       	ldi	r21, 0x41	; 65
    21cc:	0e 94 da 14 	call	0x29b4	; 0x29b4 <__divsf3>
    21d0:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <floor>
    21d4:	6b 01       	movw	r12, r22
    21d6:	7c 01       	movw	r14, r24
	lunarMonth = diff+11;
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	40 e3       	ldi	r20, 0x30	; 48
    21de:	51 e4       	ldi	r21, 0x41	; 65
    21e0:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    21e4:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__fixunssfsi>
    21e8:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <lunarMonth>
	if (b11 - a11 > 365) {
    21ec:	21 2f       	mov	r18, r17
    21ee:	30 2f       	mov	r19, r16
    21f0:	47 2d       	mov	r20, r7
    21f2:	56 2d       	mov	r21, r6
    21f4:	6c 2f       	mov	r22, r28
    21f6:	7d 2f       	mov	r23, r29
    21f8:	85 2d       	mov	r24, r5
    21fa:	94 2d       	mov	r25, r4
    21fc:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__subsf3>
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e8       	ldi	r19, 0x80	; 128
    2204:	46 eb       	ldi	r20, 0xB6	; 182
    2206:	53 e4       	ldi	r21, 0x43	; 67
    2208:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__gesf2>
    220c:	18 16       	cp	r1, r24
    220e:	d4 f4       	brge	.+52     	; 0x2244 <convertSolar2Lunar+0x186>
		leapMonthDiff = getLeapMonthOffset(a11);
    2210:	61 2f       	mov	r22, r17
    2212:	70 2f       	mov	r23, r16
    2214:	87 2d       	mov	r24, r7
    2216:	96 2d       	mov	r25, r6
    2218:	0e 94 d8 0f 	call	0x1fb0	; 0x1fb0 <getLeapMonthOffset>
    221c:	9b 01       	movw	r18, r22
    221e:	ac 01       	movw	r20, r24
		if (diff >= leapMonthDiff) {
    2220:	c7 01       	movw	r24, r14
    2222:	b6 01       	movw	r22, r12
    2224:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <__gesf2>
    2228:	88 23       	and	r24, r24
    222a:	64 f0       	brlt	.+24     	; 0x2244 <convertSolar2Lunar+0x186>
			lunarMonth = diff + 10;
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e2       	ldi	r20, 0x20	; 32
    2232:	51 e4       	ldi	r21, 0x41	; 65
    2234:	c7 01       	movw	r24, r14
    2236:	b6 01       	movw	r22, r12
    2238:	0e 94 69 14 	call	0x28d2	; 0x28d2 <__addsf3>
    223c:	0e 94 4c 15 	call	0x2a98	; 0x2a98 <__fixunssfsi>
    2240:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <lunarMonth>
		}
	}
	if (lunarMonth > 12) {
    2244:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <lunarMonth>
    2248:	8d 30       	cpi	r24, 0x0D	; 13
    224a:	18 f0       	brcs	.+6      	; 0x2252 <convertSolar2Lunar+0x194>
		lunarMonth = lunarMonth - 12;
    224c:	8c 50       	subi	r24, 0x0C	; 12
    224e:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <lunarMonth>
	}
	if (lunarMonth >= 11 && diff < 4) {
    2252:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <lunarMonth>
    2256:	8b 30       	cpi	r24, 0x0B	; 11
    2258:	98 f0       	brcs	.+38     	; 0x2280 <convertSolar2Lunar+0x1c2>
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	40 e8       	ldi	r20, 0x80	; 128
    2260:	50 e4       	ldi	r21, 0x40	; 64
    2262:	c7 01       	movw	r24, r14
    2264:	b6 01       	movw	r22, r12
    2266:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__cmpsf2>
    226a:	88 23       	and	r24, r24
    226c:	4c f4       	brge	.+18     	; 0x2280 <convertSolar2Lunar+0x1c2>
		lunarYear -= 1;
    226e:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <lunarYear>
    2272:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <lunarYear+0x1>
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <lunarYear+0x1>
    227c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <lunarYear>
	}
	return 0;
}
    2280:	60 e0       	ldi	r22, 0x00	; 0
    2282:	70 e0       	ldi	r23, 0x00	; 0
    2284:	cb 01       	movw	r24, r22
    2286:	df 91       	pop	r29
    2288:	cf 91       	pop	r28
    228a:	1f 91       	pop	r17
    228c:	0f 91       	pop	r16
    228e:	ff 90       	pop	r15
    2290:	ef 90       	pop	r14
    2292:	df 90       	pop	r13
    2294:	cf 90       	pop	r12
    2296:	bf 90       	pop	r11
    2298:	af 90       	pop	r10
    229a:	9f 90       	pop	r9
    229c:	8f 90       	pop	r8
    229e:	7f 90       	pop	r7
    22a0:	6f 90       	pop	r6
    22a2:	5f 90       	pop	r5
    22a4:	4f 90       	pop	r4
    22a6:	08 95       	ret

000022a8 <Init_Timer0>:
//--------------------------------------------------------------------

void Init_Timer0(void){
	//Initialize Timer0 to 1s - overflow interrupt--------------------
    TCCR0=(1<<CS02)|(0<<CS01)|(1<<CS00);	//prescaler, clk/1024
    22a8:	85 e0       	ldi	r24, 0x05	; 5
    22aa:	83 bf       	out	0x33, r24	; 51
	
    TIMSK=(1<<TOIE0);						
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	89 bf       	out	0x39, r24	; 57
    sei();                      			
    22b0:	78 94       	sei
    22b2:	08 95       	ret

000022b4 <Init_buttons>:

void Init_buttons(void)
{
	//------------------Initialize button------------
	//------------------Set input for setting buttons-----------------
	BTN_DDRD  &= ~((1<<SW)|(1<<ADJ));		
    22b4:	81 b3       	in	r24, 0x11	; 17
    22b6:	83 7f       	andi	r24, 0xF3	; 243
    22b8:	81 bb       	out	0x11, r24	; 17
	BTN_DDRB &= ~(1<<INCR);
    22ba:	87 b3       	in	r24, 0x17	; 23
    22bc:	8b 7f       	andi	r24, 0xFB	; 251
    22be:	87 bb       	out	0x17, r24	; 23
    22c0:	08 95       	ret

000022c2 <Init_IO>:
}

void Init_IO(void)
{
	DDR_LED_O |=(1<<BIT_LED_O);
    22c2:	8a b3       	in	r24, 0x1a	; 26
    22c4:	81 60       	ori	r24, 0x01	; 1
    22c6:	8a bb       	out	0x1a, r24	; 26
	DDR_BUZZER_O |= (1<<BIT_BUZZER_O);
    22c8:	81 b3       	in	r24, 0x11	; 17
    22ca:	80 68       	ori	r24, 0x80	; 128
    22cc:	81 bb       	out	0x11, r24	; 17
	PORT_BUZZER_O |= (1<<BIT_BUZZER_O);
    22ce:	82 b3       	in	r24, 0x12	; 18
    22d0:	80 68       	ori	r24, 0x80	; 128
    22d2:	82 bb       	out	0x12, r24	; 18
    22d4:	08 95       	ret

000022d6 <Init_interupt>:
}

void Init_interupt(void)
{
	MCUCR=(1<<ISC11)|(1<<ISC10)|(1<<ISC01)|(1<<ISC00);
    22d6:	8f e0       	ldi	r24, 0x0F	; 15
    22d8:	85 bf       	out	0x35, r24	; 53
	MCUCSR=(1<<ISC2);
    22da:	80 e4       	ldi	r24, 0x40	; 64
    22dc:	84 bf       	out	0x34, r24	; 52
	GICR=(1<<INT2)|(1<<INT1)|(1<<INT0);
    22de:	80 ee       	ldi	r24, 0xE0	; 224
    22e0:	8b bf       	out	0x3b, r24	; 59
	sei();
    22e2:	78 94       	sei
    22e4:	08 95       	ret

000022e6 <Init_start_cond>:
}

void Init_start_cond()
{
	PORT_LED_O |= (1<<BIT_LED_O);
    22e6:	8b b3       	in	r24, 0x1b	; 27
    22e8:	81 60       	ori	r24, 0x01	; 1
    22ea:	8b bb       	out	0x1b, r24	; 27
    22ec:	2f ef       	ldi	r18, 0xFF	; 255
    22ee:	84 e3       	ldi	r24, 0x34	; 52
    22f0:	9c e0       	ldi	r25, 0x0C	; 12
    22f2:	21 50       	subi	r18, 0x01	; 1
    22f4:	80 40       	sbci	r24, 0x00	; 0
    22f6:	90 40       	sbci	r25, 0x00	; 0
    22f8:	e1 f7       	brne	.-8      	; 0x22f2 <Init_start_cond+0xc>
    22fa:	00 c0       	rjmp	.+0      	; 0x22fc <Init_start_cond+0x16>
    22fc:	00 00       	nop
	_delay_ms(500);
	PORT_LED_O &= ~(1<<BIT_LED_O);
    22fe:	8b b3       	in	r24, 0x1b	; 27
    2300:	8e 7f       	andi	r24, 0xFE	; 254
    2302:	8b bb       	out	0x1b, r24	; 27
    2304:	2f ef       	ldi	r18, 0xFF	; 255
    2306:	84 e3       	ldi	r24, 0x34	; 52
    2308:	9c e0       	ldi	r25, 0x0C	; 12
    230a:	21 50       	subi	r18, 0x01	; 1
    230c:	80 40       	sbci	r24, 0x00	; 0
    230e:	90 40       	sbci	r25, 0x00	; 0
    2310:	e1 f7       	brne	.-8      	; 0x230a <Init_start_cond+0x24>
    2312:	00 c0       	rjmp	.+0      	; 0x2314 <Init_start_cond+0x2e>
    2314:	00 00       	nop
	_delay_ms(500);
	PORT_LED_O |= (1<<BIT_LED_O);
    2316:	8b b3       	in	r24, 0x1b	; 27
    2318:	81 60       	ori	r24, 0x01	; 1
    231a:	8b bb       	out	0x1b, r24	; 27
    231c:	2f ef       	ldi	r18, 0xFF	; 255
    231e:	84 e3       	ldi	r24, 0x34	; 52
    2320:	9c e0       	ldi	r25, 0x0C	; 12
    2322:	21 50       	subi	r18, 0x01	; 1
    2324:	80 40       	sbci	r24, 0x00	; 0
    2326:	90 40       	sbci	r25, 0x00	; 0
    2328:	e1 f7       	brne	.-8      	; 0x2322 <Init_start_cond+0x3c>
    232a:	00 c0       	rjmp	.+0      	; 0x232c <Init_start_cond+0x46>
    232c:	00 00       	nop
	_delay_ms(500);
	PORT_LED_O &= ~(1<<BIT_LED_O);
    232e:	8b b3       	in	r24, 0x1b	; 27
    2330:	8e 7f       	andi	r24, 0xFE	; 254
    2332:	8b bb       	out	0x1b, r24	; 27
    2334:	2f ef       	ldi	r18, 0xFF	; 255
    2336:	84 e3       	ldi	r24, 0x34	; 52
    2338:	9c e0       	ldi	r25, 0x0C	; 12
    233a:	21 50       	subi	r18, 0x01	; 1
    233c:	80 40       	sbci	r24, 0x00	; 0
    233e:	90 40       	sbci	r25, 0x00	; 0
    2340:	e1 f7       	brne	.-8      	; 0x233a <Init_start_cond+0x54>
    2342:	00 c0       	rjmp	.+0      	; 0x2344 <Init_start_cond+0x5e>
    2344:	00 00       	nop
	_delay_ms(500);
	PORT_LED_O |= (1<<BIT_LED_O);
    2346:	8b b3       	in	r24, 0x1b	; 27
    2348:	81 60       	ori	r24, 0x01	; 1
    234a:	8b bb       	out	0x1b, r24	; 27
    234c:	2f ef       	ldi	r18, 0xFF	; 255
    234e:	84 e3       	ldi	r24, 0x34	; 52
    2350:	9c e0       	ldi	r25, 0x0C	; 12
    2352:	21 50       	subi	r18, 0x01	; 1
    2354:	80 40       	sbci	r24, 0x00	; 0
    2356:	90 40       	sbci	r25, 0x00	; 0
    2358:	e1 f7       	brne	.-8      	; 0x2352 <Init_start_cond+0x6c>
    235a:	00 c0       	rjmp	.+0      	; 0x235c <Init_start_cond+0x76>
    235c:	00 00       	nop
	_delay_ms(500);
	PORT_LED_O &= ~(1<<BIT_LED_O);
    235e:	8b b3       	in	r24, 0x1b	; 27
    2360:	8e 7f       	andi	r24, 0xFE	; 254
    2362:	8b bb       	out	0x1b, r24	; 27
    2364:	2f ef       	ldi	r18, 0xFF	; 255
    2366:	84 e3       	ldi	r24, 0x34	; 52
    2368:	9c e0       	ldi	r25, 0x0C	; 12
    236a:	21 50       	subi	r18, 0x01	; 1
    236c:	80 40       	sbci	r24, 0x00	; 0
    236e:	90 40       	sbci	r25, 0x00	; 0
    2370:	e1 f7       	brne	.-8      	; 0x236a <Init_start_cond+0x84>
    2372:	00 c0       	rjmp	.+0      	; 0x2374 <Init_start_cond+0x8e>
    2374:	00 00       	nop
    2376:	08 95       	ret

00002378 <set_Alarm>:
	_delay_ms(500);
}

void set_Alarm(void)
{
	PORT_BUZZER_O &= ~(1<<BIT_BUZZER_O);
    2378:	82 b3       	in	r24, 0x12	; 18
    237a:	8f 77       	andi	r24, 0x7F	; 127
    237c:	82 bb       	out	0x12, r24	; 18
    237e:	2f e7       	ldi	r18, 0x7F	; 127
    2380:	85 eb       	ldi	r24, 0xB5	; 181
    2382:	91 e0       	ldi	r25, 0x01	; 1
    2384:	21 50       	subi	r18, 0x01	; 1
    2386:	80 40       	sbci	r24, 0x00	; 0
    2388:	90 40       	sbci	r25, 0x00	; 0
    238a:	e1 f7       	brne	.-8      	; 0x2384 <set_Alarm+0xc>
    238c:	00 c0       	rjmp	.+0      	; 0x238e <set_Alarm+0x16>
    238e:	00 00       	nop
	_delay_ms(70);
	PORT_BUZZER_O |= (1<<BIT_BUZZER_O);
    2390:	82 b3       	in	r24, 0x12	; 18
    2392:	80 68       	ori	r24, 0x80	; 128
    2394:	82 bb       	out	0x12, r24	; 18
    2396:	2f e7       	ldi	r18, 0x7F	; 127
    2398:	88 e3       	ldi	r24, 0x38	; 56
    239a:	91 e0       	ldi	r25, 0x01	; 1
    239c:	21 50       	subi	r18, 0x01	; 1
    239e:	80 40       	sbci	r24, 0x00	; 0
    23a0:	90 40       	sbci	r25, 0x00	; 0
    23a2:	e1 f7       	brne	.-8      	; 0x239c <set_Alarm+0x24>
    23a4:	00 c0       	rjmp	.+0      	; 0x23a6 <set_Alarm+0x2e>
    23a6:	00 00       	nop
	_delay_ms(50);
	PORT_BUZZER_O &= ~(1<<BIT_BUZZER_O);
    23a8:	82 b3       	in	r24, 0x12	; 18
    23aa:	8f 77       	andi	r24, 0x7F	; 127
    23ac:	82 bb       	out	0x12, r24	; 18
    23ae:	2f e7       	ldi	r18, 0x7F	; 127
    23b0:	85 eb       	ldi	r24, 0xB5	; 181
    23b2:	91 e0       	ldi	r25, 0x01	; 1
    23b4:	21 50       	subi	r18, 0x01	; 1
    23b6:	80 40       	sbci	r24, 0x00	; 0
    23b8:	90 40       	sbci	r25, 0x00	; 0
    23ba:	e1 f7       	brne	.-8      	; 0x23b4 <set_Alarm+0x3c>
    23bc:	00 c0       	rjmp	.+0      	; 0x23be <set_Alarm+0x46>
    23be:	00 00       	nop
	_delay_ms(70);
	PORT_BUZZER_O |= (1<<BIT_BUZZER_O);
    23c0:	82 b3       	in	r24, 0x12	; 18
    23c2:	80 68       	ori	r24, 0x80	; 128
    23c4:	82 bb       	out	0x12, r24	; 18
    23c6:	2f ef       	ldi	r18, 0xFF	; 255
    23c8:	89 e6       	ldi	r24, 0x69	; 105
    23ca:	98 e1       	ldi	r25, 0x18	; 24
    23cc:	21 50       	subi	r18, 0x01	; 1
    23ce:	80 40       	sbci	r24, 0x00	; 0
    23d0:	90 40       	sbci	r25, 0x00	; 0
    23d2:	e1 f7       	brne	.-8      	; 0x23cc <set_Alarm+0x54>
    23d4:	00 c0       	rjmp	.+0      	; 0x23d6 <set_Alarm+0x5e>
    23d6:	00 00       	nop
    23d8:	08 95       	ret

000023da <main>:
//Main program
int main(void)
{	
	//MAX7219 init
	// SCK MOSI CS/LOAD/SS
	DDRB |= (1 << PIN_SCK) | (1 << PIN_MOSI) | (1 << PIN_SS);
    23da:	87 b3       	in	r24, 0x17	; 23
    23dc:	80 6b       	ori	r24, 0xB0	; 176
    23de:	87 bb       	out	0x17, r24	; 23
	// SPI Enable, Master mode
	SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
    23e0:	8d b1       	in	r24, 0x0d	; 13
    23e2:	82 65       	ori	r24, 0x52	; 82
    23e4:	8d b9       	out	0x0d, r24	; 13
	// Scan limit runs from 0.
	MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, 0x07);
    23e6:	67 e0       	ldi	r22, 0x07	; 7
    23e8:	8b e0       	ldi	r24, 0x0B	; 11
    23ea:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_INTENSITY, 0x0F);
    23ee:	6f e0       	ldi	r22, 0x0F	; 15
    23f0:	8a e0       	ldi	r24, 0x0A	; 10
    23f2:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_POWER, ON);
    23f6:	61 e0       	ldi	r22, 0x01	; 1
    23f8:	8c e0       	ldi	r24, 0x0C	; 12
    23fa:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    23fe:	6f ef       	ldi	r22, 0xFF	; 255
    2400:	89 e0       	ldi	r24, 0x09	; 9
    2402:	0e 94 97 01 	call	0x32e	; 0x32e <MAX7219_writeData>
	//FixTime();
	Init_buttons();// KEY_PORT=0xF8;
    2406:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <Init_buttons>
	Init_IO();
    240a:	0e 94 61 11 	call	0x22c2	; 0x22c2 <Init_IO>
	//------------------------------------
	
	Init_Timer0();
    240e:	0e 94 54 11 	call	0x22a8	; 0x22a8 <Init_Timer0>
	Init_interupt();
    2412:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <Init_interupt>
	sei();
    2416:	78 94       	sei
	TWI_Init(); 	
    2418:	0e 94 58 00 	call	0xb0	; 0xb0 <TWI_Init>
	TWI_DS1307_rblock(tData,7); 
    241c:	67 e0       	ldi	r22, 0x07	; 7
    241e:	8a e7       	ldi	r24, 0x7A	; 122
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	0e 94 c3 00 	call	0x186	; 0x186 <TWI_DS1307_rblock>
	Decode(); 	//BCD data converter function from DS1307 to DEC
    2426:	0e 94 29 01 	call	0x252	; 0x252 <Decode>
    242a:	8f ec       	ldi	r24, 0xCF	; 207
    242c:	97 e0       	ldi	r25, 0x07	; 7
    242e:	01 97       	sbiw	r24, 0x01	; 1
    2430:	f1 f7       	brne	.-4      	; 0x242e <main+0x54>
    2432:	00 c0       	rjmp	.+0      	; 0x2434 <main+0x5a>
    2434:	00 00       	nop
	_delay_ms(1);	
	/**BLINK 3 SECOND BEFORE LOOPING**/
	Init_start_cond();	
    2436:	0e 94 73 11 	call	0x22e6	; 0x22e6 <Init_start_cond>
	//************************************************************************************
	
	while(1)
	{
		yyyy=Year+2000;
    243a:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <Year>
    243e:	50 e0       	ldi	r21, 0x00	; 0
    2440:	40 53       	subi	r20, 0x30	; 48
    2442:	58 4f       	sbci	r21, 0xF8	; 248
    2444:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <yyyy+0x1>
    2448:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <yyyy>
		convertSolar2Lunar(Date, Month, yyyy);	
    244c:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Month>
    2450:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Date>
    2454:	0e 94 5f 10 	call	0x20be	; 0x20be <convertSolar2Lunar>
		Display_7seg();
    2458:	0e 94 b0 01 	call	0x360	; 0x360 <Display_7seg>
		if (Hour == A_Hour && Minute == A_Minute && EN_alarm == true)
    245c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Hour>
    2460:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <A_Hour>
    2464:	98 13       	cpse	r25, r24
    2466:	e9 cf       	rjmp	.-46     	; 0x243a <main+0x60>
    2468:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Minute>
    246c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <A_Minute>
    2470:	98 13       	cpse	r25, r24
    2472:	e3 cf       	rjmp	.-58     	; 0x243a <main+0x60>
    2474:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <EN_alarm>
    2478:	88 23       	and	r24, r24
    247a:	f9 f2       	breq	.-66     	; 0x243a <main+0x60>
		{	
			Display_7seg();
    247c:	0e 94 b0 01 	call	0x360	; 0x360 <Display_7seg>
			set_Alarm();
    2480:	0e 94 bc 11 	call	0x2378	; 0x2378 <set_Alarm>
    2484:	da cf       	rjmp	.-76     	; 0x243a <main+0x60>

00002486 <__vector_11>:
		}
	}
	return 0;
}

ISR(TIMER0_OVF_vect){ 	
    2486:	1f 92       	push	r1
    2488:	0f 92       	push	r0
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	0f 92       	push	r0
    248e:	11 24       	eor	r1, r1
    2490:	2f 93       	push	r18
    2492:	3f 93       	push	r19
    2494:	4f 93       	push	r20
    2496:	5f 93       	push	r21
    2498:	6f 93       	push	r22
    249a:	7f 93       	push	r23
    249c:	8f 93       	push	r24
    249e:	9f 93       	push	r25
    24a0:	af 93       	push	r26
    24a2:	bf 93       	push	r27
    24a4:	ef 93       	push	r30
    24a6:	ff 93       	push	r31
	Time_count++;			//thoi gian doc ds1307
    24a8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Time_count>
    24ac:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Time_count+0x1>
    24b0:	01 96       	adiw	r24, 0x01	; 1
    24b2:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Time_count+0x1>
    24b6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Time_count>
	blink_count++;			//thoi gian blink
    24ba:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <blink_count>
    24be:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <blink_count+0x1>
    24c2:	2f 5f       	subi	r18, 0xFF	; 255
    24c4:	3f 4f       	sbci	r19, 0xFF	; 255
    24c6:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <blink_count+0x1>
    24ca:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <blink_count>
	if(Time_count>=10){ 	//1s Exactly
    24ce:	0a 97       	sbiw	r24, 0x0a	; 10
    24d0:	08 f1       	brcs	.+66     	; 0x2514 <__vector_11+0x8e>
		                
		if(set == false )
    24d2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <set>
    24d6:	81 11       	cpse	r24, r1
    24d8:	19 c0       	rjmp	.+50     	; 0x250c <__vector_11+0x86>
		{
			//Read DS1307
			TWI_DS1307_wadr(0x00); 				
    24da:	0e 94 5e 00 	call	0xbc	; 0xbc <TWI_DS1307_wadr>
    24de:	8f ec       	ldi	r24, 0xCF	; 207
    24e0:	97 e0       	ldi	r25, 0x07	; 7
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <__vector_11+0x5c>
    24e6:	00 c0       	rjmp	.+0      	; 0x24e8 <__vector_11+0x62>
    24e8:	00 00       	nop
			_delay_ms(1);		   				
			TWI_DS1307_rblock(tData,7); 
    24ea:	67 e0       	ldi	r22, 0x07	; 7
    24ec:	8a e7       	ldi	r24, 0x7A	; 122
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	0e 94 c3 00 	call	0x186	; 0x186 <TWI_DS1307_rblock>
					
			//Print result on 7Seg led		
			if(BCDToDec(tData[0]) !=Second)
    24f4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <tData>
    24f8:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
    24fc:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Second>
    2500:	89 17       	cp	r24, r25
    2502:	21 f0       	breq	.+8      	; 0x250c <__vector_11+0x86>
			{ 
				Decode();			
    2504:	0e 94 29 01 	call	0x252	; 0x252 <Decode>
				Display_7seg();
    2508:	0e 94 b0 01 	call	0x360	; 0x360 <Display_7seg>
			} 
		}
		Time_count=0; 
    250c:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <Time_count+0x1>
    2510:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <Time_count>
	}
	if (blink_count>=15)	//blink 500ms
    2514:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <blink_count>
    2518:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <blink_count+0x1>
    251c:	0f 97       	sbiw	r24, 0x0f	; 15
    251e:	80 f0       	brcs	.+32     	; 0x2540 <__vector_11+0xba>
	{
		if(set == true ){
    2520:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <set>
    2524:	88 23       	and	r24, r24
    2526:	41 f0       	breq	.+16     	; 0x2538 <__vector_11+0xb2>
				blinkmode^=1;
    2528:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <blinkmode>
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	89 27       	eor	r24, r25
    2530:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <blinkmode>
				Display_7seg();
    2534:	0e 94 b0 01 	call	0x360	; 0x360 <Display_7seg>
		}
		blink_count=0;
    2538:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <blink_count+0x1>
    253c:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <blink_count>
	}
}
    2540:	ff 91       	pop	r31
    2542:	ef 91       	pop	r30
    2544:	bf 91       	pop	r27
    2546:	af 91       	pop	r26
    2548:	9f 91       	pop	r25
    254a:	8f 91       	pop	r24
    254c:	7f 91       	pop	r23
    254e:	6f 91       	pop	r22
    2550:	5f 91       	pop	r21
    2552:	4f 91       	pop	r20
    2554:	3f 91       	pop	r19
    2556:	2f 91       	pop	r18
    2558:	0f 90       	pop	r0
    255a:	0f be       	out	0x3f, r0	; 63
    255c:	0f 90       	pop	r0
    255e:	1f 90       	pop	r1
    2560:	18 95       	reti

00002562 <__vector_1>:


//SW mode button
ISR(INT0_vect){
    2562:	1f 92       	push	r1
    2564:	0f 92       	push	r0
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	0f 92       	push	r0
    256a:	11 24       	eor	r1, r1
    256c:	2f 93       	push	r18
    256e:	3f 93       	push	r19
    2570:	4f 93       	push	r20
    2572:	5f 93       	push	r21
    2574:	6f 93       	push	r22
    2576:	7f 93       	push	r23
    2578:	8f 93       	push	r24
    257a:	9f 93       	push	r25
    257c:	af 93       	push	r26
    257e:	bf 93       	push	r27
    2580:	ef 93       	push	r30
    2582:	ff 93       	push	r31
	
	if(set==false){
    2584:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <set>
    2588:	81 11       	cpse	r24, r1
    258a:	09 c0       	rjmp	.+18     	; 0x259e <__vector_1+0x3c>
		SW_time_date++;
    258c:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <__data_end>
    2590:	9f 5f       	subi	r25, 0xFF	; 255
    2592:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__data_end>
		if(SW_time_date > 3){
    2596:	94 30       	cpi	r25, 0x04	; 4
    2598:	10 f0       	brcs	.+4      	; 0x259e <__vector_1+0x3c>
			SW_time_date = 0;
    259a:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
		}
	}
	if(SW_time_date==0 && set==true) {
    259e:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <__data_end>
    25a2:	91 11       	cpse	r25, r1
    25a4:	0c c0       	rjmp	.+24     	; 0x25be <__vector_1+0x5c>
    25a6:	88 23       	and	r24, r24
    25a8:	51 f0       	breq	.+20     	; 0x25be <__vector_1+0x5c>
		SW_time_date = 0;
    25aa:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
		count=0;
    25ae:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <count>
		blinkmode=0;
    25b2:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <blinkmode>
		FixTime();
    25b6:	0e 94 55 01 	call	0x2aa	; 0x2aa <FixTime>
		set=false;
    25ba:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <set>
	}
	if(SW_time_date==1 && set==true) {
    25be:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
    25c2:	81 30       	cpi	r24, 0x01	; 1
    25c4:	79 f4       	brne	.+30     	; 0x25e4 <__vector_1+0x82>
    25c6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <set>
    25ca:	88 23       	and	r24, r24
    25cc:	59 f0       	breq	.+22     	; 0x25e4 <__vector_1+0x82>
		SW_time_date = 1;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
		count=0;
    25d4:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <count>
		blinkmode=0;
    25d8:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <blinkmode>
		FixTime();
    25dc:	0e 94 55 01 	call	0x2aa	; 0x2aa <FixTime>
		set=false;
    25e0:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <set>
	}
	if(SW_time_date==3 && set==true) {
    25e4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
    25e8:	83 30       	cpi	r24, 0x03	; 3
    25ea:	81 f4       	brne	.+32     	; 0x260c <__vector_1+0xaa>
    25ec:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <set>
    25f0:	88 23       	and	r24, r24
    25f2:	61 f0       	breq	.+24     	; 0x260c <__vector_1+0xaa>
		SW_time_date = 3;
    25f4:	83 e0       	ldi	r24, 0x03	; 3
    25f6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
		count=0;
    25fa:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <count>
		blinkmode=0;
    25fe:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <blinkmode>
		EN_alarm=true;
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <EN_alarm>
		set=false;
    2608:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <set>
	}
}
    260c:	ff 91       	pop	r31
    260e:	ef 91       	pop	r30
    2610:	bf 91       	pop	r27
    2612:	af 91       	pop	r26
    2614:	9f 91       	pop	r25
    2616:	8f 91       	pop	r24
    2618:	7f 91       	pop	r23
    261a:	6f 91       	pop	r22
    261c:	5f 91       	pop	r21
    261e:	4f 91       	pop	r20
    2620:	3f 91       	pop	r19
    2622:	2f 91       	pop	r18
    2624:	0f 90       	pop	r0
    2626:	0f be       	out	0x3f, r0	; 63
    2628:	0f 90       	pop	r0
    262a:	1f 90       	pop	r1
    262c:	18 95       	reti

0000262e <__vector_2>:


//Set time button
ISR(INT1_vect){
    262e:	1f 92       	push	r1
    2630:	0f 92       	push	r0
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	0f 92       	push	r0
    2636:	11 24       	eor	r1, r1
    2638:	8f 93       	push	r24
    263a:	9f 93       	push	r25

	if (SW_time_date==0)
    263c:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
    2640:	81 11       	cpse	r24, r1
    2642:	10 c0       	rjmp	.+32     	; 0x2664 <__vector_2+0x36>
	{
		set = true;
    2644:	91 e0       	ldi	r25, 0x01	; 1
    2646:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <set>
		count++;
    264a:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <count>
    264e:	9f 5f       	subi	r25, 0xFF	; 255
    2650:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <count>
		if(count > 4) {
    2654:	95 30       	cpi	r25, 0x05	; 5
    2656:	30 f0       	brcs	.+12     	; 0x2664 <__vector_2+0x36>
			count = 0;
    2658:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <count>
			blinkmode=0;
    265c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <blinkmode>
			set=false;
    2660:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <set>
		}
	}
	if (SW_time_date==1)
    2664:	81 30       	cpi	r24, 0x01	; 1
    2666:	81 f4       	brne	.+32     	; 0x2688 <__vector_2+0x5a>
	{
		set = true;
    2668:	91 e0       	ldi	r25, 0x01	; 1
    266a:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <set>
		count++;
    266e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <count>
    2672:	9f 5f       	subi	r25, 0xFF	; 255
    2674:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <count>
		if(count > 3) {
    2678:	94 30       	cpi	r25, 0x04	; 4
    267a:	30 f0       	brcs	.+12     	; 0x2688 <__vector_2+0x5a>
			count = 0;
    267c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <count>
			blinkmode=0;
    2680:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <blinkmode>
			set=false;
    2684:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <set>
		}
	}
	if (SW_time_date==3)
    2688:	83 30       	cpi	r24, 0x03	; 3
    268a:	91 f4       	brne	.+36     	; 0x26b0 <__vector_2+0x82>
	{
		set = true;
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <set>
		count++;
    2692:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
    2696:	8f 5f       	subi	r24, 0xFF	; 255
    2698:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <count>
		if(count > 2) {
    269c:	83 30       	cpi	r24, 0x03	; 3
    269e:	40 f0       	brcs	.+16     	; 0x26b0 <__vector_2+0x82>
			count = 0;
    26a0:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <count>
			blinkmode=0;
    26a4:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <blinkmode>
			EN_alarm=false;
    26a8:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <EN_alarm>
			set=false;
    26ac:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <set>
		}
	}
}
    26b0:	9f 91       	pop	r25
    26b2:	8f 91       	pop	r24
    26b4:	0f 90       	pop	r0
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	0f 90       	pop	r0
    26ba:	1f 90       	pop	r1
    26bc:	18 95       	reti

000026be <__vector_3>:

//increase button
ISR(INT2_vect){
    26be:	1f 92       	push	r1
    26c0:	0f 92       	push	r0
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	0f 92       	push	r0
    26c6:	11 24       	eor	r1, r1
    26c8:	2f 93       	push	r18
    26ca:	3f 93       	push	r19
    26cc:	4f 93       	push	r20
    26ce:	5f 93       	push	r21
    26d0:	8f 93       	push	r24
    26d2:	9f 93       	push	r25
	if (EN_alarm == true && set==false)
    26d4:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <EN_alarm>
    26d8:	88 23       	and	r24, r24
    26da:	49 f0       	breq	.+18     	; 0x26ee <__vector_3+0x30>
    26dc:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <set>
    26e0:	81 11       	cpse	r24, r1
    26e2:	05 c0       	rjmp	.+10     	; 0x26ee <__vector_3+0x30>
	{
		EN_alarm=false;
    26e4:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <EN_alarm>
		BTN_PORTD |= (1<<BIT_BUZZER_O);
    26e8:	82 b3       	in	r24, 0x12	; 18
    26ea:	80 68       	ori	r24, 0x80	; 128
    26ec:	82 bb       	out	0x12, r24	; 18
	}
	if((set == true) && (SW_time_date==0)){		//icrease dd, mm, h, min
    26ee:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <set>
    26f2:	88 23       	and	r24, r24
    26f4:	09 f4       	brne	.+2      	; 0x26f8 <__vector_3+0x3a>
    26f6:	65 c0       	rjmp	.+202    	; 0x27c2 <__vector_3+0x104>
    26f8:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <__data_end>
    26fc:	91 11       	cpse	r25, r1
    26fe:	61 c0       	rjmp	.+194    	; 0x27c2 <__vector_3+0x104>
		if(count == 1) {
    2700:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <count>
    2704:	91 30       	cpi	r25, 0x01	; 1
    2706:	d9 f5       	brne	.+118    	; 0x277e <__vector_3+0xc0>
			Date++;
    2708:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <Date>
    270c:	2f 5f       	subi	r18, 0xFF	; 255
    270e:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <Date>
			if(Month == 4 || Month == 6  || Month == 9  || Month == 11)
    2712:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <Month>
    2716:	34 30       	cpi	r19, 0x04	; 4
    2718:	31 f0       	breq	.+12     	; 0x2726 <__vector_3+0x68>
    271a:	36 30       	cpi	r19, 0x06	; 6
    271c:	21 f0       	breq	.+8      	; 0x2726 <__vector_3+0x68>
    271e:	39 30       	cpi	r19, 0x09	; 9
    2720:	11 f0       	breq	.+4      	; 0x2726 <__vector_3+0x68>
    2722:	3b 30       	cpi	r19, 0x0B	; 11
    2724:	31 f4       	brne	.+12     	; 0x2732 <__vector_3+0x74>
			{
				if(Date > 30)
    2726:	2f 31       	cpi	r18, 0x1F	; 31
    2728:	50 f1       	brcs	.+84     	; 0x277e <__vector_3+0xc0>
				Date=1;
    272a:	21 e0       	ldi	r18, 0x01	; 1
    272c:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <Date>
    2730:	26 c0       	rjmp	.+76     	; 0x277e <__vector_3+0xc0>
			}
			else if(Month == 1 || Month == 3  || Month == 5  || Month == 7 || Month == 8  || Month == 10  || Month == 12)
    2732:	31 30       	cpi	r19, 0x01	; 1
    2734:	61 f0       	breq	.+24     	; 0x274e <__vector_3+0x90>
    2736:	33 30       	cpi	r19, 0x03	; 3
    2738:	51 f0       	breq	.+20     	; 0x274e <__vector_3+0x90>
    273a:	35 30       	cpi	r19, 0x05	; 5
    273c:	41 f0       	breq	.+16     	; 0x274e <__vector_3+0x90>
    273e:	37 30       	cpi	r19, 0x07	; 7
    2740:	31 f0       	breq	.+12     	; 0x274e <__vector_3+0x90>
    2742:	38 30       	cpi	r19, 0x08	; 8
    2744:	21 f0       	breq	.+8      	; 0x274e <__vector_3+0x90>
    2746:	3a 30       	cpi	r19, 0x0A	; 10
    2748:	11 f0       	breq	.+4      	; 0x274e <__vector_3+0x90>
    274a:	3c 30       	cpi	r19, 0x0C	; 12
    274c:	31 f4       	brne	.+12     	; 0x275a <__vector_3+0x9c>
			{
				if(Date >31)
    274e:	20 32       	cpi	r18, 0x20	; 32
    2750:	b0 f0       	brcs	.+44     	; 0x277e <__vector_3+0xc0>
				Date=1;
    2752:	21 e0       	ldi	r18, 0x01	; 1
    2754:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <Date>
    2758:	12 c0       	rjmp	.+36     	; 0x277e <__vector_3+0xc0>
			}
			
			else if(yyyy/4 == 0 && yyyy/400 == 0)
    275a:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <yyyy>
    275e:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <yyyy+0x1>
    2762:	44 30       	cpi	r20, 0x04	; 4
    2764:	51 05       	cpc	r21, r1
    2766:	30 f4       	brcc	.+12     	; 0x2774 <__vector_3+0xb6>
			{
				if(Date > 29)
    2768:	2e 31       	cpi	r18, 0x1E	; 30
    276a:	48 f0       	brcs	.+18     	; 0x277e <__vector_3+0xc0>
				Date=1;
    276c:	21 e0       	ldi	r18, 0x01	; 1
    276e:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <Date>
    2772:	05 c0       	rjmp	.+10     	; 0x277e <__vector_3+0xc0>
			}
			else
			{
				if(Date > 28)
    2774:	2d 31       	cpi	r18, 0x1D	; 29
    2776:	18 f0       	brcs	.+6      	; 0x277e <__vector_3+0xc0>
				Date=1;
    2778:	21 e0       	ldi	r18, 0x01	; 1
    277a:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <Date>
			}
		}
		if(count == 2) {
    277e:	92 30       	cpi	r25, 0x02	; 2
    2780:	51 f4       	brne	.+20     	; 0x2796 <__vector_3+0xd8>
			Month++;
    2782:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <Month>
    2786:	2f 5f       	subi	r18, 0xFF	; 255
    2788:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Month>
			if(Month > 12) Month = 1;
    278c:	2d 30       	cpi	r18, 0x0D	; 13
    278e:	18 f0       	brcs	.+6      	; 0x2796 <__vector_3+0xd8>
    2790:	21 e0       	ldi	r18, 0x01	; 1
    2792:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Month>
		}
		if(count == 3) {
    2796:	93 30       	cpi	r25, 0x03	; 3
    2798:	49 f4       	brne	.+18     	; 0x27ac <__vector_3+0xee>
			Hour++;
    279a:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <Hour>
    279e:	2f 5f       	subi	r18, 0xFF	; 255
    27a0:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <Hour>
			if(Hour > 23) Hour = 0;
    27a4:	28 31       	cpi	r18, 0x18	; 24
    27a6:	10 f0       	brcs	.+4      	; 0x27ac <__vector_3+0xee>
    27a8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <Hour>
		}
		if(count == 4) {
    27ac:	94 30       	cpi	r25, 0x04	; 4
    27ae:	49 f4       	brne	.+18     	; 0x27c2 <__vector_3+0x104>
			Minute++;
    27b0:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <Minute>
    27b4:	9f 5f       	subi	r25, 0xFF	; 255
    27b6:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <Minute>
			if(Minute > 59) Minute = 0;
    27ba:	9c 33       	cpi	r25, 0x3C	; 60
    27bc:	10 f0       	brcs	.+4      	; 0x27c2 <__vector_3+0x104>
    27be:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <Minute>
		}
	}
	
	if((set == true) && (SW_time_date==1)){		//increase dd, mm, yyyy
    27c2:	88 23       	and	r24, r24
    27c4:	09 f4       	brne	.+2      	; 0x27c8 <__vector_3+0x10a>
    27c6:	5b c0       	rjmp	.+182    	; 0x287e <__vector_3+0x1c0>
    27c8:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <__data_end>
    27cc:	91 30       	cpi	r25, 0x01	; 1
    27ce:	09 f0       	breq	.+2      	; 0x27d2 <__vector_3+0x114>
    27d0:	56 c0       	rjmp	.+172    	; 0x287e <__vector_3+0x1c0>
		if(count == 1) {
    27d2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <count>
    27d6:	91 30       	cpi	r25, 0x01	; 1
    27d8:	d9 f5       	brne	.+118    	; 0x2850 <__vector_3+0x192>
			Date++;
    27da:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <Date>
    27de:	2f 5f       	subi	r18, 0xFF	; 255
    27e0:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <Date>
			if(Month == 4 || Month == 6  || Month == 9  || Month == 11)
    27e4:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <Month>
    27e8:	34 30       	cpi	r19, 0x04	; 4
    27ea:	31 f0       	breq	.+12     	; 0x27f8 <__vector_3+0x13a>
    27ec:	36 30       	cpi	r19, 0x06	; 6
    27ee:	21 f0       	breq	.+8      	; 0x27f8 <__vector_3+0x13a>
    27f0:	39 30       	cpi	r19, 0x09	; 9
    27f2:	11 f0       	breq	.+4      	; 0x27f8 <__vector_3+0x13a>
    27f4:	3b 30       	cpi	r19, 0x0B	; 11
    27f6:	31 f4       	brne	.+12     	; 0x2804 <__vector_3+0x146>
			{
				if(Date > 30)
    27f8:	2f 31       	cpi	r18, 0x1F	; 31
    27fa:	50 f1       	brcs	.+84     	; 0x2850 <__vector_3+0x192>
				Date=1;
    27fc:	21 e0       	ldi	r18, 0x01	; 1
    27fe:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <Date>
    2802:	26 c0       	rjmp	.+76     	; 0x2850 <__vector_3+0x192>
			}
			else if(Month == 1 || Month == 3  || Month == 5  || Month == 7 || Month == 8  || Month == 10  || Month == 12)
    2804:	31 30       	cpi	r19, 0x01	; 1
    2806:	61 f0       	breq	.+24     	; 0x2820 <__vector_3+0x162>
    2808:	33 30       	cpi	r19, 0x03	; 3
    280a:	51 f0       	breq	.+20     	; 0x2820 <__vector_3+0x162>
    280c:	35 30       	cpi	r19, 0x05	; 5
    280e:	41 f0       	breq	.+16     	; 0x2820 <__vector_3+0x162>
    2810:	37 30       	cpi	r19, 0x07	; 7
    2812:	31 f0       	breq	.+12     	; 0x2820 <__vector_3+0x162>
    2814:	38 30       	cpi	r19, 0x08	; 8
    2816:	21 f0       	breq	.+8      	; 0x2820 <__vector_3+0x162>
    2818:	3a 30       	cpi	r19, 0x0A	; 10
    281a:	11 f0       	breq	.+4      	; 0x2820 <__vector_3+0x162>
    281c:	3c 30       	cpi	r19, 0x0C	; 12
    281e:	31 f4       	brne	.+12     	; 0x282c <__vector_3+0x16e>
			{
				if(Date >31)
    2820:	20 32       	cpi	r18, 0x20	; 32
    2822:	b0 f0       	brcs	.+44     	; 0x2850 <__vector_3+0x192>
				Date=1;
    2824:	21 e0       	ldi	r18, 0x01	; 1
    2826:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <Date>
    282a:	12 c0       	rjmp	.+36     	; 0x2850 <__vector_3+0x192>
			}
			
			else if(yyyy/4 == 0 && yyyy/400 == 0)
    282c:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <yyyy>
    2830:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <yyyy+0x1>
    2834:	44 30       	cpi	r20, 0x04	; 4
    2836:	51 05       	cpc	r21, r1
    2838:	30 f4       	brcc	.+12     	; 0x2846 <__vector_3+0x188>
			{
				if(Date > 29)
    283a:	2e 31       	cpi	r18, 0x1E	; 30
    283c:	48 f0       	brcs	.+18     	; 0x2850 <__vector_3+0x192>
				Date=1;
    283e:	21 e0       	ldi	r18, 0x01	; 1
    2840:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <Date>
    2844:	05 c0       	rjmp	.+10     	; 0x2850 <__vector_3+0x192>
			}
			else
			{
				if(Date > 28)
    2846:	2d 31       	cpi	r18, 0x1D	; 29
    2848:	18 f0       	brcs	.+6      	; 0x2850 <__vector_3+0x192>
				Date=1;
    284a:	21 e0       	ldi	r18, 0x01	; 1
    284c:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <Date>
			}
		}
		if(count == 2) {
    2850:	92 30       	cpi	r25, 0x02	; 2
    2852:	51 f4       	brne	.+20     	; 0x2868 <__vector_3+0x1aa>
			Month++;
    2854:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <Month>
    2858:	2f 5f       	subi	r18, 0xFF	; 255
    285a:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Month>
			if(Month > 12) Month = 1;
    285e:	2d 30       	cpi	r18, 0x0D	; 13
    2860:	18 f0       	brcs	.+6      	; 0x2868 <__vector_3+0x1aa>
    2862:	21 e0       	ldi	r18, 0x01	; 1
    2864:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Month>
		}
		if(count == 3) {
    2868:	93 30       	cpi	r25, 0x03	; 3
    286a:	49 f4       	brne	.+18     	; 0x287e <__vector_3+0x1c0>
			Year++;
    286c:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <Year>
    2870:	9f 5f       	subi	r25, 0xFF	; 255
    2872:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <Year>
			if(Year > 99) Year = 0;
    2876:	94 36       	cpi	r25, 0x64	; 100
    2878:	10 f0       	brcs	.+4      	; 0x287e <__vector_3+0x1c0>
    287a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <Year>
		}
	}
	
	if((set == true) && (SW_time_date==3)){		//increase alarm
    287e:	88 23       	and	r24, r24
    2880:	e1 f0       	breq	.+56     	; 0x28ba <__vector_3+0x1fc>
    2882:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
    2886:	83 30       	cpi	r24, 0x03	; 3
    2888:	c1 f4       	brne	.+48     	; 0x28ba <__vector_3+0x1fc>

		if(count == 1) {
    288a:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <count>
    288e:	81 30       	cpi	r24, 0x01	; 1
    2890:	49 f4       	brne	.+18     	; 0x28a4 <__vector_3+0x1e6>
			A_Hour++;
    2892:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <A_Hour>
    2896:	9f 5f       	subi	r25, 0xFF	; 255
    2898:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <A_Hour>
			if(A_Hour > 23) A_Hour = 0;
    289c:	98 31       	cpi	r25, 0x18	; 24
    289e:	10 f0       	brcs	.+4      	; 0x28a4 <__vector_3+0x1e6>
    28a0:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <A_Hour>
		}
		if(count == 2) {
    28a4:	82 30       	cpi	r24, 0x02	; 2
    28a6:	49 f4       	brne	.+18     	; 0x28ba <__vector_3+0x1fc>
			A_Minute++;
    28a8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <A_Minute>
    28ac:	8f 5f       	subi	r24, 0xFF	; 255
    28ae:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <A_Minute>
			if(A_Minute > 59) A_Minute = 0;
    28b2:	8c 33       	cpi	r24, 0x3C	; 60
    28b4:	10 f0       	brcs	.+4      	; 0x28ba <__vector_3+0x1fc>
    28b6:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <A_Minute>
		}
	}
}
    28ba:	9f 91       	pop	r25
    28bc:	8f 91       	pop	r24
    28be:	5f 91       	pop	r21
    28c0:	4f 91       	pop	r20
    28c2:	3f 91       	pop	r19
    28c4:	2f 91       	pop	r18
    28c6:	0f 90       	pop	r0
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	0f 90       	pop	r0
    28cc:	1f 90       	pop	r1
    28ce:	18 95       	reti

000028d0 <__subsf3>:
    28d0:	50 58       	subi	r21, 0x80	; 128

000028d2 <__addsf3>:
    28d2:	bb 27       	eor	r27, r27
    28d4:	aa 27       	eor	r26, r26
    28d6:	0e 94 80 14 	call	0x2900	; 0x2900 <__addsf3x>
    28da:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <__fp_round>
    28de:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__fp_pscA>
    28e2:	38 f0       	brcs	.+14     	; 0x28f2 <__addsf3+0x20>
    28e4:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__fp_pscB>
    28e8:	20 f0       	brcs	.+8      	; 0x28f2 <__addsf3+0x20>
    28ea:	39 f4       	brne	.+14     	; 0x28fa <__addsf3+0x28>
    28ec:	9f 3f       	cpi	r25, 0xFF	; 255
    28ee:	19 f4       	brne	.+6      	; 0x28f6 <__addsf3+0x24>
    28f0:	26 f4       	brtc	.+8      	; 0x28fa <__addsf3+0x28>
    28f2:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__fp_nan>
    28f6:	0e f4       	brtc	.+2      	; 0x28fa <__addsf3+0x28>
    28f8:	e0 95       	com	r30
    28fa:	e7 fb       	bst	r30, 7
    28fc:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__fp_inf>

00002900 <__addsf3x>:
    2900:	e9 2f       	mov	r30, r25
    2902:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fp_split3>
    2906:	58 f3       	brcs	.-42     	; 0x28de <__addsf3+0xc>
    2908:	ba 17       	cp	r27, r26
    290a:	62 07       	cpc	r22, r18
    290c:	73 07       	cpc	r23, r19
    290e:	84 07       	cpc	r24, r20
    2910:	95 07       	cpc	r25, r21
    2912:	20 f0       	brcs	.+8      	; 0x291c <__addsf3x+0x1c>
    2914:	79 f4       	brne	.+30     	; 0x2934 <__addsf3x+0x34>
    2916:	a6 f5       	brtc	.+104    	; 0x2980 <__addsf3x+0x80>
    2918:	0c 94 7e 16 	jmp	0x2cfc	; 0x2cfc <__fp_zero>
    291c:	0e f4       	brtc	.+2      	; 0x2920 <__addsf3x+0x20>
    291e:	e0 95       	com	r30
    2920:	0b 2e       	mov	r0, r27
    2922:	ba 2f       	mov	r27, r26
    2924:	a0 2d       	mov	r26, r0
    2926:	0b 01       	movw	r0, r22
    2928:	b9 01       	movw	r22, r18
    292a:	90 01       	movw	r18, r0
    292c:	0c 01       	movw	r0, r24
    292e:	ca 01       	movw	r24, r20
    2930:	a0 01       	movw	r20, r0
    2932:	11 24       	eor	r1, r1
    2934:	ff 27       	eor	r31, r31
    2936:	59 1b       	sub	r21, r25
    2938:	99 f0       	breq	.+38     	; 0x2960 <__addsf3x+0x60>
    293a:	59 3f       	cpi	r21, 0xF9	; 249
    293c:	50 f4       	brcc	.+20     	; 0x2952 <__addsf3x+0x52>
    293e:	50 3e       	cpi	r21, 0xE0	; 224
    2940:	68 f1       	brcs	.+90     	; 0x299c <__addsf3x+0x9c>
    2942:	1a 16       	cp	r1, r26
    2944:	f0 40       	sbci	r31, 0x00	; 0
    2946:	a2 2f       	mov	r26, r18
    2948:	23 2f       	mov	r18, r19
    294a:	34 2f       	mov	r19, r20
    294c:	44 27       	eor	r20, r20
    294e:	58 5f       	subi	r21, 0xF8	; 248
    2950:	f3 cf       	rjmp	.-26     	; 0x2938 <__addsf3x+0x38>
    2952:	46 95       	lsr	r20
    2954:	37 95       	ror	r19
    2956:	27 95       	ror	r18
    2958:	a7 95       	ror	r26
    295a:	f0 40       	sbci	r31, 0x00	; 0
    295c:	53 95       	inc	r21
    295e:	c9 f7       	brne	.-14     	; 0x2952 <__addsf3x+0x52>
    2960:	7e f4       	brtc	.+30     	; 0x2980 <__addsf3x+0x80>
    2962:	1f 16       	cp	r1, r31
    2964:	ba 0b       	sbc	r27, r26
    2966:	62 0b       	sbc	r22, r18
    2968:	73 0b       	sbc	r23, r19
    296a:	84 0b       	sbc	r24, r20
    296c:	ba f0       	brmi	.+46     	; 0x299c <__addsf3x+0x9c>
    296e:	91 50       	subi	r25, 0x01	; 1
    2970:	a1 f0       	breq	.+40     	; 0x299a <__addsf3x+0x9a>
    2972:	ff 0f       	add	r31, r31
    2974:	bb 1f       	adc	r27, r27
    2976:	66 1f       	adc	r22, r22
    2978:	77 1f       	adc	r23, r23
    297a:	88 1f       	adc	r24, r24
    297c:	c2 f7       	brpl	.-16     	; 0x296e <__addsf3x+0x6e>
    297e:	0e c0       	rjmp	.+28     	; 0x299c <__addsf3x+0x9c>
    2980:	ba 0f       	add	r27, r26
    2982:	62 1f       	adc	r22, r18
    2984:	73 1f       	adc	r23, r19
    2986:	84 1f       	adc	r24, r20
    2988:	48 f4       	brcc	.+18     	; 0x299c <__addsf3x+0x9c>
    298a:	87 95       	ror	r24
    298c:	77 95       	ror	r23
    298e:	67 95       	ror	r22
    2990:	b7 95       	ror	r27
    2992:	f7 95       	ror	r31
    2994:	9e 3f       	cpi	r25, 0xFE	; 254
    2996:	08 f0       	brcs	.+2      	; 0x299a <__addsf3x+0x9a>
    2998:	b0 cf       	rjmp	.-160    	; 0x28fa <__addsf3+0x28>
    299a:	93 95       	inc	r25
    299c:	88 0f       	add	r24, r24
    299e:	08 f0       	brcs	.+2      	; 0x29a2 <__addsf3x+0xa2>
    29a0:	99 27       	eor	r25, r25
    29a2:	ee 0f       	add	r30, r30
    29a4:	97 95       	ror	r25
    29a6:	87 95       	ror	r24
    29a8:	08 95       	ret

000029aa <__cmpsf2>:
    29aa:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__fp_cmp>
    29ae:	08 f4       	brcc	.+2      	; 0x29b2 <__cmpsf2+0x8>
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	08 95       	ret

000029b4 <__divsf3>:
    29b4:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__divsf3x>
    29b8:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <__fp_round>
    29bc:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__fp_pscB>
    29c0:	58 f0       	brcs	.+22     	; 0x29d8 <__divsf3+0x24>
    29c2:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__fp_pscA>
    29c6:	40 f0       	brcs	.+16     	; 0x29d8 <__divsf3+0x24>
    29c8:	29 f4       	brne	.+10     	; 0x29d4 <__divsf3+0x20>
    29ca:	5f 3f       	cpi	r21, 0xFF	; 255
    29cc:	29 f0       	breq	.+10     	; 0x29d8 <__divsf3+0x24>
    29ce:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__fp_inf>
    29d2:	51 11       	cpse	r21, r1
    29d4:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__fp_szero>
    29d8:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__fp_nan>

000029dc <__divsf3x>:
    29dc:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fp_split3>
    29e0:	68 f3       	brcs	.-38     	; 0x29bc <__divsf3+0x8>

000029e2 <__divsf3_pse>:
    29e2:	99 23       	and	r25, r25
    29e4:	b1 f3       	breq	.-20     	; 0x29d2 <__divsf3+0x1e>
    29e6:	55 23       	and	r21, r21
    29e8:	91 f3       	breq	.-28     	; 0x29ce <__divsf3+0x1a>
    29ea:	95 1b       	sub	r25, r21
    29ec:	55 0b       	sbc	r21, r21
    29ee:	bb 27       	eor	r27, r27
    29f0:	aa 27       	eor	r26, r26
    29f2:	62 17       	cp	r22, r18
    29f4:	73 07       	cpc	r23, r19
    29f6:	84 07       	cpc	r24, r20
    29f8:	38 f0       	brcs	.+14     	; 0x2a08 <__divsf3_pse+0x26>
    29fa:	9f 5f       	subi	r25, 0xFF	; 255
    29fc:	5f 4f       	sbci	r21, 0xFF	; 255
    29fe:	22 0f       	add	r18, r18
    2a00:	33 1f       	adc	r19, r19
    2a02:	44 1f       	adc	r20, r20
    2a04:	aa 1f       	adc	r26, r26
    2a06:	a9 f3       	breq	.-22     	; 0x29f2 <__divsf3_pse+0x10>
    2a08:	35 d0       	rcall	.+106    	; 0x2a74 <__divsf3_pse+0x92>
    2a0a:	0e 2e       	mov	r0, r30
    2a0c:	3a f0       	brmi	.+14     	; 0x2a1c <__divsf3_pse+0x3a>
    2a0e:	e0 e8       	ldi	r30, 0x80	; 128
    2a10:	32 d0       	rcall	.+100    	; 0x2a76 <__divsf3_pse+0x94>
    2a12:	91 50       	subi	r25, 0x01	; 1
    2a14:	50 40       	sbci	r21, 0x00	; 0
    2a16:	e6 95       	lsr	r30
    2a18:	00 1c       	adc	r0, r0
    2a1a:	ca f7       	brpl	.-14     	; 0x2a0e <__divsf3_pse+0x2c>
    2a1c:	2b d0       	rcall	.+86     	; 0x2a74 <__divsf3_pse+0x92>
    2a1e:	fe 2f       	mov	r31, r30
    2a20:	29 d0       	rcall	.+82     	; 0x2a74 <__divsf3_pse+0x92>
    2a22:	66 0f       	add	r22, r22
    2a24:	77 1f       	adc	r23, r23
    2a26:	88 1f       	adc	r24, r24
    2a28:	bb 1f       	adc	r27, r27
    2a2a:	26 17       	cp	r18, r22
    2a2c:	37 07       	cpc	r19, r23
    2a2e:	48 07       	cpc	r20, r24
    2a30:	ab 07       	cpc	r26, r27
    2a32:	b0 e8       	ldi	r27, 0x80	; 128
    2a34:	09 f0       	breq	.+2      	; 0x2a38 <__divsf3_pse+0x56>
    2a36:	bb 0b       	sbc	r27, r27
    2a38:	80 2d       	mov	r24, r0
    2a3a:	bf 01       	movw	r22, r30
    2a3c:	ff 27       	eor	r31, r31
    2a3e:	93 58       	subi	r25, 0x83	; 131
    2a40:	5f 4f       	sbci	r21, 0xFF	; 255
    2a42:	3a f0       	brmi	.+14     	; 0x2a52 <__divsf3_pse+0x70>
    2a44:	9e 3f       	cpi	r25, 0xFE	; 254
    2a46:	51 05       	cpc	r21, r1
    2a48:	78 f0       	brcs	.+30     	; 0x2a68 <__divsf3_pse+0x86>
    2a4a:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__fp_inf>
    2a4e:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__fp_szero>
    2a52:	5f 3f       	cpi	r21, 0xFF	; 255
    2a54:	e4 f3       	brlt	.-8      	; 0x2a4e <__divsf3_pse+0x6c>
    2a56:	98 3e       	cpi	r25, 0xE8	; 232
    2a58:	d4 f3       	brlt	.-12     	; 0x2a4e <__divsf3_pse+0x6c>
    2a5a:	86 95       	lsr	r24
    2a5c:	77 95       	ror	r23
    2a5e:	67 95       	ror	r22
    2a60:	b7 95       	ror	r27
    2a62:	f7 95       	ror	r31
    2a64:	9f 5f       	subi	r25, 0xFF	; 255
    2a66:	c9 f7       	brne	.-14     	; 0x2a5a <__divsf3_pse+0x78>
    2a68:	88 0f       	add	r24, r24
    2a6a:	91 1d       	adc	r25, r1
    2a6c:	96 95       	lsr	r25
    2a6e:	87 95       	ror	r24
    2a70:	97 f9       	bld	r25, 7
    2a72:	08 95       	ret
    2a74:	e1 e0       	ldi	r30, 0x01	; 1
    2a76:	66 0f       	add	r22, r22
    2a78:	77 1f       	adc	r23, r23
    2a7a:	88 1f       	adc	r24, r24
    2a7c:	bb 1f       	adc	r27, r27
    2a7e:	62 17       	cp	r22, r18
    2a80:	73 07       	cpc	r23, r19
    2a82:	84 07       	cpc	r24, r20
    2a84:	ba 07       	cpc	r27, r26
    2a86:	20 f0       	brcs	.+8      	; 0x2a90 <__divsf3_pse+0xae>
    2a88:	62 1b       	sub	r22, r18
    2a8a:	73 0b       	sbc	r23, r19
    2a8c:	84 0b       	sbc	r24, r20
    2a8e:	ba 0b       	sbc	r27, r26
    2a90:	ee 1f       	adc	r30, r30
    2a92:	88 f7       	brcc	.-30     	; 0x2a76 <__divsf3_pse+0x94>
    2a94:	e0 95       	com	r30
    2a96:	08 95       	ret

00002a98 <__fixunssfsi>:
    2a98:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__fp_splitA>
    2a9c:	88 f0       	brcs	.+34     	; 0x2ac0 <__fixunssfsi+0x28>
    2a9e:	9f 57       	subi	r25, 0x7F	; 127
    2aa0:	98 f0       	brcs	.+38     	; 0x2ac8 <__fixunssfsi+0x30>
    2aa2:	b9 2f       	mov	r27, r25
    2aa4:	99 27       	eor	r25, r25
    2aa6:	b7 51       	subi	r27, 0x17	; 23
    2aa8:	b0 f0       	brcs	.+44     	; 0x2ad6 <__fixunssfsi+0x3e>
    2aaa:	e1 f0       	breq	.+56     	; 0x2ae4 <__fixunssfsi+0x4c>
    2aac:	66 0f       	add	r22, r22
    2aae:	77 1f       	adc	r23, r23
    2ab0:	88 1f       	adc	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	1a f0       	brmi	.+6      	; 0x2abc <__fixunssfsi+0x24>
    2ab6:	ba 95       	dec	r27
    2ab8:	c9 f7       	brne	.-14     	; 0x2aac <__fixunssfsi+0x14>
    2aba:	14 c0       	rjmp	.+40     	; 0x2ae4 <__fixunssfsi+0x4c>
    2abc:	b1 30       	cpi	r27, 0x01	; 1
    2abe:	91 f0       	breq	.+36     	; 0x2ae4 <__fixunssfsi+0x4c>
    2ac0:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <__fp_zero>
    2ac4:	b1 e0       	ldi	r27, 0x01	; 1
    2ac6:	08 95       	ret
    2ac8:	0c 94 7e 16 	jmp	0x2cfc	; 0x2cfc <__fp_zero>
    2acc:	67 2f       	mov	r22, r23
    2ace:	78 2f       	mov	r23, r24
    2ad0:	88 27       	eor	r24, r24
    2ad2:	b8 5f       	subi	r27, 0xF8	; 248
    2ad4:	39 f0       	breq	.+14     	; 0x2ae4 <__fixunssfsi+0x4c>
    2ad6:	b9 3f       	cpi	r27, 0xF9	; 249
    2ad8:	cc f3       	brlt	.-14     	; 0x2acc <__fixunssfsi+0x34>
    2ada:	86 95       	lsr	r24
    2adc:	77 95       	ror	r23
    2ade:	67 95       	ror	r22
    2ae0:	b3 95       	inc	r27
    2ae2:	d9 f7       	brne	.-10     	; 0x2ada <__fixunssfsi+0x42>
    2ae4:	3e f4       	brtc	.+14     	; 0x2af4 <__fixunssfsi+0x5c>
    2ae6:	90 95       	com	r25
    2ae8:	80 95       	com	r24
    2aea:	70 95       	com	r23
    2aec:	61 95       	neg	r22
    2aee:	7f 4f       	sbci	r23, 0xFF	; 255
    2af0:	8f 4f       	sbci	r24, 0xFF	; 255
    2af2:	9f 4f       	sbci	r25, 0xFF	; 255
    2af4:	08 95       	ret

00002af6 <__floatunsisf>:
    2af6:	e8 94       	clt
    2af8:	09 c0       	rjmp	.+18     	; 0x2b0c <__floatsisf+0x12>

00002afa <__floatsisf>:
    2afa:	97 fb       	bst	r25, 7
    2afc:	3e f4       	brtc	.+14     	; 0x2b0c <__floatsisf+0x12>
    2afe:	90 95       	com	r25
    2b00:	80 95       	com	r24
    2b02:	70 95       	com	r23
    2b04:	61 95       	neg	r22
    2b06:	7f 4f       	sbci	r23, 0xFF	; 255
    2b08:	8f 4f       	sbci	r24, 0xFF	; 255
    2b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b0c:	99 23       	and	r25, r25
    2b0e:	a9 f0       	breq	.+42     	; 0x2b3a <__floatsisf+0x40>
    2b10:	f9 2f       	mov	r31, r25
    2b12:	96 e9       	ldi	r25, 0x96	; 150
    2b14:	bb 27       	eor	r27, r27
    2b16:	93 95       	inc	r25
    2b18:	f6 95       	lsr	r31
    2b1a:	87 95       	ror	r24
    2b1c:	77 95       	ror	r23
    2b1e:	67 95       	ror	r22
    2b20:	b7 95       	ror	r27
    2b22:	f1 11       	cpse	r31, r1
    2b24:	f8 cf       	rjmp	.-16     	; 0x2b16 <__floatsisf+0x1c>
    2b26:	fa f4       	brpl	.+62     	; 0x2b66 <__floatsisf+0x6c>
    2b28:	bb 0f       	add	r27, r27
    2b2a:	11 f4       	brne	.+4      	; 0x2b30 <__floatsisf+0x36>
    2b2c:	60 ff       	sbrs	r22, 0
    2b2e:	1b c0       	rjmp	.+54     	; 0x2b66 <__floatsisf+0x6c>
    2b30:	6f 5f       	subi	r22, 0xFF	; 255
    2b32:	7f 4f       	sbci	r23, 0xFF	; 255
    2b34:	8f 4f       	sbci	r24, 0xFF	; 255
    2b36:	9f 4f       	sbci	r25, 0xFF	; 255
    2b38:	16 c0       	rjmp	.+44     	; 0x2b66 <__floatsisf+0x6c>
    2b3a:	88 23       	and	r24, r24
    2b3c:	11 f0       	breq	.+4      	; 0x2b42 <__floatsisf+0x48>
    2b3e:	96 e9       	ldi	r25, 0x96	; 150
    2b40:	11 c0       	rjmp	.+34     	; 0x2b64 <__floatsisf+0x6a>
    2b42:	77 23       	and	r23, r23
    2b44:	21 f0       	breq	.+8      	; 0x2b4e <__floatsisf+0x54>
    2b46:	9e e8       	ldi	r25, 0x8E	; 142
    2b48:	87 2f       	mov	r24, r23
    2b4a:	76 2f       	mov	r23, r22
    2b4c:	05 c0       	rjmp	.+10     	; 0x2b58 <__floatsisf+0x5e>
    2b4e:	66 23       	and	r22, r22
    2b50:	71 f0       	breq	.+28     	; 0x2b6e <__floatsisf+0x74>
    2b52:	96 e8       	ldi	r25, 0x86	; 134
    2b54:	86 2f       	mov	r24, r22
    2b56:	70 e0       	ldi	r23, 0x00	; 0
    2b58:	60 e0       	ldi	r22, 0x00	; 0
    2b5a:	2a f0       	brmi	.+10     	; 0x2b66 <__floatsisf+0x6c>
    2b5c:	9a 95       	dec	r25
    2b5e:	66 0f       	add	r22, r22
    2b60:	77 1f       	adc	r23, r23
    2b62:	88 1f       	adc	r24, r24
    2b64:	da f7       	brpl	.-10     	; 0x2b5c <__floatsisf+0x62>
    2b66:	88 0f       	add	r24, r24
    2b68:	96 95       	lsr	r25
    2b6a:	87 95       	ror	r24
    2b6c:	97 f9       	bld	r25, 7
    2b6e:	08 95       	ret

00002b70 <floor>:
    2b70:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__fp_trunc>
    2b74:	90 f0       	brcs	.+36     	; 0x2b9a <floor+0x2a>
    2b76:	9f 37       	cpi	r25, 0x7F	; 127
    2b78:	48 f4       	brcc	.+18     	; 0x2b8c <floor+0x1c>
    2b7a:	91 11       	cpse	r25, r1
    2b7c:	16 f0       	brts	.+4      	; 0x2b82 <floor+0x12>
    2b7e:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__fp_szero>
    2b82:	60 e0       	ldi	r22, 0x00	; 0
    2b84:	70 e0       	ldi	r23, 0x00	; 0
    2b86:	80 e8       	ldi	r24, 0x80	; 128
    2b88:	9f eb       	ldi	r25, 0xBF	; 191
    2b8a:	08 95       	ret
    2b8c:	26 f4       	brtc	.+8      	; 0x2b96 <floor+0x26>
    2b8e:	1b 16       	cp	r1, r27
    2b90:	61 1d       	adc	r22, r1
    2b92:	71 1d       	adc	r23, r1
    2b94:	81 1d       	adc	r24, r1
    2b96:	0c 94 f9 15 	jmp	0x2bf2	; 0x2bf2 <__fp_mintl>
    2b9a:	0c 94 14 16 	jmp	0x2c28	; 0x2c28 <__fp_mpack>

00002b9e <__fp_cmp>:
    2b9e:	99 0f       	add	r25, r25
    2ba0:	00 08       	sbc	r0, r0
    2ba2:	55 0f       	add	r21, r21
    2ba4:	aa 0b       	sbc	r26, r26
    2ba6:	e0 e8       	ldi	r30, 0x80	; 128
    2ba8:	fe ef       	ldi	r31, 0xFE	; 254
    2baa:	16 16       	cp	r1, r22
    2bac:	17 06       	cpc	r1, r23
    2bae:	e8 07       	cpc	r30, r24
    2bb0:	f9 07       	cpc	r31, r25
    2bb2:	c0 f0       	brcs	.+48     	; 0x2be4 <__fp_cmp+0x46>
    2bb4:	12 16       	cp	r1, r18
    2bb6:	13 06       	cpc	r1, r19
    2bb8:	e4 07       	cpc	r30, r20
    2bba:	f5 07       	cpc	r31, r21
    2bbc:	98 f0       	brcs	.+38     	; 0x2be4 <__fp_cmp+0x46>
    2bbe:	62 1b       	sub	r22, r18
    2bc0:	73 0b       	sbc	r23, r19
    2bc2:	84 0b       	sbc	r24, r20
    2bc4:	95 0b       	sbc	r25, r21
    2bc6:	39 f4       	brne	.+14     	; 0x2bd6 <__fp_cmp+0x38>
    2bc8:	0a 26       	eor	r0, r26
    2bca:	61 f0       	breq	.+24     	; 0x2be4 <__fp_cmp+0x46>
    2bcc:	23 2b       	or	r18, r19
    2bce:	24 2b       	or	r18, r20
    2bd0:	25 2b       	or	r18, r21
    2bd2:	21 f4       	brne	.+8      	; 0x2bdc <__fp_cmp+0x3e>
    2bd4:	08 95       	ret
    2bd6:	0a 26       	eor	r0, r26
    2bd8:	09 f4       	brne	.+2      	; 0x2bdc <__fp_cmp+0x3e>
    2bda:	a1 40       	sbci	r26, 0x01	; 1
    2bdc:	a6 95       	lsr	r26
    2bde:	8f ef       	ldi	r24, 0xFF	; 255
    2be0:	81 1d       	adc	r24, r1
    2be2:	81 1d       	adc	r24, r1
    2be4:	08 95       	ret

00002be6 <__fp_inf>:
    2be6:	97 f9       	bld	r25, 7
    2be8:	9f 67       	ori	r25, 0x7F	; 127
    2bea:	80 e8       	ldi	r24, 0x80	; 128
    2bec:	70 e0       	ldi	r23, 0x00	; 0
    2bee:	60 e0       	ldi	r22, 0x00	; 0
    2bf0:	08 95       	ret

00002bf2 <__fp_mintl>:
    2bf2:	88 23       	and	r24, r24
    2bf4:	71 f4       	brne	.+28     	; 0x2c12 <__fp_mintl+0x20>
    2bf6:	77 23       	and	r23, r23
    2bf8:	21 f0       	breq	.+8      	; 0x2c02 <__fp_mintl+0x10>
    2bfa:	98 50       	subi	r25, 0x08	; 8
    2bfc:	87 2b       	or	r24, r23
    2bfe:	76 2f       	mov	r23, r22
    2c00:	07 c0       	rjmp	.+14     	; 0x2c10 <__fp_mintl+0x1e>
    2c02:	66 23       	and	r22, r22
    2c04:	11 f4       	brne	.+4      	; 0x2c0a <__fp_mintl+0x18>
    2c06:	99 27       	eor	r25, r25
    2c08:	0d c0       	rjmp	.+26     	; 0x2c24 <__fp_mintl+0x32>
    2c0a:	90 51       	subi	r25, 0x10	; 16
    2c0c:	86 2b       	or	r24, r22
    2c0e:	70 e0       	ldi	r23, 0x00	; 0
    2c10:	60 e0       	ldi	r22, 0x00	; 0
    2c12:	2a f0       	brmi	.+10     	; 0x2c1e <__fp_mintl+0x2c>
    2c14:	9a 95       	dec	r25
    2c16:	66 0f       	add	r22, r22
    2c18:	77 1f       	adc	r23, r23
    2c1a:	88 1f       	adc	r24, r24
    2c1c:	da f7       	brpl	.-10     	; 0x2c14 <__fp_mintl+0x22>
    2c1e:	88 0f       	add	r24, r24
    2c20:	96 95       	lsr	r25
    2c22:	87 95       	ror	r24
    2c24:	97 f9       	bld	r25, 7
    2c26:	08 95       	ret

00002c28 <__fp_mpack>:
    2c28:	9f 3f       	cpi	r25, 0xFF	; 255
    2c2a:	31 f0       	breq	.+12     	; 0x2c38 <__fp_mpack_finite+0xc>

00002c2c <__fp_mpack_finite>:
    2c2c:	91 50       	subi	r25, 0x01	; 1
    2c2e:	20 f4       	brcc	.+8      	; 0x2c38 <__fp_mpack_finite+0xc>
    2c30:	87 95       	ror	r24
    2c32:	77 95       	ror	r23
    2c34:	67 95       	ror	r22
    2c36:	b7 95       	ror	r27
    2c38:	88 0f       	add	r24, r24
    2c3a:	91 1d       	adc	r25, r1
    2c3c:	96 95       	lsr	r25
    2c3e:	87 95       	ror	r24
    2c40:	97 f9       	bld	r25, 7
    2c42:	08 95       	ret

00002c44 <__fp_nan>:
    2c44:	9f ef       	ldi	r25, 0xFF	; 255
    2c46:	80 ec       	ldi	r24, 0xC0	; 192
    2c48:	08 95       	ret

00002c4a <__fp_pscA>:
    2c4a:	00 24       	eor	r0, r0
    2c4c:	0a 94       	dec	r0
    2c4e:	16 16       	cp	r1, r22
    2c50:	17 06       	cpc	r1, r23
    2c52:	18 06       	cpc	r1, r24
    2c54:	09 06       	cpc	r0, r25
    2c56:	08 95       	ret

00002c58 <__fp_pscB>:
    2c58:	00 24       	eor	r0, r0
    2c5a:	0a 94       	dec	r0
    2c5c:	12 16       	cp	r1, r18
    2c5e:	13 06       	cpc	r1, r19
    2c60:	14 06       	cpc	r1, r20
    2c62:	05 06       	cpc	r0, r21
    2c64:	08 95       	ret

00002c66 <__fp_round>:
    2c66:	09 2e       	mov	r0, r25
    2c68:	03 94       	inc	r0
    2c6a:	00 0c       	add	r0, r0
    2c6c:	11 f4       	brne	.+4      	; 0x2c72 <__fp_round+0xc>
    2c6e:	88 23       	and	r24, r24
    2c70:	52 f0       	brmi	.+20     	; 0x2c86 <__fp_round+0x20>
    2c72:	bb 0f       	add	r27, r27
    2c74:	40 f4       	brcc	.+16     	; 0x2c86 <__fp_round+0x20>
    2c76:	bf 2b       	or	r27, r31
    2c78:	11 f4       	brne	.+4      	; 0x2c7e <__fp_round+0x18>
    2c7a:	60 ff       	sbrs	r22, 0
    2c7c:	04 c0       	rjmp	.+8      	; 0x2c86 <__fp_round+0x20>
    2c7e:	6f 5f       	subi	r22, 0xFF	; 255
    2c80:	7f 4f       	sbci	r23, 0xFF	; 255
    2c82:	8f 4f       	sbci	r24, 0xFF	; 255
    2c84:	9f 4f       	sbci	r25, 0xFF	; 255
    2c86:	08 95       	ret

00002c88 <__fp_split3>:
    2c88:	57 fd       	sbrc	r21, 7
    2c8a:	90 58       	subi	r25, 0x80	; 128
    2c8c:	44 0f       	add	r20, r20
    2c8e:	55 1f       	adc	r21, r21
    2c90:	59 f0       	breq	.+22     	; 0x2ca8 <__fp_splitA+0x10>
    2c92:	5f 3f       	cpi	r21, 0xFF	; 255
    2c94:	71 f0       	breq	.+28     	; 0x2cb2 <__fp_splitA+0x1a>
    2c96:	47 95       	ror	r20

00002c98 <__fp_splitA>:
    2c98:	88 0f       	add	r24, r24
    2c9a:	97 fb       	bst	r25, 7
    2c9c:	99 1f       	adc	r25, r25
    2c9e:	61 f0       	breq	.+24     	; 0x2cb8 <__fp_splitA+0x20>
    2ca0:	9f 3f       	cpi	r25, 0xFF	; 255
    2ca2:	79 f0       	breq	.+30     	; 0x2cc2 <__fp_splitA+0x2a>
    2ca4:	87 95       	ror	r24
    2ca6:	08 95       	ret
    2ca8:	12 16       	cp	r1, r18
    2caa:	13 06       	cpc	r1, r19
    2cac:	14 06       	cpc	r1, r20
    2cae:	55 1f       	adc	r21, r21
    2cb0:	f2 cf       	rjmp	.-28     	; 0x2c96 <__fp_split3+0xe>
    2cb2:	46 95       	lsr	r20
    2cb4:	f1 df       	rcall	.-30     	; 0x2c98 <__fp_splitA>
    2cb6:	08 c0       	rjmp	.+16     	; 0x2cc8 <__fp_splitA+0x30>
    2cb8:	16 16       	cp	r1, r22
    2cba:	17 06       	cpc	r1, r23
    2cbc:	18 06       	cpc	r1, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	f1 cf       	rjmp	.-30     	; 0x2ca4 <__fp_splitA+0xc>
    2cc2:	86 95       	lsr	r24
    2cc4:	71 05       	cpc	r23, r1
    2cc6:	61 05       	cpc	r22, r1
    2cc8:	08 94       	sec
    2cca:	08 95       	ret

00002ccc <__fp_trunc>:
    2ccc:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__fp_splitA>
    2cd0:	a0 f0       	brcs	.+40     	; 0x2cfa <__fp_trunc+0x2e>
    2cd2:	be e7       	ldi	r27, 0x7E	; 126
    2cd4:	b9 17       	cp	r27, r25
    2cd6:	88 f4       	brcc	.+34     	; 0x2cfa <__fp_trunc+0x2e>
    2cd8:	bb 27       	eor	r27, r27
    2cda:	9f 38       	cpi	r25, 0x8F	; 143
    2cdc:	60 f4       	brcc	.+24     	; 0x2cf6 <__fp_trunc+0x2a>
    2cde:	16 16       	cp	r1, r22
    2ce0:	b1 1d       	adc	r27, r1
    2ce2:	67 2f       	mov	r22, r23
    2ce4:	78 2f       	mov	r23, r24
    2ce6:	88 27       	eor	r24, r24
    2ce8:	98 5f       	subi	r25, 0xF8	; 248
    2cea:	f7 cf       	rjmp	.-18     	; 0x2cda <__fp_trunc+0xe>
    2cec:	86 95       	lsr	r24
    2cee:	77 95       	ror	r23
    2cf0:	67 95       	ror	r22
    2cf2:	b1 1d       	adc	r27, r1
    2cf4:	93 95       	inc	r25
    2cf6:	96 39       	cpi	r25, 0x96	; 150
    2cf8:	c8 f3       	brcs	.-14     	; 0x2cec <__fp_trunc+0x20>
    2cfa:	08 95       	ret

00002cfc <__fp_zero>:
    2cfc:	e8 94       	clt

00002cfe <__fp_szero>:
    2cfe:	bb 27       	eor	r27, r27
    2d00:	66 27       	eor	r22, r22
    2d02:	77 27       	eor	r23, r23
    2d04:	cb 01       	movw	r24, r22
    2d06:	97 f9       	bld	r25, 7
    2d08:	08 95       	ret

00002d0a <__gesf2>:
    2d0a:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <__fp_cmp>
    2d0e:	08 f4       	brcc	.+2      	; 0x2d12 <__gesf2+0x8>
    2d10:	8f ef       	ldi	r24, 0xFF	; 255
    2d12:	08 95       	ret

00002d14 <__mulsf3>:
    2d14:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__mulsf3x>
    2d18:	0c 94 33 16 	jmp	0x2c66	; 0x2c66 <__fp_round>
    2d1c:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <__fp_pscA>
    2d20:	38 f0       	brcs	.+14     	; 0x2d30 <__mulsf3+0x1c>
    2d22:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__fp_pscB>
    2d26:	20 f0       	brcs	.+8      	; 0x2d30 <__mulsf3+0x1c>
    2d28:	95 23       	and	r25, r21
    2d2a:	11 f0       	breq	.+4      	; 0x2d30 <__mulsf3+0x1c>
    2d2c:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__fp_inf>
    2d30:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__fp_nan>
    2d34:	11 24       	eor	r1, r1
    2d36:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__fp_szero>

00002d3a <__mulsf3x>:
    2d3a:	0e 94 44 16 	call	0x2c88	; 0x2c88 <__fp_split3>
    2d3e:	70 f3       	brcs	.-36     	; 0x2d1c <__mulsf3+0x8>

00002d40 <__mulsf3_pse>:
    2d40:	95 9f       	mul	r25, r21
    2d42:	c1 f3       	breq	.-16     	; 0x2d34 <__mulsf3+0x20>
    2d44:	95 0f       	add	r25, r21
    2d46:	50 e0       	ldi	r21, 0x00	; 0
    2d48:	55 1f       	adc	r21, r21
    2d4a:	62 9f       	mul	r22, r18
    2d4c:	f0 01       	movw	r30, r0
    2d4e:	72 9f       	mul	r23, r18
    2d50:	bb 27       	eor	r27, r27
    2d52:	f0 0d       	add	r31, r0
    2d54:	b1 1d       	adc	r27, r1
    2d56:	63 9f       	mul	r22, r19
    2d58:	aa 27       	eor	r26, r26
    2d5a:	f0 0d       	add	r31, r0
    2d5c:	b1 1d       	adc	r27, r1
    2d5e:	aa 1f       	adc	r26, r26
    2d60:	64 9f       	mul	r22, r20
    2d62:	66 27       	eor	r22, r22
    2d64:	b0 0d       	add	r27, r0
    2d66:	a1 1d       	adc	r26, r1
    2d68:	66 1f       	adc	r22, r22
    2d6a:	82 9f       	mul	r24, r18
    2d6c:	22 27       	eor	r18, r18
    2d6e:	b0 0d       	add	r27, r0
    2d70:	a1 1d       	adc	r26, r1
    2d72:	62 1f       	adc	r22, r18
    2d74:	73 9f       	mul	r23, r19
    2d76:	b0 0d       	add	r27, r0
    2d78:	a1 1d       	adc	r26, r1
    2d7a:	62 1f       	adc	r22, r18
    2d7c:	83 9f       	mul	r24, r19
    2d7e:	a0 0d       	add	r26, r0
    2d80:	61 1d       	adc	r22, r1
    2d82:	22 1f       	adc	r18, r18
    2d84:	74 9f       	mul	r23, r20
    2d86:	33 27       	eor	r19, r19
    2d88:	a0 0d       	add	r26, r0
    2d8a:	61 1d       	adc	r22, r1
    2d8c:	23 1f       	adc	r18, r19
    2d8e:	84 9f       	mul	r24, r20
    2d90:	60 0d       	add	r22, r0
    2d92:	21 1d       	adc	r18, r1
    2d94:	82 2f       	mov	r24, r18
    2d96:	76 2f       	mov	r23, r22
    2d98:	6a 2f       	mov	r22, r26
    2d9a:	11 24       	eor	r1, r1
    2d9c:	9f 57       	subi	r25, 0x7F	; 127
    2d9e:	50 40       	sbci	r21, 0x00	; 0
    2da0:	9a f0       	brmi	.+38     	; 0x2dc8 <__mulsf3_pse+0x88>
    2da2:	f1 f0       	breq	.+60     	; 0x2de0 <__mulsf3_pse+0xa0>
    2da4:	88 23       	and	r24, r24
    2da6:	4a f0       	brmi	.+18     	; 0x2dba <__mulsf3_pse+0x7a>
    2da8:	ee 0f       	add	r30, r30
    2daa:	ff 1f       	adc	r31, r31
    2dac:	bb 1f       	adc	r27, r27
    2dae:	66 1f       	adc	r22, r22
    2db0:	77 1f       	adc	r23, r23
    2db2:	88 1f       	adc	r24, r24
    2db4:	91 50       	subi	r25, 0x01	; 1
    2db6:	50 40       	sbci	r21, 0x00	; 0
    2db8:	a9 f7       	brne	.-22     	; 0x2da4 <__mulsf3_pse+0x64>
    2dba:	9e 3f       	cpi	r25, 0xFE	; 254
    2dbc:	51 05       	cpc	r21, r1
    2dbe:	80 f0       	brcs	.+32     	; 0x2de0 <__mulsf3_pse+0xa0>
    2dc0:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__fp_inf>
    2dc4:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__fp_szero>
    2dc8:	5f 3f       	cpi	r21, 0xFF	; 255
    2dca:	e4 f3       	brlt	.-8      	; 0x2dc4 <__mulsf3_pse+0x84>
    2dcc:	98 3e       	cpi	r25, 0xE8	; 232
    2dce:	d4 f3       	brlt	.-12     	; 0x2dc4 <__mulsf3_pse+0x84>
    2dd0:	86 95       	lsr	r24
    2dd2:	77 95       	ror	r23
    2dd4:	67 95       	ror	r22
    2dd6:	b7 95       	ror	r27
    2dd8:	f7 95       	ror	r31
    2dda:	e7 95       	ror	r30
    2ddc:	9f 5f       	subi	r25, 0xFF	; 255
    2dde:	c1 f7       	brne	.-16     	; 0x2dd0 <__mulsf3_pse+0x90>
    2de0:	fe 2b       	or	r31, r30
    2de2:	88 0f       	add	r24, r24
    2de4:	91 1d       	adc	r25, r1
    2de6:	96 95       	lsr	r25
    2de8:	87 95       	ror	r24
    2dea:	97 f9       	bld	r25, 7
    2dec:	08 95       	ret

00002dee <sin>:
    2dee:	9f 93       	push	r25
    2df0:	0e 94 01 17 	call	0x2e02	; 0x2e02 <__fp_rempio2>
    2df4:	0f 90       	pop	r0
    2df6:	07 fc       	sbrc	r0, 7
    2df8:	ee 5f       	subi	r30, 0xFE	; 254
    2dfa:	0c 94 2a 17 	jmp	0x2e54	; 0x2e54 <__fp_sinus>
    2dfe:	0c 94 22 16 	jmp	0x2c44	; 0x2c44 <__fp_nan>

00002e02 <__fp_rempio2>:
    2e02:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <__fp_splitA>
    2e06:	d8 f3       	brcs	.-10     	; 0x2dfe <sin+0x10>
    2e08:	e8 94       	clt
    2e0a:	e0 e0       	ldi	r30, 0x00	; 0
    2e0c:	bb 27       	eor	r27, r27
    2e0e:	9f 57       	subi	r25, 0x7F	; 127
    2e10:	f0 f0       	brcs	.+60     	; 0x2e4e <__fp_rempio2+0x4c>
    2e12:	2a ed       	ldi	r18, 0xDA	; 218
    2e14:	3f e0       	ldi	r19, 0x0F	; 15
    2e16:	49 ec       	ldi	r20, 0xC9	; 201
    2e18:	06 c0       	rjmp	.+12     	; 0x2e26 <__fp_rempio2+0x24>
    2e1a:	ee 0f       	add	r30, r30
    2e1c:	bb 0f       	add	r27, r27
    2e1e:	66 1f       	adc	r22, r22
    2e20:	77 1f       	adc	r23, r23
    2e22:	88 1f       	adc	r24, r24
    2e24:	28 f0       	brcs	.+10     	; 0x2e30 <__fp_rempio2+0x2e>
    2e26:	b2 3a       	cpi	r27, 0xA2	; 162
    2e28:	62 07       	cpc	r22, r18
    2e2a:	73 07       	cpc	r23, r19
    2e2c:	84 07       	cpc	r24, r20
    2e2e:	28 f0       	brcs	.+10     	; 0x2e3a <__fp_rempio2+0x38>
    2e30:	b2 5a       	subi	r27, 0xA2	; 162
    2e32:	62 0b       	sbc	r22, r18
    2e34:	73 0b       	sbc	r23, r19
    2e36:	84 0b       	sbc	r24, r20
    2e38:	e3 95       	inc	r30
    2e3a:	9a 95       	dec	r25
    2e3c:	72 f7       	brpl	.-36     	; 0x2e1a <__fp_rempio2+0x18>
    2e3e:	80 38       	cpi	r24, 0x80	; 128
    2e40:	30 f4       	brcc	.+12     	; 0x2e4e <__fp_rempio2+0x4c>
    2e42:	9a 95       	dec	r25
    2e44:	bb 0f       	add	r27, r27
    2e46:	66 1f       	adc	r22, r22
    2e48:	77 1f       	adc	r23, r23
    2e4a:	88 1f       	adc	r24, r24
    2e4c:	d2 f7       	brpl	.-12     	; 0x2e42 <__fp_rempio2+0x40>
    2e4e:	90 48       	sbci	r25, 0x80	; 128
    2e50:	0c 94 16 16 	jmp	0x2c2c	; 0x2c2c <__fp_mpack_finite>

00002e54 <__fp_sinus>:
    2e54:	ef 93       	push	r30
    2e56:	e0 ff       	sbrs	r30, 0
    2e58:	07 c0       	rjmp	.+14     	; 0x2e68 <__fp_sinus+0x14>
    2e5a:	a2 ea       	ldi	r26, 0xA2	; 162
    2e5c:	2a ed       	ldi	r18, 0xDA	; 218
    2e5e:	3f e0       	ldi	r19, 0x0F	; 15
    2e60:	49 ec       	ldi	r20, 0xC9	; 201
    2e62:	5f eb       	ldi	r21, 0xBF	; 191
    2e64:	0e 94 80 14 	call	0x2900	; 0x2900 <__addsf3x>
    2e68:	0e 94 33 16 	call	0x2c66	; 0x2c66 <__fp_round>
    2e6c:	0f 90       	pop	r0
    2e6e:	03 94       	inc	r0
    2e70:	01 fc       	sbrc	r0, 1
    2e72:	90 58       	subi	r25, 0x80	; 128
    2e74:	e4 e5       	ldi	r30, 0x54	; 84
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	0c 94 3e 17 	jmp	0x2e7c	; 0x2e7c <__fp_powsodd>

00002e7c <__fp_powsodd>:
    2e7c:	9f 93       	push	r25
    2e7e:	8f 93       	push	r24
    2e80:	7f 93       	push	r23
    2e82:	6f 93       	push	r22
    2e84:	ff 93       	push	r31
    2e86:	ef 93       	push	r30
    2e88:	9b 01       	movw	r18, r22
    2e8a:	ac 01       	movw	r20, r24
    2e8c:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <__mulsf3>
    2e90:	ef 91       	pop	r30
    2e92:	ff 91       	pop	r31
    2e94:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <__fp_powser>
    2e98:	2f 91       	pop	r18
    2e9a:	3f 91       	pop	r19
    2e9c:	4f 91       	pop	r20
    2e9e:	5f 91       	pop	r21
    2ea0:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <__mulsf3>

00002ea4 <__fp_powser>:
    2ea4:	df 93       	push	r29
    2ea6:	cf 93       	push	r28
    2ea8:	1f 93       	push	r17
    2eaa:	0f 93       	push	r16
    2eac:	ff 92       	push	r15
    2eae:	ef 92       	push	r14
    2eb0:	df 92       	push	r13
    2eb2:	7b 01       	movw	r14, r22
    2eb4:	8c 01       	movw	r16, r24
    2eb6:	68 94       	set
    2eb8:	06 c0       	rjmp	.+12     	; 0x2ec6 <__fp_powser+0x22>
    2eba:	da 2e       	mov	r13, r26
    2ebc:	ef 01       	movw	r28, r30
    2ebe:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <__mulsf3x>
    2ec2:	fe 01       	movw	r30, r28
    2ec4:	e8 94       	clt
    2ec6:	a5 91       	lpm	r26, Z+
    2ec8:	25 91       	lpm	r18, Z+
    2eca:	35 91       	lpm	r19, Z+
    2ecc:	45 91       	lpm	r20, Z+
    2ece:	55 91       	lpm	r21, Z+
    2ed0:	a6 f3       	brts	.-24     	; 0x2eba <__fp_powser+0x16>
    2ed2:	ef 01       	movw	r28, r30
    2ed4:	0e 94 80 14 	call	0x2900	; 0x2900 <__addsf3x>
    2ed8:	fe 01       	movw	r30, r28
    2eda:	97 01       	movw	r18, r14
    2edc:	a8 01       	movw	r20, r16
    2ede:	da 94       	dec	r13
    2ee0:	69 f7       	brne	.-38     	; 0x2ebc <__fp_powser+0x18>
    2ee2:	df 90       	pop	r13
    2ee4:	ef 90       	pop	r14
    2ee6:	ff 90       	pop	r15
    2ee8:	0f 91       	pop	r16
    2eea:	1f 91       	pop	r17
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	08 95       	ret

00002ef2 <__divmodhi4>:
    2ef2:	97 fb       	bst	r25, 7
    2ef4:	07 2e       	mov	r0, r23
    2ef6:	16 f4       	brtc	.+4      	; 0x2efc <__divmodhi4+0xa>
    2ef8:	00 94       	com	r0
    2efa:	07 d0       	rcall	.+14     	; 0x2f0a <__divmodhi4_neg1>
    2efc:	77 fd       	sbrc	r23, 7
    2efe:	09 d0       	rcall	.+18     	; 0x2f12 <__divmodhi4_neg2>
    2f00:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <__udivmodhi4>
    2f04:	07 fc       	sbrc	r0, 7
    2f06:	05 d0       	rcall	.+10     	; 0x2f12 <__divmodhi4_neg2>
    2f08:	3e f4       	brtc	.+14     	; 0x2f18 <__divmodhi4_exit>

00002f0a <__divmodhi4_neg1>:
    2f0a:	90 95       	com	r25
    2f0c:	81 95       	neg	r24
    2f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f10:	08 95       	ret

00002f12 <__divmodhi4_neg2>:
    2f12:	70 95       	com	r23
    2f14:	61 95       	neg	r22
    2f16:	7f 4f       	sbci	r23, 0xFF	; 255

00002f18 <__divmodhi4_exit>:
    2f18:	08 95       	ret

00002f1a <__umulhisi3>:
    2f1a:	a2 9f       	mul	r26, r18
    2f1c:	b0 01       	movw	r22, r0
    2f1e:	b3 9f       	mul	r27, r19
    2f20:	c0 01       	movw	r24, r0
    2f22:	a3 9f       	mul	r26, r19
    2f24:	70 0d       	add	r23, r0
    2f26:	81 1d       	adc	r24, r1
    2f28:	11 24       	eor	r1, r1
    2f2a:	91 1d       	adc	r25, r1
    2f2c:	b2 9f       	mul	r27, r18
    2f2e:	70 0d       	add	r23, r0
    2f30:	81 1d       	adc	r24, r1
    2f32:	11 24       	eor	r1, r1
    2f34:	91 1d       	adc	r25, r1
    2f36:	08 95       	ret

00002f38 <__udivmodhi4>:
    2f38:	aa 1b       	sub	r26, r26
    2f3a:	bb 1b       	sub	r27, r27
    2f3c:	51 e1       	ldi	r21, 0x11	; 17
    2f3e:	07 c0       	rjmp	.+14     	; 0x2f4e <__udivmodhi4_ep>

00002f40 <__udivmodhi4_loop>:
    2f40:	aa 1f       	adc	r26, r26
    2f42:	bb 1f       	adc	r27, r27
    2f44:	a6 17       	cp	r26, r22
    2f46:	b7 07       	cpc	r27, r23
    2f48:	10 f0       	brcs	.+4      	; 0x2f4e <__udivmodhi4_ep>
    2f4a:	a6 1b       	sub	r26, r22
    2f4c:	b7 0b       	sbc	r27, r23

00002f4e <__udivmodhi4_ep>:
    2f4e:	88 1f       	adc	r24, r24
    2f50:	99 1f       	adc	r25, r25
    2f52:	5a 95       	dec	r21
    2f54:	a9 f7       	brne	.-22     	; 0x2f40 <__udivmodhi4_loop>
    2f56:	80 95       	com	r24
    2f58:	90 95       	com	r25
    2f5a:	bc 01       	movw	r22, r24
    2f5c:	cd 01       	movw	r24, r26
    2f5e:	08 95       	ret

00002f60 <_exit>:
    2f60:	f8 94       	cli

00002f62 <__stop_program>:
    2f62:	ff cf       	rjmp	.-2      	; 0x2f62 <__stop_program>
