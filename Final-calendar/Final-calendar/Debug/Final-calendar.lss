
Final-calendar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002904  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002904  00002998  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800074  00800074  000029ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000029ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000029dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00002a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f4e  00000000  00000000  00002b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000844  00000000  00000000  00004a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000110a  00000000  00000000  00005292  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a4  00000000  00000000  0000639c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056c  00000000  00000000  00006840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015d0  00000000  00000000  00006dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000837c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__vector_1>
       8:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__vector_2>
       c:	0c 94 aa 0f 	jmp	0x1f54	; 0x1f54 <__vector_3>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 a9 0b 	jmp	0x1752	; 0x1752 <__vector_11>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <__stack+0x15f>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	10 e0       	ldi	r17, 0x00	; 0
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	e4 e0       	ldi	r30, 0x04	; 4
      86:	f9 e2       	ldi	r31, 0x29	; 41
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	a4 37       	cpi	r26, 0x74	; 116
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	20 e0       	ldi	r18, 0x00	; 0
      96:	a4 e7       	ldi	r26, 0x74	; 116
      98:	b0 e0       	ldi	r27, 0x00	; 0
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a4 39       	cpi	r26, 0x94	; 148
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 5f 0b 	call	0x16be	; 0x16be <main>
      a8:	0c 94 80 14 	jmp	0x2900	; 0x2900 <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <TWI_Init>:
#define TWI_Clear_TWINT	(1<<TWINT)|(1<<TWEN)		    //0x84 : xoa TWIN de bat dau doc, doc xong thi NOT ACK
#define TWI_Read_ACK	(1<<TWINT)|(1<<TWEN)|(1<<TWEA)	//0xC4 : xoa TWIN de bat dau doc, sau khi doc set ACK

//Khoi dong TWI
void TWI_Init(void){
	TWSR=0x00; //Prescaler=1
      b0:	11 b8       	out	0x01, r1	; 1
	TWBR=_100K;
      b2:	80 e2       	ldi	r24, 0x20	; 32
      b4:	80 b9       	out	0x00, r24	; 0
	TWCR=(1<<TWINT)|(1<<TWEN);
      b6:	84 e8       	ldi	r24, 0x84	; 132
      b8:	86 bf       	out	0x36, r24	; 54
      ba:	08 95       	ret

000000bc <TWI_DS1307_wadr>:

///chon dia chi thanh ghi can thao tac, dummy write
//Addr: dia thi thanh ghi can ghi
uint8_t TWI_DS1307_wadr(uint8_t Addr){ 
		
	TWCR=TWI_START;						 //goi START condition
      bc:	94 ea       	ldi	r25, 0xA4	; 164
      be:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
      c0:	06 b6       	in	r0, 0x36	; 54
      c2:	07 fe       	sbrs	r0, 7
      c4:	fd cf       	rjmp	.-6      	; 0xc0 <TWI_DS1307_wadr+0x4>
	if((TWSR&0xF8) !=0x08) return TWSR; //neu goi Start co loi thi thoat
      c6:	91 b1       	in	r25, 0x01	; 1
      c8:	98 7f       	andi	r25, 0xF8	; 248
      ca:	98 30       	cpi	r25, 0x08	; 8
      cc:	11 f0       	breq	.+4      	; 0xd2 <TWI_DS1307_wadr+0x16>
      ce:	81 b1       	in	r24, 0x01	; 1
      d0:	08 95       	ret
	
	TWDR=(DS1307_SLA<<1)+TWI_W; 		 //dia chi DS va bit W 	
      d2:	90 ed       	ldi	r25, 0xD0	; 208
      d4:	93 b9       	out	0x03, r25	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT, bat dau goi SLA
      d6:	94 e8       	ldi	r25, 0x84	; 132
      d8:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
      da:	06 b6       	in	r0, 0x36	; 54
      dc:	07 fe       	sbrs	r0, 7
      de:	fd cf       	rjmp	.-6      	; 0xda <TWI_DS1307_wadr+0x1e>
	if((TWSR&0xF8) !=0x18) return TWSR; //device address send error, escape anyway
      e0:	91 b1       	in	r25, 0x01	; 1
      e2:	98 7f       	andi	r25, 0xF8	; 248
      e4:	98 31       	cpi	r25, 0x18	; 24
      e6:	11 f0       	breq	.+4      	; 0xec <TWI_DS1307_wadr+0x30>
      e8:	81 b1       	in	r24, 0x01	; 1
      ea:	08 95       	ret
		
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
      ec:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 				 //start send address by cleaning TWINT
      ee:	84 e8       	ldi	r24, 0x84	; 132
      f0:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
      f2:	06 b6       	in	r0, 0x36	; 54
      f4:	07 fe       	sbrs	r0, 7
      f6:	fd cf       	rjmp	.-6      	; 0xf2 <TWI_DS1307_wadr+0x36>
	if((TWSR&0xF8) !=0x28) return TWSR; //neu du lieu goi ko thanh cong thi thoat
      f8:	81 b1       	in	r24, 0x01	; 1
      fa:	88 7f       	andi	r24, 0xF8	; 248
      fc:	88 32       	cpi	r24, 0x28	; 40
      fe:	11 f0       	breq	.+4      	; 0x104 <TWI_DS1307_wadr+0x48>
     100:	81 b1       	in	r24, 0x01	; 1
     102:	08 95       	ret
	
	TWCR=TWI_STOP;					     //STOP condition
     104:	84 e9       	ldi	r24, 0x94	; 148
     106:	86 bf       	out	0x36, r24	; 54
	return 0;
     108:	80 e0       	ldi	r24, 0x00	; 0
}
     10a:	08 95       	ret

0000010c <TWI_DS1307_wblock>:
//Addr: dia thi thanh ghi can ghi
//Data[]: mang du lieu
//len: so luong byte can ghi
uint8_t TWI_DS1307_wblock(uint8_t Addr, uint8_t Data[], uint8_t len){
		
	TWCR=TWI_START; 					 //goi START condition
     10c:	94 ea       	ldi	r25, 0xA4	; 164
     10e:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
     110:	06 b6       	in	r0, 0x36	; 54
     112:	07 fe       	sbrs	r0, 7
     114:	fd cf       	rjmp	.-6      	; 0x110 <TWI_DS1307_wblock+0x4>
	if((TWSR&0xF8) !=0x08) return TWSR; //neu goi Start co loi thi thoat
     116:	91 b1       	in	r25, 0x01	; 1
     118:	98 7f       	andi	r25, 0xF8	; 248
     11a:	98 30       	cpi	r25, 0x08	; 8
     11c:	11 f0       	breq	.+4      	; 0x122 <TWI_DS1307_wblock+0x16>
     11e:	81 b1       	in	r24, 0x01	; 1
     120:	08 95       	ret
	
	TWDR=(DS1307_SLA<<1)+TWI_W; 		 //dia chi DS va bit W 	
     122:	90 ed       	ldi	r25, 0xD0	; 208
     124:	93 b9       	out	0x03, r25	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
     126:	94 e8       	ldi	r25, 0x84	; 132
     128:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
     12a:	06 b6       	in	r0, 0x36	; 54
     12c:	07 fe       	sbrs	r0, 7
     12e:	fd cf       	rjmp	.-6      	; 0x12a <TWI_DS1307_wblock+0x1e>
	if((TWSR&0xF8) !=0x18) return TWSR; //neu co loi truyen SLA, thoat
     130:	91 b1       	in	r25, 0x01	; 1
     132:	98 7f       	andi	r25, 0xF8	; 248
     134:	98 31       	cpi	r25, 0x18	; 24
     136:	11 f0       	breq	.+4      	; 0x13c <TWI_DS1307_wblock+0x30>
     138:	81 b1       	in	r24, 0x01	; 1
     13a:	08 95       	ret
	
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
     13c:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
     13e:	84 e8       	ldi	r24, 0x84	; 132
     140:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
     142:	06 b6       	in	r0, 0x36	; 54
     144:	07 fe       	sbrs	r0, 7
     146:	fd cf       	rjmp	.-6      	; 0x142 <TWI_DS1307_wblock+0x36>
	if((TWSR&0xF8) !=0x28) return TWSR; 
     148:	81 b1       	in	r24, 0x01	; 1
     14a:	88 7f       	andi	r24, 0xF8	; 248
     14c:	88 32       	cpi	r24, 0x28	; 40
     14e:	a1 f0       	breq	.+40     	; 0x178 <TWI_DS1307_wblock+0x6c>
     150:	81 b1       	in	r24, 0x01	; 1
     152:	08 95       	ret

	for (uint8_t i=0; i <len; i++){
		TWDR=Data[i]; 						 //chuan bi xuat du lieu
     154:	fb 01       	movw	r30, r22
     156:	e8 0f       	add	r30, r24
     158:	f1 1d       	adc	r31, r1
     15a:	90 81       	ld	r25, Z
     15c:	93 b9       	out	0x03, r25	; 3
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
     15e:	94 e8       	ldi	r25, 0x84	; 132
     160:	96 bf       	out	0x36, r25	; 54
		while((TWCR & 0x80)==0x00);	 	 //cho TWINT bit=1
     162:	06 b6       	in	r0, 0x36	; 54
     164:	07 fe       	sbrs	r0, 7
     166:	fd cf       	rjmp	.-6      	; 0x162 <TWI_DS1307_wblock+0x56>
		if((TWSR&0xF8) !=0x28) return TWSR; //neu status ko phai la 0x28 thi return
     168:	91 b1       	in	r25, 0x01	; 1
     16a:	98 7f       	andi	r25, 0xF8	; 248
     16c:	98 32       	cpi	r25, 0x28	; 40
     16e:	11 f0       	breq	.+4      	; 0x174 <TWI_DS1307_wblock+0x68>
     170:	81 b1       	in	r24, 0x01	; 1
     172:	08 95       	ret
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
	if((TWSR&0xF8) !=0x28) return TWSR; 

	for (uint8_t i=0; i <len; i++){
     174:	8f 5f       	subi	r24, 0xFF	; 255
     176:	01 c0       	rjmp	.+2      	; 0x17a <TWI_DS1307_wblock+0x6e>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	84 17       	cp	r24, r20
     17c:	58 f3       	brcs	.-42     	; 0x154 <TWI_DS1307_wblock+0x48>
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
		while((TWCR & 0x80)==0x00);	 	 //cho TWINT bit=1
		if((TWSR&0xF8) !=0x28) return TWSR; //neu status ko phai la 0x28 thi return
	}
	
	TWCR=TWI_STOP;							 //STOP condition
     17e:	84 e9       	ldi	r24, 0x94	; 148
     180:	86 bf       	out	0x36, r24	; 54
	return 0;
     182:	80 e0       	ldi	r24, 0x00	; 0
}
     184:	08 95       	ret

00000186 <TWI_DS1307_rblock>:

//doc 1 mang tu DS
uint8_t TWI_DS1307_rblock(uint8_t Data[], uint8_t len ){ 	
     186:	dc 01       	movw	r26, r24
	uint8_t i;
	
	TWCR=TWI_START; // Start--------------------------------------------------------------------
     188:	84 ea       	ldi	r24, 0xA4	; 164
     18a:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x08));	 //cho TWINT bit=1 va goi START thanh cong
     18c:	06 b6       	in	r0, 0x36	; 54
     18e:	07 fe       	sbrs	r0, 7
     190:	fd cf       	rjmp	.-6      	; 0x18c <TWI_DS1307_rblock+0x6>
     192:	81 b1       	in	r24, 0x01	; 1
     194:	88 7f       	andi	r24, 0xF8	; 248
     196:	88 30       	cpi	r24, 0x08	; 8
     198:	c9 f7       	brne	.-14     	; 0x18c <TWI_DS1307_rblock+0x6>
	
	TWDR=(DS1307_SLA<<1)+TWI_R; 							 //goi dia chi SLA +READ	
     19a:	81 ed       	ldi	r24, 0xD1	; 209
     19c:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 									 //bat dau, xoa TWINT
     19e:	84 e8       	ldi	r24, 0x84	; 132
     1a0:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x40));	 //cho TWINT bit=1	va goi SLA thanh cong
     1a2:	06 b6       	in	r0, 0x36	; 54
     1a4:	07 fe       	sbrs	r0, 7
     1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <TWI_DS1307_rblock+0x1c>
     1a8:	91 b1       	in	r25, 0x01	; 1
     1aa:	98 7f       	andi	r25, 0xF8	; 248
     1ac:	90 34       	cpi	r25, 0x40	; 64
     1ae:	c9 f7       	brne	.-14     	; 0x1a2 <TWI_DS1307_rblock+0x1c>
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <TWI_DS1307_rblock+0x4c>
	
	//nhan len-1 bytes dau tien---------------------
    for (i=0; i <len-1; i++){
       TWCR=TWI_Read_ACK; 									 //xoa TWINT,se goi ACK sau khi nhan moi byte
     1b4:	84 ec       	ldi	r24, 0xC4	; 196
     1b6:	86 bf       	out	0x36, r24	; 54
       while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x50));//cho TWINT bit=1 hoac nhan duoc ACK	   
     1b8:	06 b6       	in	r0, 0x36	; 54
     1ba:	07 fe       	sbrs	r0, 7
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <TWI_DS1307_rblock+0x32>
     1be:	91 b1       	in	r25, 0x01	; 1
     1c0:	98 7f       	andi	r25, 0xF8	; 248
     1c2:	90 35       	cpi	r25, 0x50	; 80
     1c4:	c9 f7       	brne	.-14     	; 0x1b8 <TWI_DS1307_rblock+0x32>
	   Data[i]=TWDR;										  //doc du lieu vao mang Data 
     1c6:	fd 01       	movw	r30, r26
     1c8:	e2 0f       	add	r30, r18
     1ca:	f1 1d       	adc	r31, r1
     1cc:	83 b1       	in	r24, 0x03	; 3
     1ce:	80 83       	st	Z, r24
	TWDR=(DS1307_SLA<<1)+TWI_R; 							 //goi dia chi SLA +READ	
	TWCR=TWI_Clear_TWINT; 									 //bat dau, xoa TWINT
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x40));	 //cho TWINT bit=1	va goi SLA thanh cong
	
	//nhan len-1 bytes dau tien---------------------
    for (i=0; i <len-1; i++){
     1d0:	2f 5f       	subi	r18, 0xFF	; 255
     1d2:	e2 2f       	mov	r30, r18
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	46 2f       	mov	r20, r22
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	41 50       	subi	r20, 0x01	; 1
     1dc:	51 09       	sbc	r21, r1
     1de:	e4 17       	cp	r30, r20
     1e0:	f5 07       	cpc	r31, r21
     1e2:	44 f3       	brlt	.-48     	; 0x1b4 <TWI_DS1307_rblock+0x2e>
       TWCR=TWI_Read_ACK; 									 //xoa TWINT,se goi ACK sau khi nhan moi byte
       while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x50));//cho TWINT bit=1 hoac nhan duoc ACK	   
	   Data[i]=TWDR;										  //doc du lieu vao mang Data 
    }
	//nhan byte cuoi
	TWCR=TWI_Clear_TWINT; 									 //xoa TWINT de nhan byte cuoi, sau do set NOT ACK
     1e4:	84 e8       	ldi	r24, 0x84	; 132
     1e6:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x58));   //cho TWIN=1 hoac trang thai not ack	
     1e8:	06 b6       	in	r0, 0x36	; 54
     1ea:	07 fe       	sbrs	r0, 7
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <TWI_DS1307_rblock+0x62>
     1ee:	91 b1       	in	r25, 0x01	; 1
     1f0:	98 7f       	andi	r25, 0xF8	; 248
     1f2:	98 35       	cpi	r25, 0x58	; 88
     1f4:	c9 f7       	brne	.-14     	; 0x1e8 <TWI_DS1307_rblock+0x62>
	Data[len-1]=TWDR;
     1f6:	86 2f       	mov	r24, r22
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	a8 0f       	add	r26, r24
     1fe:	b9 1f       	adc	r27, r25
     200:	83 b1       	in	r24, 0x03	; 3
     202:	8c 93       	st	X, r24
	
	TWCR=TWI_STOP;											 //STOP condition
     204:	84 e9       	ldi	r24, 0x94	; 148
     206:	86 bf       	out	0x36, r24	; 54
	return 0;	
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	08 95       	ret

0000020c <BCDToDec>:
*	Convert data types and decode for max7219
*/
/* Convert BCD to Dec */
uint8_t BCDToDec(uint8_t BCD){
	uint8_t L, H;
	L=BCD & 0x0F;
     20c:	38 2f       	mov	r19, r24
     20e:	3f 70       	andi	r19, 0x0F	; 15
	H=(BCD>>4)*10;
     210:	98 2f       	mov	r25, r24
     212:	92 95       	swap	r25
     214:	9f 70       	andi	r25, 0x0F	; 15
     216:	99 0f       	add	r25, r25
     218:	29 2f       	mov	r18, r25
     21a:	22 0f       	add	r18, r18
     21c:	22 0f       	add	r18, r18
     21e:	89 2f       	mov	r24, r25
     220:	82 0f       	add	r24, r18
	return (H+L);
}
     222:	83 0f       	add	r24, r19
     224:	08 95       	ret

00000226 <DecToBCD>:
/* Convert Dec to BCD */
uint8_t DecToBCD(uint8_t Dec){
	uint8_t L, H;
	L=Dec % 10;
     226:	2d ec       	ldi	r18, 0xCD	; 205
     228:	82 9f       	mul	r24, r18
     22a:	21 2d       	mov	r18, r1
     22c:	11 24       	eor	r1, r1
     22e:	92 2f       	mov	r25, r18
     230:	96 95       	lsr	r25
     232:	96 95       	lsr	r25
     234:	96 95       	lsr	r25
     236:	99 0f       	add	r25, r25
     238:	39 2f       	mov	r19, r25
     23a:	33 0f       	add	r19, r19
     23c:	33 0f       	add	r19, r19
     23e:	93 0f       	add	r25, r19
     240:	89 1b       	sub	r24, r25
	H=(Dec/10)<<4;
     242:	26 95       	lsr	r18
     244:	26 95       	lsr	r18
     246:	26 95       	lsr	r18
	return (H+L);
}
     248:	30 e1       	ldi	r19, 0x10	; 16
     24a:	23 9f       	mul	r18, r19
     24c:	80 0d       	add	r24, r0
     24e:	11 24       	eor	r1, r1
     250:	08 95       	ret

00000252 <Decode>:

void Decode(void){
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
    //BCD data converter function from DS1307 to DEC
	Second 	= BCDToDec(tData[0] & 0x7F);
     256:	cb e8       	ldi	r28, 0x8B	; 139
     258:	d0 e0       	ldi	r29, 0x00	; 0
     25a:	88 81       	ld	r24, Y
     25c:	8f 77       	andi	r24, 0x7F	; 127
     25e:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Second+0x1>
     268:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Second>

	Minute 	= BCDToDec(tData[1]);
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Minute+0x1>
     278:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Minute>
	
	if (Mode != 0)
     27c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <Mode>
     280:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <Mode+0x1>
     284:	89 2b       	or	r24, r25
     286:	59 f0       	breq	.+22     	; 0x29e <Decode+0x4c>
	{ 	
		Hour = BCDToDec(tData[2] & 0x1F); //Mode for 12h
     288:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <tData+0x2>
     28c:	8f 71       	andi	r24, 0x1F	; 31
     28e:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Hour+0x1>
     298:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Hour>
     29c:	0a c0       	rjmp	.+20     	; 0x2b2 <Decode+0x60>
	}
	else 
	{
	  	Hour = BCDToDec(tData[2] & 0x3F); //Mode for 24h	
     29e:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <tData+0x2>
     2a2:	8f 73       	andi	r24, 0x3F	; 63
     2a4:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Hour+0x1>
     2ae:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Hour>
	}
	Day		= BCDToDec(tData[3]);
     2b2:	cb e8       	ldi	r28, 0x8B	; 139
     2b4:	d0 e0       	ldi	r29, 0x00	; 0
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <Day+0x1>
     2c2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Day>
	Date   	= BCDToDec(tData[4]);
     2c6:	8c 81       	ldd	r24, Y+4	; 0x04
     2c8:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Date+0x1>
     2d2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Date>
	Month	= BCDToDec(tData[5]);
     2d6:	8d 81       	ldd	r24, Y+5	; 0x05
     2d8:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Month+0x1>
     2e2:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Month>
	Year	= BCDToDec(tData[6]);
     2e6:	8e 81       	ldd	r24, Y+6	; 0x06
     2e8:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Year+0x1>
     2f2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Year>
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <FixTime>:
		MAX7219_writeData(MAX7219_DIGIT0,(A_Hour/10));
	}
}

//Write to DS1307 time that want to change
void FixTime(){ 
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
	tData[0] = DecToBCD(Second); 
     300:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
     304:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
     308:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     30c:	cb e8       	ldi	r28, 0x8B	; 139
     30e:	d0 e0       	ldi	r29, 0x00	; 0
     310:	88 83       	st	Y, r24
	tData[1] = DecToBCD(Minute); 
     312:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
     316:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
     31a:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     31e:	89 83       	std	Y+1, r24	; 0x01
	if (Mode != 0) tData[2] = DecToBCD(Hour)|(Mode << 6)|(AP << 5); //mode 12h
     320:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <Mode>
     324:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <Mode+0x1>
     328:	89 2b       	or	r24, r25
     32a:	21 f1       	breq	.+72     	; 0x374 <FixTime+0x78>
     32c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
     330:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
     334:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     338:	40 91 7e 00 	lds	r20, 0x007E	; 0x80007e <Mode>
     33c:	50 91 7f 00 	lds	r21, 0x007F	; 0x80007f <Mode+0x1>
     340:	00 24       	eor	r0, r0
     342:	56 95       	lsr	r21
     344:	47 95       	ror	r20
     346:	07 94       	ror	r0
     348:	56 95       	lsr	r21
     34a:	47 95       	ror	r20
     34c:	07 94       	ror	r0
     34e:	54 2f       	mov	r21, r20
     350:	40 2d       	mov	r20, r0
     352:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <AP>
     356:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <AP+0x1>
     35a:	22 0f       	add	r18, r18
     35c:	33 1f       	adc	r19, r19
     35e:	22 95       	swap	r18
     360:	32 95       	swap	r19
     362:	30 7f       	andi	r19, 0xF0	; 240
     364:	32 27       	eor	r19, r18
     366:	20 7f       	andi	r18, 0xF0	; 240
     368:	32 27       	eor	r19, r18
     36a:	84 2b       	or	r24, r20
     36c:	28 2b       	or	r18, r24
     36e:	20 93 8d 00 	sts	0x008D, r18	; 0x80008d <tData+0x2>
     372:	08 c0       	rjmp	.+16     	; 0x384 <FixTime+0x88>
	else tData[2] = DecToBCD(Hour);
     374:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
     378:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
     37c:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     380:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <tData+0x2>
	tData[3] = DecToBCD(Day);
     384:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Day>
     388:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Day+0x1>
     38c:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     390:	cb e8       	ldi	r28, 0x8B	; 139
     392:	d0 e0       	ldi	r29, 0x00	; 0
     394:	8b 83       	std	Y+3, r24	; 0x03
	tData[4] = DecToBCD(Date);
     396:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
     39a:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
     39e:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     3a2:	8c 83       	std	Y+4, r24	; 0x04
	tData[5] = DecToBCD(Month); 
     3a4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     3a8:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     3ac:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     3b0:	8d 83       	std	Y+5, r24	; 0x05
	tData[6] = DecToBCD(Year); 
     3b2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Year>
     3b6:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Year+0x1>
     3ba:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     3be:	8e 83       	std	Y+6, r24	; 0x06
	TWI_DS1307_wblock(0x00, tData, 7); 
     3c0:	47 e0       	ldi	r20, 0x07	; 7
     3c2:	be 01       	movw	r22, r28
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	0e 94 86 00 	call	0x10c	; 0x10c <TWI_DS1307_wblock>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ca:	8f ec       	ldi	r24, 0xCF	; 207
     3cc:	97 e0       	ldi	r25, 0x07	; 7
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <FixTime+0xd2>
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <FixTime+0xd8>
     3d4:	00 00       	nop
	_delay_ms(1);
	TWI_DS1307_wadr(0x00); 
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 5e 00 	call	0xbc	; 0xbc <TWI_DS1307_wadr>
     3dc:	8f ec       	ldi	r24, 0xCF	; 207
     3de:	97 e0       	ldi	r25, 0x07	; 7
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <FixTime+0xe4>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <FixTime+0xea>
     3e6:	00 00       	nop
	_delay_ms(1);			
 }
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <Init_btn>:
/*
*	Init button
*/
void Init_btn(void)
{
	BTN_DDRD  &= ~((1<<SW)|(1<<ADJ));		// set input cho button setting
     3ee:	81 b3       	in	r24, 0x11	; 17
     3f0:	83 7f       	andi	r24, 0xF3	; 243
     3f2:	81 bb       	out	0x11, r24	; 17
	BTN_DDRD = (1<<BUZ_LED);				// set output cho buzzer
     3f4:	80 e8       	ldi	r24, 0x80	; 128
     3f6:	81 bb       	out	0x11, r24	; 17
	//BTN_PORTD = (1<<SW)|(1<<ADJ);			// set dien tro keo len cho button setting
	BTN_DDRB &= ~(1<<ADJ);
     3f8:	87 b3       	in	r24, 0x17	; 23
     3fa:	87 7f       	andi	r24, 0xF7	; 247
     3fc:	87 bb       	out	0x17, r24	; 23
	//BTN_PORTB = (1<<ADJ);
	DDR_LED_O |= (1<<BIT_LED_O);
     3fe:	84 b3       	in	r24, 0x14	; 20
     400:	80 68       	ori	r24, 0x80	; 128
     402:	84 bb       	out	0x14, r24	; 20
     404:	08 95       	ret

00000406 <jdFromDate>:


//-----------------------DOI DUONG LICH - AM LICH---------------------

double jdFromDate(uint8_t dd, uint8_t mm, uint16_t yy)
{
     406:	4f 92       	push	r4
     408:	5f 92       	push	r5
     40a:	6f 92       	push	r6
     40c:	7f 92       	push	r7
     40e:	8f 92       	push	r8
     410:	9f 92       	push	r9
     412:	af 92       	push	r10
     414:	bf 92       	push	r11
     416:	cf 92       	push	r12
     418:	df 92       	push	r13
     41a:	ef 92       	push	r14
     41c:	ff 92       	push	r15
     41e:	0f 93       	push	r16
     420:	1f 93       	push	r17
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	f8 2e       	mov	r15, r24
     428:	8a 01       	movw	r16, r20
	long double a, y, m, jd;
	a = floorf((14 - mm) / 12);
     42a:	c6 2f       	mov	r28, r22
     42c:	d0 e0       	ldi	r29, 0x00	; 0
     42e:	8e e0       	ldi	r24, 0x0E	; 14
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	8c 1b       	sub	r24, r28
     434:	9d 0b       	sbc	r25, r29
     436:	6c e0       	ldi	r22, 0x0C	; 12
     438:	70 e0       	ldi	r23, 0x00	; 0
     43a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
     43e:	07 2e       	mov	r0, r23
     440:	00 0c       	add	r0, r0
     442:	88 0b       	sbc	r24, r24
     444:	99 0b       	sbc	r25, r25
     446:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__floatsisf>
     44a:	0e 94 97 12 	call	0x252e	; 0x252e <floor>
     44e:	4b 01       	movw	r8, r22
     450:	5c 01       	movw	r10, r24
	y = yy+4800-a;
     452:	b8 01       	movw	r22, r16
     454:	60 54       	subi	r22, 0x40	; 64
     456:	7d 4e       	sbci	r23, 0xED	; 237
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__floatunsisf>
     460:	a5 01       	movw	r20, r10
     462:	94 01       	movw	r18, r8
     464:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     468:	2b 01       	movw	r4, r22
     46a:	3c 01       	movw	r6, r24
	m = mm+12*a-3;
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	40 e4       	ldi	r20, 0x40	; 64
     472:	51 e4       	ldi	r21, 0x41	; 65
     474:	c5 01       	movw	r24, r10
     476:	b4 01       	movw	r22, r8
     478:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     47c:	4b 01       	movw	r8, r22
     47e:	5c 01       	movw	r10, r24
     480:	be 01       	movw	r22, r28
     482:	dd 0f       	add	r29, r29
     484:	88 0b       	sbc	r24, r24
     486:	99 0b       	sbc	r25, r25
     488:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__floatsisf>
     48c:	a5 01       	movw	r20, r10
     48e:	94 01       	movw	r18, r8
     490:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	40 e4       	ldi	r20, 0x40	; 64
     49a:	50 e4       	ldi	r21, 0x40	; 64
     49c:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     4a0:	4b 01       	movw	r8, r22
     4a2:	5c 01       	movw	r10, r24
	jd = dd + floorf((153*m+2)/5) + 365*y + floorf(y/4) - floorf(y/100) + floorf(y/400) - 32045;
     4a4:	6f 2d       	mov	r22, r15
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	80 e0       	ldi	r24, 0x00	; 0
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__floatsisf>
     4b0:	6b 01       	movw	r12, r22
     4b2:	7c 01       	movw	r14, r24
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	49 e1       	ldi	r20, 0x19	; 25
     4ba:	53 e4       	ldi	r21, 0x43	; 67
     4bc:	c5 01       	movw	r24, r10
     4be:	b4 01       	movw	r22, r8
     4c0:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     4c4:	20 e0       	ldi	r18, 0x00	; 0
     4c6:	30 e0       	ldi	r19, 0x00	; 0
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	50 e4       	ldi	r21, 0x40	; 64
     4cc:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	40 ea       	ldi	r20, 0xA0	; 160
     4d6:	50 e4       	ldi	r21, 0x40	; 64
     4d8:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
     4dc:	0e 94 97 12 	call	0x252e	; 0x252e <floor>
     4e0:	9b 01       	movw	r18, r22
     4e2:	ac 01       	movw	r20, r24
     4e4:	c7 01       	movw	r24, r14
     4e6:	b6 01       	movw	r22, r12
     4e8:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     4ec:	6b 01       	movw	r12, r22
     4ee:	7c 01       	movw	r14, r24
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	30 e8       	ldi	r19, 0x80	; 128
     4f4:	46 eb       	ldi	r20, 0xB6	; 182
     4f6:	53 e4       	ldi	r21, 0x43	; 67
     4f8:	c3 01       	movw	r24, r6
     4fa:	b2 01       	movw	r22, r4
     4fc:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     500:	9b 01       	movw	r18, r22
     502:	ac 01       	movw	r20, r24
     504:	c7 01       	movw	r24, r14
     506:	b6 01       	movw	r22, r12
     508:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     50c:	6b 01       	movw	r12, r22
     50e:	7c 01       	movw	r14, r24
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	40 e8       	ldi	r20, 0x80	; 128
     516:	5e e3       	ldi	r21, 0x3E	; 62
     518:	c3 01       	movw	r24, r6
     51a:	b2 01       	movw	r22, r4
     51c:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     520:	0e 94 97 12 	call	0x252e	; 0x252e <floor>
     524:	9b 01       	movw	r18, r22
     526:	ac 01       	movw	r20, r24
     528:	c7 01       	movw	r24, r14
     52a:	b6 01       	movw	r22, r12
     52c:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     530:	6b 01       	movw	r12, r22
     532:	7c 01       	movw	r14, r24
     534:	20 e0       	ldi	r18, 0x00	; 0
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	48 ec       	ldi	r20, 0xC8	; 200
     53a:	52 e4       	ldi	r21, 0x42	; 66
     53c:	c3 01       	movw	r24, r6
     53e:	b2 01       	movw	r22, r4
     540:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
     544:	0e 94 97 12 	call	0x252e	; 0x252e <floor>
     548:	9b 01       	movw	r18, r22
     54a:	ac 01       	movw	r20, r24
     54c:	c7 01       	movw	r24, r14
     54e:	b6 01       	movw	r22, r12
     550:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     554:	4b 01       	movw	r8, r22
     556:	5c 01       	movw	r10, r24
     558:	20 e0       	ldi	r18, 0x00	; 0
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	48 ec       	ldi	r20, 0xC8	; 200
     55e:	53 e4       	ldi	r21, 0x43	; 67
     560:	c3 01       	movw	r24, r6
     562:	b2 01       	movw	r22, r4
     564:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
     568:	0e 94 97 12 	call	0x252e	; 0x252e <floor>
     56c:	9b 01       	movw	r18, r22
     56e:	ac 01       	movw	r20, r24
     570:	c5 01       	movw	r24, r10
     572:	b4 01       	movw	r22, r8
     574:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     578:	20 e0       	ldi	r18, 0x00	; 0
     57a:	3a e5       	ldi	r19, 0x5A	; 90
     57c:	4a ef       	ldi	r20, 0xFA	; 250
     57e:	56 e4       	ldi	r21, 0x46	; 70
     580:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     584:	4b 01       	movw	r8, r22
     586:	5c 01       	movw	r10, r24
	if (jd < 2299161) {
     588:	24 e6       	ldi	r18, 0x64	; 100
     58a:	34 e5       	ldi	r19, 0x54	; 84
     58c:	4c e0       	ldi	r20, 0x0C	; 12
     58e:	5a e4       	ldi	r21, 0x4A	; 74
     590:	0e 94 ad 11 	call	0x235a	; 0x235a <__cmpsf2>
     594:	88 23       	and	r24, r24
     596:	54 f4       	brge	.+20     	; 0x5ac <jdFromDate+0x1a6>
		jd = dd + floorf((153*m+2)/5) + 365*y + floorf(y/4) - 32083;
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	36 ea       	ldi	r19, 0xA6	; 166
     59c:	4a ef       	ldi	r20, 0xFA	; 250
     59e:	56 e4       	ldi	r21, 0x46	; 70
     5a0:	c7 01       	movw	r24, r14
     5a2:	b6 01       	movw	r22, r12
     5a4:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     5a8:	4b 01       	movw	r8, r22
     5aa:	5c 01       	movw	r10, r24
	}
	return jd;
}
     5ac:	c5 01       	movw	r24, r10
     5ae:	b4 01       	movw	r22, r8
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	ff 90       	pop	r15
     5ba:	ef 90       	pop	r14
     5bc:	df 90       	pop	r13
     5be:	cf 90       	pop	r12
     5c0:	bf 90       	pop	r11
     5c2:	af 90       	pop	r10
     5c4:	9f 90       	pop	r9
     5c6:	8f 90       	pop	r8
     5c8:	7f 90       	pop	r7
     5ca:	6f 90       	pop	r6
     5cc:	5f 90       	pop	r5
     5ce:	4f 90       	pop	r4
     5d0:	08 95       	ret

000005d2 <getNewMoonDay>:

double getNewMoonDay(long double k, int timeZone)
{
     5d2:	4f 92       	push	r4
     5d4:	5f 92       	push	r5
     5d6:	6f 92       	push	r6
     5d8:	7f 92       	push	r7
     5da:	8f 92       	push	r8
     5dc:	9f 92       	push	r9
     5de:	af 92       	push	r10
     5e0:	bf 92       	push	r11
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
     5f2:	66 97       	sbiw	r28, 0x16	; 22
     5f4:	0f b6       	in	r0, 0x3f	; 63
     5f6:	f8 94       	cli
     5f8:	de bf       	out	0x3e, r29	; 62
     5fa:	0f be       	out	0x3f, r0	; 63
     5fc:	cd bf       	out	0x3d, r28	; 61
     5fe:	6b 01       	movw	r12, r22
     600:	7c 01       	movw	r14, r24
     602:	5e 8b       	std	Y+22, r21	; 0x16
     604:	4d 8b       	std	Y+21, r20	; 0x15
	long double T, T2, T3, dr, Jd1, M, Mpr, F, C1, deltat, JdNew;
	T = k/1236.85; // Time in Julian centuries from 1900 January 0.5
     606:	23 e3       	ldi	r18, 0x33	; 51
     608:	3b e9       	ldi	r19, 0x9B	; 155
     60a:	4a e9       	ldi	r20, 0x9A	; 154
     60c:	54 e4       	ldi	r21, 0x44	; 68
     60e:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
     612:	69 83       	std	Y+1, r22	; 0x01
     614:	7a 83       	std	Y+2, r23	; 0x02
     616:	8b 83       	std	Y+3, r24	; 0x03
     618:	9c 83       	std	Y+4, r25	; 0x04
	T2 = T * T;
     61a:	9b 01       	movw	r18, r22
     61c:	ac 01       	movw	r20, r24
     61e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     622:	6d 83       	std	Y+5, r22	; 0x05
     624:	7e 83       	std	Y+6, r23	; 0x06
     626:	8f 83       	std	Y+7, r24	; 0x07
     628:	98 87       	std	Y+8, r25	; 0x08
	T3 = T2 * T;
     62a:	9b 01       	movw	r18, r22
     62c:	ac 01       	movw	r20, r24
     62e:	69 81       	ldd	r22, Y+1	; 0x01
     630:	7a 81       	ldd	r23, Y+2	; 0x02
     632:	8b 81       	ldd	r24, Y+3	; 0x03
     634:	9c 81       	ldd	r25, Y+4	; 0x04
     636:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     63a:	6d 87       	std	Y+13, r22	; 0x0d
     63c:	7e 87       	std	Y+14, r23	; 0x0e
     63e:	8f 87       	std	Y+15, r24	; 0x0f
     640:	98 8b       	std	Y+16, r25	; 0x10
	dr = M_PI/180;
	Jd1 = 2415020.75933 + 29.53058868*k + 0.0001178*T2 - 0.000000155*T3;
     642:	25 ea       	ldi	r18, 0xA5	; 165
     644:	3e e3       	ldi	r19, 0x3E	; 62
     646:	4c ee       	ldi	r20, 0xEC	; 236
     648:	51 e4       	ldi	r21, 0x41	; 65
     64a:	c7 01       	movw	r24, r14
     64c:	b6 01       	movw	r22, r12
     64e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     652:	23 eb       	ldi	r18, 0xB3	; 179
     654:	36 e6       	ldi	r19, 0x66	; 102
     656:	43 e1       	ldi	r20, 0x13	; 19
     658:	5a e4       	ldi	r21, 0x4A	; 74
     65a:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     65e:	4b 01       	movw	r8, r22
     660:	5c 01       	movw	r10, r24
     662:	25 e6       	ldi	r18, 0x65	; 101
     664:	3b e0       	ldi	r19, 0x0B	; 11
     666:	47 ef       	ldi	r20, 0xF7	; 247
     668:	58 e3       	ldi	r21, 0x38	; 56
     66a:	6d 81       	ldd	r22, Y+5	; 0x05
     66c:	7e 81       	ldd	r23, Y+6	; 0x06
     66e:	8f 81       	ldd	r24, Y+7	; 0x07
     670:	98 85       	ldd	r25, Y+8	; 0x08
     672:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     676:	9b 01       	movw	r18, r22
     678:	ac 01       	movw	r20, r24
     67a:	c5 01       	movw	r24, r10
     67c:	b4 01       	movw	r22, r8
     67e:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     682:	4b 01       	movw	r8, r22
     684:	5c 01       	movw	r10, r24
     686:	23 e1       	ldi	r18, 0x13	; 19
     688:	3e e6       	ldi	r19, 0x6E	; 110
     68a:	46 e2       	ldi	r20, 0x26	; 38
     68c:	54 e3       	ldi	r21, 0x34	; 52
     68e:	6d 85       	ldd	r22, Y+13	; 0x0d
     690:	7e 85       	ldd	r23, Y+14	; 0x0e
     692:	8f 85       	ldd	r24, Y+15	; 0x0f
     694:	98 89       	ldd	r25, Y+16	; 0x10
     696:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     69a:	9b 01       	movw	r18, r22
     69c:	ac 01       	movw	r20, r24
     69e:	c5 01       	movw	r24, r10
     6a0:	b4 01       	movw	r22, r8
     6a2:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     6a6:	4b 01       	movw	r8, r22
     6a8:	5c 01       	movw	r10, r24
	Jd1 = Jd1 + 0.00033*sinf((166.56 + 132.87*T - 0.009173*T2)*dr); // Mean new moon
     6aa:	28 eb       	ldi	r18, 0xB8	; 184
     6ac:	3e ed       	ldi	r19, 0xDE	; 222
     6ae:	44 e0       	ldi	r20, 0x04	; 4
     6b0:	53 e4       	ldi	r21, 0x43	; 67
     6b2:	69 81       	ldd	r22, Y+1	; 0x01
     6b4:	7a 81       	ldd	r23, Y+2	; 0x02
     6b6:	8b 81       	ldd	r24, Y+3	; 0x03
     6b8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ba:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     6be:	2c e5       	ldi	r18, 0x5C	; 92
     6c0:	3f e8       	ldi	r19, 0x8F	; 143
     6c2:	46 e2       	ldi	r20, 0x26	; 38
     6c4:	53 e4       	ldi	r21, 0x43	; 67
     6c6:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     6ca:	2b 01       	movw	r4, r22
     6cc:	3c 01       	movw	r6, r24
     6ce:	2a e5       	ldi	r18, 0x5A	; 90
     6d0:	3a e4       	ldi	r19, 0x4A	; 74
     6d2:	46 e1       	ldi	r20, 0x16	; 22
     6d4:	5c e3       	ldi	r21, 0x3C	; 60
     6d6:	6d 81       	ldd	r22, Y+5	; 0x05
     6d8:	7e 81       	ldd	r23, Y+6	; 0x06
     6da:	8f 81       	ldd	r24, Y+7	; 0x07
     6dc:	98 85       	ldd	r25, Y+8	; 0x08
     6de:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     6e2:	9b 01       	movw	r18, r22
     6e4:	ac 01       	movw	r20, r24
     6e6:	c3 01       	movw	r24, r6
     6e8:	b2 01       	movw	r22, r4
     6ea:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     6ee:	25 e3       	ldi	r18, 0x35	; 53
     6f0:	3a ef       	ldi	r19, 0xFA	; 250
     6f2:	4e e8       	ldi	r20, 0x8E	; 142
     6f4:	5c e3       	ldi	r21, 0x3C	; 60
     6f6:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     6fa:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sin>
     6fe:	2a ed       	ldi	r18, 0xDA	; 218
     700:	33 e0       	ldi	r19, 0x03	; 3
     702:	4d ea       	ldi	r20, 0xAD	; 173
     704:	59 e3       	ldi	r21, 0x39	; 57
     706:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     70a:	9b 01       	movw	r18, r22
     70c:	ac 01       	movw	r20, r24
     70e:	c5 01       	movw	r24, r10
     710:	b4 01       	movw	r22, r8
     712:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     716:	69 8b       	std	Y+17, r22	; 0x11
     718:	7a 8b       	std	Y+18, r23	; 0x12
     71a:	8b 8b       	std	Y+19, r24	; 0x13
     71c:	9c 8b       	std	Y+20, r25	; 0x14
	M = 359.2242 + 29.10535608*k - 0.0000333*T2 - 0.00000347*T3; // Sun's mean anomaly
     71e:	25 ec       	ldi	r18, 0xC5	; 197
     720:	37 ed       	ldi	r19, 0xD7	; 215
     722:	48 ee       	ldi	r20, 0xE8	; 232
     724:	51 e4       	ldi	r21, 0x41	; 65
     726:	c7 01       	movw	r24, r14
     728:	b6 01       	movw	r22, r12
     72a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     72e:	23 eb       	ldi	r18, 0xB3	; 179
     730:	3c e9       	ldi	r19, 0x9C	; 156
     732:	43 eb       	ldi	r20, 0xB3	; 179
     734:	53 e4       	ldi	r21, 0x43	; 67
     736:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     73a:	4b 01       	movw	r8, r22
     73c:	5c 01       	movw	r10, r24
     73e:	2a e9       	ldi	r18, 0x9A	; 154
     740:	3b ea       	ldi	r19, 0xAB	; 171
     742:	4b e0       	ldi	r20, 0x0B	; 11
     744:	58 e3       	ldi	r21, 0x38	; 56
     746:	6d 81       	ldd	r22, Y+5	; 0x05
     748:	7e 81       	ldd	r23, Y+6	; 0x06
     74a:	8f 81       	ldd	r24, Y+7	; 0x07
     74c:	98 85       	ldd	r25, Y+8	; 0x08
     74e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     752:	9b 01       	movw	r18, r22
     754:	ac 01       	movw	r20, r24
     756:	c5 01       	movw	r24, r10
     758:	b4 01       	movw	r22, r8
     75a:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     75e:	4b 01       	movw	r8, r22
     760:	5c 01       	movw	r10, r24
     762:	25 e2       	ldi	r18, 0x25	; 37
     764:	3e ed       	ldi	r19, 0xDE	; 222
     766:	48 e6       	ldi	r20, 0x68	; 104
     768:	56 e3       	ldi	r21, 0x36	; 54
     76a:	6d 85       	ldd	r22, Y+13	; 0x0d
     76c:	7e 85       	ldd	r23, Y+14	; 0x0e
     76e:	8f 85       	ldd	r24, Y+15	; 0x0f
     770:	98 89       	ldd	r25, Y+16	; 0x10
     772:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     776:	9b 01       	movw	r18, r22
     778:	ac 01       	movw	r20, r24
     77a:	c5 01       	movw	r24, r10
     77c:	b4 01       	movw	r22, r8
     77e:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     782:	69 87       	std	Y+9, r22	; 0x09
     784:	7a 87       	std	Y+10, r23	; 0x0a
     786:	8b 87       	std	Y+11, r24	; 0x0b
     788:	9c 87       	std	Y+12, r25	; 0x0c
	Mpr = 306.0253 + 385.81691806*k + 0.0107306*T2 + 0.00001236*T3; // Moon's mean anomaly
     78a:	21 e9       	ldi	r18, 0x91	; 145
     78c:	38 ee       	ldi	r19, 0xE8	; 232
     78e:	40 ec       	ldi	r20, 0xC0	; 192
     790:	53 e4       	ldi	r21, 0x43	; 67
     792:	c7 01       	movw	r24, r14
     794:	b6 01       	movw	r22, r12
     796:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     79a:	2d e3       	ldi	r18, 0x3D	; 61
     79c:	33 e0       	ldi	r19, 0x03	; 3
     79e:	49 e9       	ldi	r20, 0x99	; 153
     7a0:	53 e4       	ldi	r21, 0x43	; 67
     7a2:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     7a6:	4b 01       	movw	r8, r22
     7a8:	5c 01       	movw	r10, r24
     7aa:	26 e6       	ldi	r18, 0x66	; 102
     7ac:	3f ec       	ldi	r19, 0xCF	; 207
     7ae:	4f e2       	ldi	r20, 0x2F	; 47
     7b0:	5c e3       	ldi	r21, 0x3C	; 60
     7b2:	6d 81       	ldd	r22, Y+5	; 0x05
     7b4:	7e 81       	ldd	r23, Y+6	; 0x06
     7b6:	8f 81       	ldd	r24, Y+7	; 0x07
     7b8:	98 85       	ldd	r25, Y+8	; 0x08
     7ba:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     7be:	9b 01       	movw	r18, r22
     7c0:	ac 01       	movw	r20, r24
     7c2:	c5 01       	movw	r24, r10
     7c4:	b4 01       	movw	r22, r8
     7c6:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     7ca:	4b 01       	movw	r8, r22
     7cc:	5c 01       	movw	r10, r24
     7ce:	2c ec       	ldi	r18, 0xCC	; 204
     7d0:	3d e5       	ldi	r19, 0x5D	; 93
     7d2:	4f e4       	ldi	r20, 0x4F	; 79
     7d4:	57 e3       	ldi	r21, 0x37	; 55
     7d6:	6d 85       	ldd	r22, Y+13	; 0x0d
     7d8:	7e 85       	ldd	r23, Y+14	; 0x0e
     7da:	8f 85       	ldd	r24, Y+15	; 0x0f
     7dc:	98 89       	ldd	r25, Y+16	; 0x10
     7de:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     7e2:	9b 01       	movw	r18, r22
     7e4:	ac 01       	movw	r20, r24
     7e6:	c5 01       	movw	r24, r10
     7e8:	b4 01       	movw	r22, r8
     7ea:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     7ee:	2b 01       	movw	r4, r22
     7f0:	3c 01       	movw	r6, r24
	F = 21.2964 + 390.67050646*k - 0.0016528*T2 - 0.00000239*T3; // Moon's argument of latitude
     7f2:	23 ed       	ldi	r18, 0xD3	; 211
     7f4:	35 e5       	ldi	r19, 0x55	; 85
     7f6:	43 ec       	ldi	r20, 0xC3	; 195
     7f8:	53 e4       	ldi	r21, 0x43	; 67
     7fa:	c7 01       	movw	r24, r14
     7fc:	b6 01       	movw	r22, r12
     7fe:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     802:	27 e0       	ldi	r18, 0x07	; 7
     804:	3f e5       	ldi	r19, 0x5F	; 95
     806:	4a ea       	ldi	r20, 0xAA	; 170
     808:	51 e4       	ldi	r21, 0x41	; 65
     80a:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     80e:	6b 01       	movw	r12, r22
     810:	7c 01       	movw	r14, r24
     812:	24 ec       	ldi	r18, 0xC4	; 196
     814:	32 ea       	ldi	r19, 0xA2	; 162
     816:	48 ed       	ldi	r20, 0xD8	; 216
     818:	5a e3       	ldi	r21, 0x3A	; 58
     81a:	6d 81       	ldd	r22, Y+5	; 0x05
     81c:	7e 81       	ldd	r23, Y+6	; 0x06
     81e:	8f 81       	ldd	r24, Y+7	; 0x07
     820:	98 85       	ldd	r25, Y+8	; 0x08
     822:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     826:	9b 01       	movw	r18, r22
     828:	ac 01       	movw	r20, r24
     82a:	c7 01       	movw	r24, r14
     82c:	b6 01       	movw	r22, r12
     82e:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     832:	6b 01       	movw	r12, r22
     834:	7c 01       	movw	r14, r24
     836:	23 ee       	ldi	r18, 0xE3	; 227
     838:	33 e6       	ldi	r19, 0x63	; 99
     83a:	40 e2       	ldi	r20, 0x20	; 32
     83c:	56 e3       	ldi	r21, 0x36	; 54
     83e:	6d 85       	ldd	r22, Y+13	; 0x0d
     840:	7e 85       	ldd	r23, Y+14	; 0x0e
     842:	8f 85       	ldd	r24, Y+15	; 0x0f
     844:	98 89       	ldd	r25, Y+16	; 0x10
     846:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     84a:	9b 01       	movw	r18, r22
     84c:	ac 01       	movw	r20, r24
     84e:	c7 01       	movw	r24, r14
     850:	b6 01       	movw	r22, r12
     852:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     856:	6b 01       	movw	r12, r22
     858:	7c 01       	movw	r14, r24
	C1=(0.1734 - 0.000393*T)*sinf(M*dr) + 0.0021*sinf(2*dr*M);
     85a:	21 e9       	ldi	r18, 0x91	; 145
     85c:	3b e0       	ldi	r19, 0x0B	; 11
     85e:	4e ec       	ldi	r20, 0xCE	; 206
     860:	59 e3       	ldi	r21, 0x39	; 57
     862:	69 81       	ldd	r22, Y+1	; 0x01
     864:	7a 81       	ldd	r23, Y+2	; 0x02
     866:	8b 81       	ldd	r24, Y+3	; 0x03
     868:	9c 81       	ldd	r25, Y+4	; 0x04
     86a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     86e:	9b 01       	movw	r18, r22
     870:	ac 01       	movw	r20, r24
     872:	65 ec       	ldi	r22, 0xC5	; 197
     874:	7f e8       	ldi	r23, 0x8F	; 143
     876:	81 e3       	ldi	r24, 0x31	; 49
     878:	9e e3       	ldi	r25, 0x3E	; 62
     87a:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     87e:	4b 01       	movw	r8, r22
     880:	5c 01       	movw	r10, r24
     882:	25 e3       	ldi	r18, 0x35	; 53
     884:	3a ef       	ldi	r19, 0xFA	; 250
     886:	4e e8       	ldi	r20, 0x8E	; 142
     888:	5c e3       	ldi	r21, 0x3C	; 60
     88a:	69 85       	ldd	r22, Y+9	; 0x09
     88c:	7a 85       	ldd	r23, Y+10	; 0x0a
     88e:	8b 85       	ldd	r24, Y+11	; 0x0b
     890:	9c 85       	ldd	r25, Y+12	; 0x0c
     892:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     896:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sin>
     89a:	9b 01       	movw	r18, r22
     89c:	ac 01       	movw	r20, r24
     89e:	c5 01       	movw	r24, r10
     8a0:	b4 01       	movw	r22, r8
     8a2:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     8a6:	4b 01       	movw	r8, r22
     8a8:	5c 01       	movw	r10, r24
     8aa:	25 e3       	ldi	r18, 0x35	; 53
     8ac:	3a ef       	ldi	r19, 0xFA	; 250
     8ae:	4e e0       	ldi	r20, 0x0E	; 14
     8b0:	5d e3       	ldi	r21, 0x3D	; 61
     8b2:	69 85       	ldd	r22, Y+9	; 0x09
     8b4:	7a 85       	ldd	r23, Y+10	; 0x0a
     8b6:	8b 85       	ldd	r24, Y+11	; 0x0b
     8b8:	9c 85       	ldd	r25, Y+12	; 0x0c
     8ba:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     8be:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sin>
     8c2:	27 e2       	ldi	r18, 0x27	; 39
     8c4:	30 ea       	ldi	r19, 0xA0	; 160
     8c6:	49 e0       	ldi	r20, 0x09	; 9
     8c8:	5b e3       	ldi	r21, 0x3B	; 59
     8ca:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     8ce:	9b 01       	movw	r18, r22
     8d0:	ac 01       	movw	r20, r24
     8d2:	c5 01       	movw	r24, r10
     8d4:	b4 01       	movw	r22, r8
     8d6:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     8da:	4b 01       	movw	r8, r22
     8dc:	5c 01       	movw	r10, r24
	C1 = C1 - 0.4068*sinf(Mpr*dr) + 0.0161*sinf(dr*2*Mpr);
     8de:	25 e3       	ldi	r18, 0x35	; 53
     8e0:	3a ef       	ldi	r19, 0xFA	; 250
     8e2:	4e e8       	ldi	r20, 0x8E	; 142
     8e4:	5c e3       	ldi	r21, 0x3C	; 60
     8e6:	c3 01       	movw	r24, r6
     8e8:	b2 01       	movw	r22, r4
     8ea:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     8ee:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sin>
     8f2:	27 e1       	ldi	r18, 0x17	; 23
     8f4:	38 e4       	ldi	r19, 0x48	; 72
     8f6:	40 ed       	ldi	r20, 0xD0	; 208
     8f8:	5e e3       	ldi	r21, 0x3E	; 62
     8fa:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     8fe:	9b 01       	movw	r18, r22
     900:	ac 01       	movw	r20, r24
     902:	c5 01       	movw	r24, r10
     904:	b4 01       	movw	r22, r8
     906:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     90a:	4b 01       	movw	r8, r22
     90c:	5c 01       	movw	r10, r24
     90e:	25 e3       	ldi	r18, 0x35	; 53
     910:	3a ef       	ldi	r19, 0xFA	; 250
     912:	4e e0       	ldi	r20, 0x0E	; 14
     914:	5d e3       	ldi	r21, 0x3D	; 61
     916:	c3 01       	movw	r24, r6
     918:	b2 01       	movw	r22, r4
     91a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     91e:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sin>
     922:	26 e2       	ldi	r18, 0x26	; 38
     924:	34 ee       	ldi	r19, 0xE4	; 228
     926:	43 e8       	ldi	r20, 0x83	; 131
     928:	5c e3       	ldi	r21, 0x3C	; 60
     92a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     92e:	9b 01       	movw	r18, r22
     930:	ac 01       	movw	r20, r24
     932:	c5 01       	movw	r24, r10
     934:	b4 01       	movw	r22, r8
     936:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     93a:	4b 01       	movw	r8, r22
     93c:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0004*sinf(dr*3*Mpr);
     93e:	20 e5       	ldi	r18, 0x50	; 80
     940:	37 e7       	ldi	r19, 0x77	; 119
     942:	46 e5       	ldi	r20, 0x56	; 86
     944:	5d e3       	ldi	r21, 0x3D	; 61
     946:	c3 01       	movw	r24, r6
     948:	b2 01       	movw	r22, r4
     94a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     94e:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sin>
     952:	27 e1       	ldi	r18, 0x17	; 23
     954:	37 eb       	ldi	r19, 0xB7	; 183
     956:	41 ed       	ldi	r20, 0xD1	; 209
     958:	59 e3       	ldi	r21, 0x39	; 57
     95a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     95e:	9b 01       	movw	r18, r22
     960:	ac 01       	movw	r20, r24
     962:	c5 01       	movw	r24, r10
     964:	b4 01       	movw	r22, r8
     966:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     96a:	4b 01       	movw	r8, r22
     96c:	5c 01       	movw	r10, r24
	C1 = C1 + 0.0104*sinf(dr*2*F) - 0.0051*sinf(dr*(M+Mpr));
     96e:	25 e3       	ldi	r18, 0x35	; 53
     970:	3a ef       	ldi	r19, 0xFA	; 250
     972:	4e e0       	ldi	r20, 0x0E	; 14
     974:	5d e3       	ldi	r21, 0x3D	; 61
     976:	c7 01       	movw	r24, r14
     978:	b6 01       	movw	r22, r12
     97a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     97e:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sin>
     982:	23 ec       	ldi	r18, 0xC3	; 195
     984:	34 e6       	ldi	r19, 0x64	; 100
     986:	4a e2       	ldi	r20, 0x2A	; 42
     988:	5c e3       	ldi	r21, 0x3C	; 60
     98a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     98e:	9b 01       	movw	r18, r22
     990:	ac 01       	movw	r20, r24
     992:	c5 01       	movw	r24, r10
     994:	b4 01       	movw	r22, r8
     996:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     99a:	4b 01       	movw	r8, r22
     99c:	5c 01       	movw	r10, r24
     99e:	a3 01       	movw	r20, r6
     9a0:	92 01       	movw	r18, r4
     9a2:	69 85       	ldd	r22, Y+9	; 0x09
     9a4:	7a 85       	ldd	r23, Y+10	; 0x0a
     9a6:	8b 85       	ldd	r24, Y+11	; 0x0b
     9a8:	9c 85       	ldd	r25, Y+12	; 0x0c
     9aa:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     9ae:	25 e3       	ldi	r18, 0x35	; 53
     9b0:	3a ef       	ldi	r19, 0xFA	; 250
     9b2:	4e e8       	ldi	r20, 0x8E	; 142
     9b4:	5c e3       	ldi	r21, 0x3C	; 60
     9b6:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     9ba:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sin>
     9be:	27 ee       	ldi	r18, 0xE7	; 231
     9c0:	3d e1       	ldi	r19, 0x1D	; 29
     9c2:	47 ea       	ldi	r20, 0xA7	; 167
     9c4:	5b e3       	ldi	r21, 0x3B	; 59
     9c6:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     9ca:	9b 01       	movw	r18, r22
     9cc:	ac 01       	movw	r20, r24
     9ce:	c5 01       	movw	r24, r10
     9d0:	b4 01       	movw	r22, r8
     9d2:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     9d6:	4b 01       	movw	r8, r22
     9d8:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0074*sinf(dr*(M-Mpr)) + 0.0004*sinf(dr*(2*F+M));
     9da:	a3 01       	movw	r20, r6
     9dc:	92 01       	movw	r18, r4
     9de:	69 85       	ldd	r22, Y+9	; 0x09
     9e0:	7a 85       	ldd	r23, Y+10	; 0x0a
     9e2:	8b 85       	ldd	r24, Y+11	; 0x0b
     9e4:	9c 85       	ldd	r25, Y+12	; 0x0c
     9e6:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     9ea:	25 e3       	ldi	r18, 0x35	; 53
     9ec:	3a ef       	ldi	r19, 0xFA	; 250
     9ee:	4e e8       	ldi	r20, 0x8E	; 142
     9f0:	5c e3       	ldi	r21, 0x3C	; 60
     9f2:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     9f6:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sin>
     9fa:	23 eb       	ldi	r18, 0xB3	; 179
     9fc:	3b e7       	ldi	r19, 0x7B	; 123
     9fe:	42 ef       	ldi	r20, 0xF2	; 242
     a00:	5b e3       	ldi	r21, 0x3B	; 59
     a02:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	c5 01       	movw	r24, r10
     a0c:	b4 01       	movw	r22, r8
     a0e:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     a12:	4b 01       	movw	r8, r22
     a14:	5c 01       	movw	r10, r24
     a16:	a7 01       	movw	r20, r14
     a18:	96 01       	movw	r18, r12
     a1a:	c7 01       	movw	r24, r14
     a1c:	b6 01       	movw	r22, r12
     a1e:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     a22:	6b 01       	movw	r12, r22
     a24:	7c 01       	movw	r14, r24
     a26:	9b 01       	movw	r18, r22
     a28:	ac 01       	movw	r20, r24
     a2a:	69 85       	ldd	r22, Y+9	; 0x09
     a2c:	7a 85       	ldd	r23, Y+10	; 0x0a
     a2e:	8b 85       	ldd	r24, Y+11	; 0x0b
     a30:	9c 85       	ldd	r25, Y+12	; 0x0c
     a32:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     a36:	25 e3       	ldi	r18, 0x35	; 53
     a38:	3a ef       	ldi	r19, 0xFA	; 250
     a3a:	4e e8       	ldi	r20, 0x8E	; 142
     a3c:	5c e3       	ldi	r21, 0x3C	; 60
     a3e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     a42:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sin>
     a46:	27 e1       	ldi	r18, 0x17	; 23
     a48:	37 eb       	ldi	r19, 0xB7	; 183
     a4a:	41 ed       	ldi	r20, 0xD1	; 209
     a4c:	59 e3       	ldi	r21, 0x39	; 57
     a4e:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     a52:	9b 01       	movw	r18, r22
     a54:	ac 01       	movw	r20, r24
     a56:	c5 01       	movw	r24, r10
     a58:	b4 01       	movw	r22, r8
     a5a:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     a5e:	4b 01       	movw	r8, r22
     a60:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0004*sinf(dr*(2*F-M)) - 0.0006*sinf(dr*(2*F+Mpr));
     a62:	29 85       	ldd	r18, Y+9	; 0x09
     a64:	3a 85       	ldd	r19, Y+10	; 0x0a
     a66:	4b 85       	ldd	r20, Y+11	; 0x0b
     a68:	5c 85       	ldd	r21, Y+12	; 0x0c
     a6a:	c7 01       	movw	r24, r14
     a6c:	b6 01       	movw	r22, r12
     a6e:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     a72:	25 e3       	ldi	r18, 0x35	; 53
     a74:	3a ef       	ldi	r19, 0xFA	; 250
     a76:	4e e8       	ldi	r20, 0x8E	; 142
     a78:	5c e3       	ldi	r21, 0x3C	; 60
     a7a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     a7e:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sin>
     a82:	27 e1       	ldi	r18, 0x17	; 23
     a84:	37 eb       	ldi	r19, 0xB7	; 183
     a86:	41 ed       	ldi	r20, 0xD1	; 209
     a88:	59 e3       	ldi	r21, 0x39	; 57
     a8a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     a8e:	9b 01       	movw	r18, r22
     a90:	ac 01       	movw	r20, r24
     a92:	c5 01       	movw	r24, r10
     a94:	b4 01       	movw	r22, r8
     a96:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     a9a:	4b 01       	movw	r8, r22
     a9c:	5c 01       	movw	r10, r24
     a9e:	a7 01       	movw	r20, r14
     aa0:	96 01       	movw	r18, r12
     aa2:	c3 01       	movw	r24, r6
     aa4:	b2 01       	movw	r22, r4
     aa6:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     aaa:	25 e3       	ldi	r18, 0x35	; 53
     aac:	3a ef       	ldi	r19, 0xFA	; 250
     aae:	4e e8       	ldi	r20, 0x8E	; 142
     ab0:	5c e3       	ldi	r21, 0x3C	; 60
     ab2:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     ab6:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sin>
     aba:	22 e5       	ldi	r18, 0x52	; 82
     abc:	39 e4       	ldi	r19, 0x49	; 73
     abe:	4d e1       	ldi	r20, 0x1D	; 29
     ac0:	5a e3       	ldi	r21, 0x3A	; 58
     ac2:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     ac6:	9b 01       	movw	r18, r22
     ac8:	ac 01       	movw	r20, r24
     aca:	c5 01       	movw	r24, r10
     acc:	b4 01       	movw	r22, r8
     ace:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     ad2:	4b 01       	movw	r8, r22
     ad4:	5c 01       	movw	r10, r24
	C1 = C1 + 0.0010*sinf(dr*(2*F-Mpr)) + 0.0005*sinf(dr*(2*Mpr+M));
     ad6:	a3 01       	movw	r20, r6
     ad8:	92 01       	movw	r18, r4
     ada:	c7 01       	movw	r24, r14
     adc:	b6 01       	movw	r22, r12
     ade:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     ae2:	25 e3       	ldi	r18, 0x35	; 53
     ae4:	3a ef       	ldi	r19, 0xFA	; 250
     ae6:	4e e8       	ldi	r20, 0x8E	; 142
     ae8:	5c e3       	ldi	r21, 0x3C	; 60
     aea:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     aee:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sin>
     af2:	2f e6       	ldi	r18, 0x6F	; 111
     af4:	32 e1       	ldi	r19, 0x12	; 18
     af6:	43 e8       	ldi	r20, 0x83	; 131
     af8:	5a e3       	ldi	r21, 0x3A	; 58
     afa:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     afe:	9b 01       	movw	r18, r22
     b00:	ac 01       	movw	r20, r24
     b02:	c5 01       	movw	r24, r10
     b04:	b4 01       	movw	r22, r8
     b06:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     b0a:	6b 01       	movw	r12, r22
     b0c:	7c 01       	movw	r14, r24
     b0e:	a3 01       	movw	r20, r6
     b10:	92 01       	movw	r18, r4
     b12:	c3 01       	movw	r24, r6
     b14:	b2 01       	movw	r22, r4
     b16:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     b1a:	9b 01       	movw	r18, r22
     b1c:	ac 01       	movw	r20, r24
     b1e:	69 85       	ldd	r22, Y+9	; 0x09
     b20:	7a 85       	ldd	r23, Y+10	; 0x0a
     b22:	8b 85       	ldd	r24, Y+11	; 0x0b
     b24:	9c 85       	ldd	r25, Y+12	; 0x0c
     b26:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     b2a:	25 e3       	ldi	r18, 0x35	; 53
     b2c:	3a ef       	ldi	r19, 0xFA	; 250
     b2e:	4e e8       	ldi	r20, 0x8E	; 142
     b30:	5c e3       	ldi	r21, 0x3C	; 60
     b32:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     b36:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sin>
     b3a:	2f e6       	ldi	r18, 0x6F	; 111
     b3c:	32 e1       	ldi	r19, 0x12	; 18
     b3e:	43 e0       	ldi	r20, 0x03	; 3
     b40:	5a e3       	ldi	r21, 0x3A	; 58
     b42:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     b46:	9b 01       	movw	r18, r22
     b48:	ac 01       	movw	r20, r24
     b4a:	c7 01       	movw	r24, r14
     b4c:	b6 01       	movw	r22, r12
     b4e:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     b52:	6b 01       	movw	r12, r22
     b54:	7c 01       	movw	r14, r24
	if (T < -11) {
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	40 e3       	ldi	r20, 0x30	; 48
     b5c:	51 ec       	ldi	r21, 0xC1	; 193
     b5e:	69 81       	ldd	r22, Y+1	; 0x01
     b60:	7a 81       	ldd	r23, Y+2	; 0x02
     b62:	8b 81       	ldd	r24, Y+3	; 0x03
     b64:	9c 81       	ldd	r25, Y+4	; 0x04
     b66:	0e 94 ad 11 	call	0x235a	; 0x235a <__cmpsf2>
     b6a:	88 23       	and	r24, r24
     b6c:	0c f0       	brlt	.+2      	; 0xb70 <__stack+0x311>
     b6e:	51 c0       	rjmp	.+162    	; 0xc12 <__stack+0x3b3>
		deltat= 0.001 + 0.000839*T + 0.0002261*T2 - 0.00000845*T3 - 0.000000081*T*T3;
     b70:	26 e5       	ldi	r18, 0x56	; 86
     b72:	30 ef       	ldi	r19, 0xF0	; 240
     b74:	4b e5       	ldi	r20, 0x5B	; 91
     b76:	5a e3       	ldi	r21, 0x3A	; 58
     b78:	69 81       	ldd	r22, Y+1	; 0x01
     b7a:	7a 81       	ldd	r23, Y+2	; 0x02
     b7c:	8b 81       	ldd	r24, Y+3	; 0x03
     b7e:	9c 81       	ldd	r25, Y+4	; 0x04
     b80:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     b84:	2f e6       	ldi	r18, 0x6F	; 111
     b86:	32 e1       	ldi	r19, 0x12	; 18
     b88:	43 e8       	ldi	r20, 0x83	; 131
     b8a:	5a e3       	ldi	r21, 0x3A	; 58
     b8c:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     b90:	4b 01       	movw	r8, r22
     b92:	5c 01       	movw	r10, r24
     b94:	22 e4       	ldi	r18, 0x42	; 66
     b96:	35 e1       	ldi	r19, 0x15	; 21
     b98:	4d e6       	ldi	r20, 0x6D	; 109
     b9a:	59 e3       	ldi	r21, 0x39	; 57
     b9c:	6d 81       	ldd	r22, Y+5	; 0x05
     b9e:	7e 81       	ldd	r23, Y+6	; 0x06
     ba0:	8f 81       	ldd	r24, Y+7	; 0x07
     ba2:	98 85       	ldd	r25, Y+8	; 0x08
     ba4:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	c5 01       	movw	r24, r10
     bae:	b4 01       	movw	r22, r8
     bb0:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     bb4:	4b 01       	movw	r8, r22
     bb6:	5c 01       	movw	r10, r24
     bb8:	29 e7       	ldi	r18, 0x79	; 121
     bba:	34 ec       	ldi	r19, 0xC4	; 196
     bbc:	4d e0       	ldi	r20, 0x0D	; 13
     bbe:	57 e3       	ldi	r21, 0x37	; 55
     bc0:	6d 85       	ldd	r22, Y+13	; 0x0d
     bc2:	7e 85       	ldd	r23, Y+14	; 0x0e
     bc4:	8f 85       	ldd	r24, Y+15	; 0x0f
     bc6:	98 89       	ldd	r25, Y+16	; 0x10
     bc8:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     bcc:	9b 01       	movw	r18, r22
     bce:	ac 01       	movw	r20, r24
     bd0:	c5 01       	movw	r24, r10
     bd2:	b4 01       	movw	r22, r8
     bd4:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     bd8:	4b 01       	movw	r8, r22
     bda:	5c 01       	movw	r10, r24
     bdc:	29 e3       	ldi	r18, 0x39	; 57
     bde:	32 ef       	ldi	r19, 0xF2	; 242
     be0:	4d ea       	ldi	r20, 0xAD	; 173
     be2:	53 e3       	ldi	r21, 0x33	; 51
     be4:	69 81       	ldd	r22, Y+1	; 0x01
     be6:	7a 81       	ldd	r23, Y+2	; 0x02
     be8:	8b 81       	ldd	r24, Y+3	; 0x03
     bea:	9c 81       	ldd	r25, Y+4	; 0x04
     bec:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     bf0:	9b 01       	movw	r18, r22
     bf2:	ac 01       	movw	r20, r24
     bf4:	6d 85       	ldd	r22, Y+13	; 0x0d
     bf6:	7e 85       	ldd	r23, Y+14	; 0x0e
     bf8:	8f 85       	ldd	r24, Y+15	; 0x0f
     bfa:	98 89       	ldd	r25, Y+16	; 0x10
     bfc:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     c00:	9b 01       	movw	r18, r22
     c02:	ac 01       	movw	r20, r24
     c04:	c5 01       	movw	r24, r10
     c06:	b4 01       	movw	r22, r8
     c08:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     c0c:	4b 01       	movw	r8, r22
     c0e:	5c 01       	movw	r10, r24
     c10:	24 c0       	rjmp	.+72     	; 0xc5a <__stack+0x3fb>
		} else {
		deltat= -0.000278 + 0.000265*T + 0.000262*T2;
     c12:	23 eb       	ldi	r18, 0xB3	; 179
     c14:	3f ee       	ldi	r19, 0xEF	; 239
     c16:	4a e8       	ldi	r20, 0x8A	; 138
     c18:	59 e3       	ldi	r21, 0x39	; 57
     c1a:	69 81       	ldd	r22, Y+1	; 0x01
     c1c:	7a 81       	ldd	r23, Y+2	; 0x02
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     c26:	27 e8       	ldi	r18, 0x87	; 135
     c28:	30 ec       	ldi	r19, 0xC0	; 192
     c2a:	41 e9       	ldi	r20, 0x91	; 145
     c2c:	59 e3       	ldi	r21, 0x39	; 57
     c2e:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     c32:	4b 01       	movw	r8, r22
     c34:	5c 01       	movw	r10, r24
     c36:	2b e0       	ldi	r18, 0x0B	; 11
     c38:	3d e5       	ldi	r19, 0x5D	; 93
     c3a:	49 e8       	ldi	r20, 0x89	; 137
     c3c:	59 e3       	ldi	r21, 0x39	; 57
     c3e:	6d 81       	ldd	r22, Y+5	; 0x05
     c40:	7e 81       	ldd	r23, Y+6	; 0x06
     c42:	8f 81       	ldd	r24, Y+7	; 0x07
     c44:	98 85       	ldd	r25, Y+8	; 0x08
     c46:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     c4a:	9b 01       	movw	r18, r22
     c4c:	ac 01       	movw	r20, r24
     c4e:	c5 01       	movw	r24, r10
     c50:	b4 01       	movw	r22, r8
     c52:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     c56:	4b 01       	movw	r8, r22
     c58:	5c 01       	movw	r10, r24
	};
	JdNew = Jd1 + C1 - deltat;
     c5a:	a7 01       	movw	r20, r14
     c5c:	96 01       	movw	r18, r12
     c5e:	69 89       	ldd	r22, Y+17	; 0x11
     c60:	7a 89       	ldd	r23, Y+18	; 0x12
     c62:	8b 89       	ldd	r24, Y+19	; 0x13
     c64:	9c 89       	ldd	r25, Y+20	; 0x14
     c66:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     c6a:	a5 01       	movw	r20, r10
     c6c:	94 01       	movw	r18, r8
     c6e:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
	return floorf(JdNew + 0.5 + timeZone/24);
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	5f e3       	ldi	r21, 0x3F	; 63
     c7a:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     c7e:	6b 01       	movw	r12, r22
     c80:	7c 01       	movw	r14, r24
     c82:	8d 89       	ldd	r24, Y+21	; 0x15
     c84:	9e 89       	ldd	r25, Y+22	; 0x16
     c86:	68 e1       	ldi	r22, 0x18	; 24
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
     c8e:	07 2e       	mov	r0, r23
     c90:	00 0c       	add	r0, r0
     c92:	88 0b       	sbc	r24, r24
     c94:	99 0b       	sbc	r25, r25
     c96:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__floatsisf>
     c9a:	9b 01       	movw	r18, r22
     c9c:	ac 01       	movw	r20, r24
     c9e:	c7 01       	movw	r24, r14
     ca0:	b6 01       	movw	r22, r12
     ca2:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     ca6:	0e 94 97 12 	call	0x252e	; 0x252e <floor>
}
     caa:	66 96       	adiw	r28, 0x16	; 22
     cac:	0f b6       	in	r0, 0x3f	; 63
     cae:	f8 94       	cli
     cb0:	de bf       	out	0x3e, r29	; 62
     cb2:	0f be       	out	0x3f, r0	; 63
     cb4:	cd bf       	out	0x3d, r28	; 61
     cb6:	df 91       	pop	r29
     cb8:	cf 91       	pop	r28
     cba:	ff 90       	pop	r15
     cbc:	ef 90       	pop	r14
     cbe:	df 90       	pop	r13
     cc0:	cf 90       	pop	r12
     cc2:	bf 90       	pop	r11
     cc4:	af 90       	pop	r10
     cc6:	9f 90       	pop	r9
     cc8:	8f 90       	pop	r8
     cca:	7f 90       	pop	r7
     ccc:	6f 90       	pop	r6
     cce:	5f 90       	pop	r5
     cd0:	4f 90       	pop	r4
     cd2:	08 95       	ret

00000cd4 <getSunLongitude>:

double getSunLongitude(long double jdn, int timeZone)
{
     cd4:	4f 92       	push	r4
     cd6:	5f 92       	push	r5
     cd8:	6f 92       	push	r6
     cda:	7f 92       	push	r7
     cdc:	8f 92       	push	r8
     cde:	9f 92       	push	r9
     ce0:	af 92       	push	r10
     ce2:	bf 92       	push	r11
     ce4:	cf 92       	push	r12
     ce6:	df 92       	push	r13
     ce8:	ef 92       	push	r14
     cea:	ff 92       	push	r15
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	28 97       	sbiw	r28, 0x08	; 8
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	5a 01       	movw	r10, r20
	long double T, T2, dr, M, L0, DL, L;
	T = (jdn - 2451545.5 - timeZone/24) / 36525; // Time in Julian centuries from 2000-01-01 12:00:00 GMT
     d02:	26 e6       	ldi	r18, 0x66	; 102
     d04:	31 ea       	ldi	r19, 0xA1	; 161
     d06:	45 e1       	ldi	r20, 0x15	; 21
     d08:	5a e4       	ldi	r21, 0x4A	; 74
     d0a:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     d0e:	6b 01       	movw	r12, r22
     d10:	7c 01       	movw	r14, r24
     d12:	c5 01       	movw	r24, r10
     d14:	68 e1       	ldi	r22, 0x18	; 24
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
     d1c:	07 2e       	mov	r0, r23
     d1e:	00 0c       	add	r0, r0
     d20:	88 0b       	sbc	r24, r24
     d22:	99 0b       	sbc	r25, r25
     d24:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__floatsisf>
     d28:	9b 01       	movw	r18, r22
     d2a:	ac 01       	movw	r20, r24
     d2c:	c7 01       	movw	r24, r14
     d2e:	b6 01       	movw	r22, r12
     d30:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	3d ea       	ldi	r19, 0xAD	; 173
     d38:	4e e0       	ldi	r20, 0x0E	; 14
     d3a:	57 e4       	ldi	r21, 0x47	; 71
     d3c:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
     d40:	6b 01       	movw	r12, r22
     d42:	7c 01       	movw	r14, r24
	T2 = T*T;
     d44:	9b 01       	movw	r18, r22
     d46:	ac 01       	movw	r20, r24
     d48:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     d4c:	4b 01       	movw	r8, r22
     d4e:	5c 01       	movw	r10, r24
	dr = M_PI/180; // degree to radian
	M = 357.52910 + 35999.05030*T - 0.0001559*T2 - 0.00000048*T*T2; // mean anomaly, degree
     d50:	2d e0       	ldi	r18, 0x0D	; 13
     d52:	3f e9       	ldi	r19, 0x9F	; 159
     d54:	4c e0       	ldi	r20, 0x0C	; 12
     d56:	57 e4       	ldi	r21, 0x47	; 71
     d58:	c7 01       	movw	r24, r14
     d5a:	b6 01       	movw	r22, r12
     d5c:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     d60:	2a eb       	ldi	r18, 0xBA	; 186
     d62:	33 ec       	ldi	r19, 0xC3	; 195
     d64:	42 eb       	ldi	r20, 0xB2	; 178
     d66:	53 e4       	ldi	r21, 0x43	; 67
     d68:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     d6c:	2b 01       	movw	r4, r22
     d6e:	3c 01       	movw	r6, r24
     d70:	26 e1       	ldi	r18, 0x16	; 22
     d72:	39 e7       	ldi	r19, 0x79	; 121
     d74:	43 e2       	ldi	r20, 0x23	; 35
     d76:	59 e3       	ldi	r21, 0x39	; 57
     d78:	c5 01       	movw	r24, r10
     d7a:	b4 01       	movw	r22, r8
     d7c:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     d80:	9b 01       	movw	r18, r22
     d82:	ac 01       	movw	r20, r24
     d84:	c3 01       	movw	r24, r6
     d86:	b2 01       	movw	r22, r4
     d88:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     d8c:	2b 01       	movw	r4, r22
     d8e:	3c 01       	movw	r6, r24
     d90:	29 e5       	ldi	r18, 0x59	; 89
     d92:	39 ed       	ldi	r19, 0xD9	; 217
     d94:	40 e0       	ldi	r20, 0x00	; 0
     d96:	55 e3       	ldi	r21, 0x35	; 53
     d98:	c7 01       	movw	r24, r14
     d9a:	b6 01       	movw	r22, r12
     d9c:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     da0:	9b 01       	movw	r18, r22
     da2:	ac 01       	movw	r20, r24
     da4:	c5 01       	movw	r24, r10
     da6:	b4 01       	movw	r22, r8
     da8:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     dac:	9b 01       	movw	r18, r22
     dae:	ac 01       	movw	r20, r24
     db0:	c3 01       	movw	r24, r6
     db2:	b2 01       	movw	r22, r4
     db4:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     db8:	2b 01       	movw	r4, r22
     dba:	3c 01       	movw	r6, r24
	L0 = 280.46645 + 36000.76983*T + 0.0003032*T2; // mean longitude, degree
     dbc:	25 ec       	ldi	r18, 0xC5	; 197
     dbe:	30 ea       	ldi	r19, 0xA0	; 160
     dc0:	4c e0       	ldi	r20, 0x0C	; 12
     dc2:	57 e4       	ldi	r21, 0x47	; 71
     dc4:	c7 01       	movw	r24, r14
     dc6:	b6 01       	movw	r22, r12
     dc8:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     dcc:	25 eb       	ldi	r18, 0xB5	; 181
     dce:	3b e3       	ldi	r19, 0x3B	; 59
     dd0:	4c e8       	ldi	r20, 0x8C	; 140
     dd2:	53 e4       	ldi	r21, 0x43	; 67
     dd4:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     dd8:	69 83       	std	Y+1, r22	; 0x01
     dda:	7a 83       	std	Y+2, r23	; 0x02
     ddc:	8b 83       	std	Y+3, r24	; 0x03
     dde:	9c 83       	std	Y+4, r25	; 0x04
     de0:	21 ed       	ldi	r18, 0xD1	; 209
     de2:	36 ef       	ldi	r19, 0xF6	; 246
     de4:	4e e9       	ldi	r20, 0x9E	; 158
     de6:	59 e3       	ldi	r21, 0x39	; 57
     de8:	c5 01       	movw	r24, r10
     dea:	b4 01       	movw	r22, r8
     dec:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     df0:	9b 01       	movw	r18, r22
     df2:	ac 01       	movw	r20, r24
     df4:	69 81       	ldd	r22, Y+1	; 0x01
     df6:	7a 81       	ldd	r23, Y+2	; 0x02
     df8:	8b 81       	ldd	r24, Y+3	; 0x03
     dfa:	9c 81       	ldd	r25, Y+4	; 0x04
     dfc:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     e00:	69 83       	std	Y+1, r22	; 0x01
     e02:	7a 83       	std	Y+2, r23	; 0x02
     e04:	8b 83       	std	Y+3, r24	; 0x03
     e06:	9c 83       	std	Y+4, r25	; 0x04
	DL = (1.914600 - 0.004817*T - 0.000014*T2)*sinf(dr*M);
     e08:	2d ee       	ldi	r18, 0xED	; 237
     e0a:	37 ed       	ldi	r19, 0xD7	; 215
     e0c:	4d e9       	ldi	r20, 0x9D	; 157
     e0e:	5b e3       	ldi	r21, 0x3B	; 59
     e10:	c7 01       	movw	r24, r14
     e12:	b6 01       	movw	r22, r12
     e14:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     e18:	9b 01       	movw	r18, r22
     e1a:	ac 01       	movw	r20, r24
     e1c:	6d e9       	ldi	r22, 0x9D	; 157
     e1e:	71 e1       	ldi	r23, 0x11	; 17
     e20:	85 ef       	ldi	r24, 0xF5	; 245
     e22:	9f e3       	ldi	r25, 0x3F	; 63
     e24:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     e28:	6d 83       	std	Y+5, r22	; 0x05
     e2a:	7e 83       	std	Y+6, r23	; 0x06
     e2c:	8f 83       	std	Y+7, r24	; 0x07
     e2e:	98 87       	std	Y+8, r25	; 0x08
     e30:	2b e8       	ldi	r18, 0x8B	; 139
     e32:	31 ee       	ldi	r19, 0xE1	; 225
     e34:	4a e6       	ldi	r20, 0x6A	; 106
     e36:	57 e3       	ldi	r21, 0x37	; 55
     e38:	c5 01       	movw	r24, r10
     e3a:	b4 01       	movw	r22, r8
     e3c:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     e40:	9b 01       	movw	r18, r22
     e42:	ac 01       	movw	r20, r24
     e44:	6d 81       	ldd	r22, Y+5	; 0x05
     e46:	7e 81       	ldd	r23, Y+6	; 0x06
     e48:	8f 81       	ldd	r24, Y+7	; 0x07
     e4a:	98 85       	ldd	r25, Y+8	; 0x08
     e4c:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     e50:	4b 01       	movw	r8, r22
     e52:	5c 01       	movw	r10, r24
     e54:	25 e3       	ldi	r18, 0x35	; 53
     e56:	3a ef       	ldi	r19, 0xFA	; 250
     e58:	4e e8       	ldi	r20, 0x8E	; 142
     e5a:	5c e3       	ldi	r21, 0x3C	; 60
     e5c:	c3 01       	movw	r24, r6
     e5e:	b2 01       	movw	r22, r4
     e60:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     e64:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sin>
     e68:	9b 01       	movw	r18, r22
     e6a:	ac 01       	movw	r20, r24
     e6c:	c5 01       	movw	r24, r10
     e6e:	b4 01       	movw	r22, r8
     e70:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     e74:	4b 01       	movw	r8, r22
     e76:	5c 01       	movw	r10, r24
	DL = DL + (0.019993 - 0.000101*T)*sinf(dr*2*M) + 0.000290*sinf(dr*3*M);
     e78:	26 ef       	ldi	r18, 0xF6	; 246
     e7a:	3f ec       	ldi	r19, 0xCF	; 207
     e7c:	43 ed       	ldi	r20, 0xD3	; 211
     e7e:	58 e3       	ldi	r21, 0x38	; 56
     e80:	c7 01       	movw	r24, r14
     e82:	b6 01       	movw	r22, r12
     e84:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     e88:	9b 01       	movw	r18, r22
     e8a:	ac 01       	movw	r20, r24
     e8c:	6c e5       	ldi	r22, 0x5C	; 92
     e8e:	78 ec       	ldi	r23, 0xC8	; 200
     e90:	83 ea       	ldi	r24, 0xA3	; 163
     e92:	9c e3       	ldi	r25, 0x3C	; 60
     e94:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     e98:	6b 01       	movw	r12, r22
     e9a:	7c 01       	movw	r14, r24
     e9c:	25 e3       	ldi	r18, 0x35	; 53
     e9e:	3a ef       	ldi	r19, 0xFA	; 250
     ea0:	4e e0       	ldi	r20, 0x0E	; 14
     ea2:	5d e3       	ldi	r21, 0x3D	; 61
     ea4:	c3 01       	movw	r24, r6
     ea6:	b2 01       	movw	r22, r4
     ea8:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     eac:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sin>
     eb0:	9b 01       	movw	r18, r22
     eb2:	ac 01       	movw	r20, r24
     eb4:	c7 01       	movw	r24, r14
     eb6:	b6 01       	movw	r22, r12
     eb8:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     ebc:	9b 01       	movw	r18, r22
     ebe:	ac 01       	movw	r20, r24
     ec0:	c5 01       	movw	r24, r10
     ec2:	b4 01       	movw	r22, r8
     ec4:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     ec8:	6b 01       	movw	r12, r22
     eca:	7c 01       	movw	r14, r24
     ecc:	20 e5       	ldi	r18, 0x50	; 80
     ece:	37 e7       	ldi	r19, 0x77	; 119
     ed0:	46 e5       	ldi	r20, 0x56	; 86
     ed2:	5d e3       	ldi	r21, 0x3D	; 61
     ed4:	c3 01       	movw	r24, r6
     ed6:	b2 01       	movw	r22, r4
     ed8:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     edc:	0e 94 d6 13 	call	0x27ac	; 0x27ac <sin>
     ee0:	24 e2       	ldi	r18, 0x24	; 36
     ee2:	3b e0       	ldi	r19, 0x0B	; 11
     ee4:	48 e9       	ldi	r20, 0x98	; 152
     ee6:	59 e3       	ldi	r21, 0x39	; 57
     ee8:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     eec:	9b 01       	movw	r18, r22
     eee:	ac 01       	movw	r20, r24
     ef0:	c7 01       	movw	r24, r14
     ef2:	b6 01       	movw	r22, r12
     ef4:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
     ef8:	9b 01       	movw	r18, r22
     efa:	ac 01       	movw	r20, r24
	L = L0 + DL; // true longitude, degree
     efc:	69 81       	ldd	r22, Y+1	; 0x01
     efe:	7a 81       	ldd	r23, Y+2	; 0x02
     f00:	8b 81       	ldd	r24, Y+3	; 0x03
     f02:	9c 81       	ldd	r25, Y+4	; 0x04
     f04:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
	L = L*dr;
     f08:	25 e3       	ldi	r18, 0x35	; 53
     f0a:	3a ef       	ldi	r19, 0xFA	; 250
     f0c:	4e e8       	ldi	r20, 0x8E	; 142
     f0e:	5c e3       	ldi	r21, 0x3C	; 60
     f10:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     f14:	6b 01       	movw	r12, r22
     f16:	7c 01       	movw	r14, r24
	L = L - M_PI*2*(floorf(L/(M_PI*2))); // Normalize to (0, 2*PI)
     f18:	2b ed       	ldi	r18, 0xDB	; 219
     f1a:	3f e0       	ldi	r19, 0x0F	; 15
     f1c:	49 ec       	ldi	r20, 0xC9	; 201
     f1e:	50 e4       	ldi	r21, 0x40	; 64
     f20:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
     f24:	0e 94 97 12 	call	0x252e	; 0x252e <floor>
     f28:	2b ed       	ldi	r18, 0xDB	; 219
     f2a:	3f e0       	ldi	r19, 0x0F	; 15
     f2c:	49 ec       	ldi	r20, 0xC9	; 201
     f2e:	50 e4       	ldi	r21, 0x40	; 64
     f30:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     f34:	9b 01       	movw	r18, r22
     f36:	ac 01       	movw	r20, r24
     f38:	c7 01       	movw	r24, r14
     f3a:	b6 01       	movw	r22, r12
     f3c:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
	return floorf(L / M_PI * 6);
     f40:	2b ed       	ldi	r18, 0xDB	; 219
     f42:	3f e0       	ldi	r19, 0x0F	; 15
     f44:	49 e4       	ldi	r20, 0x49	; 73
     f46:	50 e4       	ldi	r21, 0x40	; 64
     f48:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	40 ec       	ldi	r20, 0xC0	; 192
     f52:	50 e4       	ldi	r21, 0x40	; 64
     f54:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
     f58:	0e 94 97 12 	call	0x252e	; 0x252e <floor>
}
     f5c:	28 96       	adiw	r28, 0x08	; 8
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	ff 90       	pop	r15
     f6e:	ef 90       	pop	r14
     f70:	df 90       	pop	r13
     f72:	cf 90       	pop	r12
     f74:	bf 90       	pop	r11
     f76:	af 90       	pop	r10
     f78:	9f 90       	pop	r9
     f7a:	8f 90       	pop	r8
     f7c:	7f 90       	pop	r7
     f7e:	6f 90       	pop	r6
     f80:	5f 90       	pop	r5
     f82:	4f 90       	pop	r4
     f84:	08 95       	ret

00000f86 <getLunarMonth11>:

double getLunarMonth11(uint16_t yy, int timeZone)
{
     f86:	8f 92       	push	r8
     f88:	9f 92       	push	r9
     f8a:	af 92       	push	r10
     f8c:	bf 92       	push	r11
     f8e:	cf 92       	push	r12
     f90:	df 92       	push	r13
     f92:	ef 92       	push	r14
     f94:	ff 92       	push	r15
     f96:	cf 93       	push	r28
     f98:	df 93       	push	r29
     f9a:	eb 01       	movw	r28, r22
	long double k, off, nm, sunLong;
	off = jdFromDate(31, 12, yy) - 2415021;
     f9c:	ac 01       	movw	r20, r24
     f9e:	6c e0       	ldi	r22, 0x0C	; 12
     fa0:	8f e1       	ldi	r24, 0x1F	; 31
     fa2:	0e 94 03 02 	call	0x406	; 0x406 <jdFromDate>
     fa6:	24 eb       	ldi	r18, 0xB4	; 180
     fa8:	36 e6       	ldi	r19, 0x66	; 102
     faa:	43 e1       	ldi	r20, 0x13	; 19
     fac:	5a e4       	ldi	r21, 0x4A	; 74
     fae:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
	k = floorf(off / 29.530588853);
     fb2:	25 ea       	ldi	r18, 0xA5	; 165
     fb4:	3e e3       	ldi	r19, 0x3E	; 62
     fb6:	4c ee       	ldi	r20, 0xEC	; 236
     fb8:	51 e4       	ldi	r21, 0x41	; 65
     fba:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
     fbe:	0e 94 97 12 	call	0x252e	; 0x252e <floor>
     fc2:	4b 01       	movw	r8, r22
     fc4:	5c 01       	movw	r10, r24
	nm = getNewMoonDay(k, timeZone);
     fc6:	ae 01       	movw	r20, r28
     fc8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <getNewMoonDay>
     fcc:	6b 01       	movw	r12, r22
     fce:	7c 01       	movw	r14, r24
	sunLong = getSunLongitude(nm, timeZone); // sun longitude at local midnight
     fd0:	ae 01       	movw	r20, r28
     fd2:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <getSunLongitude>
	if (sunLong >= 9) {
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e1       	ldi	r20, 0x10	; 16
     fdc:	51 e4       	ldi	r21, 0x41	; 65
     fde:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__gesf2>
     fe2:	88 23       	and	r24, r24
     fe4:	6c f0       	brlt	.+26     	; 0x1000 <getLunarMonth11+0x7a>
		nm = getNewMoonDay(k-1, timeZone);
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e8       	ldi	r20, 0x80	; 128
     fec:	5f e3       	ldi	r21, 0x3F	; 63
     fee:	c5 01       	movw	r24, r10
     ff0:	b4 01       	movw	r22, r8
     ff2:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
     ff6:	ae 01       	movw	r20, r28
     ff8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <getNewMoonDay>
     ffc:	6b 01       	movw	r12, r22
     ffe:	7c 01       	movw	r14, r24
	}
	return nm;
}
    1000:	c7 01       	movw	r24, r14
    1002:	b6 01       	movw	r22, r12
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	ff 90       	pop	r15
    100a:	ef 90       	pop	r14
    100c:	df 90       	pop	r13
    100e:	cf 90       	pop	r12
    1010:	bf 90       	pop	r11
    1012:	af 90       	pop	r10
    1014:	9f 90       	pop	r9
    1016:	8f 90       	pop	r8
    1018:	08 95       	ret

0000101a <getLeapMonthOffset>:

double getLeapMonthOffset(long double a11, int timeZone)
{
    101a:	2f 92       	push	r2
    101c:	3f 92       	push	r3
    101e:	4f 92       	push	r4
    1020:	5f 92       	push	r5
    1022:	6f 92       	push	r6
    1024:	7f 92       	push	r7
    1026:	8f 92       	push	r8
    1028:	9f 92       	push	r9
    102a:	af 92       	push	r10
    102c:	bf 92       	push	r11
    102e:	cf 92       	push	r12
    1030:	df 92       	push	r13
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	ea 01       	movw	r28, r20
	long double k, last, arc, i;
	k = floorf((a11 - 2415021.076998695) / 29.530588853 + 0.5);
    1040:	24 eb       	ldi	r18, 0xB4	; 180
    1042:	36 e6       	ldi	r19, 0x66	; 102
    1044:	43 e1       	ldi	r20, 0x13	; 19
    1046:	5a e4       	ldi	r21, 0x4A	; 74
    1048:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
    104c:	25 ea       	ldi	r18, 0xA5	; 165
    104e:	3e e3       	ldi	r19, 0x3E	; 62
    1050:	4c ee       	ldi	r20, 0xEC	; 236
    1052:	51 e4       	ldi	r21, 0x41	; 65
    1054:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
    1058:	20 e0       	ldi	r18, 0x00	; 0
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	40 e0       	ldi	r20, 0x00	; 0
    105e:	5f e3       	ldi	r21, 0x3F	; 63
    1060:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
    1064:	0e 94 97 12 	call	0x252e	; 0x252e <floor>
    1068:	4b 01       	movw	r8, r22
    106a:	5c 01       	movw	r10, r24
	last = 0;
	i = 1; // We start with the month following lunar month 11
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e8       	ldi	r20, 0x80	; 128
    1072:	5f e3       	ldi	r21, 0x3F	; 63
    1074:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
    1078:	ae 01       	movw	r20, r28
    107a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <getNewMoonDay>
    107e:	ae 01       	movw	r20, r28
    1080:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <getSunLongitude>
    1084:	56 2e       	mov	r5, r22
    1086:	47 2e       	mov	r4, r23
    1088:	38 2e       	mov	r3, r24
    108a:	29 2e       	mov	r2, r25
double getLeapMonthOffset(long double a11, int timeZone)
{
	long double k, last, arc, i;
	k = floorf((a11 - 2415021.076998695) / 29.530588853 + 0.5);
	last = 0;
	i = 1; // We start with the month following lunar month 11
    108c:	0f 2e       	mov	r0, r31
    108e:	c1 2c       	mov	r12, r1
    1090:	d1 2c       	mov	r13, r1
    1092:	f0 e8       	ldi	r31, 0x80	; 128
    1094:	ef 2e       	mov	r14, r31
    1096:	ff e3       	ldi	r31, 0x3F	; 63
    1098:	ff 2e       	mov	r15, r31
    109a:	f0 2d       	mov	r31, r0
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
	do {
		last = arc;
		i++;
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e8       	ldi	r20, 0x80	; 128
    10a2:	5f e3       	ldi	r21, 0x3F	; 63
    10a4:	c7 01       	movw	r24, r14
    10a6:	b6 01       	movw	r22, r12
    10a8:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
    10ac:	6b 01       	movw	r12, r22
    10ae:	7c 01       	movw	r14, r24
		arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    10b0:	9b 01       	movw	r18, r22
    10b2:	ac 01       	movw	r20, r24
    10b4:	c5 01       	movw	r24, r10
    10b6:	b4 01       	movw	r22, r8
    10b8:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
    10bc:	ae 01       	movw	r20, r28
    10be:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <getNewMoonDay>
    10c2:	ae 01       	movw	r20, r28
    10c4:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <getSunLongitude>
    10c8:	16 2f       	mov	r17, r22
    10ca:	07 2f       	mov	r16, r23
    10cc:	78 2e       	mov	r7, r24
    10ce:	69 2e       	mov	r6, r25
	} while (arc != last && i < 14);
    10d0:	26 2f       	mov	r18, r22
    10d2:	37 2f       	mov	r19, r23
    10d4:	48 2f       	mov	r20, r24
    10d6:	59 2f       	mov	r21, r25
    10d8:	65 2d       	mov	r22, r5
    10da:	74 2d       	mov	r23, r4
    10dc:	83 2d       	mov	r24, r3
    10de:	92 2d       	mov	r25, r2
    10e0:	0e 94 ad 11 	call	0x235a	; 0x235a <__cmpsf2>
    10e4:	88 23       	and	r24, r24
    10e6:	71 f0       	breq	.+28     	; 0x1104 <getLeapMonthOffset+0xea>
	i = 1; // We start with the month following lunar month 11
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
	do {
		last = arc;
		i++;
		arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    10e8:	51 2e       	mov	r5, r17
    10ea:	40 2e       	mov	r4, r16
    10ec:	37 2c       	mov	r3, r7
    10ee:	26 2c       	mov	r2, r6
	} while (arc != last && i < 14);
    10f0:	20 e0       	ldi	r18, 0x00	; 0
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	40 e6       	ldi	r20, 0x60	; 96
    10f6:	51 e4       	ldi	r21, 0x41	; 65
    10f8:	c7 01       	movw	r24, r14
    10fa:	b6 01       	movw	r22, r12
    10fc:	0e 94 ad 11 	call	0x235a	; 0x235a <__cmpsf2>
    1100:	88 23       	and	r24, r24
    1102:	64 f2       	brlt	.-104    	; 0x109c <getLeapMonthOffset+0x82>
	return i-1;
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	40 e8       	ldi	r20, 0x80	; 128
    110a:	5f e3       	ldi	r21, 0x3F	; 63
    110c:	c7 01       	movw	r24, r14
    110e:	b6 01       	movw	r22, r12
    1110:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
}
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	cf 90       	pop	r12
    1124:	bf 90       	pop	r11
    1126:	af 90       	pop	r10
    1128:	9f 90       	pop	r9
    112a:	8f 90       	pop	r8
    112c:	7f 90       	pop	r7
    112e:	6f 90       	pop	r6
    1130:	5f 90       	pop	r5
    1132:	4f 90       	pop	r4
    1134:	3f 90       	pop	r3
    1136:	2f 90       	pop	r2
    1138:	08 95       	ret

0000113a <convertSolar2Lunar>:

double convertSolar2Lunar(uint8_t dd, uint8_t mm, uint16_t yy, int timeZone)
{
    113a:	2f 92       	push	r2
    113c:	3f 92       	push	r3
    113e:	4f 92       	push	r4
    1140:	5f 92       	push	r5
    1142:	6f 92       	push	r6
    1144:	7f 92       	push	r7
    1146:	8f 92       	push	r8
    1148:	9f 92       	push	r9
    114a:	af 92       	push	r10
    114c:	bf 92       	push	r11
    114e:	cf 92       	push	r12
    1150:	df 92       	push	r13
    1152:	ef 92       	push	r14
    1154:	ff 92       	push	r15
    1156:	0f 93       	push	r16
    1158:	1f 93       	push	r17
    115a:	cf 93       	push	r28
    115c:	df 93       	push	r29
    115e:	ea 01       	movw	r28, r20
    1160:	19 01       	movw	r2, r18
	long double k, dayNumber, monthStart, a11, b11, diff, leapMonthDiff;
	dayNumber = jdFromDate(dd, mm, yy);
    1162:	0e 94 03 02 	call	0x406	; 0x406 <jdFromDate>
    1166:	4b 01       	movw	r8, r22
    1168:	5c 01       	movw	r10, r24
	k = floorf((dayNumber - 2415021.076998695) / 29.530588853);
    116a:	24 eb       	ldi	r18, 0xB4	; 180
    116c:	36 e6       	ldi	r19, 0x66	; 102
    116e:	43 e1       	ldi	r20, 0x13	; 19
    1170:	5a e4       	ldi	r21, 0x4A	; 74
    1172:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
    1176:	25 ea       	ldi	r18, 0xA5	; 165
    1178:	3e e3       	ldi	r19, 0x3E	; 62
    117a:	4c ee       	ldi	r20, 0xEC	; 236
    117c:	51 e4       	ldi	r21, 0x41	; 65
    117e:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
    1182:	0e 94 97 12 	call	0x252e	; 0x252e <floor>
    1186:	2b 01       	movw	r4, r22
    1188:	3c 01       	movw	r6, r24
	monthStart = getNewMoonDay(k+1, timeZone);
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e8       	ldi	r20, 0x80	; 128
    1190:	5f e3       	ldi	r21, 0x3F	; 63
    1192:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
    1196:	a1 01       	movw	r20, r2
    1198:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <getNewMoonDay>
    119c:	6b 01       	movw	r12, r22
    119e:	7c 01       	movw	r14, r24
	if (monthStart > dayNumber) {
    11a0:	9b 01       	movw	r18, r22
    11a2:	ac 01       	movw	r20, r24
    11a4:	c5 01       	movw	r24, r10
    11a6:	b4 01       	movw	r22, r8
    11a8:	0e 94 ad 11 	call	0x235a	; 0x235a <__cmpsf2>
    11ac:	88 23       	and	r24, r24
    11ae:	3c f4       	brge	.+14     	; 0x11be <convertSolar2Lunar+0x84>
		monthStart = getNewMoonDay(k, timeZone);
    11b0:	a1 01       	movw	r20, r2
    11b2:	c3 01       	movw	r24, r6
    11b4:	b2 01       	movw	r22, r4
    11b6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <getNewMoonDay>
    11ba:	6b 01       	movw	r12, r22
    11bc:	7c 01       	movw	r14, r24
	}
	a11 = getLunarMonth11(yy, timeZone);
    11be:	b1 01       	movw	r22, r2
    11c0:	ce 01       	movw	r24, r28
    11c2:	0e 94 c3 07 	call	0xf86	; 0xf86 <getLunarMonth11>
    11c6:	16 2f       	mov	r17, r22
    11c8:	07 2f       	mov	r16, r23
    11ca:	78 2e       	mov	r7, r24
    11cc:	69 2e       	mov	r6, r25
	b11 = a11;
	if (a11 >= monthStart) {
    11ce:	26 2f       	mov	r18, r22
    11d0:	37 2f       	mov	r19, r23
    11d2:	48 2f       	mov	r20, r24
    11d4:	59 2f       	mov	r21, r25
    11d6:	c7 01       	movw	r24, r14
    11d8:	b6 01       	movw	r22, r12
    11da:	0e 94 ad 11 	call	0x235a	; 0x235a <__cmpsf2>
    11de:	18 16       	cp	r1, r24
    11e0:	94 f0       	brlt	.+36     	; 0x1206 <convertSolar2Lunar+0xcc>
		lunarYear = yy;
    11e2:	d0 93 93 00 	sts	0x0093, r29	; 0x800093 <lunarYear+0x1>
    11e6:	c0 93 92 00 	sts	0x0092, r28	; 0x800092 <lunarYear>
		a11 = getLunarMonth11(yy-1, timeZone);
    11ea:	b1 01       	movw	r22, r2
    11ec:	ce 01       	movw	r24, r28
    11ee:	01 97       	sbiw	r24, 0x01	; 1
    11f0:	0e 94 c3 07 	call	0xf86	; 0xf86 <getLunarMonth11>
	monthStart = getNewMoonDay(k+1, timeZone);
	if (monthStart > dayNumber) {
		monthStart = getNewMoonDay(k, timeZone);
	}
	a11 = getLunarMonth11(yy, timeZone);
	b11 = a11;
    11f4:	c1 2f       	mov	r28, r17
    11f6:	d0 2f       	mov	r29, r16
    11f8:	57 2c       	mov	r5, r7
    11fa:	46 2c       	mov	r4, r6
	if (a11 >= monthStart) {
		lunarYear = yy;
		a11 = getLunarMonth11(yy-1, timeZone);
    11fc:	16 2f       	mov	r17, r22
    11fe:	07 2f       	mov	r16, r23
    1200:	78 2e       	mov	r7, r24
    1202:	69 2e       	mov	r6, r25
    1204:	0d c0       	rjmp	.+26     	; 0x1220 <convertSolar2Lunar+0xe6>
		} else {
		lunarYear = yy+1;
    1206:	ce 01       	movw	r24, r28
    1208:	01 96       	adiw	r24, 0x01	; 1
    120a:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <lunarYear+0x1>
    120e:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <lunarYear>
		b11 = getLunarMonth11(yy+1, timeZone);
    1212:	b1 01       	movw	r22, r2
    1214:	0e 94 c3 07 	call	0xf86	; 0xf86 <getLunarMonth11>
    1218:	c6 2f       	mov	r28, r22
    121a:	d7 2f       	mov	r29, r23
    121c:	58 2e       	mov	r5, r24
    121e:	49 2e       	mov	r4, r25
	}
	lunarDate = dayNumber-monthStart+1;
    1220:	a7 01       	movw	r20, r14
    1222:	96 01       	movw	r18, r12
    1224:	c5 01       	movw	r24, r10
    1226:	b4 01       	movw	r22, r8
    1228:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e8       	ldi	r20, 0x80	; 128
    1232:	5f e3       	ldi	r21, 0x3F	; 63
    1234:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
    1238:	0e 94 24 12 	call	0x2448	; 0x2448 <__fixsfsi>
    123c:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <lunarDate+0x1>
    1240:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <lunarDate>
	diff = floorf((monthStart - a11)/29);
    1244:	21 2f       	mov	r18, r17
    1246:	30 2f       	mov	r19, r16
    1248:	47 2d       	mov	r20, r7
    124a:	56 2d       	mov	r21, r6
    124c:	c7 01       	movw	r24, r14
    124e:	b6 01       	movw	r22, r12
    1250:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	48 ee       	ldi	r20, 0xE8	; 232
    125a:	51 e4       	ldi	r21, 0x41	; 65
    125c:	0e 94 b2 11 	call	0x2364	; 0x2364 <__divsf3>
    1260:	0e 94 97 12 	call	0x252e	; 0x252e <floor>
    1264:	6b 01       	movw	r12, r22
    1266:	7c 01       	movw	r14, r24
	lunarMonth = diff+11;
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	40 e3       	ldi	r20, 0x30	; 48
    126e:	51 e4       	ldi	r21, 0x41	; 65
    1270:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
    1274:	0e 94 24 12 	call	0x2448	; 0x2448 <__fixsfsi>
    1278:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <lunarMonth+0x1>
    127c:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <lunarMonth>
	if (b11 - a11 > 365) {
    1280:	21 2f       	mov	r18, r17
    1282:	30 2f       	mov	r19, r16
    1284:	47 2d       	mov	r20, r7
    1286:	56 2d       	mov	r21, r6
    1288:	6c 2f       	mov	r22, r28
    128a:	7d 2f       	mov	r23, r29
    128c:	85 2d       	mov	r24, r5
    128e:	94 2d       	mov	r25, r4
    1290:	0e 94 40 11 	call	0x2280	; 0x2280 <__subsf3>
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e8       	ldi	r19, 0x80	; 128
    1298:	46 eb       	ldi	r20, 0xB6	; 182
    129a:	53 e4       	ldi	r21, 0x43	; 67
    129c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__gesf2>
    12a0:	18 16       	cp	r1, r24
    12a2:	ec f4       	brge	.+58     	; 0x12de <convertSolar2Lunar+0x1a4>
		leapMonthDiff = getLeapMonthOffset(a11, timeZone);
    12a4:	a1 01       	movw	r20, r2
    12a6:	61 2f       	mov	r22, r17
    12a8:	70 2f       	mov	r23, r16
    12aa:	87 2d       	mov	r24, r7
    12ac:	96 2d       	mov	r25, r6
    12ae:	0e 94 0d 08 	call	0x101a	; 0x101a <getLeapMonthOffset>
    12b2:	9b 01       	movw	r18, r22
    12b4:	ac 01       	movw	r20, r24
		if (diff >= leapMonthDiff) {
    12b6:	c7 01       	movw	r24, r14
    12b8:	b6 01       	movw	r22, r12
    12ba:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__gesf2>
    12be:	88 23       	and	r24, r24
    12c0:	74 f0       	brlt	.+28     	; 0x12de <convertSolar2Lunar+0x1a4>
			lunarMonth = diff + 10;
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e2       	ldi	r20, 0x20	; 32
    12c8:	51 e4       	ldi	r21, 0x41	; 65
    12ca:	c7 01       	movw	r24, r14
    12cc:	b6 01       	movw	r22, r12
    12ce:	0e 94 41 11 	call	0x2282	; 0x2282 <__addsf3>
    12d2:	0e 94 24 12 	call	0x2448	; 0x2448 <__fixsfsi>
    12d6:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <lunarMonth+0x1>
    12da:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <lunarMonth>
// 			if (diff == leapMonthDiff) {
// 				lunarLeap = 1;
// 			}
		}
	}
	if (lunarMonth > 12) {
    12de:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <lunarMonth>
    12e2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <lunarMonth+0x1>
    12e6:	0d 97       	sbiw	r24, 0x0d	; 13
    12e8:	4c f0       	brlt	.+18     	; 0x12fc <convertSolar2Lunar+0x1c2>
		lunarMonth = lunarMonth - 12;
    12ea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <lunarMonth>
    12ee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <lunarMonth+0x1>
    12f2:	0c 97       	sbiw	r24, 0x0c	; 12
    12f4:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <lunarMonth+0x1>
    12f8:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <lunarMonth>
	}
	if (lunarMonth >= 11 && diff < 4) {
    12fc:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <lunarMonth>
    1300:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <lunarMonth+0x1>
    1304:	0b 97       	sbiw	r24, 0x0b	; 11
    1306:	9c f0       	brlt	.+38     	; 0x132e <convertSolar2Lunar+0x1f4>
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e8       	ldi	r20, 0x80	; 128
    130e:	50 e4       	ldi	r21, 0x40	; 64
    1310:	c7 01       	movw	r24, r14
    1312:	b6 01       	movw	r22, r12
    1314:	0e 94 ad 11 	call	0x235a	; 0x235a <__cmpsf2>
    1318:	88 23       	and	r24, r24
    131a:	4c f4       	brge	.+18     	; 0x132e <convertSolar2Lunar+0x1f4>
		lunarYear -= 1;
    131c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <lunarYear>
    1320:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <lunarYear+0x1>
    1324:	01 97       	sbiw	r24, 0x01	; 1
    1326:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <lunarYear+0x1>
    132a:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <lunarYear>
	}
}
    132e:	df 91       	pop	r29
    1330:	cf 91       	pop	r28
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	ff 90       	pop	r15
    1338:	ef 90       	pop	r14
    133a:	df 90       	pop	r13
    133c:	cf 90       	pop	r12
    133e:	bf 90       	pop	r11
    1340:	af 90       	pop	r10
    1342:	9f 90       	pop	r9
    1344:	8f 90       	pop	r8
    1346:	7f 90       	pop	r7
    1348:	6f 90       	pop	r6
    134a:	5f 90       	pop	r5
    134c:	4f 90       	pop	r4
    134e:	3f 90       	pop	r3
    1350:	2f 90       	pop	r2
    1352:	08 95       	ret

00001354 <spiSendByte>:
char digitsInUse = 8;

void spiSendByte (char databyte)
{
	// Copy data into the SPI data register
	SPDR = databyte;
    1354:	8f b9       	out	0x0f, r24	; 15
	// Wait until transfer is complete
	while (!(SPSR & (1 << SPIF)));
    1356:	77 9b       	sbis	0x0e, 7	; 14
    1358:	fe cf       	rjmp	.-4      	; 0x1356 <spiSendByte+0x2>
}
    135a:	08 95       	ret

0000135c <MAX7219_writeData>:

void MAX7219_writeData(uint8_t data_register, uint8_t data)
{
    135c:	cf 93       	push	r28
    135e:	c6 2f       	mov	r28, r22
	MAX7219_LOAD0;
    1360:	98 b3       	in	r25, 0x18	; 24
    1362:	9f 7e       	andi	r25, 0xEF	; 239
    1364:	98 bb       	out	0x18, r25	; 24
	// Send the register where the data will be stored
	spiSendByte(data_register);
    1366:	0e 94 aa 09 	call	0x1354	; 0x1354 <spiSendByte>
	// Send the data to be stored
	spiSendByte(data);
    136a:	8c 2f       	mov	r24, r28
    136c:	0e 94 aa 09 	call	0x1354	; 0x1354 <spiSendByte>
	MAX7219_LOAD1;
    1370:	88 b3       	in	r24, 0x18	; 24
    1372:	80 61       	ori	r24, 0x10	; 16
    1374:	88 bb       	out	0x18, r24	; 24
}
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <MAX7219_clearDisplay>:

void MAX7219_clearDisplay()
{
    137a:	cf 93       	push	r28
	char i = digitsInUse;
    137c:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	// Loop until 0, but don't run for zero
	do {
		// Set each display in use to blank
		MAX7219_writeData(i, MAX7219_CHAR_BLANK);
    1380:	6f e0       	ldi	r22, 0x0F	; 15
    1382:	8c 2f       	mov	r24, r28
    1384:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
	} while (--i);
    1388:	c1 50       	subi	r28, 0x01	; 1
    138a:	d1 f7       	brne	.-12     	; 0x1380 <MAX7219_clearDisplay+0x6>
}
    138c:	cf 91       	pop	r28
    138e:	08 95       	ret

00001390 <Display_7seg>:
	Month	= BCDToDec(tData[5]);
	Year	= BCDToDec(tData[6]);
}


void Display_7seg (void){
    1390:	0f 93       	push	r16
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
	/********display time -> hh:mm:ss***************/
	
	if (SW_time_date == 0)
    1398:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    139c:	81 11       	cpse	r24, r1
    139e:	56 c0       	rjmp	.+172    	; 0x144c <Display_7seg+0xbc>
	{
		MAX7219_clearDisplay();
    13a0:	0e 94 bd 09 	call	0x137a	; 0x137a <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    13a4:	6f e0       	ldi	r22, 0x0F	; 15
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	88 e0       	ldi	r24, 0x08	; 8
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    13b0:	6f e0       	ldi	r22, 0x0F	; 15
    13b2:	70 e0       	ldi	r23, 0x00	; 0
    13b4:	87 e0       	ldi	r24, 0x07	; 7
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(Second%10));
    13bc:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    13c0:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    13c4:	ca e0       	ldi	r28, 0x0A	; 10
    13c6:	d0 e0       	ldi	r29, 0x00	; 0
    13c8:	be 01       	movw	r22, r28
    13ca:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    13ce:	bc 01       	movw	r22, r24
    13d0:	86 e0       	ldi	r24, 0x06	; 6
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(Second/10));
    13d8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    13dc:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    13e0:	be 01       	movw	r22, r28
    13e2:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    13e6:	85 e0       	ldi	r24, 0x05	; 5
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Minute%10));
    13ee:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    13f2:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    13f6:	be 01       	movw	r22, r28
    13f8:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    13fc:	bc 01       	movw	r22, r24
    13fe:	84 e0       	ldi	r24, 0x04	; 4
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Minute/10));
    1406:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    140a:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    140e:	be 01       	movw	r22, r28
    1410:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1414:	83 e0       	ldi	r24, 0x03	; 3
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Hour%10));
    141c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    1420:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    1424:	be 01       	movw	r22, r28
    1426:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    142a:	bc 01       	movw	r22, r24
    142c:	82 e0       	ldi	r24, 0x02	; 2
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Hour/10));
    1434:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    1438:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    143c:	be 01       	movw	r22, r28
    143e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
    144a:	28 c1       	rjmp	.+592    	; 0x169c <Display_7seg+0x30c>
		
	}
	/********display date -> DD:MM:YY***************/
	else if (SW_time_date == 1)
    144c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1450:	81 30       	cpi	r24, 0x01	; 1
    1452:	09 f0       	breq	.+2      	; 0x1456 <Display_7seg+0xc6>
    1454:	76 c0       	rjmp	.+236    	; 0x1542 <Display_7seg+0x1b2>
	{
		MAX7219_clearDisplay();
    1456:	0e 94 bd 09 	call	0x137a	; 0x137a <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
    145a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    145e:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1462:	08 ee       	ldi	r16, 0xE8	; 232
    1464:	13 e0       	ldi	r17, 0x03	; 3
    1466:	b8 01       	movw	r22, r16
    1468:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    146c:	ca e0       	ldi	r28, 0x0A	; 10
    146e:	d0 e0       	ldi	r29, 0x00	; 0
    1470:	be 01       	movw	r22, r28
    1472:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1476:	bc 01       	movw	r22, r24
    1478:	88 e0       	ldi	r24, 0x08	; 8
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
    1480:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1484:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1488:	b8 01       	movw	r22, r16
    148a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    148e:	be 01       	movw	r22, r28
    1490:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1494:	cb 01       	movw	r24, r22
    1496:	be 01       	movw	r22, r28
    1498:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    149c:	bc 01       	movw	r22, r24
    149e:	87 e0       	ldi	r24, 0x07	; 7
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
    14a6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    14aa:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    14ae:	b8 01       	movw	r22, r16
    14b0:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    14b4:	64 e6       	ldi	r22, 0x64	; 100
    14b6:	70 e0       	ldi	r23, 0x00	; 0
    14b8:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    14bc:	cb 01       	movw	r24, r22
    14be:	be 01       	movw	r22, r28
    14c0:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    14c4:	bc 01       	movw	r22, r24
    14c6:	86 e0       	ldi	r24, 0x06	; 6
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
    14ce:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    14d2:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    14d6:	b8 01       	movw	r22, r16
    14d8:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    14dc:	85 e0       	ldi	r24, 0x05	; 5
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    14e4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    14e8:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    14ec:	be 01       	movw	r22, r28
    14ee:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    14f2:	bc 01       	movw	r22, r24
    14f4:	84 e0       	ldi	r24, 0x04	; 4
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    14fc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1500:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1504:	be 01       	movw	r22, r28
    1506:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    150a:	83 e0       	ldi	r24, 0x03	; 3
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    1512:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1516:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    151a:	be 01       	movw	r22, r28
    151c:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1520:	bc 01       	movw	r22, r24
    1522:	82 e0       	ldi	r24, 0x02	; 2
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    152a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    152e:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1532:	be 01       	movw	r22, r28
    1534:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
    1540:	ad c0       	rjmp	.+346    	; 0x169c <Display_7seg+0x30c>
		
	}
	/********display AM LICH *********************/
	else if (SW_time_date==2)
    1542:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1546:	82 30       	cpi	r24, 0x02	; 2
    1548:	09 f0       	breq	.+2      	; 0x154c <Display_7seg+0x1bc>
    154a:	76 c0       	rjmp	.+236    	; 0x1638 <Display_7seg+0x2a8>
	{
		MAX7219_clearDisplay();
    154c:	0e 94 bd 09 	call	0x137a	; 0x137a <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,((lunarYear%1000)%10));
    1550:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <lunarYear>
    1554:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <lunarYear+0x1>
    1558:	08 ee       	ldi	r16, 0xE8	; 232
    155a:	13 e0       	ldi	r17, 0x03	; 3
    155c:	b8 01       	movw	r22, r16
    155e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1562:	ca e0       	ldi	r28, 0x0A	; 10
    1564:	d0 e0       	ldi	r29, 0x00	; 0
    1566:	be 01       	movw	r22, r28
    1568:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    156c:	bc 01       	movw	r22, r24
    156e:	88 e0       	ldi	r24, 0x08	; 8
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,(((lunarYear%1000)/10)%10));
    1576:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <lunarYear>
    157a:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <lunarYear+0x1>
    157e:	b8 01       	movw	r22, r16
    1580:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1584:	be 01       	movw	r22, r28
    1586:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    158a:	cb 01       	movw	r24, r22
    158c:	be 01       	movw	r22, r28
    158e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1592:	bc 01       	movw	r22, r24
    1594:	87 e0       	ldi	r24, 0x07	; 7
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(((lunarYear%1000)/100)%10));
    159c:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <lunarYear>
    15a0:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <lunarYear+0x1>
    15a4:	b8 01       	movw	r22, r16
    15a6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    15aa:	64 e6       	ldi	r22, 0x64	; 100
    15ac:	70 e0       	ldi	r23, 0x00	; 0
    15ae:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    15b2:	cb 01       	movw	r24, r22
    15b4:	be 01       	movw	r22, r28
    15b6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    15ba:	bc 01       	movw	r22, r24
    15bc:	86 e0       	ldi	r24, 0x06	; 6
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(lunarYear/1000));
    15c4:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <lunarYear>
    15c8:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <lunarYear+0x1>
    15cc:	b8 01       	movw	r22, r16
    15ce:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    15d2:	85 e0       	ldi	r24, 0x05	; 5
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(lunarMonth%10));
    15da:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <lunarMonth>
    15de:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <lunarMonth+0x1>
    15e2:	be 01       	movw	r22, r28
    15e4:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    15e8:	bc 01       	movw	r22, r24
    15ea:	84 e0       	ldi	r24, 0x04	; 4
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(lunarMonth/10));
    15f2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <lunarMonth>
    15f6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <lunarMonth+0x1>
    15fa:	be 01       	movw	r22, r28
    15fc:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1600:	83 e0       	ldi	r24, 0x03	; 3
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(lunarDate%10));
    1608:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <lunarDate>
    160c:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <lunarDate+0x1>
    1610:	be 01       	movw	r22, r28
    1612:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1616:	bc 01       	movw	r22, r24
    1618:	82 e0       	ldi	r24, 0x02	; 2
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(lunarDate/10));
    1620:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <lunarDate>
    1624:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <lunarDate+0x1>
    1628:	be 01       	movw	r22, r28
    162a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
    1636:	32 c0       	rjmp	.+100    	; 0x169c <Display_7seg+0x30c>
		
	}
	else
	{
		MAX7219_clearDisplay();
    1638:	0e 94 bd 09 	call	0x137a	; 0x137a <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT3,(A_Minute%10));
    163c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <A_Minute>
    1640:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <A_Minute+0x1>
    1644:	ca e0       	ldi	r28, 0x0A	; 10
    1646:	d0 e0       	ldi	r29, 0x00	; 0
    1648:	be 01       	movw	r22, r28
    164a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    164e:	bc 01       	movw	r22, r24
    1650:	84 e0       	ldi	r24, 0x04	; 4
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(A_Minute/10));
    1658:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <A_Minute>
    165c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <A_Minute+0x1>
    1660:	be 01       	movw	r22, r28
    1662:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1666:	83 e0       	ldi	r24, 0x03	; 3
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(A_Hour%10));
    166e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Hour>
    1672:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Hour+0x1>
    1676:	be 01       	movw	r22, r28
    1678:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    167c:	bc 01       	movw	r22, r24
    167e:	82 e0       	ldi	r24, 0x02	; 2
    1680:	90 e0       	ldi	r25, 0x00	; 0
    1682:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(A_Hour/10));
    1686:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Hour>
    168a:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Hour+0x1>
    168e:	be 01       	movw	r22, r28
    1690:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
	}
}
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	08 95       	ret

000016a6 <Init_Timer0>:
	} while (--i);
}

void Init_Timer0(void){
	//Initialize Timer0 to 1s - overflow interrupt--------------------
    TCCR0=(1<<CS02)|(0<<CS01)|(1<<CS00);	//prescaler, clk/1024
    16a6:	85 e0       	ldi	r24, 0x05	; 5
    16a8:	83 bf       	out	0x33, r24	; 51
	
    TIMSK=(1<<TOIE0);						
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	89 bf       	out	0x39, r24	; 57
    sei();                      			
    16ae:	78 94       	sei
    16b0:	08 95       	ret

000016b2 <Init_interupt>:
	//----------------------------------------------------------------
}

void Init_interupt(void){
	MCUCR=(0<<ISC11)|(0<<ISC10)|(0<<ISC01)|(0<<ISC00);
    16b2:	15 be       	out	0x35, r1	; 53
	MCUCSR=(0<<ISC2);
    16b4:	14 be       	out	0x34, r1	; 52
	GICR=(1<<INT2)|(1<<INT1)|(1<<INT0);
    16b6:	80 ee       	ldi	r24, 0xE0	; 224
    16b8:	8b bf       	out	0x3b, r24	; 59
	sei();
    16ba:	78 94       	sei
    16bc:	08 95       	ret

000016be <main>:
//Main program
int main(void){	
	
	//MAX7219 init
	// SCK MOSI CS/LOAD/SS
	DDRB |= (1 << PIN_SCK) | (1 << PIN_MOSI) | (1 << PIN_SS);
    16be:	87 b3       	in	r24, 0x17	; 23
    16c0:	80 6b       	ori	r24, 0xB0	; 176
    16c2:	87 bb       	out	0x17, r24	; 23

	// SPI Enable, Master mode
	SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
    16c4:	8d b1       	in	r24, 0x0d	; 13
    16c6:	82 65       	ori	r24, 0x52	; 82
    16c8:	8d b9       	out	0x0d, r24	; 13

	// Decode mode to "Font Code-B"
	/*MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);*/

	// Scan limit runs from 0.
	MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, 0x07);
    16ca:	67 e0       	ldi	r22, 0x07	; 7
    16cc:	8b e0       	ldi	r24, 0x0B	; 11
    16ce:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_INTENSITY, 0x05);
    16d2:	65 e0       	ldi	r22, 0x05	; 5
    16d4:	8a e0       	ldi	r24, 0x0A	; 10
    16d6:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_POWER, ON);
    16da:	61 e0       	ldi	r22, 0x01	; 1
    16dc:	8c e0       	ldi	r24, 0x0C	; 12
    16de:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    16e2:	6f ef       	ldi	r22, 0xFF	; 255
    16e4:	89 e0       	ldi	r24, 0x09	; 9
    16e6:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
	
	//FixTime();
	Init_btn();// KEY_PORT=0xF8;
    16ea:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Init_btn>

	//PORT_LED_O |= (1<<BIT_LED_O);
	//------------------------------------
	Init_Timer0();
    16ee:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <Init_Timer0>
	
	Init_interupt();
    16f2:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <Init_interupt>
	
	TWI_Init(); 
    16f6:	0e 94 58 00 	call	0xb0	; 0xb0 <TWI_Init>
			
	TWI_DS1307_rblock(tData,7); 
    16fa:	67 e0       	ldi	r22, 0x07	; 7
    16fc:	8b e8       	ldi	r24, 0x8B	; 139
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 c3 00 	call	0x186	; 0x186 <TWI_DS1307_rblock>
	
	Decode(); 	//BCD data converter function from DS1307 to DEC
    1704:	0e 94 29 01 	call	0x252	; 0x252 <Decode>
    1708:	8f ec       	ldi	r24, 0xCF	; 207
    170a:	97 e0       	ldi	r25, 0x07	; 7
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <main+0x4e>
    1710:	00 c0       	rjmp	.+0      	; 0x1712 <main+0x54>
    1712:	00 00       	nop
	
	//************************************************************************************
	while(1)
	{
		
		yyyy=Year+2000;
    1714:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Year>
    1718:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Year+0x1>
    171c:	80 53       	subi	r24, 0x30	; 48
    171e:	98 4f       	sbci	r25, 0xF8	; 248
    1720:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <yyyy+0x1>
    1724:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <yyyy>
		convertSolar2Lunar(Date, Month, yyyy, timeZone);	
    1728:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <timeZone>
    172c:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <timeZone+0x1>
    1730:	40 91 80 00 	lds	r20, 0x0080	; 0x800080 <yyyy>
    1734:	50 91 81 00 	lds	r21, 0x0081	; 0x800081 <yyyy+0x1>
    1738:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Month>
    173c:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <Month+0x1>
    1740:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1744:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1748:	0e 94 9d 08 	call	0x113a	; 0x113a <convertSolar2Lunar>
		Display_7seg();
    174c:	0e 94 c8 09 	call	0x1390	; 0x1390 <Display_7seg>
    1750:	e1 cf       	rjmp	.-62     	; 0x1714 <main+0x56>

00001752 <__vector_11>:
	return 0;
}

char data[5];

ISR(TIMER0_OVF_vect){ 	
    1752:	1f 92       	push	r1
    1754:	0f 92       	push	r0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	0f 92       	push	r0
    175a:	11 24       	eor	r1, r1
    175c:	0f 93       	push	r16
    175e:	1f 93       	push	r17
    1760:	2f 93       	push	r18
    1762:	3f 93       	push	r19
    1764:	4f 93       	push	r20
    1766:	5f 93       	push	r21
    1768:	6f 93       	push	r22
    176a:	7f 93       	push	r23
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	ef 93       	push	r30
    177a:	ff 93       	push	r31
	Time_count++;
    177c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1780:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1784:	01 96       	adiw	r24, 0x01	; 1
    1786:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <Time_count+0x1>
    178a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <Time_count>
	if(Time_count>=10){ 	//1s Exactly
    178e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1792:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1796:	0a 97       	sbiw	r24, 0x0a	; 10
    1798:	28 f1       	brcs	.+74     	; 0x17e4 <__vector_11+0x92>
		                
		if(set == false ){
    179a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    179e:	81 11       	cpse	r24, r1
    17a0:	1d c0       	rjmp	.+58     	; 0x17dc <__vector_11+0x8a>
			//Read DS1307
			TWI_DS1307_wadr(0x00); 				
    17a2:	0e 94 5e 00 	call	0xbc	; 0xbc <TWI_DS1307_wadr>
    17a6:	8f ec       	ldi	r24, 0xCF	; 207
    17a8:	97 e0       	ldi	r25, 0x07	; 7
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <__vector_11+0x58>
    17ae:	00 c0       	rjmp	.+0      	; 0x17b0 <__vector_11+0x5e>
    17b0:	00 00       	nop
			_delay_ms(1);		   				
			TWI_DS1307_rblock(tData,7); 
    17b2:	67 e0       	ldi	r22, 0x07	; 7
    17b4:	8b e8       	ldi	r24, 0x8B	; 139
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 c3 00 	call	0x186	; 0x186 <TWI_DS1307_rblock>
					
			//Print result on LCD + 7Seg led		
			if(BCDToDec(tData[0]) !=Second){ 
    17bc:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <tData>
    17c0:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <Second>
    17ca:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <Second+0x1>
    17ce:	82 17       	cp	r24, r18
    17d0:	93 07       	cpc	r25, r19
    17d2:	21 f0       	breq	.+8      	; 0x17dc <__vector_11+0x8a>
				Decode();			
    17d4:	0e 94 29 01 	call	0x252	; 0x252 <Decode>
				Display_7seg();
    17d8:	0e 94 c8 09 	call	0x1390	; 0x1390 <Display_7seg>
			} 
		}
		Time_count=0; 
    17dc:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <Time_count+0x1>
    17e0:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <Time_count>
	}
	
	if ((Time_count>5)&&(Time_count<10)&&(count==1)&&(SW_time_date==0))	//blink hour
    17e4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    17e8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    17ec:	06 97       	sbiw	r24, 0x06	; 6
    17ee:	08 f4       	brcc	.+2      	; 0x17f2 <__vector_11+0xa0>
    17f0:	52 c0       	rjmp	.+164    	; 0x1896 <__vector_11+0x144>
    17f2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    17f6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    17fa:	0a 97       	sbiw	r24, 0x0a	; 10
    17fc:	08 f0       	brcs	.+2      	; 0x1800 <__vector_11+0xae>
    17fe:	4b c0       	rjmp	.+150    	; 0x1896 <__vector_11+0x144>
    1800:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1804:	81 30       	cpi	r24, 0x01	; 1
    1806:	09 f0       	breq	.+2      	; 0x180a <__vector_11+0xb8>
    1808:	46 c0       	rjmp	.+140    	; 0x1896 <__vector_11+0x144>
    180a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    180e:	81 11       	cpse	r24, r1
    1810:	42 c0       	rjmp	.+132    	; 0x1896 <__vector_11+0x144>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    1812:	6f ef       	ldi	r22, 0xFF	; 255
    1814:	89 e0       	ldi	r24, 0x09	; 9
    1816:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_clearDisplay();
    181a:	0e 94 bd 09 	call	0x137a	; 0x137a <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    181e:	6f e0       	ldi	r22, 0x0F	; 15
    1820:	88 e0       	ldi	r24, 0x08	; 8
    1822:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    1826:	6f e0       	ldi	r22, 0x0F	; 15
    1828:	87 e0       	ldi	r24, 0x07	; 7
    182a:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(Second%10));
    182e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    1832:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    1836:	ca e0       	ldi	r28, 0x0A	; 10
    1838:	d0 e0       	ldi	r29, 0x00	; 0
    183a:	be 01       	movw	r22, r28
    183c:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1840:	68 2f       	mov	r22, r24
    1842:	86 e0       	ldi	r24, 0x06	; 6
    1844:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(Second/10));
    1848:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    184c:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    1850:	be 01       	movw	r22, r28
    1852:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1856:	85 e0       	ldi	r24, 0x05	; 5
    1858:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Minute%10));
    185c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    1860:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    1864:	be 01       	movw	r22, r28
    1866:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    186a:	68 2f       	mov	r22, r24
    186c:	84 e0       	ldi	r24, 0x04	; 4
    186e:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Minute/10));
    1872:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    1876:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    187a:	be 01       	movw	r22, r28
    187c:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1880:	83 e0       	ldi	r24, 0x03	; 3
    1882:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,MAX7219_CHAR_BLANK);
    1886:	6f e0       	ldi	r22, 0x0F	; 15
    1888:	82 e0       	ldi	r24, 0x02	; 2
    188a:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,MAX7219_CHAR_BLANK);
    188e:	6f e0       	ldi	r22, 0x0F	; 15
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==2)&&(SW_time_date==0))	//blink min
    1896:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    189a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    189e:	06 97       	sbiw	r24, 0x06	; 6
    18a0:	08 f4       	brcc	.+2      	; 0x18a4 <__vector_11+0x152>
    18a2:	52 c0       	rjmp	.+164    	; 0x1948 <__vector_11+0x1f6>
    18a4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    18a8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    18ac:	0a 97       	sbiw	r24, 0x0a	; 10
    18ae:	08 f0       	brcs	.+2      	; 0x18b2 <__vector_11+0x160>
    18b0:	4b c0       	rjmp	.+150    	; 0x1948 <__vector_11+0x1f6>
    18b2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    18b6:	82 30       	cpi	r24, 0x02	; 2
    18b8:	09 f0       	breq	.+2      	; 0x18bc <__vector_11+0x16a>
    18ba:	46 c0       	rjmp	.+140    	; 0x1948 <__vector_11+0x1f6>
    18bc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    18c0:	81 11       	cpse	r24, r1
    18c2:	42 c0       	rjmp	.+132    	; 0x1948 <__vector_11+0x1f6>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    18c4:	6f ef       	ldi	r22, 0xFF	; 255
    18c6:	89 e0       	ldi	r24, 0x09	; 9
    18c8:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_clearDisplay();
    18cc:	0e 94 bd 09 	call	0x137a	; 0x137a <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    18d0:	6f e0       	ldi	r22, 0x0F	; 15
    18d2:	88 e0       	ldi	r24, 0x08	; 8
    18d4:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    18d8:	6f e0       	ldi	r22, 0x0F	; 15
    18da:	87 e0       	ldi	r24, 0x07	; 7
    18dc:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(Second%10));
    18e0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    18e4:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    18e8:	ca e0       	ldi	r28, 0x0A	; 10
    18ea:	d0 e0       	ldi	r29, 0x00	; 0
    18ec:	be 01       	movw	r22, r28
    18ee:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    18f2:	68 2f       	mov	r22, r24
    18f4:	86 e0       	ldi	r24, 0x06	; 6
    18f6:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(Second/10));
    18fa:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    18fe:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    1902:	be 01       	movw	r22, r28
    1904:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1908:	85 e0       	ldi	r24, 0x05	; 5
    190a:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,MAX7219_CHAR_BLANK);
    190e:	6f e0       	ldi	r22, 0x0F	; 15
    1910:	84 e0       	ldi	r24, 0x04	; 4
    1912:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,MAX7219_CHAR_BLANK);
    1916:	6f e0       	ldi	r22, 0x0F	; 15
    1918:	83 e0       	ldi	r24, 0x03	; 3
    191a:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Hour%10));
    191e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    1922:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    1926:	be 01       	movw	r22, r28
    1928:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    192c:	68 2f       	mov	r22, r24
    192e:	82 e0       	ldi	r24, 0x02	; 2
    1930:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Hour/10));
    1934:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    1938:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    193c:	be 01       	movw	r22, r28
    193e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==3)&&(SW_time_date==0))	//blink sec
    1948:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    194c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1950:	06 97       	sbiw	r24, 0x06	; 6
    1952:	08 f4       	brcc	.+2      	; 0x1956 <__vector_11+0x204>
    1954:	52 c0       	rjmp	.+164    	; 0x19fa <__vector_11+0x2a8>
    1956:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    195a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    195e:	0a 97       	sbiw	r24, 0x0a	; 10
    1960:	08 f0       	brcs	.+2      	; 0x1964 <__vector_11+0x212>
    1962:	4b c0       	rjmp	.+150    	; 0x19fa <__vector_11+0x2a8>
    1964:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1968:	83 30       	cpi	r24, 0x03	; 3
    196a:	09 f0       	breq	.+2      	; 0x196e <__vector_11+0x21c>
    196c:	46 c0       	rjmp	.+140    	; 0x19fa <__vector_11+0x2a8>
    196e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1972:	81 11       	cpse	r24, r1
    1974:	42 c0       	rjmp	.+132    	; 0x19fa <__vector_11+0x2a8>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    1976:	6f ef       	ldi	r22, 0xFF	; 255
    1978:	89 e0       	ldi	r24, 0x09	; 9
    197a:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_clearDisplay();
    197e:	0e 94 bd 09 	call	0x137a	; 0x137a <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    1982:	6f e0       	ldi	r22, 0x0F	; 15
    1984:	88 e0       	ldi	r24, 0x08	; 8
    1986:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    198a:	6f e0       	ldi	r22, 0x0F	; 15
    198c:	87 e0       	ldi	r24, 0x07	; 7
    198e:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    1992:	6f e0       	ldi	r22, 0x0F	; 15
    1994:	86 e0       	ldi	r24, 0x06	; 6
    1996:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    199a:	6f e0       	ldi	r22, 0x0F	; 15
    199c:	85 e0       	ldi	r24, 0x05	; 5
    199e:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Minute%10));
    19a2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    19a6:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    19aa:	ca e0       	ldi	r28, 0x0A	; 10
    19ac:	d0 e0       	ldi	r29, 0x00	; 0
    19ae:	be 01       	movw	r22, r28
    19b0:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    19b4:	68 2f       	mov	r22, r24
    19b6:	84 e0       	ldi	r24, 0x04	; 4
    19b8:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Minute/10));
    19bc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    19c0:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    19c4:	be 01       	movw	r22, r28
    19c6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    19ca:	83 e0       	ldi	r24, 0x03	; 3
    19cc:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Hour%10));
    19d0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    19d4:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    19d8:	be 01       	movw	r22, r28
    19da:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    19de:	68 2f       	mov	r22, r24
    19e0:	82 e0       	ldi	r24, 0x02	; 2
    19e2:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Hour/10));
    19e6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    19ea:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    19ee:	be 01       	movw	r22, r28
    19f0:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==1)&&(SW_time_date==1))	//blink date
    19fa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    19fe:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1a02:	06 97       	sbiw	r24, 0x06	; 6
    1a04:	08 f4       	brcc	.+2      	; 0x1a08 <__vector_11+0x2b6>
    1a06:	75 c0       	rjmp	.+234    	; 0x1af2 <__vector_11+0x3a0>
    1a08:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1a0c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1a10:	0a 97       	sbiw	r24, 0x0a	; 10
    1a12:	08 f0       	brcs	.+2      	; 0x1a16 <__vector_11+0x2c4>
    1a14:	6e c0       	rjmp	.+220    	; 0x1af2 <__vector_11+0x3a0>
    1a16:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <__vector_11+0x2ce>
    1a1e:	69 c0       	rjmp	.+210    	; 0x1af2 <__vector_11+0x3a0>
    1a20:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1a24:	81 30       	cpi	r24, 0x01	; 1
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <__vector_11+0x2d8>
    1a28:	64 c0       	rjmp	.+200    	; 0x1af2 <__vector_11+0x3a0>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    1a2a:	6f ef       	ldi	r22, 0xFF	; 255
    1a2c:	89 e0       	ldi	r24, 0x09	; 9
    1a2e:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_clearDisplay();
    1a32:	0e 94 bd 09 	call	0x137a	; 0x137a <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
    1a36:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1a3a:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1a3e:	08 ee       	ldi	r16, 0xE8	; 232
    1a40:	13 e0       	ldi	r17, 0x03	; 3
    1a42:	b8 01       	movw	r22, r16
    1a44:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1a48:	ca e0       	ldi	r28, 0x0A	; 10
    1a4a:	d0 e0       	ldi	r29, 0x00	; 0
    1a4c:	be 01       	movw	r22, r28
    1a4e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1a52:	68 2f       	mov	r22, r24
    1a54:	88 e0       	ldi	r24, 0x08	; 8
    1a56:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));	
    1a5a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1a5e:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1a62:	b8 01       	movw	r22, r16
    1a64:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1a68:	be 01       	movw	r22, r28
    1a6a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1a6e:	cb 01       	movw	r24, r22
    1a70:	be 01       	movw	r22, r28
    1a72:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1a76:	68 2f       	mov	r22, r24
    1a78:	87 e0       	ldi	r24, 0x07	; 7
    1a7a:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
    1a7e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1a82:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1a86:	b8 01       	movw	r22, r16
    1a88:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1a8c:	64 e6       	ldi	r22, 0x64	; 100
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1a94:	cb 01       	movw	r24, r22
    1a96:	be 01       	movw	r22, r28
    1a98:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1a9c:	68 2f       	mov	r22, r24
    1a9e:	86 e0       	ldi	r24, 0x06	; 6
    1aa0:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
    1aa4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1aa8:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1aac:	b8 01       	movw	r22, r16
    1aae:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1ab2:	85 e0       	ldi	r24, 0x05	; 5
    1ab4:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    1ab8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1abc:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1ac0:	be 01       	movw	r22, r28
    1ac2:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1ac6:	68 2f       	mov	r22, r24
    1ac8:	84 e0       	ldi	r24, 0x04	; 4
    1aca:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    1ace:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1ad2:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1ad6:	be 01       	movw	r22, r28
    1ad8:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1adc:	83 e0       	ldi	r24, 0x03	; 3
    1ade:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,MAX7219_CHAR_BLANK);
    1ae2:	6f e0       	ldi	r22, 0x0F	; 15
    1ae4:	82 e0       	ldi	r24, 0x02	; 2
    1ae6:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,MAX7219_CHAR_BLANK);
    1aea:	6f e0       	ldi	r22, 0x0F	; 15
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==2)&&(SW_time_date==1))	//blink month
    1af2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1af6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1afa:	06 97       	sbiw	r24, 0x06	; 6
    1afc:	08 f4       	brcc	.+2      	; 0x1b00 <__vector_11+0x3ae>
    1afe:	75 c0       	rjmp	.+234    	; 0x1bea <__vector_11+0x498>
    1b00:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1b04:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1b08:	0a 97       	sbiw	r24, 0x0a	; 10
    1b0a:	08 f0       	brcs	.+2      	; 0x1b0e <__vector_11+0x3bc>
    1b0c:	6e c0       	rjmp	.+220    	; 0x1bea <__vector_11+0x498>
    1b0e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1b12:	82 30       	cpi	r24, 0x02	; 2
    1b14:	09 f0       	breq	.+2      	; 0x1b18 <__vector_11+0x3c6>
    1b16:	69 c0       	rjmp	.+210    	; 0x1bea <__vector_11+0x498>
    1b18:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1b1c:	81 30       	cpi	r24, 0x01	; 1
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <__vector_11+0x3d0>
    1b20:	64 c0       	rjmp	.+200    	; 0x1bea <__vector_11+0x498>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    1b22:	6f ef       	ldi	r22, 0xFF	; 255
    1b24:	89 e0       	ldi	r24, 0x09	; 9
    1b26:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_clearDisplay();
    1b2a:	0e 94 bd 09 	call	0x137a	; 0x137a <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
    1b2e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1b32:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1b36:	08 ee       	ldi	r16, 0xE8	; 232
    1b38:	13 e0       	ldi	r17, 0x03	; 3
    1b3a:	b8 01       	movw	r22, r16
    1b3c:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1b40:	ca e0       	ldi	r28, 0x0A	; 10
    1b42:	d0 e0       	ldi	r29, 0x00	; 0
    1b44:	be 01       	movw	r22, r28
    1b46:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1b4a:	68 2f       	mov	r22, r24
    1b4c:	88 e0       	ldi	r24, 0x08	; 8
    1b4e:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
    1b52:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1b56:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1b5a:	b8 01       	movw	r22, r16
    1b5c:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1b60:	be 01       	movw	r22, r28
    1b62:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1b66:	cb 01       	movw	r24, r22
    1b68:	be 01       	movw	r22, r28
    1b6a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1b6e:	68 2f       	mov	r22, r24
    1b70:	87 e0       	ldi	r24, 0x07	; 7
    1b72:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
    1b76:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1b7a:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1b7e:	b8 01       	movw	r22, r16
    1b80:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1b84:	64 e6       	ldi	r22, 0x64	; 100
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1b8c:	cb 01       	movw	r24, r22
    1b8e:	be 01       	movw	r22, r28
    1b90:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1b94:	68 2f       	mov	r22, r24
    1b96:	86 e0       	ldi	r24, 0x06	; 6
    1b98:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
    1b9c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1ba0:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1ba4:	b8 01       	movw	r22, r16
    1ba6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1baa:	85 e0       	ldi	r24, 0x05	; 5
    1bac:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,MAX7219_CHAR_BLANK);
    1bb0:	6f e0       	ldi	r22, 0x0F	; 15
    1bb2:	84 e0       	ldi	r24, 0x04	; 4
    1bb4:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,MAX7219_CHAR_BLANK);
    1bb8:	6f e0       	ldi	r22, 0x0F	; 15
    1bba:	83 e0       	ldi	r24, 0x03	; 3
    1bbc:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    1bc0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1bc4:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1bc8:	be 01       	movw	r22, r28
    1bca:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1bce:	68 2f       	mov	r22, r24
    1bd0:	82 e0       	ldi	r24, 0x02	; 2
    1bd2:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    1bd6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1bda:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1bde:	be 01       	movw	r22, r28
    1be0:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==3)&&(SW_time_date==1))	//blink year
    1bea:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1bee:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1bf2:	06 97       	sbiw	r24, 0x06	; 6
    1bf4:	08 f4       	brcc	.+2      	; 0x1bf8 <__vector_11+0x4a6>
    1bf6:	53 c0       	rjmp	.+166    	; 0x1c9e <__vector_11+0x54c>
    1bf8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1bfc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1c00:	0a 97       	sbiw	r24, 0x0a	; 10
    1c02:	08 f0       	brcs	.+2      	; 0x1c06 <__vector_11+0x4b4>
    1c04:	4c c0       	rjmp	.+152    	; 0x1c9e <__vector_11+0x54c>
    1c06:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1c0a:	83 30       	cpi	r24, 0x03	; 3
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <__vector_11+0x4be>
    1c0e:	47 c0       	rjmp	.+142    	; 0x1c9e <__vector_11+0x54c>
    1c10:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1c14:	81 30       	cpi	r24, 0x01	; 1
    1c16:	09 f0       	breq	.+2      	; 0x1c1a <__vector_11+0x4c8>
    1c18:	42 c0       	rjmp	.+132    	; 0x1c9e <__vector_11+0x54c>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    1c1a:	6f ef       	ldi	r22, 0xFF	; 255
    1c1c:	89 e0       	ldi	r24, 0x09	; 9
    1c1e:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_clearDisplay();
    1c22:	0e 94 bd 09 	call	0x137a	; 0x137a <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    1c26:	6f e0       	ldi	r22, 0x0F	; 15
    1c28:	88 e0       	ldi	r24, 0x08	; 8
    1c2a:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    1c2e:	6f e0       	ldi	r22, 0x0F	; 15
    1c30:	87 e0       	ldi	r24, 0x07	; 7
    1c32:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    1c36:	6f e0       	ldi	r22, 0x0F	; 15
    1c38:	86 e0       	ldi	r24, 0x06	; 6
    1c3a:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    1c3e:	6f e0       	ldi	r22, 0x0F	; 15
    1c40:	85 e0       	ldi	r24, 0x05	; 5
    1c42:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    1c46:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1c4a:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1c4e:	ca e0       	ldi	r28, 0x0A	; 10
    1c50:	d0 e0       	ldi	r29, 0x00	; 0
    1c52:	be 01       	movw	r22, r28
    1c54:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1c58:	68 2f       	mov	r22, r24
    1c5a:	84 e0       	ldi	r24, 0x04	; 4
    1c5c:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    1c60:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1c64:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1c68:	be 01       	movw	r22, r28
    1c6a:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1c6e:	83 e0       	ldi	r24, 0x03	; 3
    1c70:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    1c74:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1c78:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1c7c:	be 01       	movw	r22, r28
    1c7e:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1c82:	68 2f       	mov	r22, r24
    1c84:	82 e0       	ldi	r24, 0x02	; 2
    1c86:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    1c8a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1c8e:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1c92:	be 01       	movw	r22, r28
    1c94:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==1)&&(SW_time_date==3))	//blink A_HOUR
    1c9e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1ca2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1ca6:	06 97       	sbiw	r24, 0x06	; 6
    1ca8:	08 f4       	brcc	.+2      	; 0x1cac <__vector_11+0x55a>
    1caa:	43 c0       	rjmp	.+134    	; 0x1d32 <__vector_11+0x5e0>
    1cac:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1cb0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1cb4:	0a 97       	sbiw	r24, 0x0a	; 10
    1cb6:	e8 f5       	brcc	.+122    	; 0x1d32 <__vector_11+0x5e0>
    1cb8:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1cbc:	81 30       	cpi	r24, 0x01	; 1
    1cbe:	c9 f5       	brne	.+114    	; 0x1d32 <__vector_11+0x5e0>
    1cc0:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1cc4:	83 30       	cpi	r24, 0x03	; 3
    1cc6:	a9 f5       	brne	.+106    	; 0x1d32 <__vector_11+0x5e0>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    1cc8:	6f ef       	ldi	r22, 0xFF	; 255
    1cca:	89 e0       	ldi	r24, 0x09	; 9
    1ccc:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_clearDisplay();
    1cd0:	0e 94 bd 09 	call	0x137a	; 0x137a <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    1cd4:	6f e0       	ldi	r22, 0x0F	; 15
    1cd6:	88 e0       	ldi	r24, 0x08	; 8
    1cd8:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    1cdc:	6f e0       	ldi	r22, 0x0F	; 15
    1cde:	87 e0       	ldi	r24, 0x07	; 7
    1ce0:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    1ce4:	6f e0       	ldi	r22, 0x0F	; 15
    1ce6:	86 e0       	ldi	r24, 0x06	; 6
    1ce8:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    1cec:	6f e0       	ldi	r22, 0x0F	; 15
    1cee:	85 e0       	ldi	r24, 0x05	; 5
    1cf0:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(A_Minute%10));
    1cf4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <A_Minute>
    1cf8:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <A_Minute+0x1>
    1cfc:	ca e0       	ldi	r28, 0x0A	; 10
    1cfe:	d0 e0       	ldi	r29, 0x00	; 0
    1d00:	be 01       	movw	r22, r28
    1d02:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1d06:	68 2f       	mov	r22, r24
    1d08:	84 e0       	ldi	r24, 0x04	; 4
    1d0a:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(A_Minute/10));
    1d0e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <A_Minute>
    1d12:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <A_Minute+0x1>
    1d16:	be 01       	movw	r22, r28
    1d18:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1d1c:	83 e0       	ldi	r24, 0x03	; 3
    1d1e:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,MAX7219_CHAR_BLANK);
    1d22:	6f e0       	ldi	r22, 0x0F	; 15
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,MAX7219_CHAR_BLANK);
    1d2a:	6f e0       	ldi	r22, 0x0F	; 15
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==2)&&(SW_time_date==3))	//blink A_MIN
    1d32:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1d36:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1d3a:	06 97       	sbiw	r24, 0x06	; 6
    1d3c:	08 f4       	brcc	.+2      	; 0x1d40 <__vector_11+0x5ee>
    1d3e:	43 c0       	rjmp	.+134    	; 0x1dc6 <__vector_11+0x674>
    1d40:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1d44:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1d48:	0a 97       	sbiw	r24, 0x0a	; 10
    1d4a:	e8 f5       	brcc	.+122    	; 0x1dc6 <__vector_11+0x674>
    1d4c:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1d50:	82 30       	cpi	r24, 0x02	; 2
    1d52:	c9 f5       	brne	.+114    	; 0x1dc6 <__vector_11+0x674>
    1d54:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1d58:	83 30       	cpi	r24, 0x03	; 3
    1d5a:	a9 f5       	brne	.+106    	; 0x1dc6 <__vector_11+0x674>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    1d5c:	6f ef       	ldi	r22, 0xFF	; 255
    1d5e:	89 e0       	ldi	r24, 0x09	; 9
    1d60:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_clearDisplay();
    1d64:	0e 94 bd 09 	call	0x137a	; 0x137a <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    1d68:	6f e0       	ldi	r22, 0x0F	; 15
    1d6a:	88 e0       	ldi	r24, 0x08	; 8
    1d6c:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    1d70:	6f e0       	ldi	r22, 0x0F	; 15
    1d72:	87 e0       	ldi	r24, 0x07	; 7
    1d74:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    1d78:	6f e0       	ldi	r22, 0x0F	; 15
    1d7a:	86 e0       	ldi	r24, 0x06	; 6
    1d7c:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    1d80:	6f e0       	ldi	r22, 0x0F	; 15
    1d82:	85 e0       	ldi	r24, 0x05	; 5
    1d84:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,MAX7219_CHAR_BLANK);
    1d88:	6f e0       	ldi	r22, 0x0F	; 15
    1d8a:	84 e0       	ldi	r24, 0x04	; 4
    1d8c:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,MAX7219_CHAR_BLANK);
    1d90:	6f e0       	ldi	r22, 0x0F	; 15
    1d92:	83 e0       	ldi	r24, 0x03	; 3
    1d94:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(A_Hour%10));
    1d98:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Hour>
    1d9c:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Hour+0x1>
    1da0:	ca e0       	ldi	r28, 0x0A	; 10
    1da2:	d0 e0       	ldi	r29, 0x00	; 0
    1da4:	be 01       	movw	r22, r28
    1da6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1daa:	68 2f       	mov	r22, r24
    1dac:	82 e0       	ldi	r24, 0x02	; 2
    1dae:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(A_Hour/10));
    1db2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Hour>
    1db6:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Hour+0x1>
    1dba:	be 01       	movw	r22, r28
    1dbc:	0e 94 58 14 	call	0x28b0	; 0x28b0 <__divmodhi4>
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	0e 94 ae 09 	call	0x135c	; 0x135c <MAX7219_writeData>
	}
}
    1dc6:	ff 91       	pop	r31
    1dc8:	ef 91       	pop	r30
    1dca:	df 91       	pop	r29
    1dcc:	cf 91       	pop	r28
    1dce:	bf 91       	pop	r27
    1dd0:	af 91       	pop	r26
    1dd2:	9f 91       	pop	r25
    1dd4:	8f 91       	pop	r24
    1dd6:	7f 91       	pop	r23
    1dd8:	6f 91       	pop	r22
    1dda:	5f 91       	pop	r21
    1ddc:	4f 91       	pop	r20
    1dde:	3f 91       	pop	r19
    1de0:	2f 91       	pop	r18
    1de2:	1f 91       	pop	r17
    1de4:	0f 91       	pop	r16
    1de6:	0f 90       	pop	r0
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	0f 90       	pop	r0
    1dec:	1f 90       	pop	r1
    1dee:	18 95       	reti

00001df0 <__vector_1>:


//SW mode button
ISR(INT0_vect){
    1df0:	1f 92       	push	r1
    1df2:	0f 92       	push	r0
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	0f 92       	push	r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	2f 93       	push	r18
    1dfc:	3f 93       	push	r19
    1dfe:	4f 93       	push	r20
    1e00:	5f 93       	push	r21
    1e02:	6f 93       	push	r22
    1e04:	7f 93       	push	r23
    1e06:	8f 93       	push	r24
    1e08:	9f 93       	push	r25
    1e0a:	af 93       	push	r26
    1e0c:	bf 93       	push	r27
    1e0e:	ef 93       	push	r30
    1e10:	ff 93       	push	r31
	
	if(set==false){
    1e12:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    1e16:	81 11       	cpse	r24, r1
    1e18:	0b c0       	rjmp	.+22     	; 0x1e30 <__vector_1+0x40>
		SW_time_date++;
    1e1a:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    1e1e:	9f 5f       	subi	r25, 0xFF	; 255
    1e20:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__data_end>
		if(SW_time_date > 3){
    1e24:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    1e28:	94 30       	cpi	r25, 0x04	; 4
    1e2a:	10 f0       	brcs	.+4      	; 0x1e30 <__vector_1+0x40>
			SW_time_date = 0;
    1e2c:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
		}
	}
	if(SW_time_date==0 && set==true) {
    1e30:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    1e34:	91 11       	cpse	r25, r1
    1e36:	0a c0       	rjmp	.+20     	; 0x1e4c <__vector_1+0x5c>
    1e38:	88 23       	and	r24, r24
    1e3a:	41 f0       	breq	.+16     	; 0x1e4c <__vector_1+0x5c>
		SW_time_date = 0;
    1e3c:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
		count=0;
    1e40:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
		FixTime();
    1e44:	0e 94 7e 01 	call	0x2fc	; 0x2fc <FixTime>
		set=false;
    1e48:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
	}
	if(SW_time_date==1 && set==true) {
    1e4c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1e50:	81 30       	cpi	r24, 0x01	; 1
    1e52:	69 f4       	brne	.+26     	; 0x1e6e <__vector_1+0x7e>
    1e54:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    1e58:	88 23       	and	r24, r24
    1e5a:	49 f0       	breq	.+18     	; 0x1e6e <__vector_1+0x7e>
		SW_time_date = 1;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
		count=0;
    1e62:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
		FixTime();
    1e66:	0e 94 7e 01 	call	0x2fc	; 0x2fc <FixTime>
		set=false;
    1e6a:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
	}
	if(SW_time_date==3 && set==true) {
    1e6e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1e72:	83 30       	cpi	r24, 0x03	; 3
    1e74:	71 f4       	brne	.+28     	; 0x1e92 <__vector_1+0xa2>
    1e76:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    1e7a:	88 23       	and	r24, r24
    1e7c:	51 f0       	breq	.+20     	; 0x1e92 <__vector_1+0xa2>
		SW_time_date = 3;
    1e7e:	83 e0       	ldi	r24, 0x03	; 3
    1e80:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
		count=0;
    1e84:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
		EN_alarm=true;
    1e88:	81 e0       	ldi	r24, 0x01	; 1
    1e8a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <EN_alarm>
		set=false;
    1e8e:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
    1e92:	2f e7       	ldi	r18, 0x7F	; 127
    1e94:	88 e3       	ldi	r24, 0x38	; 56
    1e96:	91 e0       	ldi	r25, 0x01	; 1
    1e98:	21 50       	subi	r18, 0x01	; 1
    1e9a:	80 40       	sbci	r24, 0x00	; 0
    1e9c:	90 40       	sbci	r25, 0x00	; 0
    1e9e:	e1 f7       	brne	.-8      	; 0x1e98 <__vector_1+0xa8>
    1ea0:	00 c0       	rjmp	.+0      	; 0x1ea2 <__vector_1+0xb2>
    1ea2:	00 00       	nop
	}
	_delay_ms(50);
}
    1ea4:	ff 91       	pop	r31
    1ea6:	ef 91       	pop	r30
    1ea8:	bf 91       	pop	r27
    1eaa:	af 91       	pop	r26
    1eac:	9f 91       	pop	r25
    1eae:	8f 91       	pop	r24
    1eb0:	7f 91       	pop	r23
    1eb2:	6f 91       	pop	r22
    1eb4:	5f 91       	pop	r21
    1eb6:	4f 91       	pop	r20
    1eb8:	3f 91       	pop	r19
    1eba:	2f 91       	pop	r18
    1ebc:	0f 90       	pop	r0
    1ebe:	0f be       	out	0x3f, r0	; 63
    1ec0:	0f 90       	pop	r0
    1ec2:	1f 90       	pop	r1
    1ec4:	18 95       	reti

00001ec6 <__vector_2>:


//Set time button
ISR(INT1_vect){
    1ec6:	1f 92       	push	r1
    1ec8:	0f 92       	push	r0
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	0f 92       	push	r0
    1ece:	11 24       	eor	r1, r1
    1ed0:	2f 93       	push	r18
    1ed2:	8f 93       	push	r24
    1ed4:	9f 93       	push	r25

	set = true;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <set>
	count++;
    1edc:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1ee0:	8f 5f       	subi	r24, 0xFF	; 255
    1ee2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <count>
	if (SW_time_date==0)
    1ee6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1eea:	81 11       	cpse	r24, r1
    1eec:	08 c0       	rjmp	.+16     	; 0x1efe <__vector_2+0x38>
	{
		if(count > 3) {
    1eee:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1ef2:	84 30       	cpi	r24, 0x04	; 4
    1ef4:	20 f0       	brcs	.+8      	; 0x1efe <__vector_2+0x38>
			count = 0;
    1ef6:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
			set=false;
    1efa:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
		}
	}
	if (SW_time_date==1)
    1efe:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	41 f4       	brne	.+16     	; 0x1f16 <__vector_2+0x50>
	{
		if(count > 3) {
    1f06:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1f0a:	84 30       	cpi	r24, 0x04	; 4
    1f0c:	20 f0       	brcs	.+8      	; 0x1f16 <__vector_2+0x50>
			count = 0;
    1f0e:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
			set=false;
    1f12:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
		}
	}
	if (SW_time_date==3)
    1f16:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1f1a:	83 30       	cpi	r24, 0x03	; 3
    1f1c:	51 f4       	brne	.+20     	; 0x1f32 <__vector_2+0x6c>
	{
		if(count > 2) {
    1f1e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1f22:	83 30       	cpi	r24, 0x03	; 3
    1f24:	30 f0       	brcs	.+12     	; 0x1f32 <__vector_2+0x6c>
			count = 0;
    1f26:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
			EN_alarm=false;
    1f2a:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <EN_alarm>
			set=false;
    1f2e:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
    1f32:	2f e7       	ldi	r18, 0x7F	; 127
    1f34:	88 e3       	ldi	r24, 0x38	; 56
    1f36:	91 e0       	ldi	r25, 0x01	; 1
    1f38:	21 50       	subi	r18, 0x01	; 1
    1f3a:	80 40       	sbci	r24, 0x00	; 0
    1f3c:	90 40       	sbci	r25, 0x00	; 0
    1f3e:	e1 f7       	brne	.-8      	; 0x1f38 <__vector_2+0x72>
    1f40:	00 c0       	rjmp	.+0      	; 0x1f42 <__vector_2+0x7c>
    1f42:	00 00       	nop
		}
	}
	_delay_ms(50);
}
    1f44:	9f 91       	pop	r25
    1f46:	8f 91       	pop	r24
    1f48:	2f 91       	pop	r18
    1f4a:	0f 90       	pop	r0
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	0f 90       	pop	r0
    1f50:	1f 90       	pop	r1
    1f52:	18 95       	reti

00001f54 <__vector_3>:

//increase button
ISR(INT2_vect){
    1f54:	1f 92       	push	r1
    1f56:	0f 92       	push	r0
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	0f 92       	push	r0
    1f5c:	11 24       	eor	r1, r1
    1f5e:	2f 93       	push	r18
    1f60:	3f 93       	push	r19
    1f62:	8f 93       	push	r24
    1f64:	9f 93       	push	r25
	if (EN_alarm == true && set==false)
    1f66:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <EN_alarm>
    1f6a:	88 23       	and	r24, r24
    1f6c:	39 f0       	breq	.+14     	; 0x1f7c <__vector_3+0x28>
    1f6e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    1f72:	81 11       	cpse	r24, r1
    1f74:	03 c0       	rjmp	.+6      	; 0x1f7c <__vector_3+0x28>
	{
		EN_alarm=false;
    1f76:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <EN_alarm>
		BTN_PORTD = (0<<BUZ_LED);
    1f7a:	12 ba       	out	0x12, r1	; 18
	}
	if((set == true) && (SW_time_date==0)){		//icrease hh, mm, ss
    1f7c:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    1f80:	88 23       	and	r24, r24
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <__vector_3+0x32>
    1f84:	51 c0       	rjmp	.+162    	; 0x2028 <__vector_3+0xd4>
    1f86:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    1f8a:	91 11       	cpse	r25, r1
    1f8c:	4d c0       	rjmp	.+154    	; 0x2028 <__vector_3+0xd4>
		if(count == 1) {
    1f8e:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    1f92:	91 30       	cpi	r25, 0x01	; 1
    1f94:	b1 f4       	brne	.+44     	; 0x1fc2 <__vector_3+0x6e>
			Hour++;
    1f96:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <Hour>
    1f9a:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <Hour+0x1>
    1f9e:	2f 5f       	subi	r18, 0xFF	; 255
    1fa0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fa2:	30 93 6e 00 	sts	0x006E, r19	; 0x80006e <Hour+0x1>
    1fa6:	20 93 6d 00 	sts	0x006D, r18	; 0x80006d <Hour>
			if(Hour > 23) Hour = 0;
    1faa:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <Hour>
    1fae:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <Hour+0x1>
    1fb2:	28 31       	cpi	r18, 0x18	; 24
    1fb4:	31 05       	cpc	r19, r1
    1fb6:	c4 f1       	brlt	.+112    	; 0x2028 <__vector_3+0xd4>
    1fb8:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <Hour+0x1>
    1fbc:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <Hour>
    1fc0:	33 c0       	rjmp	.+102    	; 0x2028 <__vector_3+0xd4>
		}
		else if(count == 2) {
    1fc2:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    1fc6:	92 30       	cpi	r25, 0x02	; 2
    1fc8:	b1 f4       	brne	.+44     	; 0x1ff6 <__vector_3+0xa2>
			Minute++;
    1fca:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <Minute>
    1fce:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <Minute+0x1>
    1fd2:	2f 5f       	subi	r18, 0xFF	; 255
    1fd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd6:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <Minute+0x1>
    1fda:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <Minute>
			if(Minute > 59) Minute = 0;
    1fde:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <Minute>
    1fe2:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <Minute+0x1>
    1fe6:	2c 33       	cpi	r18, 0x3C	; 60
    1fe8:	31 05       	cpc	r19, r1
    1fea:	f4 f0       	brlt	.+60     	; 0x2028 <__vector_3+0xd4>
    1fec:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Minute+0x1>
    1ff0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <Minute>
    1ff4:	19 c0       	rjmp	.+50     	; 0x2028 <__vector_3+0xd4>
		}
		else if(count == 3) {
    1ff6:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    1ffa:	93 30       	cpi	r25, 0x03	; 3
    1ffc:	a9 f4       	brne	.+42     	; 0x2028 <__vector_3+0xd4>
			Second++;
    1ffe:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <Second>
    2002:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <Second+0x1>
    2006:	2f 5f       	subi	r18, 0xFF	; 255
    2008:	3f 4f       	sbci	r19, 0xFF	; 255
    200a:	30 93 72 00 	sts	0x0072, r19	; 0x800072 <Second+0x1>
    200e:	20 93 71 00 	sts	0x0071, r18	; 0x800071 <Second>
			if(Second > 59) Second = 0;
    2012:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <Second>
    2016:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <Second+0x1>
    201a:	2c 33       	cpi	r18, 0x3C	; 60
    201c:	31 05       	cpc	r19, r1
    201e:	24 f0       	brlt	.+8      	; 0x2028 <__vector_3+0xd4>
    2020:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <Second+0x1>
    2024:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <Second>
		}
	}
	
	if((set == true) && (SW_time_date==1)){		//increase dd, mm, yyyy
    2028:	88 23       	and	r24, r24
    202a:	09 f4       	brne	.+2      	; 0x202e <__vector_3+0xda>
    202c:	e3 c0       	rjmp	.+454    	; 0x21f4 <__vector_3+0x2a0>
    202e:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    2032:	91 30       	cpi	r25, 0x01	; 1
    2034:	09 f0       	breq	.+2      	; 0x2038 <__vector_3+0xe4>
    2036:	de c0       	rjmp	.+444    	; 0x21f4 <__vector_3+0x2a0>
		if(count == 1) {
    2038:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    203c:	91 30       	cpi	r25, 0x01	; 1
    203e:	09 f0       	breq	.+2      	; 0x2042 <__vector_3+0xee>
    2040:	a4 c0       	rjmp	.+328    	; 0x218a <__vector_3+0x236>
			Date++;
    2042:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    2046:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    204a:	2f 5f       	subi	r18, 0xFF	; 255
    204c:	3f 4f       	sbci	r19, 0xFF	; 255
    204e:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    2052:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
			if(Month == 4 || Month == 6  || Month == 9  || Month == 11)
    2056:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    205a:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    205e:	24 30       	cpi	r18, 0x04	; 4
    2060:	31 05       	cpc	r19, r1
    2062:	a9 f0       	breq	.+42     	; 0x208e <__vector_3+0x13a>
    2064:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2068:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    206c:	26 30       	cpi	r18, 0x06	; 6
    206e:	31 05       	cpc	r19, r1
    2070:	71 f0       	breq	.+28     	; 0x208e <__vector_3+0x13a>
    2072:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2076:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    207a:	29 30       	cpi	r18, 0x09	; 9
    207c:	31 05       	cpc	r19, r1
    207e:	39 f0       	breq	.+14     	; 0x208e <__vector_3+0x13a>
    2080:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2084:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    2088:	2b 30       	cpi	r18, 0x0B	; 11
    208a:	31 05       	cpc	r19, r1
    208c:	79 f4       	brne	.+30     	; 0x20ac <__vector_3+0x158>
			{
				if(Date > 30)
    208e:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    2092:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    2096:	2f 31       	cpi	r18, 0x1F	; 31
    2098:	31 05       	cpc	r19, r1
    209a:	0c f4       	brge	.+2      	; 0x209e <__vector_3+0x14a>
    209c:	ab c0       	rjmp	.+342    	; 0x21f4 <__vector_3+0x2a0>
				Date=1;
    209e:	21 e0       	ldi	r18, 0x01	; 1
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    20a6:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    20aa:	a4 c0       	rjmp	.+328    	; 0x21f4 <__vector_3+0x2a0>
			}
			else if(Month == 1 || Month == 3  || Month == 5  || Month == 7 || Month == 8  || Month == 10  || Month == 12)
    20ac:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    20b0:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    20b4:	21 30       	cpi	r18, 0x01	; 1
    20b6:	31 05       	cpc	r19, r1
    20b8:	51 f1       	breq	.+84     	; 0x210e <__vector_3+0x1ba>
    20ba:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    20be:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    20c2:	23 30       	cpi	r18, 0x03	; 3
    20c4:	31 05       	cpc	r19, r1
    20c6:	19 f1       	breq	.+70     	; 0x210e <__vector_3+0x1ba>
    20c8:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    20cc:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    20d0:	25 30       	cpi	r18, 0x05	; 5
    20d2:	31 05       	cpc	r19, r1
    20d4:	e1 f0       	breq	.+56     	; 0x210e <__vector_3+0x1ba>
    20d6:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    20da:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    20de:	27 30       	cpi	r18, 0x07	; 7
    20e0:	31 05       	cpc	r19, r1
    20e2:	a9 f0       	breq	.+42     	; 0x210e <__vector_3+0x1ba>
    20e4:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    20e8:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    20ec:	28 30       	cpi	r18, 0x08	; 8
    20ee:	31 05       	cpc	r19, r1
    20f0:	71 f0       	breq	.+28     	; 0x210e <__vector_3+0x1ba>
    20f2:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    20f6:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    20fa:	2a 30       	cpi	r18, 0x0A	; 10
    20fc:	31 05       	cpc	r19, r1
    20fe:	39 f0       	breq	.+14     	; 0x210e <__vector_3+0x1ba>
    2100:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2104:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    2108:	2c 30       	cpi	r18, 0x0C	; 12
    210a:	31 05       	cpc	r19, r1
    210c:	79 f4       	brne	.+30     	; 0x212c <__vector_3+0x1d8>
			{
				if(Date >31)
    210e:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    2112:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    2116:	20 32       	cpi	r18, 0x20	; 32
    2118:	31 05       	cpc	r19, r1
    211a:	0c f4       	brge	.+2      	; 0x211e <__vector_3+0x1ca>
    211c:	6b c0       	rjmp	.+214    	; 0x21f4 <__vector_3+0x2a0>
				Date=1;
    211e:	21 e0       	ldi	r18, 0x01	; 1
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    2126:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    212a:	64 c0       	rjmp	.+200    	; 0x21f4 <__vector_3+0x2a0>
			}
			
			else if(yyyy/4 == 0 && yyyy/400 == 0)
    212c:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <yyyy>
    2130:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <yyyy+0x1>
    2134:	2d 5f       	subi	r18, 0xFD	; 253
    2136:	3f 4f       	sbci	r19, 0xFF	; 255
    2138:	27 30       	cpi	r18, 0x07	; 7
    213a:	31 05       	cpc	r19, r1
    213c:	c0 f4       	brcc	.+48     	; 0x216e <__vector_3+0x21a>
    213e:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <yyyy>
    2142:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <yyyy+0x1>
    2146:	21 57       	subi	r18, 0x71	; 113
    2148:	3e 4f       	sbci	r19, 0xFE	; 254
    214a:	2f 31       	cpi	r18, 0x1F	; 31
    214c:	33 40       	sbci	r19, 0x03	; 3
    214e:	78 f4       	brcc	.+30     	; 0x216e <__vector_3+0x21a>
			{
				if(Date > 29)
    2150:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    2154:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    2158:	2e 31       	cpi	r18, 0x1E	; 30
    215a:	31 05       	cpc	r19, r1
    215c:	0c f4       	brge	.+2      	; 0x2160 <__vector_3+0x20c>
    215e:	4a c0       	rjmp	.+148    	; 0x21f4 <__vector_3+0x2a0>
				Date=1;
    2160:	21 e0       	ldi	r18, 0x01	; 1
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    2168:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    216c:	43 c0       	rjmp	.+134    	; 0x21f4 <__vector_3+0x2a0>
			}
			else
			{
				if(Date > 28)
    216e:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    2172:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    2176:	2d 31       	cpi	r18, 0x1D	; 29
    2178:	31 05       	cpc	r19, r1
    217a:	e4 f1       	brlt	.+120    	; 0x21f4 <__vector_3+0x2a0>
				Date=1;
    217c:	21 e0       	ldi	r18, 0x01	; 1
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    2184:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    2188:	35 c0       	rjmp	.+106    	; 0x21f4 <__vector_3+0x2a0>
			}
		}
		else if(count == 2) {
    218a:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    218e:	92 30       	cpi	r25, 0x02	; 2
    2190:	c1 f4       	brne	.+48     	; 0x21c2 <__vector_3+0x26e>
			Month++;
    2192:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2196:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    219a:	2f 5f       	subi	r18, 0xFF	; 255
    219c:	3f 4f       	sbci	r19, 0xFF	; 255
    219e:	30 93 68 00 	sts	0x0068, r19	; 0x800068 <Month+0x1>
    21a2:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <Month>
			if(Month > 12) Month = 1;
    21a6:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    21aa:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    21ae:	2d 30       	cpi	r18, 0x0D	; 13
    21b0:	31 05       	cpc	r19, r1
    21b2:	04 f1       	brlt	.+64     	; 0x21f4 <__vector_3+0x2a0>
    21b4:	21 e0       	ldi	r18, 0x01	; 1
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	30 93 68 00 	sts	0x0068, r19	; 0x800068 <Month+0x1>
    21bc:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <Month>
    21c0:	19 c0       	rjmp	.+50     	; 0x21f4 <__vector_3+0x2a0>
		}
		else if(count == 3) {
    21c2:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    21c6:	93 30       	cpi	r25, 0x03	; 3
    21c8:	a9 f4       	brne	.+42     	; 0x21f4 <__vector_3+0x2a0>
			Year++;
    21ca:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <Year>
    21ce:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <Year+0x1>
    21d2:	2f 5f       	subi	r18, 0xFF	; 255
    21d4:	3f 4f       	sbci	r19, 0xFF	; 255
    21d6:	30 93 66 00 	sts	0x0066, r19	; 0x800066 <Year+0x1>
    21da:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Year>
			if(Year > 99) Year = 0;
    21de:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <Year>
    21e2:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <Year+0x1>
    21e6:	24 36       	cpi	r18, 0x64	; 100
    21e8:	31 05       	cpc	r19, r1
    21ea:	24 f0       	brlt	.+8      	; 0x21f4 <__vector_3+0x2a0>
    21ec:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Year+0x1>
    21f0:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Year>
		}
	}
	
	if((set == true) && (SW_time_date==3))		//increase alarm
    21f4:	88 23       	and	r24, r24
    21f6:	91 f1       	breq	.+100    	; 0x225c <__vector_3+0x308>
    21f8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    21fc:	83 30       	cpi	r24, 0x03	; 3
    21fe:	71 f5       	brne	.+92     	; 0x225c <__vector_3+0x308>
	{		

		if(count == 1) {
    2200:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    2204:	81 30       	cpi	r24, 0x01	; 1
    2206:	99 f4       	brne	.+38     	; 0x222e <__vector_3+0x2da>
			A_Hour++;
    2208:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Hour>
    220c:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Hour+0x1>
    2210:	01 96       	adiw	r24, 0x01	; 1
    2212:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <A_Hour+0x1>
    2216:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <A_Hour>
			if(A_Hour > 23) A_Hour = 0;
    221a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Hour>
    221e:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Hour+0x1>
    2222:	48 97       	sbiw	r24, 0x18	; 24
    2224:	24 f0       	brlt	.+8      	; 0x222e <__vector_3+0x2da>
    2226:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <A_Hour+0x1>
    222a:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <A_Hour>
		}
		if(count == 2) {
    222e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    2232:	82 30       	cpi	r24, 0x02	; 2
    2234:	99 f4       	brne	.+38     	; 0x225c <__vector_3+0x308>
			A_Minute++;
    2236:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <A_Minute>
    223a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <A_Minute+0x1>
    223e:	01 96       	adiw	r24, 0x01	; 1
    2240:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <A_Minute+0x1>
    2244:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <A_Minute>
			if(A_Minute > 59) A_Minute = 0;
    2248:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <A_Minute>
    224c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <A_Minute+0x1>
    2250:	cc 97       	sbiw	r24, 0x3c	; 60
    2252:	24 f0       	brlt	.+8      	; 0x225c <__vector_3+0x308>
    2254:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <A_Minute+0x1>
    2258:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <A_Minute>
    225c:	2f e7       	ldi	r18, 0x7F	; 127
    225e:	88 e3       	ldi	r24, 0x38	; 56
    2260:	91 e0       	ldi	r25, 0x01	; 1
    2262:	21 50       	subi	r18, 0x01	; 1
    2264:	80 40       	sbci	r24, 0x00	; 0
    2266:	90 40       	sbci	r25, 0x00	; 0
    2268:	e1 f7       	brne	.-8      	; 0x2262 <__vector_3+0x30e>
    226a:	00 c0       	rjmp	.+0      	; 0x226c <__vector_3+0x318>
    226c:	00 00       	nop
		}
	}
	_delay_ms(50);
}
    226e:	9f 91       	pop	r25
    2270:	8f 91       	pop	r24
    2272:	3f 91       	pop	r19
    2274:	2f 91       	pop	r18
    2276:	0f 90       	pop	r0
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	0f 90       	pop	r0
    227c:	1f 90       	pop	r1
    227e:	18 95       	reti

00002280 <__subsf3>:
    2280:	50 58       	subi	r21, 0x80	; 128

00002282 <__addsf3>:
    2282:	bb 27       	eor	r27, r27
    2284:	aa 27       	eor	r26, r26
    2286:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__addsf3x>
    228a:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__fp_round>
    228e:	0e 94 04 13 	call	0x2608	; 0x2608 <__fp_pscA>
    2292:	38 f0       	brcs	.+14     	; 0x22a2 <__addsf3+0x20>
    2294:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fp_pscB>
    2298:	20 f0       	brcs	.+8      	; 0x22a2 <__addsf3+0x20>
    229a:	39 f4       	brne	.+14     	; 0x22aa <__addsf3+0x28>
    229c:	9f 3f       	cpi	r25, 0xFF	; 255
    229e:	19 f4       	brne	.+6      	; 0x22a6 <__addsf3+0x24>
    22a0:	26 f4       	brtc	.+8      	; 0x22aa <__addsf3+0x28>
    22a2:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__fp_nan>
    22a6:	0e f4       	brtc	.+2      	; 0x22aa <__addsf3+0x28>
    22a8:	e0 95       	com	r30
    22aa:	e7 fb       	bst	r30, 7
    22ac:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__fp_inf>

000022b0 <__addsf3x>:
    22b0:	e9 2f       	mov	r30, r25
    22b2:	0e 94 23 13 	call	0x2646	; 0x2646 <__fp_split3>
    22b6:	58 f3       	brcs	.-42     	; 0x228e <__addsf3+0xc>
    22b8:	ba 17       	cp	r27, r26
    22ba:	62 07       	cpc	r22, r18
    22bc:	73 07       	cpc	r23, r19
    22be:	84 07       	cpc	r24, r20
    22c0:	95 07       	cpc	r25, r21
    22c2:	20 f0       	brcs	.+8      	; 0x22cc <__addsf3x+0x1c>
    22c4:	79 f4       	brne	.+30     	; 0x22e4 <__addsf3x+0x34>
    22c6:	a6 f5       	brtc	.+104    	; 0x2330 <__addsf3x+0x80>
    22c8:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__fp_zero>
    22cc:	0e f4       	brtc	.+2      	; 0x22d0 <__addsf3x+0x20>
    22ce:	e0 95       	com	r30
    22d0:	0b 2e       	mov	r0, r27
    22d2:	ba 2f       	mov	r27, r26
    22d4:	a0 2d       	mov	r26, r0
    22d6:	0b 01       	movw	r0, r22
    22d8:	b9 01       	movw	r22, r18
    22da:	90 01       	movw	r18, r0
    22dc:	0c 01       	movw	r0, r24
    22de:	ca 01       	movw	r24, r20
    22e0:	a0 01       	movw	r20, r0
    22e2:	11 24       	eor	r1, r1
    22e4:	ff 27       	eor	r31, r31
    22e6:	59 1b       	sub	r21, r25
    22e8:	99 f0       	breq	.+38     	; 0x2310 <__addsf3x+0x60>
    22ea:	59 3f       	cpi	r21, 0xF9	; 249
    22ec:	50 f4       	brcc	.+20     	; 0x2302 <__addsf3x+0x52>
    22ee:	50 3e       	cpi	r21, 0xE0	; 224
    22f0:	68 f1       	brcs	.+90     	; 0x234c <__addsf3x+0x9c>
    22f2:	1a 16       	cp	r1, r26
    22f4:	f0 40       	sbci	r31, 0x00	; 0
    22f6:	a2 2f       	mov	r26, r18
    22f8:	23 2f       	mov	r18, r19
    22fa:	34 2f       	mov	r19, r20
    22fc:	44 27       	eor	r20, r20
    22fe:	58 5f       	subi	r21, 0xF8	; 248
    2300:	f3 cf       	rjmp	.-26     	; 0x22e8 <__addsf3x+0x38>
    2302:	46 95       	lsr	r20
    2304:	37 95       	ror	r19
    2306:	27 95       	ror	r18
    2308:	a7 95       	ror	r26
    230a:	f0 40       	sbci	r31, 0x00	; 0
    230c:	53 95       	inc	r21
    230e:	c9 f7       	brne	.-14     	; 0x2302 <__addsf3x+0x52>
    2310:	7e f4       	brtc	.+30     	; 0x2330 <__addsf3x+0x80>
    2312:	1f 16       	cp	r1, r31
    2314:	ba 0b       	sbc	r27, r26
    2316:	62 0b       	sbc	r22, r18
    2318:	73 0b       	sbc	r23, r19
    231a:	84 0b       	sbc	r24, r20
    231c:	ba f0       	brmi	.+46     	; 0x234c <__addsf3x+0x9c>
    231e:	91 50       	subi	r25, 0x01	; 1
    2320:	a1 f0       	breq	.+40     	; 0x234a <__addsf3x+0x9a>
    2322:	ff 0f       	add	r31, r31
    2324:	bb 1f       	adc	r27, r27
    2326:	66 1f       	adc	r22, r22
    2328:	77 1f       	adc	r23, r23
    232a:	88 1f       	adc	r24, r24
    232c:	c2 f7       	brpl	.-16     	; 0x231e <__addsf3x+0x6e>
    232e:	0e c0       	rjmp	.+28     	; 0x234c <__addsf3x+0x9c>
    2330:	ba 0f       	add	r27, r26
    2332:	62 1f       	adc	r22, r18
    2334:	73 1f       	adc	r23, r19
    2336:	84 1f       	adc	r24, r20
    2338:	48 f4       	brcc	.+18     	; 0x234c <__addsf3x+0x9c>
    233a:	87 95       	ror	r24
    233c:	77 95       	ror	r23
    233e:	67 95       	ror	r22
    2340:	b7 95       	ror	r27
    2342:	f7 95       	ror	r31
    2344:	9e 3f       	cpi	r25, 0xFE	; 254
    2346:	08 f0       	brcs	.+2      	; 0x234a <__addsf3x+0x9a>
    2348:	b0 cf       	rjmp	.-160    	; 0x22aa <__addsf3+0x28>
    234a:	93 95       	inc	r25
    234c:	88 0f       	add	r24, r24
    234e:	08 f0       	brcs	.+2      	; 0x2352 <__addsf3x+0xa2>
    2350:	99 27       	eor	r25, r25
    2352:	ee 0f       	add	r30, r30
    2354:	97 95       	ror	r25
    2356:	87 95       	ror	r24
    2358:	08 95       	ret

0000235a <__cmpsf2>:
    235a:	0e 94 ae 12 	call	0x255c	; 0x255c <__fp_cmp>
    235e:	08 f4       	brcc	.+2      	; 0x2362 <__cmpsf2+0x8>
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	08 95       	ret

00002364 <__divsf3>:
    2364:	0e 94 c6 11 	call	0x238c	; 0x238c <__divsf3x>
    2368:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__fp_round>
    236c:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fp_pscB>
    2370:	58 f0       	brcs	.+22     	; 0x2388 <__divsf3+0x24>
    2372:	0e 94 04 13 	call	0x2608	; 0x2608 <__fp_pscA>
    2376:	40 f0       	brcs	.+16     	; 0x2388 <__divsf3+0x24>
    2378:	29 f4       	brne	.+10     	; 0x2384 <__divsf3+0x20>
    237a:	5f 3f       	cpi	r21, 0xFF	; 255
    237c:	29 f0       	breq	.+10     	; 0x2388 <__divsf3+0x24>
    237e:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__fp_inf>
    2382:	51 11       	cpse	r21, r1
    2384:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__fp_szero>
    2388:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__fp_nan>

0000238c <__divsf3x>:
    238c:	0e 94 23 13 	call	0x2646	; 0x2646 <__fp_split3>
    2390:	68 f3       	brcs	.-38     	; 0x236c <__divsf3+0x8>

00002392 <__divsf3_pse>:
    2392:	99 23       	and	r25, r25
    2394:	b1 f3       	breq	.-20     	; 0x2382 <__divsf3+0x1e>
    2396:	55 23       	and	r21, r21
    2398:	91 f3       	breq	.-28     	; 0x237e <__divsf3+0x1a>
    239a:	95 1b       	sub	r25, r21
    239c:	55 0b       	sbc	r21, r21
    239e:	bb 27       	eor	r27, r27
    23a0:	aa 27       	eor	r26, r26
    23a2:	62 17       	cp	r22, r18
    23a4:	73 07       	cpc	r23, r19
    23a6:	84 07       	cpc	r24, r20
    23a8:	38 f0       	brcs	.+14     	; 0x23b8 <__divsf3_pse+0x26>
    23aa:	9f 5f       	subi	r25, 0xFF	; 255
    23ac:	5f 4f       	sbci	r21, 0xFF	; 255
    23ae:	22 0f       	add	r18, r18
    23b0:	33 1f       	adc	r19, r19
    23b2:	44 1f       	adc	r20, r20
    23b4:	aa 1f       	adc	r26, r26
    23b6:	a9 f3       	breq	.-22     	; 0x23a2 <__divsf3_pse+0x10>
    23b8:	35 d0       	rcall	.+106    	; 0x2424 <__divsf3_pse+0x92>
    23ba:	0e 2e       	mov	r0, r30
    23bc:	3a f0       	brmi	.+14     	; 0x23cc <__divsf3_pse+0x3a>
    23be:	e0 e8       	ldi	r30, 0x80	; 128
    23c0:	32 d0       	rcall	.+100    	; 0x2426 <__divsf3_pse+0x94>
    23c2:	91 50       	subi	r25, 0x01	; 1
    23c4:	50 40       	sbci	r21, 0x00	; 0
    23c6:	e6 95       	lsr	r30
    23c8:	00 1c       	adc	r0, r0
    23ca:	ca f7       	brpl	.-14     	; 0x23be <__divsf3_pse+0x2c>
    23cc:	2b d0       	rcall	.+86     	; 0x2424 <__divsf3_pse+0x92>
    23ce:	fe 2f       	mov	r31, r30
    23d0:	29 d0       	rcall	.+82     	; 0x2424 <__divsf3_pse+0x92>
    23d2:	66 0f       	add	r22, r22
    23d4:	77 1f       	adc	r23, r23
    23d6:	88 1f       	adc	r24, r24
    23d8:	bb 1f       	adc	r27, r27
    23da:	26 17       	cp	r18, r22
    23dc:	37 07       	cpc	r19, r23
    23de:	48 07       	cpc	r20, r24
    23e0:	ab 07       	cpc	r26, r27
    23e2:	b0 e8       	ldi	r27, 0x80	; 128
    23e4:	09 f0       	breq	.+2      	; 0x23e8 <__divsf3_pse+0x56>
    23e6:	bb 0b       	sbc	r27, r27
    23e8:	80 2d       	mov	r24, r0
    23ea:	bf 01       	movw	r22, r30
    23ec:	ff 27       	eor	r31, r31
    23ee:	93 58       	subi	r25, 0x83	; 131
    23f0:	5f 4f       	sbci	r21, 0xFF	; 255
    23f2:	3a f0       	brmi	.+14     	; 0x2402 <__divsf3_pse+0x70>
    23f4:	9e 3f       	cpi	r25, 0xFE	; 254
    23f6:	51 05       	cpc	r21, r1
    23f8:	78 f0       	brcs	.+30     	; 0x2418 <__divsf3_pse+0x86>
    23fa:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__fp_inf>
    23fe:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__fp_szero>
    2402:	5f 3f       	cpi	r21, 0xFF	; 255
    2404:	e4 f3       	brlt	.-8      	; 0x23fe <__divsf3_pse+0x6c>
    2406:	98 3e       	cpi	r25, 0xE8	; 232
    2408:	d4 f3       	brlt	.-12     	; 0x23fe <__divsf3_pse+0x6c>
    240a:	86 95       	lsr	r24
    240c:	77 95       	ror	r23
    240e:	67 95       	ror	r22
    2410:	b7 95       	ror	r27
    2412:	f7 95       	ror	r31
    2414:	9f 5f       	subi	r25, 0xFF	; 255
    2416:	c9 f7       	brne	.-14     	; 0x240a <__divsf3_pse+0x78>
    2418:	88 0f       	add	r24, r24
    241a:	91 1d       	adc	r25, r1
    241c:	96 95       	lsr	r25
    241e:	87 95       	ror	r24
    2420:	97 f9       	bld	r25, 7
    2422:	08 95       	ret
    2424:	e1 e0       	ldi	r30, 0x01	; 1
    2426:	66 0f       	add	r22, r22
    2428:	77 1f       	adc	r23, r23
    242a:	88 1f       	adc	r24, r24
    242c:	bb 1f       	adc	r27, r27
    242e:	62 17       	cp	r22, r18
    2430:	73 07       	cpc	r23, r19
    2432:	84 07       	cpc	r24, r20
    2434:	ba 07       	cpc	r27, r26
    2436:	20 f0       	brcs	.+8      	; 0x2440 <__divsf3_pse+0xae>
    2438:	62 1b       	sub	r22, r18
    243a:	73 0b       	sbc	r23, r19
    243c:	84 0b       	sbc	r24, r20
    243e:	ba 0b       	sbc	r27, r26
    2440:	ee 1f       	adc	r30, r30
    2442:	88 f7       	brcc	.-30     	; 0x2426 <__divsf3_pse+0x94>
    2444:	e0 95       	com	r30
    2446:	08 95       	ret

00002448 <__fixsfsi>:
    2448:	0e 94 2b 12 	call	0x2456	; 0x2456 <__fixunssfsi>
    244c:	68 94       	set
    244e:	b1 11       	cpse	r27, r1
    2450:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__fp_szero>
    2454:	08 95       	ret

00002456 <__fixunssfsi>:
    2456:	0e 94 2b 13 	call	0x2656	; 0x2656 <__fp_splitA>
    245a:	88 f0       	brcs	.+34     	; 0x247e <__fixunssfsi+0x28>
    245c:	9f 57       	subi	r25, 0x7F	; 127
    245e:	98 f0       	brcs	.+38     	; 0x2486 <__fixunssfsi+0x30>
    2460:	b9 2f       	mov	r27, r25
    2462:	99 27       	eor	r25, r25
    2464:	b7 51       	subi	r27, 0x17	; 23
    2466:	b0 f0       	brcs	.+44     	; 0x2494 <__fixunssfsi+0x3e>
    2468:	e1 f0       	breq	.+56     	; 0x24a2 <__fixunssfsi+0x4c>
    246a:	66 0f       	add	r22, r22
    246c:	77 1f       	adc	r23, r23
    246e:	88 1f       	adc	r24, r24
    2470:	99 1f       	adc	r25, r25
    2472:	1a f0       	brmi	.+6      	; 0x247a <__fixunssfsi+0x24>
    2474:	ba 95       	dec	r27
    2476:	c9 f7       	brne	.-14     	; 0x246a <__fixunssfsi+0x14>
    2478:	14 c0       	rjmp	.+40     	; 0x24a2 <__fixunssfsi+0x4c>
    247a:	b1 30       	cpi	r27, 0x01	; 1
    247c:	91 f0       	breq	.+36     	; 0x24a2 <__fixunssfsi+0x4c>
    247e:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__fp_zero>
    2482:	b1 e0       	ldi	r27, 0x01	; 1
    2484:	08 95       	ret
    2486:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__fp_zero>
    248a:	67 2f       	mov	r22, r23
    248c:	78 2f       	mov	r23, r24
    248e:	88 27       	eor	r24, r24
    2490:	b8 5f       	subi	r27, 0xF8	; 248
    2492:	39 f0       	breq	.+14     	; 0x24a2 <__fixunssfsi+0x4c>
    2494:	b9 3f       	cpi	r27, 0xF9	; 249
    2496:	cc f3       	brlt	.-14     	; 0x248a <__fixunssfsi+0x34>
    2498:	86 95       	lsr	r24
    249a:	77 95       	ror	r23
    249c:	67 95       	ror	r22
    249e:	b3 95       	inc	r27
    24a0:	d9 f7       	brne	.-10     	; 0x2498 <__fixunssfsi+0x42>
    24a2:	3e f4       	brtc	.+14     	; 0x24b2 <__fixunssfsi+0x5c>
    24a4:	90 95       	com	r25
    24a6:	80 95       	com	r24
    24a8:	70 95       	com	r23
    24aa:	61 95       	neg	r22
    24ac:	7f 4f       	sbci	r23, 0xFF	; 255
    24ae:	8f 4f       	sbci	r24, 0xFF	; 255
    24b0:	9f 4f       	sbci	r25, 0xFF	; 255
    24b2:	08 95       	ret

000024b4 <__floatunsisf>:
    24b4:	e8 94       	clt
    24b6:	09 c0       	rjmp	.+18     	; 0x24ca <__floatsisf+0x12>

000024b8 <__floatsisf>:
    24b8:	97 fb       	bst	r25, 7
    24ba:	3e f4       	brtc	.+14     	; 0x24ca <__floatsisf+0x12>
    24bc:	90 95       	com	r25
    24be:	80 95       	com	r24
    24c0:	70 95       	com	r23
    24c2:	61 95       	neg	r22
    24c4:	7f 4f       	sbci	r23, 0xFF	; 255
    24c6:	8f 4f       	sbci	r24, 0xFF	; 255
    24c8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ca:	99 23       	and	r25, r25
    24cc:	a9 f0       	breq	.+42     	; 0x24f8 <__floatsisf+0x40>
    24ce:	f9 2f       	mov	r31, r25
    24d0:	96 e9       	ldi	r25, 0x96	; 150
    24d2:	bb 27       	eor	r27, r27
    24d4:	93 95       	inc	r25
    24d6:	f6 95       	lsr	r31
    24d8:	87 95       	ror	r24
    24da:	77 95       	ror	r23
    24dc:	67 95       	ror	r22
    24de:	b7 95       	ror	r27
    24e0:	f1 11       	cpse	r31, r1
    24e2:	f8 cf       	rjmp	.-16     	; 0x24d4 <__floatsisf+0x1c>
    24e4:	fa f4       	brpl	.+62     	; 0x2524 <__floatsisf+0x6c>
    24e6:	bb 0f       	add	r27, r27
    24e8:	11 f4       	brne	.+4      	; 0x24ee <__floatsisf+0x36>
    24ea:	60 ff       	sbrs	r22, 0
    24ec:	1b c0       	rjmp	.+54     	; 0x2524 <__floatsisf+0x6c>
    24ee:	6f 5f       	subi	r22, 0xFF	; 255
    24f0:	7f 4f       	sbci	r23, 0xFF	; 255
    24f2:	8f 4f       	sbci	r24, 0xFF	; 255
    24f4:	9f 4f       	sbci	r25, 0xFF	; 255
    24f6:	16 c0       	rjmp	.+44     	; 0x2524 <__floatsisf+0x6c>
    24f8:	88 23       	and	r24, r24
    24fa:	11 f0       	breq	.+4      	; 0x2500 <__floatsisf+0x48>
    24fc:	96 e9       	ldi	r25, 0x96	; 150
    24fe:	11 c0       	rjmp	.+34     	; 0x2522 <__floatsisf+0x6a>
    2500:	77 23       	and	r23, r23
    2502:	21 f0       	breq	.+8      	; 0x250c <__floatsisf+0x54>
    2504:	9e e8       	ldi	r25, 0x8E	; 142
    2506:	87 2f       	mov	r24, r23
    2508:	76 2f       	mov	r23, r22
    250a:	05 c0       	rjmp	.+10     	; 0x2516 <__floatsisf+0x5e>
    250c:	66 23       	and	r22, r22
    250e:	71 f0       	breq	.+28     	; 0x252c <__floatsisf+0x74>
    2510:	96 e8       	ldi	r25, 0x86	; 134
    2512:	86 2f       	mov	r24, r22
    2514:	70 e0       	ldi	r23, 0x00	; 0
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	2a f0       	brmi	.+10     	; 0x2524 <__floatsisf+0x6c>
    251a:	9a 95       	dec	r25
    251c:	66 0f       	add	r22, r22
    251e:	77 1f       	adc	r23, r23
    2520:	88 1f       	adc	r24, r24
    2522:	da f7       	brpl	.-10     	; 0x251a <__floatsisf+0x62>
    2524:	88 0f       	add	r24, r24
    2526:	96 95       	lsr	r25
    2528:	87 95       	ror	r24
    252a:	97 f9       	bld	r25, 7
    252c:	08 95       	ret

0000252e <floor>:
    252e:	0e 94 45 13 	call	0x268a	; 0x268a <__fp_trunc>
    2532:	90 f0       	brcs	.+36     	; 0x2558 <floor+0x2a>
    2534:	9f 37       	cpi	r25, 0x7F	; 127
    2536:	48 f4       	brcc	.+18     	; 0x254a <floor+0x1c>
    2538:	91 11       	cpse	r25, r1
    253a:	16 f0       	brts	.+4      	; 0x2540 <floor+0x12>
    253c:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__fp_szero>
    2540:	60 e0       	ldi	r22, 0x00	; 0
    2542:	70 e0       	ldi	r23, 0x00	; 0
    2544:	80 e8       	ldi	r24, 0x80	; 128
    2546:	9f eb       	ldi	r25, 0xBF	; 191
    2548:	08 95       	ret
    254a:	26 f4       	brtc	.+8      	; 0x2554 <floor+0x26>
    254c:	1b 16       	cp	r1, r27
    254e:	61 1d       	adc	r22, r1
    2550:	71 1d       	adc	r23, r1
    2552:	81 1d       	adc	r24, r1
    2554:	0c 94 d8 12 	jmp	0x25b0	; 0x25b0 <__fp_mintl>
    2558:	0c 94 f3 12 	jmp	0x25e6	; 0x25e6 <__fp_mpack>

0000255c <__fp_cmp>:
    255c:	99 0f       	add	r25, r25
    255e:	00 08       	sbc	r0, r0
    2560:	55 0f       	add	r21, r21
    2562:	aa 0b       	sbc	r26, r26
    2564:	e0 e8       	ldi	r30, 0x80	; 128
    2566:	fe ef       	ldi	r31, 0xFE	; 254
    2568:	16 16       	cp	r1, r22
    256a:	17 06       	cpc	r1, r23
    256c:	e8 07       	cpc	r30, r24
    256e:	f9 07       	cpc	r31, r25
    2570:	c0 f0       	brcs	.+48     	; 0x25a2 <__fp_cmp+0x46>
    2572:	12 16       	cp	r1, r18
    2574:	13 06       	cpc	r1, r19
    2576:	e4 07       	cpc	r30, r20
    2578:	f5 07       	cpc	r31, r21
    257a:	98 f0       	brcs	.+38     	; 0x25a2 <__fp_cmp+0x46>
    257c:	62 1b       	sub	r22, r18
    257e:	73 0b       	sbc	r23, r19
    2580:	84 0b       	sbc	r24, r20
    2582:	95 0b       	sbc	r25, r21
    2584:	39 f4       	brne	.+14     	; 0x2594 <__fp_cmp+0x38>
    2586:	0a 26       	eor	r0, r26
    2588:	61 f0       	breq	.+24     	; 0x25a2 <__fp_cmp+0x46>
    258a:	23 2b       	or	r18, r19
    258c:	24 2b       	or	r18, r20
    258e:	25 2b       	or	r18, r21
    2590:	21 f4       	brne	.+8      	; 0x259a <__fp_cmp+0x3e>
    2592:	08 95       	ret
    2594:	0a 26       	eor	r0, r26
    2596:	09 f4       	brne	.+2      	; 0x259a <__fp_cmp+0x3e>
    2598:	a1 40       	sbci	r26, 0x01	; 1
    259a:	a6 95       	lsr	r26
    259c:	8f ef       	ldi	r24, 0xFF	; 255
    259e:	81 1d       	adc	r24, r1
    25a0:	81 1d       	adc	r24, r1
    25a2:	08 95       	ret

000025a4 <__fp_inf>:
    25a4:	97 f9       	bld	r25, 7
    25a6:	9f 67       	ori	r25, 0x7F	; 127
    25a8:	80 e8       	ldi	r24, 0x80	; 128
    25aa:	70 e0       	ldi	r23, 0x00	; 0
    25ac:	60 e0       	ldi	r22, 0x00	; 0
    25ae:	08 95       	ret

000025b0 <__fp_mintl>:
    25b0:	88 23       	and	r24, r24
    25b2:	71 f4       	brne	.+28     	; 0x25d0 <__fp_mintl+0x20>
    25b4:	77 23       	and	r23, r23
    25b6:	21 f0       	breq	.+8      	; 0x25c0 <__fp_mintl+0x10>
    25b8:	98 50       	subi	r25, 0x08	; 8
    25ba:	87 2b       	or	r24, r23
    25bc:	76 2f       	mov	r23, r22
    25be:	07 c0       	rjmp	.+14     	; 0x25ce <__fp_mintl+0x1e>
    25c0:	66 23       	and	r22, r22
    25c2:	11 f4       	brne	.+4      	; 0x25c8 <__fp_mintl+0x18>
    25c4:	99 27       	eor	r25, r25
    25c6:	0d c0       	rjmp	.+26     	; 0x25e2 <__fp_mintl+0x32>
    25c8:	90 51       	subi	r25, 0x10	; 16
    25ca:	86 2b       	or	r24, r22
    25cc:	70 e0       	ldi	r23, 0x00	; 0
    25ce:	60 e0       	ldi	r22, 0x00	; 0
    25d0:	2a f0       	brmi	.+10     	; 0x25dc <__fp_mintl+0x2c>
    25d2:	9a 95       	dec	r25
    25d4:	66 0f       	add	r22, r22
    25d6:	77 1f       	adc	r23, r23
    25d8:	88 1f       	adc	r24, r24
    25da:	da f7       	brpl	.-10     	; 0x25d2 <__fp_mintl+0x22>
    25dc:	88 0f       	add	r24, r24
    25de:	96 95       	lsr	r25
    25e0:	87 95       	ror	r24
    25e2:	97 f9       	bld	r25, 7
    25e4:	08 95       	ret

000025e6 <__fp_mpack>:
    25e6:	9f 3f       	cpi	r25, 0xFF	; 255
    25e8:	31 f0       	breq	.+12     	; 0x25f6 <__fp_mpack_finite+0xc>

000025ea <__fp_mpack_finite>:
    25ea:	91 50       	subi	r25, 0x01	; 1
    25ec:	20 f4       	brcc	.+8      	; 0x25f6 <__fp_mpack_finite+0xc>
    25ee:	87 95       	ror	r24
    25f0:	77 95       	ror	r23
    25f2:	67 95       	ror	r22
    25f4:	b7 95       	ror	r27
    25f6:	88 0f       	add	r24, r24
    25f8:	91 1d       	adc	r25, r1
    25fa:	96 95       	lsr	r25
    25fc:	87 95       	ror	r24
    25fe:	97 f9       	bld	r25, 7
    2600:	08 95       	ret

00002602 <__fp_nan>:
    2602:	9f ef       	ldi	r25, 0xFF	; 255
    2604:	80 ec       	ldi	r24, 0xC0	; 192
    2606:	08 95       	ret

00002608 <__fp_pscA>:
    2608:	00 24       	eor	r0, r0
    260a:	0a 94       	dec	r0
    260c:	16 16       	cp	r1, r22
    260e:	17 06       	cpc	r1, r23
    2610:	18 06       	cpc	r1, r24
    2612:	09 06       	cpc	r0, r25
    2614:	08 95       	ret

00002616 <__fp_pscB>:
    2616:	00 24       	eor	r0, r0
    2618:	0a 94       	dec	r0
    261a:	12 16       	cp	r1, r18
    261c:	13 06       	cpc	r1, r19
    261e:	14 06       	cpc	r1, r20
    2620:	05 06       	cpc	r0, r21
    2622:	08 95       	ret

00002624 <__fp_round>:
    2624:	09 2e       	mov	r0, r25
    2626:	03 94       	inc	r0
    2628:	00 0c       	add	r0, r0
    262a:	11 f4       	brne	.+4      	; 0x2630 <__fp_round+0xc>
    262c:	88 23       	and	r24, r24
    262e:	52 f0       	brmi	.+20     	; 0x2644 <__fp_round+0x20>
    2630:	bb 0f       	add	r27, r27
    2632:	40 f4       	brcc	.+16     	; 0x2644 <__fp_round+0x20>
    2634:	bf 2b       	or	r27, r31
    2636:	11 f4       	brne	.+4      	; 0x263c <__fp_round+0x18>
    2638:	60 ff       	sbrs	r22, 0
    263a:	04 c0       	rjmp	.+8      	; 0x2644 <__fp_round+0x20>
    263c:	6f 5f       	subi	r22, 0xFF	; 255
    263e:	7f 4f       	sbci	r23, 0xFF	; 255
    2640:	8f 4f       	sbci	r24, 0xFF	; 255
    2642:	9f 4f       	sbci	r25, 0xFF	; 255
    2644:	08 95       	ret

00002646 <__fp_split3>:
    2646:	57 fd       	sbrc	r21, 7
    2648:	90 58       	subi	r25, 0x80	; 128
    264a:	44 0f       	add	r20, r20
    264c:	55 1f       	adc	r21, r21
    264e:	59 f0       	breq	.+22     	; 0x2666 <__fp_splitA+0x10>
    2650:	5f 3f       	cpi	r21, 0xFF	; 255
    2652:	71 f0       	breq	.+28     	; 0x2670 <__fp_splitA+0x1a>
    2654:	47 95       	ror	r20

00002656 <__fp_splitA>:
    2656:	88 0f       	add	r24, r24
    2658:	97 fb       	bst	r25, 7
    265a:	99 1f       	adc	r25, r25
    265c:	61 f0       	breq	.+24     	; 0x2676 <__fp_splitA+0x20>
    265e:	9f 3f       	cpi	r25, 0xFF	; 255
    2660:	79 f0       	breq	.+30     	; 0x2680 <__fp_splitA+0x2a>
    2662:	87 95       	ror	r24
    2664:	08 95       	ret
    2666:	12 16       	cp	r1, r18
    2668:	13 06       	cpc	r1, r19
    266a:	14 06       	cpc	r1, r20
    266c:	55 1f       	adc	r21, r21
    266e:	f2 cf       	rjmp	.-28     	; 0x2654 <__fp_split3+0xe>
    2670:	46 95       	lsr	r20
    2672:	f1 df       	rcall	.-30     	; 0x2656 <__fp_splitA>
    2674:	08 c0       	rjmp	.+16     	; 0x2686 <__fp_splitA+0x30>
    2676:	16 16       	cp	r1, r22
    2678:	17 06       	cpc	r1, r23
    267a:	18 06       	cpc	r1, r24
    267c:	99 1f       	adc	r25, r25
    267e:	f1 cf       	rjmp	.-30     	; 0x2662 <__fp_splitA+0xc>
    2680:	86 95       	lsr	r24
    2682:	71 05       	cpc	r23, r1
    2684:	61 05       	cpc	r22, r1
    2686:	08 94       	sec
    2688:	08 95       	ret

0000268a <__fp_trunc>:
    268a:	0e 94 2b 13 	call	0x2656	; 0x2656 <__fp_splitA>
    268e:	a0 f0       	brcs	.+40     	; 0x26b8 <__fp_trunc+0x2e>
    2690:	be e7       	ldi	r27, 0x7E	; 126
    2692:	b9 17       	cp	r27, r25
    2694:	88 f4       	brcc	.+34     	; 0x26b8 <__fp_trunc+0x2e>
    2696:	bb 27       	eor	r27, r27
    2698:	9f 38       	cpi	r25, 0x8F	; 143
    269a:	60 f4       	brcc	.+24     	; 0x26b4 <__fp_trunc+0x2a>
    269c:	16 16       	cp	r1, r22
    269e:	b1 1d       	adc	r27, r1
    26a0:	67 2f       	mov	r22, r23
    26a2:	78 2f       	mov	r23, r24
    26a4:	88 27       	eor	r24, r24
    26a6:	98 5f       	subi	r25, 0xF8	; 248
    26a8:	f7 cf       	rjmp	.-18     	; 0x2698 <__fp_trunc+0xe>
    26aa:	86 95       	lsr	r24
    26ac:	77 95       	ror	r23
    26ae:	67 95       	ror	r22
    26b0:	b1 1d       	adc	r27, r1
    26b2:	93 95       	inc	r25
    26b4:	96 39       	cpi	r25, 0x96	; 150
    26b6:	c8 f3       	brcs	.-14     	; 0x26aa <__fp_trunc+0x20>
    26b8:	08 95       	ret

000026ba <__fp_zero>:
    26ba:	e8 94       	clt

000026bc <__fp_szero>:
    26bc:	bb 27       	eor	r27, r27
    26be:	66 27       	eor	r22, r22
    26c0:	77 27       	eor	r23, r23
    26c2:	cb 01       	movw	r24, r22
    26c4:	97 f9       	bld	r25, 7
    26c6:	08 95       	ret

000026c8 <__gesf2>:
    26c8:	0e 94 ae 12 	call	0x255c	; 0x255c <__fp_cmp>
    26cc:	08 f4       	brcc	.+2      	; 0x26d0 <__gesf2+0x8>
    26ce:	8f ef       	ldi	r24, 0xFF	; 255
    26d0:	08 95       	ret

000026d2 <__mulsf3>:
    26d2:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__mulsf3x>
    26d6:	0c 94 12 13 	jmp	0x2624	; 0x2624 <__fp_round>
    26da:	0e 94 04 13 	call	0x2608	; 0x2608 <__fp_pscA>
    26de:	38 f0       	brcs	.+14     	; 0x26ee <__mulsf3+0x1c>
    26e0:	0e 94 0b 13 	call	0x2616	; 0x2616 <__fp_pscB>
    26e4:	20 f0       	brcs	.+8      	; 0x26ee <__mulsf3+0x1c>
    26e6:	95 23       	and	r25, r21
    26e8:	11 f0       	breq	.+4      	; 0x26ee <__mulsf3+0x1c>
    26ea:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__fp_inf>
    26ee:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__fp_nan>
    26f2:	11 24       	eor	r1, r1
    26f4:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__fp_szero>

000026f8 <__mulsf3x>:
    26f8:	0e 94 23 13 	call	0x2646	; 0x2646 <__fp_split3>
    26fc:	70 f3       	brcs	.-36     	; 0x26da <__mulsf3+0x8>

000026fe <__mulsf3_pse>:
    26fe:	95 9f       	mul	r25, r21
    2700:	c1 f3       	breq	.-16     	; 0x26f2 <__mulsf3+0x20>
    2702:	95 0f       	add	r25, r21
    2704:	50 e0       	ldi	r21, 0x00	; 0
    2706:	55 1f       	adc	r21, r21
    2708:	62 9f       	mul	r22, r18
    270a:	f0 01       	movw	r30, r0
    270c:	72 9f       	mul	r23, r18
    270e:	bb 27       	eor	r27, r27
    2710:	f0 0d       	add	r31, r0
    2712:	b1 1d       	adc	r27, r1
    2714:	63 9f       	mul	r22, r19
    2716:	aa 27       	eor	r26, r26
    2718:	f0 0d       	add	r31, r0
    271a:	b1 1d       	adc	r27, r1
    271c:	aa 1f       	adc	r26, r26
    271e:	64 9f       	mul	r22, r20
    2720:	66 27       	eor	r22, r22
    2722:	b0 0d       	add	r27, r0
    2724:	a1 1d       	adc	r26, r1
    2726:	66 1f       	adc	r22, r22
    2728:	82 9f       	mul	r24, r18
    272a:	22 27       	eor	r18, r18
    272c:	b0 0d       	add	r27, r0
    272e:	a1 1d       	adc	r26, r1
    2730:	62 1f       	adc	r22, r18
    2732:	73 9f       	mul	r23, r19
    2734:	b0 0d       	add	r27, r0
    2736:	a1 1d       	adc	r26, r1
    2738:	62 1f       	adc	r22, r18
    273a:	83 9f       	mul	r24, r19
    273c:	a0 0d       	add	r26, r0
    273e:	61 1d       	adc	r22, r1
    2740:	22 1f       	adc	r18, r18
    2742:	74 9f       	mul	r23, r20
    2744:	33 27       	eor	r19, r19
    2746:	a0 0d       	add	r26, r0
    2748:	61 1d       	adc	r22, r1
    274a:	23 1f       	adc	r18, r19
    274c:	84 9f       	mul	r24, r20
    274e:	60 0d       	add	r22, r0
    2750:	21 1d       	adc	r18, r1
    2752:	82 2f       	mov	r24, r18
    2754:	76 2f       	mov	r23, r22
    2756:	6a 2f       	mov	r22, r26
    2758:	11 24       	eor	r1, r1
    275a:	9f 57       	subi	r25, 0x7F	; 127
    275c:	50 40       	sbci	r21, 0x00	; 0
    275e:	9a f0       	brmi	.+38     	; 0x2786 <__mulsf3_pse+0x88>
    2760:	f1 f0       	breq	.+60     	; 0x279e <__mulsf3_pse+0xa0>
    2762:	88 23       	and	r24, r24
    2764:	4a f0       	brmi	.+18     	; 0x2778 <__mulsf3_pse+0x7a>
    2766:	ee 0f       	add	r30, r30
    2768:	ff 1f       	adc	r31, r31
    276a:	bb 1f       	adc	r27, r27
    276c:	66 1f       	adc	r22, r22
    276e:	77 1f       	adc	r23, r23
    2770:	88 1f       	adc	r24, r24
    2772:	91 50       	subi	r25, 0x01	; 1
    2774:	50 40       	sbci	r21, 0x00	; 0
    2776:	a9 f7       	brne	.-22     	; 0x2762 <__mulsf3_pse+0x64>
    2778:	9e 3f       	cpi	r25, 0xFE	; 254
    277a:	51 05       	cpc	r21, r1
    277c:	80 f0       	brcs	.+32     	; 0x279e <__mulsf3_pse+0xa0>
    277e:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__fp_inf>
    2782:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__fp_szero>
    2786:	5f 3f       	cpi	r21, 0xFF	; 255
    2788:	e4 f3       	brlt	.-8      	; 0x2782 <__mulsf3_pse+0x84>
    278a:	98 3e       	cpi	r25, 0xE8	; 232
    278c:	d4 f3       	brlt	.-12     	; 0x2782 <__mulsf3_pse+0x84>
    278e:	86 95       	lsr	r24
    2790:	77 95       	ror	r23
    2792:	67 95       	ror	r22
    2794:	b7 95       	ror	r27
    2796:	f7 95       	ror	r31
    2798:	e7 95       	ror	r30
    279a:	9f 5f       	subi	r25, 0xFF	; 255
    279c:	c1 f7       	brne	.-16     	; 0x278e <__mulsf3_pse+0x90>
    279e:	fe 2b       	or	r31, r30
    27a0:	88 0f       	add	r24, r24
    27a2:	91 1d       	adc	r25, r1
    27a4:	96 95       	lsr	r25
    27a6:	87 95       	ror	r24
    27a8:	97 f9       	bld	r25, 7
    27aa:	08 95       	ret

000027ac <sin>:
    27ac:	9f 93       	push	r25
    27ae:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <__fp_rempio2>
    27b2:	0f 90       	pop	r0
    27b4:	07 fc       	sbrc	r0, 7
    27b6:	ee 5f       	subi	r30, 0xFE	; 254
    27b8:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__fp_sinus>
    27bc:	0c 94 01 13 	jmp	0x2602	; 0x2602 <__fp_nan>

000027c0 <__fp_rempio2>:
    27c0:	0e 94 2b 13 	call	0x2656	; 0x2656 <__fp_splitA>
    27c4:	d8 f3       	brcs	.-10     	; 0x27bc <sin+0x10>
    27c6:	e8 94       	clt
    27c8:	e0 e0       	ldi	r30, 0x00	; 0
    27ca:	bb 27       	eor	r27, r27
    27cc:	9f 57       	subi	r25, 0x7F	; 127
    27ce:	f0 f0       	brcs	.+60     	; 0x280c <__fp_rempio2+0x4c>
    27d0:	2a ed       	ldi	r18, 0xDA	; 218
    27d2:	3f e0       	ldi	r19, 0x0F	; 15
    27d4:	49 ec       	ldi	r20, 0xC9	; 201
    27d6:	06 c0       	rjmp	.+12     	; 0x27e4 <__fp_rempio2+0x24>
    27d8:	ee 0f       	add	r30, r30
    27da:	bb 0f       	add	r27, r27
    27dc:	66 1f       	adc	r22, r22
    27de:	77 1f       	adc	r23, r23
    27e0:	88 1f       	adc	r24, r24
    27e2:	28 f0       	brcs	.+10     	; 0x27ee <__fp_rempio2+0x2e>
    27e4:	b2 3a       	cpi	r27, 0xA2	; 162
    27e6:	62 07       	cpc	r22, r18
    27e8:	73 07       	cpc	r23, r19
    27ea:	84 07       	cpc	r24, r20
    27ec:	28 f0       	brcs	.+10     	; 0x27f8 <__fp_rempio2+0x38>
    27ee:	b2 5a       	subi	r27, 0xA2	; 162
    27f0:	62 0b       	sbc	r22, r18
    27f2:	73 0b       	sbc	r23, r19
    27f4:	84 0b       	sbc	r24, r20
    27f6:	e3 95       	inc	r30
    27f8:	9a 95       	dec	r25
    27fa:	72 f7       	brpl	.-36     	; 0x27d8 <__fp_rempio2+0x18>
    27fc:	80 38       	cpi	r24, 0x80	; 128
    27fe:	30 f4       	brcc	.+12     	; 0x280c <__fp_rempio2+0x4c>
    2800:	9a 95       	dec	r25
    2802:	bb 0f       	add	r27, r27
    2804:	66 1f       	adc	r22, r22
    2806:	77 1f       	adc	r23, r23
    2808:	88 1f       	adc	r24, r24
    280a:	d2 f7       	brpl	.-12     	; 0x2800 <__fp_rempio2+0x40>
    280c:	90 48       	sbci	r25, 0x80	; 128
    280e:	0c 94 f5 12 	jmp	0x25ea	; 0x25ea <__fp_mpack_finite>

00002812 <__fp_sinus>:
    2812:	ef 93       	push	r30
    2814:	e0 ff       	sbrs	r30, 0
    2816:	07 c0       	rjmp	.+14     	; 0x2826 <__fp_sinus+0x14>
    2818:	a2 ea       	ldi	r26, 0xA2	; 162
    281a:	2a ed       	ldi	r18, 0xDA	; 218
    281c:	3f e0       	ldi	r19, 0x0F	; 15
    281e:	49 ec       	ldi	r20, 0xC9	; 201
    2820:	5f eb       	ldi	r21, 0xBF	; 191
    2822:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__addsf3x>
    2826:	0e 94 12 13 	call	0x2624	; 0x2624 <__fp_round>
    282a:	0f 90       	pop	r0
    282c:	03 94       	inc	r0
    282e:	01 fc       	sbrc	r0, 1
    2830:	90 58       	subi	r25, 0x80	; 128
    2832:	e4 e5       	ldi	r30, 0x54	; 84
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	0c 94 1d 14 	jmp	0x283a	; 0x283a <__fp_powsodd>

0000283a <__fp_powsodd>:
    283a:	9f 93       	push	r25
    283c:	8f 93       	push	r24
    283e:	7f 93       	push	r23
    2840:	6f 93       	push	r22
    2842:	ff 93       	push	r31
    2844:	ef 93       	push	r30
    2846:	9b 01       	movw	r18, r22
    2848:	ac 01       	movw	r20, r24
    284a:	0e 94 69 13 	call	0x26d2	; 0x26d2 <__mulsf3>
    284e:	ef 91       	pop	r30
    2850:	ff 91       	pop	r31
    2852:	0e 94 31 14 	call	0x2862	; 0x2862 <__fp_powser>
    2856:	2f 91       	pop	r18
    2858:	3f 91       	pop	r19
    285a:	4f 91       	pop	r20
    285c:	5f 91       	pop	r21
    285e:	0c 94 69 13 	jmp	0x26d2	; 0x26d2 <__mulsf3>

00002862 <__fp_powser>:
    2862:	df 93       	push	r29
    2864:	cf 93       	push	r28
    2866:	1f 93       	push	r17
    2868:	0f 93       	push	r16
    286a:	ff 92       	push	r15
    286c:	ef 92       	push	r14
    286e:	df 92       	push	r13
    2870:	7b 01       	movw	r14, r22
    2872:	8c 01       	movw	r16, r24
    2874:	68 94       	set
    2876:	06 c0       	rjmp	.+12     	; 0x2884 <__fp_powser+0x22>
    2878:	da 2e       	mov	r13, r26
    287a:	ef 01       	movw	r28, r30
    287c:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <__mulsf3x>
    2880:	fe 01       	movw	r30, r28
    2882:	e8 94       	clt
    2884:	a5 91       	lpm	r26, Z+
    2886:	25 91       	lpm	r18, Z+
    2888:	35 91       	lpm	r19, Z+
    288a:	45 91       	lpm	r20, Z+
    288c:	55 91       	lpm	r21, Z+
    288e:	a6 f3       	brts	.-24     	; 0x2878 <__fp_powser+0x16>
    2890:	ef 01       	movw	r28, r30
    2892:	0e 94 58 11 	call	0x22b0	; 0x22b0 <__addsf3x>
    2896:	fe 01       	movw	r30, r28
    2898:	97 01       	movw	r18, r14
    289a:	a8 01       	movw	r20, r16
    289c:	da 94       	dec	r13
    289e:	69 f7       	brne	.-38     	; 0x287a <__fp_powser+0x18>
    28a0:	df 90       	pop	r13
    28a2:	ef 90       	pop	r14
    28a4:	ff 90       	pop	r15
    28a6:	0f 91       	pop	r16
    28a8:	1f 91       	pop	r17
    28aa:	cf 91       	pop	r28
    28ac:	df 91       	pop	r29
    28ae:	08 95       	ret

000028b0 <__divmodhi4>:
    28b0:	97 fb       	bst	r25, 7
    28b2:	07 2e       	mov	r0, r23
    28b4:	16 f4       	brtc	.+4      	; 0x28ba <__divmodhi4+0xa>
    28b6:	00 94       	com	r0
    28b8:	07 d0       	rcall	.+14     	; 0x28c8 <__divmodhi4_neg1>
    28ba:	77 fd       	sbrc	r23, 7
    28bc:	09 d0       	rcall	.+18     	; 0x28d0 <__divmodhi4_neg2>
    28be:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <__udivmodhi4>
    28c2:	07 fc       	sbrc	r0, 7
    28c4:	05 d0       	rcall	.+10     	; 0x28d0 <__divmodhi4_neg2>
    28c6:	3e f4       	brtc	.+14     	; 0x28d6 <__divmodhi4_exit>

000028c8 <__divmodhi4_neg1>:
    28c8:	90 95       	com	r25
    28ca:	81 95       	neg	r24
    28cc:	9f 4f       	sbci	r25, 0xFF	; 255
    28ce:	08 95       	ret

000028d0 <__divmodhi4_neg2>:
    28d0:	70 95       	com	r23
    28d2:	61 95       	neg	r22
    28d4:	7f 4f       	sbci	r23, 0xFF	; 255

000028d6 <__divmodhi4_exit>:
    28d6:	08 95       	ret

000028d8 <__udivmodhi4>:
    28d8:	aa 1b       	sub	r26, r26
    28da:	bb 1b       	sub	r27, r27
    28dc:	51 e1       	ldi	r21, 0x11	; 17
    28de:	07 c0       	rjmp	.+14     	; 0x28ee <__udivmodhi4_ep>

000028e0 <__udivmodhi4_loop>:
    28e0:	aa 1f       	adc	r26, r26
    28e2:	bb 1f       	adc	r27, r27
    28e4:	a6 17       	cp	r26, r22
    28e6:	b7 07       	cpc	r27, r23
    28e8:	10 f0       	brcs	.+4      	; 0x28ee <__udivmodhi4_ep>
    28ea:	a6 1b       	sub	r26, r22
    28ec:	b7 0b       	sbc	r27, r23

000028ee <__udivmodhi4_ep>:
    28ee:	88 1f       	adc	r24, r24
    28f0:	99 1f       	adc	r25, r25
    28f2:	5a 95       	dec	r21
    28f4:	a9 f7       	brne	.-22     	; 0x28e0 <__udivmodhi4_loop>
    28f6:	80 95       	com	r24
    28f8:	90 95       	com	r25
    28fa:	bc 01       	movw	r22, r24
    28fc:	cd 01       	movw	r24, r26
    28fe:	08 95       	ret

00002900 <_exit>:
    2900:	f8 94       	cli

00002902 <__stop_program>:
    2902:	ff cf       	rjmp	.-2      	; 0x2902 <__stop_program>
