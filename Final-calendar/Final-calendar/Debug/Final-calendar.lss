
Final-calendar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002b40  00002bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800074  00800074  00002be8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002be8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00002c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002137  00000000  00000000  00002d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007cf  00000000  00000000  00004e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000118a  00000000  00000000  00005642  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000484  00000000  00000000  000067cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000578  00000000  00000000  00006c50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014f0  00000000  00000000  000071c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000086b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 66 0f 	jmp	0x1ecc	; 0x1ecc <__vector_1>
       8:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <__vector_2>
       c:	0c 94 25 10 	jmp	0x204a	; 0x204a <__vector_3>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <__vector_11>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <__stack+0x15f>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	10 e0       	ldi	r17, 0x00	; 0
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	e0 e4       	ldi	r30, 0x40	; 64
      86:	fb e2       	ldi	r31, 0x2B	; 43
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	a4 37       	cpi	r26, 0x74	; 116
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	20 e0       	ldi	r18, 0x00	; 0
      96:	a4 e7       	ldi	r26, 0x74	; 116
      98:	b0 e0       	ldi	r27, 0x00	; 0
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a7 39       	cpi	r26, 0x97	; 151
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <main>
      a8:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <TWI_Init>:
#define TWI_Clear_TWINT	(1<<TWINT)|(1<<TWEN)		    //0x84 : xoa TWIN de bat dau doc, doc xong thi NOT ACK
#define TWI_Read_ACK	(1<<TWINT)|(1<<TWEN)|(1<<TWEA)	//0xC4 : xoa TWIN de bat dau doc, sau khi doc set ACK

//Khoi dong TWI
void TWI_Init(void){
	TWSR=0x00; //Prescaler=1
      b0:	11 b8       	out	0x01, r1	; 1
	TWBR=_100K;
      b2:	80 e2       	ldi	r24, 0x20	; 32
      b4:	80 b9       	out	0x00, r24	; 0
	TWCR=(1<<TWINT)|(1<<TWEN);
      b6:	84 e8       	ldi	r24, 0x84	; 132
      b8:	86 bf       	out	0x36, r24	; 54
      ba:	08 95       	ret

000000bc <TWI_DS1307_wadr>:

///chon dia chi thanh ghi can thao tac, dummy write
//Addr: dia thi thanh ghi can ghi
uint8_t TWI_DS1307_wadr(uint8_t Addr){ 
		
	TWCR=TWI_START;						 //goi START condition
      bc:	94 ea       	ldi	r25, 0xA4	; 164
      be:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
      c0:	06 b6       	in	r0, 0x36	; 54
      c2:	07 fe       	sbrs	r0, 7
      c4:	fd cf       	rjmp	.-6      	; 0xc0 <TWI_DS1307_wadr+0x4>
	if((TWSR&0xF8) !=0x08) return TWSR; //neu goi Start co loi thi thoat
      c6:	91 b1       	in	r25, 0x01	; 1
      c8:	98 7f       	andi	r25, 0xF8	; 248
      ca:	98 30       	cpi	r25, 0x08	; 8
      cc:	11 f0       	breq	.+4      	; 0xd2 <TWI_DS1307_wadr+0x16>
      ce:	81 b1       	in	r24, 0x01	; 1
      d0:	08 95       	ret
	
	TWDR=(DS1307_SLA<<1)+TWI_W; 		 //dia chi DS va bit W 	
      d2:	90 ed       	ldi	r25, 0xD0	; 208
      d4:	93 b9       	out	0x03, r25	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT, bat dau goi SLA
      d6:	94 e8       	ldi	r25, 0x84	; 132
      d8:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
      da:	06 b6       	in	r0, 0x36	; 54
      dc:	07 fe       	sbrs	r0, 7
      de:	fd cf       	rjmp	.-6      	; 0xda <TWI_DS1307_wadr+0x1e>
	if((TWSR&0xF8) !=0x18) return TWSR; //device address send error, escape anyway
      e0:	91 b1       	in	r25, 0x01	; 1
      e2:	98 7f       	andi	r25, 0xF8	; 248
      e4:	98 31       	cpi	r25, 0x18	; 24
      e6:	11 f0       	breq	.+4      	; 0xec <TWI_DS1307_wadr+0x30>
      e8:	81 b1       	in	r24, 0x01	; 1
      ea:	08 95       	ret
		
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
      ec:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 				 //start send address by cleaning TWINT
      ee:	84 e8       	ldi	r24, 0x84	; 132
      f0:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
      f2:	06 b6       	in	r0, 0x36	; 54
      f4:	07 fe       	sbrs	r0, 7
      f6:	fd cf       	rjmp	.-6      	; 0xf2 <TWI_DS1307_wadr+0x36>
	if((TWSR&0xF8) !=0x28) return TWSR; //neu du lieu goi ko thanh cong thi thoat
      f8:	81 b1       	in	r24, 0x01	; 1
      fa:	88 7f       	andi	r24, 0xF8	; 248
      fc:	88 32       	cpi	r24, 0x28	; 40
      fe:	11 f0       	breq	.+4      	; 0x104 <TWI_DS1307_wadr+0x48>
     100:	81 b1       	in	r24, 0x01	; 1
     102:	08 95       	ret
	
	TWCR=TWI_STOP;					     //STOP condition
     104:	84 e9       	ldi	r24, 0x94	; 148
     106:	86 bf       	out	0x36, r24	; 54
	return 0;
     108:	80 e0       	ldi	r24, 0x00	; 0
}
     10a:	08 95       	ret

0000010c <TWI_DS1307_wblock>:
//Addr: dia thi thanh ghi can ghi
//Data[]: mang du lieu
//len: so luong byte can ghi
uint8_t TWI_DS1307_wblock(uint8_t Addr, uint8_t Data[], uint8_t len){
		
	TWCR=TWI_START; 					 //goi START condition
     10c:	94 ea       	ldi	r25, 0xA4	; 164
     10e:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
     110:	06 b6       	in	r0, 0x36	; 54
     112:	07 fe       	sbrs	r0, 7
     114:	fd cf       	rjmp	.-6      	; 0x110 <TWI_DS1307_wblock+0x4>
	if((TWSR&0xF8) !=0x08) return TWSR; //neu goi Start co loi thi thoat
     116:	91 b1       	in	r25, 0x01	; 1
     118:	98 7f       	andi	r25, 0xF8	; 248
     11a:	98 30       	cpi	r25, 0x08	; 8
     11c:	11 f0       	breq	.+4      	; 0x122 <TWI_DS1307_wblock+0x16>
     11e:	81 b1       	in	r24, 0x01	; 1
     120:	08 95       	ret
	
	TWDR=(DS1307_SLA<<1)+TWI_W; 		 //dia chi DS va bit W 	
     122:	90 ed       	ldi	r25, 0xD0	; 208
     124:	93 b9       	out	0x03, r25	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
     126:	94 e8       	ldi	r25, 0x84	; 132
     128:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
     12a:	06 b6       	in	r0, 0x36	; 54
     12c:	07 fe       	sbrs	r0, 7
     12e:	fd cf       	rjmp	.-6      	; 0x12a <TWI_DS1307_wblock+0x1e>
	if((TWSR&0xF8) !=0x18) return TWSR; //neu co loi truyen SLA, thoat
     130:	91 b1       	in	r25, 0x01	; 1
     132:	98 7f       	andi	r25, 0xF8	; 248
     134:	98 31       	cpi	r25, 0x18	; 24
     136:	11 f0       	breq	.+4      	; 0x13c <TWI_DS1307_wblock+0x30>
     138:	81 b1       	in	r24, 0x01	; 1
     13a:	08 95       	ret
	
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
     13c:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
     13e:	84 e8       	ldi	r24, 0x84	; 132
     140:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
     142:	06 b6       	in	r0, 0x36	; 54
     144:	07 fe       	sbrs	r0, 7
     146:	fd cf       	rjmp	.-6      	; 0x142 <TWI_DS1307_wblock+0x36>
	if((TWSR&0xF8) !=0x28) return TWSR; 
     148:	81 b1       	in	r24, 0x01	; 1
     14a:	88 7f       	andi	r24, 0xF8	; 248
     14c:	88 32       	cpi	r24, 0x28	; 40
     14e:	a1 f0       	breq	.+40     	; 0x178 <TWI_DS1307_wblock+0x6c>
     150:	81 b1       	in	r24, 0x01	; 1
     152:	08 95       	ret

	for (uint8_t i=0; i <len; i++){
		TWDR=Data[i]; 						 //chuan bi xuat du lieu
     154:	fb 01       	movw	r30, r22
     156:	e8 0f       	add	r30, r24
     158:	f1 1d       	adc	r31, r1
     15a:	90 81       	ld	r25, Z
     15c:	93 b9       	out	0x03, r25	; 3
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
     15e:	94 e8       	ldi	r25, 0x84	; 132
     160:	96 bf       	out	0x36, r25	; 54
		while((TWCR & 0x80)==0x00);	 	 //cho TWINT bit=1
     162:	06 b6       	in	r0, 0x36	; 54
     164:	07 fe       	sbrs	r0, 7
     166:	fd cf       	rjmp	.-6      	; 0x162 <TWI_DS1307_wblock+0x56>
		if((TWSR&0xF8) !=0x28) return TWSR; //neu status ko phai la 0x28 thi return
     168:	91 b1       	in	r25, 0x01	; 1
     16a:	98 7f       	andi	r25, 0xF8	; 248
     16c:	98 32       	cpi	r25, 0x28	; 40
     16e:	11 f0       	breq	.+4      	; 0x174 <TWI_DS1307_wblock+0x68>
     170:	81 b1       	in	r24, 0x01	; 1
     172:	08 95       	ret
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
	if((TWSR&0xF8) !=0x28) return TWSR; 

	for (uint8_t i=0; i <len; i++){
     174:	8f 5f       	subi	r24, 0xFF	; 255
     176:	01 c0       	rjmp	.+2      	; 0x17a <TWI_DS1307_wblock+0x6e>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	84 17       	cp	r24, r20
     17c:	58 f3       	brcs	.-42     	; 0x154 <TWI_DS1307_wblock+0x48>
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
		while((TWCR & 0x80)==0x00);	 	 //cho TWINT bit=1
		if((TWSR&0xF8) !=0x28) return TWSR; //neu status ko phai la 0x28 thi return
	}
	
	TWCR=TWI_STOP;							 //STOP condition
     17e:	84 e9       	ldi	r24, 0x94	; 148
     180:	86 bf       	out	0x36, r24	; 54
	return 0;
     182:	80 e0       	ldi	r24, 0x00	; 0
}
     184:	08 95       	ret

00000186 <TWI_DS1307_rblock>:

//doc 1 mang tu DS
uint8_t TWI_DS1307_rblock(uint8_t Data[], uint8_t len ){ 	
     186:	dc 01       	movw	r26, r24
	uint8_t i;
	
	TWCR=TWI_START; // Start--------------------------------------------------------------------
     188:	84 ea       	ldi	r24, 0xA4	; 164
     18a:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x08));	 //cho TWINT bit=1 va goi START thanh cong
     18c:	06 b6       	in	r0, 0x36	; 54
     18e:	07 fe       	sbrs	r0, 7
     190:	fd cf       	rjmp	.-6      	; 0x18c <TWI_DS1307_rblock+0x6>
     192:	81 b1       	in	r24, 0x01	; 1
     194:	88 7f       	andi	r24, 0xF8	; 248
     196:	88 30       	cpi	r24, 0x08	; 8
     198:	c9 f7       	brne	.-14     	; 0x18c <TWI_DS1307_rblock+0x6>
	
	TWDR=(DS1307_SLA<<1)+TWI_R; 							 //goi dia chi SLA +READ	
     19a:	81 ed       	ldi	r24, 0xD1	; 209
     19c:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 									 //bat dau, xoa TWINT
     19e:	84 e8       	ldi	r24, 0x84	; 132
     1a0:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x40));	 //cho TWINT bit=1	va goi SLA thanh cong
     1a2:	06 b6       	in	r0, 0x36	; 54
     1a4:	07 fe       	sbrs	r0, 7
     1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <TWI_DS1307_rblock+0x1c>
     1a8:	91 b1       	in	r25, 0x01	; 1
     1aa:	98 7f       	andi	r25, 0xF8	; 248
     1ac:	90 34       	cpi	r25, 0x40	; 64
     1ae:	c9 f7       	brne	.-14     	; 0x1a2 <TWI_DS1307_rblock+0x1c>
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <TWI_DS1307_rblock+0x4c>
	
	//nhan len-1 bytes dau tien---------------------
    for (i=0; i <len-1; i++){
       TWCR=TWI_Read_ACK; 									 //xoa TWINT,se goi ACK sau khi nhan moi byte
     1b4:	84 ec       	ldi	r24, 0xC4	; 196
     1b6:	86 bf       	out	0x36, r24	; 54
       while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x50));//cho TWINT bit=1 hoac nhan duoc ACK	   
     1b8:	06 b6       	in	r0, 0x36	; 54
     1ba:	07 fe       	sbrs	r0, 7
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <TWI_DS1307_rblock+0x32>
     1be:	91 b1       	in	r25, 0x01	; 1
     1c0:	98 7f       	andi	r25, 0xF8	; 248
     1c2:	90 35       	cpi	r25, 0x50	; 80
     1c4:	c9 f7       	brne	.-14     	; 0x1b8 <TWI_DS1307_rblock+0x32>
	   Data[i]=TWDR;										  //doc du lieu vao mang Data 
     1c6:	fd 01       	movw	r30, r26
     1c8:	e2 0f       	add	r30, r18
     1ca:	f1 1d       	adc	r31, r1
     1cc:	83 b1       	in	r24, 0x03	; 3
     1ce:	80 83       	st	Z, r24
	TWDR=(DS1307_SLA<<1)+TWI_R; 							 //goi dia chi SLA +READ	
	TWCR=TWI_Clear_TWINT; 									 //bat dau, xoa TWINT
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x40));	 //cho TWINT bit=1	va goi SLA thanh cong
	
	//nhan len-1 bytes dau tien---------------------
    for (i=0; i <len-1; i++){
     1d0:	2f 5f       	subi	r18, 0xFF	; 255
     1d2:	e2 2f       	mov	r30, r18
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	46 2f       	mov	r20, r22
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	41 50       	subi	r20, 0x01	; 1
     1dc:	51 09       	sbc	r21, r1
     1de:	e4 17       	cp	r30, r20
     1e0:	f5 07       	cpc	r31, r21
     1e2:	44 f3       	brlt	.-48     	; 0x1b4 <TWI_DS1307_rblock+0x2e>
       TWCR=TWI_Read_ACK; 									 //xoa TWINT,se goi ACK sau khi nhan moi byte
       while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x50));//cho TWINT bit=1 hoac nhan duoc ACK	   
	   Data[i]=TWDR;										  //doc du lieu vao mang Data 
    }
	//nhan byte cuoi
	TWCR=TWI_Clear_TWINT; 									 //xoa TWINT de nhan byte cuoi, sau do set NOT ACK
     1e4:	84 e8       	ldi	r24, 0x84	; 132
     1e6:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x58));   //cho TWIN=1 hoac trang thai not ack	
     1e8:	06 b6       	in	r0, 0x36	; 54
     1ea:	07 fe       	sbrs	r0, 7
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <TWI_DS1307_rblock+0x62>
     1ee:	91 b1       	in	r25, 0x01	; 1
     1f0:	98 7f       	andi	r25, 0xF8	; 248
     1f2:	98 35       	cpi	r25, 0x58	; 88
     1f4:	c9 f7       	brne	.-14     	; 0x1e8 <TWI_DS1307_rblock+0x62>
	Data[len-1]=TWDR;
     1f6:	86 2f       	mov	r24, r22
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	a8 0f       	add	r26, r24
     1fe:	b9 1f       	adc	r27, r25
     200:	83 b1       	in	r24, 0x03	; 3
     202:	8c 93       	st	X, r24
	
	TWCR=TWI_STOP;											 //STOP condition
     204:	84 e9       	ldi	r24, 0x94	; 148
     206:	86 bf       	out	0x36, r24	; 54
	return 0;	
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	08 95       	ret

0000020c <BCDToDec>:
volatile char SW_time_date = 0;

// chuyen doi nhi phan sang thap phan
uint8_t BCDToDec(uint8_t BCD){
	uint8_t L, H;
	L=BCD & 0x0F;
     20c:	38 2f       	mov	r19, r24
     20e:	3f 70       	andi	r19, 0x0F	; 15
	H=(BCD>>4)*10;
     210:	98 2f       	mov	r25, r24
     212:	92 95       	swap	r25
     214:	9f 70       	andi	r25, 0x0F	; 15
     216:	99 0f       	add	r25, r25
     218:	29 2f       	mov	r18, r25
     21a:	22 0f       	add	r18, r18
     21c:	22 0f       	add	r18, r18
     21e:	89 2f       	mov	r24, r25
     220:	82 0f       	add	r24, r18
	return (H+L);
}
     222:	83 0f       	add	r24, r19
     224:	08 95       	ret

00000226 <DecToBCD>:
// chuyen doi thap phan sang nhi phan
uint8_t DecToBCD(uint8_t Dec){
	uint8_t L, H;
	L=Dec % 10;
     226:	2d ec       	ldi	r18, 0xCD	; 205
     228:	82 9f       	mul	r24, r18
     22a:	21 2d       	mov	r18, r1
     22c:	11 24       	eor	r1, r1
     22e:	92 2f       	mov	r25, r18
     230:	96 95       	lsr	r25
     232:	96 95       	lsr	r25
     234:	96 95       	lsr	r25
     236:	99 0f       	add	r25, r25
     238:	39 2f       	mov	r19, r25
     23a:	33 0f       	add	r19, r19
     23c:	33 0f       	add	r19, r19
     23e:	93 0f       	add	r25, r19
     240:	89 1b       	sub	r24, r25
	H=(Dec/10)<<4;
     242:	26 95       	lsr	r18
     244:	26 95       	lsr	r18
     246:	26 95       	lsr	r18
	return (H+L);
}
     248:	30 e1       	ldi	r19, 0x10	; 16
     24a:	23 9f       	mul	r18, r19
     24c:	80 0d       	add	r24, r0
     24e:	11 24       	eor	r1, r1
     250:	08 95       	ret

00000252 <Decode>:

void Decode(void){
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
    //BCD data converter function from DS1307 to DEC
	Second 	= BCDToDec(tData[0] & 0x7F);
     256:	ce e8       	ldi	r28, 0x8E	; 142
     258:	d0 e0       	ldi	r29, 0x00	; 0
     25a:	88 81       	ld	r24, Y
     25c:	8f 77       	andi	r24, 0x7F	; 127
     25e:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Second+0x1>
     268:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Second>

	Minute 	= BCDToDec(tData[1]);
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Minute+0x1>
     278:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Minute>
	
	if (Mode != 0)
     27c:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <Mode>
     280:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <Mode+0x1>
     284:	89 2b       	or	r24, r25
     286:	59 f0       	breq	.+22     	; 0x29e <Decode+0x4c>
	{ 	
		Hour = BCDToDec(tData[2] & 0x1F); //Mode for 12h
     288:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <tData+0x2>
     28c:	8f 71       	andi	r24, 0x1F	; 31
     28e:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Hour+0x1>
     298:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Hour>
     29c:	0a c0       	rjmp	.+20     	; 0x2b2 <Decode+0x60>
	}
	else 
	{
	  	Hour = BCDToDec(tData[2] & 0x3F); //Mode for 24h	
     29e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <tData+0x2>
     2a2:	8f 73       	andi	r24, 0x3F	; 63
     2a4:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Hour+0x1>
     2ae:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Hour>
	}
	Day		= BCDToDec(tData[3]);
     2b2:	ce e8       	ldi	r28, 0x8E	; 142
     2b4:	d0 e0       	ldi	r29, 0x00	; 0
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <Day+0x1>
     2c2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Day>
	Date   	= BCDToDec(tData[4]);
     2c6:	8c 81       	ldd	r24, Y+4	; 0x04
     2c8:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Date+0x1>
     2d2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Date>
	Month	= BCDToDec(tData[5]);
     2d6:	8d 81       	ldd	r24, Y+5	; 0x05
     2d8:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Month+0x1>
     2e2:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Month>
	Year	= BCDToDec(tData[6]);
     2e6:	8e 81       	ldd	r24, Y+6	; 0x06
     2e8:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Year+0x1>
     2f2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Year>
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <FixTime>:
	}
	

}
//Write to DS1307 time that want to change
void FixTime(){ 
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
	tData[0] = DecToBCD(Second); 
     300:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
     304:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
     308:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     30c:	ce e8       	ldi	r28, 0x8E	; 142
     30e:	d0 e0       	ldi	r29, 0x00	; 0
     310:	88 83       	st	Y, r24
	tData[1] = DecToBCD(Minute); 
     312:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
     316:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
     31a:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     31e:	89 83       	std	Y+1, r24	; 0x01
	if (Mode != 0) tData[2] = DecToBCD(Hour)|(Mode << 6)|(AP << 5); //mode 12h
     320:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <Mode>
     324:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <Mode+0x1>
     328:	89 2b       	or	r24, r25
     32a:	21 f1       	breq	.+72     	; 0x374 <FixTime+0x78>
     32c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
     330:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
     334:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     338:	40 91 81 00 	lds	r20, 0x0081	; 0x800081 <Mode>
     33c:	50 91 82 00 	lds	r21, 0x0082	; 0x800082 <Mode+0x1>
     340:	00 24       	eor	r0, r0
     342:	56 95       	lsr	r21
     344:	47 95       	ror	r20
     346:	07 94       	ror	r0
     348:	56 95       	lsr	r21
     34a:	47 95       	ror	r20
     34c:	07 94       	ror	r0
     34e:	54 2f       	mov	r21, r20
     350:	40 2d       	mov	r20, r0
     352:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <AP>
     356:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <AP+0x1>
     35a:	22 0f       	add	r18, r18
     35c:	33 1f       	adc	r19, r19
     35e:	22 95       	swap	r18
     360:	32 95       	swap	r19
     362:	30 7f       	andi	r19, 0xF0	; 240
     364:	32 27       	eor	r19, r18
     366:	20 7f       	andi	r18, 0xF0	; 240
     368:	32 27       	eor	r19, r18
     36a:	84 2b       	or	r24, r20
     36c:	28 2b       	or	r18, r24
     36e:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <tData+0x2>
     372:	08 c0       	rjmp	.+16     	; 0x384 <FixTime+0x88>
	else tData[2] = DecToBCD(Hour);
     374:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
     378:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
     37c:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     380:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <tData+0x2>
	tData[3] = DecToBCD(Day);
     384:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Day>
     388:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Day+0x1>
     38c:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     390:	ce e8       	ldi	r28, 0x8E	; 142
     392:	d0 e0       	ldi	r29, 0x00	; 0
     394:	8b 83       	std	Y+3, r24	; 0x03
	tData[4] = DecToBCD(Date);
     396:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
     39a:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
     39e:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     3a2:	8c 83       	std	Y+4, r24	; 0x04
	tData[5] = DecToBCD(Month); 
     3a4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     3a8:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     3ac:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     3b0:	8d 83       	std	Y+5, r24	; 0x05
	tData[6] = DecToBCD(Year); 
     3b2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Year>
     3b6:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Year+0x1>
     3ba:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     3be:	8e 83       	std	Y+6, r24	; 0x06
	TWI_DS1307_wblock(0x00, tData, 7); 
     3c0:	47 e0       	ldi	r20, 0x07	; 7
     3c2:	be 01       	movw	r22, r28
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	0e 94 86 00 	call	0x10c	; 0x10c <TWI_DS1307_wblock>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ca:	8f ec       	ldi	r24, 0xCF	; 207
     3cc:	97 e0       	ldi	r25, 0x07	; 7
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <FixTime+0xd2>
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <FixTime+0xd8>
     3d4:	00 00       	nop
	_delay_ms(1);
	TWI_DS1307_wadr(0x00); 
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 5e 00 	call	0xbc	; 0xbc <TWI_DS1307_wadr>
     3dc:	8f ec       	ldi	r24, 0xCF	; 207
     3de:	97 e0       	ldi	r25, 0x07	; 7
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <FixTime+0xe4>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <FixTime+0xea>
     3e6:	00 00       	nop
	_delay_ms(1);			
 }
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <Init_btn>:

void Init_btn(void){

    //------------------Initialize button------------
	BTN_DDRD  &= ~((1<<SW)|(1<<ADJ));		// set input cho button setting
     3ee:	81 b3       	in	r24, 0x11	; 17
     3f0:	83 7f       	andi	r24, 0xF3	; 243
     3f2:	81 bb       	out	0x11, r24	; 17
	BTN_DDRD = (1<<BUZ_LED);			// set output cho buzzer + led
     3f4:	80 e8       	ldi	r24, 0x80	; 128
     3f6:	81 bb       	out	0x11, r24	; 17
	BTN_PORTD = (1<<SW)|(1<<ADJ);	// set dien tro keo len cho button setting
     3f8:	8c e0       	ldi	r24, 0x0C	; 12
     3fa:	82 bb       	out	0x12, r24	; 18
	BTN_DDRB &= ~(1<<INCR);
     3fc:	87 b3       	in	r24, 0x17	; 23
     3fe:	8b 7f       	andi	r24, 0xFB	; 251
     400:	87 bb       	out	0x17, r24	; 23
	BTN_PORTB = (1<<INCR);
     402:	84 e0       	ldi	r24, 0x04	; 4
     404:	88 bb       	out	0x18, r24	; 24
	userled_DDR=(1<<userled);
     406:	81 e0       	ldi	r24, 0x01	; 1
     408:	8a bb       	out	0x1a, r24	; 26
     40a:	08 95       	ret

0000040c <jdFromDate>:


//-----------------------DOI DUONG LICH - AM LICH---------------------

double jdFromDate(uint8_t dd, uint8_t mm, uint16_t yy)
{
     40c:	4f 92       	push	r4
     40e:	5f 92       	push	r5
     410:	6f 92       	push	r6
     412:	7f 92       	push	r7
     414:	8f 92       	push	r8
     416:	9f 92       	push	r9
     418:	af 92       	push	r10
     41a:	bf 92       	push	r11
     41c:	cf 92       	push	r12
     41e:	df 92       	push	r13
     420:	ef 92       	push	r14
     422:	ff 92       	push	r15
     424:	0f 93       	push	r16
     426:	1f 93       	push	r17
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	f8 2e       	mov	r15, r24
     42e:	8a 01       	movw	r16, r20
	long double a, y, m, jd;
	a = floorf((14 - mm) / 12);
     430:	c6 2f       	mov	r28, r22
     432:	d0 e0       	ldi	r29, 0x00	; 0
     434:	8e e0       	ldi	r24, 0x0E	; 14
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	8c 1b       	sub	r24, r28
     43a:	9d 0b       	sbc	r25, r29
     43c:	6c e0       	ldi	r22, 0x0C	; 12
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
     444:	07 2e       	mov	r0, r23
     446:	00 0c       	add	r0, r0
     448:	88 0b       	sbc	r24, r24
     44a:	99 0b       	sbc	r25, r25
     44c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__floatsisf>
     450:	0e 94 b5 13 	call	0x276a	; 0x276a <floor>
     454:	4b 01       	movw	r8, r22
     456:	5c 01       	movw	r10, r24
	y = yy+4800-a;
     458:	b8 01       	movw	r22, r16
     45a:	60 54       	subi	r22, 0x40	; 64
     45c:	7d 4e       	sbci	r23, 0xED	; 237
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__floatunsisf>
     466:	a5 01       	movw	r20, r10
     468:	94 01       	movw	r18, r8
     46a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     46e:	2b 01       	movw	r4, r22
     470:	3c 01       	movw	r6, r24
	m = mm+12*a-3;
     472:	20 e0       	ldi	r18, 0x00	; 0
     474:	30 e0       	ldi	r19, 0x00	; 0
     476:	40 e4       	ldi	r20, 0x40	; 64
     478:	51 e4       	ldi	r21, 0x41	; 65
     47a:	c5 01       	movw	r24, r10
     47c:	b4 01       	movw	r22, r8
     47e:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     482:	4b 01       	movw	r8, r22
     484:	5c 01       	movw	r10, r24
     486:	be 01       	movw	r22, r28
     488:	dd 0f       	add	r29, r29
     48a:	88 0b       	sbc	r24, r24
     48c:	99 0b       	sbc	r25, r25
     48e:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__floatsisf>
     492:	a5 01       	movw	r20, r10
     494:	94 01       	movw	r18, r8
     496:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	30 e0       	ldi	r19, 0x00	; 0
     49e:	40 e4       	ldi	r20, 0x40	; 64
     4a0:	50 e4       	ldi	r21, 0x40	; 64
     4a2:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     4a6:	4b 01       	movw	r8, r22
     4a8:	5c 01       	movw	r10, r24
	jd = dd + floorf((153*m+2)/5) + 365*y + floorf(y/4) - floorf(y/100) + floorf(y/400) - 32045;
     4aa:	6f 2d       	mov	r22, r15
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	80 e0       	ldi	r24, 0x00	; 0
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__floatsisf>
     4b6:	6b 01       	movw	r12, r22
     4b8:	7c 01       	movw	r14, r24
     4ba:	20 e0       	ldi	r18, 0x00	; 0
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	49 e1       	ldi	r20, 0x19	; 25
     4c0:	53 e4       	ldi	r21, 0x43	; 67
     4c2:	c5 01       	movw	r24, r10
     4c4:	b4 01       	movw	r22, r8
     4c6:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     4ca:	20 e0       	ldi	r18, 0x00	; 0
     4cc:	30 e0       	ldi	r19, 0x00	; 0
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	50 e4       	ldi	r21, 0x40	; 64
     4d2:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     4d6:	20 e0       	ldi	r18, 0x00	; 0
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	40 ea       	ldi	r20, 0xA0	; 160
     4dc:	50 e4       	ldi	r21, 0x40	; 64
     4de:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__divsf3>
     4e2:	0e 94 b5 13 	call	0x276a	; 0x276a <floor>
     4e6:	9b 01       	movw	r18, r22
     4e8:	ac 01       	movw	r20, r24
     4ea:	c7 01       	movw	r24, r14
     4ec:	b6 01       	movw	r22, r12
     4ee:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     4f2:	6b 01       	movw	r12, r22
     4f4:	7c 01       	movw	r14, r24
     4f6:	20 e0       	ldi	r18, 0x00	; 0
     4f8:	30 e8       	ldi	r19, 0x80	; 128
     4fa:	46 eb       	ldi	r20, 0xB6	; 182
     4fc:	53 e4       	ldi	r21, 0x43	; 67
     4fe:	c3 01       	movw	r24, r6
     500:	b2 01       	movw	r22, r4
     502:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     506:	9b 01       	movw	r18, r22
     508:	ac 01       	movw	r20, r24
     50a:	c7 01       	movw	r24, r14
     50c:	b6 01       	movw	r22, r12
     50e:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     512:	6b 01       	movw	r12, r22
     514:	7c 01       	movw	r14, r24
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	40 e8       	ldi	r20, 0x80	; 128
     51c:	5e e3       	ldi	r21, 0x3E	; 62
     51e:	c3 01       	movw	r24, r6
     520:	b2 01       	movw	r22, r4
     522:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     526:	0e 94 b5 13 	call	0x276a	; 0x276a <floor>
     52a:	9b 01       	movw	r18, r22
     52c:	ac 01       	movw	r20, r24
     52e:	c7 01       	movw	r24, r14
     530:	b6 01       	movw	r22, r12
     532:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     536:	6b 01       	movw	r12, r22
     538:	7c 01       	movw	r14, r24
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	48 ec       	ldi	r20, 0xC8	; 200
     540:	52 e4       	ldi	r21, 0x42	; 66
     542:	c3 01       	movw	r24, r6
     544:	b2 01       	movw	r22, r4
     546:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__divsf3>
     54a:	0e 94 b5 13 	call	0x276a	; 0x276a <floor>
     54e:	9b 01       	movw	r18, r22
     550:	ac 01       	movw	r20, r24
     552:	c7 01       	movw	r24, r14
     554:	b6 01       	movw	r22, r12
     556:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     55a:	4b 01       	movw	r8, r22
     55c:	5c 01       	movw	r10, r24
     55e:	20 e0       	ldi	r18, 0x00	; 0
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	48 ec       	ldi	r20, 0xC8	; 200
     564:	53 e4       	ldi	r21, 0x43	; 67
     566:	c3 01       	movw	r24, r6
     568:	b2 01       	movw	r22, r4
     56a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__divsf3>
     56e:	0e 94 b5 13 	call	0x276a	; 0x276a <floor>
     572:	9b 01       	movw	r18, r22
     574:	ac 01       	movw	r20, r24
     576:	c5 01       	movw	r24, r10
     578:	b4 01       	movw	r22, r8
     57a:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     57e:	20 e0       	ldi	r18, 0x00	; 0
     580:	3a e5       	ldi	r19, 0x5A	; 90
     582:	4a ef       	ldi	r20, 0xFA	; 250
     584:	56 e4       	ldi	r21, 0x46	; 70
     586:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     58a:	4b 01       	movw	r8, r22
     58c:	5c 01       	movw	r10, r24
	if (jd < 2299161) {
     58e:	24 e6       	ldi	r18, 0x64	; 100
     590:	34 e5       	ldi	r19, 0x54	; 84
     592:	4c e0       	ldi	r20, 0x0C	; 12
     594:	5a e4       	ldi	r21, 0x4A	; 74
     596:	0e 94 cb 12 	call	0x2596	; 0x2596 <__cmpsf2>
     59a:	88 23       	and	r24, r24
     59c:	54 f4       	brge	.+20     	; 0x5b2 <jdFromDate+0x1a6>
		jd = dd + floorf((153*m+2)/5) + 365*y + floorf(y/4) - 32083;
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	36 ea       	ldi	r19, 0xA6	; 166
     5a2:	4a ef       	ldi	r20, 0xFA	; 250
     5a4:	56 e4       	ldi	r21, 0x46	; 70
     5a6:	c7 01       	movw	r24, r14
     5a8:	b6 01       	movw	r22, r12
     5aa:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     5ae:	4b 01       	movw	r8, r22
     5b0:	5c 01       	movw	r10, r24
	}
	return jd;
}
     5b2:	c5 01       	movw	r24, r10
     5b4:	b4 01       	movw	r22, r8
     5b6:	df 91       	pop	r29
     5b8:	cf 91       	pop	r28
     5ba:	1f 91       	pop	r17
     5bc:	0f 91       	pop	r16
     5be:	ff 90       	pop	r15
     5c0:	ef 90       	pop	r14
     5c2:	df 90       	pop	r13
     5c4:	cf 90       	pop	r12
     5c6:	bf 90       	pop	r11
     5c8:	af 90       	pop	r10
     5ca:	9f 90       	pop	r9
     5cc:	8f 90       	pop	r8
     5ce:	7f 90       	pop	r7
     5d0:	6f 90       	pop	r6
     5d2:	5f 90       	pop	r5
     5d4:	4f 90       	pop	r4
     5d6:	08 95       	ret

000005d8 <getNewMoonDay>:

double getNewMoonDay(long double k, int timeZone)
{
     5d8:	4f 92       	push	r4
     5da:	5f 92       	push	r5
     5dc:	6f 92       	push	r6
     5de:	7f 92       	push	r7
     5e0:	8f 92       	push	r8
     5e2:	9f 92       	push	r9
     5e4:	af 92       	push	r10
     5e6:	bf 92       	push	r11
     5e8:	cf 92       	push	r12
     5ea:	df 92       	push	r13
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	cf 93       	push	r28
     5f2:	df 93       	push	r29
     5f4:	cd b7       	in	r28, 0x3d	; 61
     5f6:	de b7       	in	r29, 0x3e	; 62
     5f8:	66 97       	sbiw	r28, 0x16	; 22
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	de bf       	out	0x3e, r29	; 62
     600:	0f be       	out	0x3f, r0	; 63
     602:	cd bf       	out	0x3d, r28	; 61
     604:	6b 01       	movw	r12, r22
     606:	7c 01       	movw	r14, r24
     608:	5e 8b       	std	Y+22, r21	; 0x16
     60a:	4d 8b       	std	Y+21, r20	; 0x15
	long double T, T2, T3, dr, Jd1, M, Mpr, F, C1, deltat, JdNew;
	T = k/1236.85; // Time in Julian centuries from 1900 January 0.5
     60c:	23 e3       	ldi	r18, 0x33	; 51
     60e:	3b e9       	ldi	r19, 0x9B	; 155
     610:	4a e9       	ldi	r20, 0x9A	; 154
     612:	54 e4       	ldi	r21, 0x44	; 68
     614:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__divsf3>
     618:	69 83       	std	Y+1, r22	; 0x01
     61a:	7a 83       	std	Y+2, r23	; 0x02
     61c:	8b 83       	std	Y+3, r24	; 0x03
     61e:	9c 83       	std	Y+4, r25	; 0x04
	T2 = T * T;
     620:	9b 01       	movw	r18, r22
     622:	ac 01       	movw	r20, r24
     624:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     628:	6d 83       	std	Y+5, r22	; 0x05
     62a:	7e 83       	std	Y+6, r23	; 0x06
     62c:	8f 83       	std	Y+7, r24	; 0x07
     62e:	98 87       	std	Y+8, r25	; 0x08
	T3 = T2 * T;
     630:	9b 01       	movw	r18, r22
     632:	ac 01       	movw	r20, r24
     634:	69 81       	ldd	r22, Y+1	; 0x01
     636:	7a 81       	ldd	r23, Y+2	; 0x02
     638:	8b 81       	ldd	r24, Y+3	; 0x03
     63a:	9c 81       	ldd	r25, Y+4	; 0x04
     63c:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     640:	6d 87       	std	Y+13, r22	; 0x0d
     642:	7e 87       	std	Y+14, r23	; 0x0e
     644:	8f 87       	std	Y+15, r24	; 0x0f
     646:	98 8b       	std	Y+16, r25	; 0x10
	dr = M_PI/180;
	Jd1 = 2415020.75933 + 29.53058868*k + 0.0001178*T2 - 0.000000155*T3;
     648:	25 ea       	ldi	r18, 0xA5	; 165
     64a:	3e e3       	ldi	r19, 0x3E	; 62
     64c:	4c ee       	ldi	r20, 0xEC	; 236
     64e:	51 e4       	ldi	r21, 0x41	; 65
     650:	c7 01       	movw	r24, r14
     652:	b6 01       	movw	r22, r12
     654:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     658:	23 eb       	ldi	r18, 0xB3	; 179
     65a:	36 e6       	ldi	r19, 0x66	; 102
     65c:	43 e1       	ldi	r20, 0x13	; 19
     65e:	5a e4       	ldi	r21, 0x4A	; 74
     660:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     664:	4b 01       	movw	r8, r22
     666:	5c 01       	movw	r10, r24
     668:	25 e6       	ldi	r18, 0x65	; 101
     66a:	3b e0       	ldi	r19, 0x0B	; 11
     66c:	47 ef       	ldi	r20, 0xF7	; 247
     66e:	58 e3       	ldi	r21, 0x38	; 56
     670:	6d 81       	ldd	r22, Y+5	; 0x05
     672:	7e 81       	ldd	r23, Y+6	; 0x06
     674:	8f 81       	ldd	r24, Y+7	; 0x07
     676:	98 85       	ldd	r25, Y+8	; 0x08
     678:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     67c:	9b 01       	movw	r18, r22
     67e:	ac 01       	movw	r20, r24
     680:	c5 01       	movw	r24, r10
     682:	b4 01       	movw	r22, r8
     684:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     688:	4b 01       	movw	r8, r22
     68a:	5c 01       	movw	r10, r24
     68c:	23 e1       	ldi	r18, 0x13	; 19
     68e:	3e e6       	ldi	r19, 0x6E	; 110
     690:	46 e2       	ldi	r20, 0x26	; 38
     692:	54 e3       	ldi	r21, 0x34	; 52
     694:	6d 85       	ldd	r22, Y+13	; 0x0d
     696:	7e 85       	ldd	r23, Y+14	; 0x0e
     698:	8f 85       	ldd	r24, Y+15	; 0x0f
     69a:	98 89       	ldd	r25, Y+16	; 0x10
     69c:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     6a0:	9b 01       	movw	r18, r22
     6a2:	ac 01       	movw	r20, r24
     6a4:	c5 01       	movw	r24, r10
     6a6:	b4 01       	movw	r22, r8
     6a8:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     6ac:	4b 01       	movw	r8, r22
     6ae:	5c 01       	movw	r10, r24
	Jd1 = Jd1 + 0.00033*sinf((166.56 + 132.87*T - 0.009173*T2)*dr); // Mean new moon
     6b0:	28 eb       	ldi	r18, 0xB8	; 184
     6b2:	3e ed       	ldi	r19, 0xDE	; 222
     6b4:	44 e0       	ldi	r20, 0x04	; 4
     6b6:	53 e4       	ldi	r21, 0x43	; 67
     6b8:	69 81       	ldd	r22, Y+1	; 0x01
     6ba:	7a 81       	ldd	r23, Y+2	; 0x02
     6bc:	8b 81       	ldd	r24, Y+3	; 0x03
     6be:	9c 81       	ldd	r25, Y+4	; 0x04
     6c0:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     6c4:	2c e5       	ldi	r18, 0x5C	; 92
     6c6:	3f e8       	ldi	r19, 0x8F	; 143
     6c8:	46 e2       	ldi	r20, 0x26	; 38
     6ca:	53 e4       	ldi	r21, 0x43	; 67
     6cc:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     6d0:	2b 01       	movw	r4, r22
     6d2:	3c 01       	movw	r6, r24
     6d4:	2a e5       	ldi	r18, 0x5A	; 90
     6d6:	3a e4       	ldi	r19, 0x4A	; 74
     6d8:	46 e1       	ldi	r20, 0x16	; 22
     6da:	5c e3       	ldi	r21, 0x3C	; 60
     6dc:	6d 81       	ldd	r22, Y+5	; 0x05
     6de:	7e 81       	ldd	r23, Y+6	; 0x06
     6e0:	8f 81       	ldd	r24, Y+7	; 0x07
     6e2:	98 85       	ldd	r25, Y+8	; 0x08
     6e4:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     6e8:	9b 01       	movw	r18, r22
     6ea:	ac 01       	movw	r20, r24
     6ec:	c3 01       	movw	r24, r6
     6ee:	b2 01       	movw	r22, r4
     6f0:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     6f4:	25 e3       	ldi	r18, 0x35	; 53
     6f6:	3a ef       	ldi	r19, 0xFA	; 250
     6f8:	4e e8       	ldi	r20, 0x8E	; 142
     6fa:	5c e3       	ldi	r21, 0x3C	; 60
     6fc:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     700:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <sin>
     704:	2a ed       	ldi	r18, 0xDA	; 218
     706:	33 e0       	ldi	r19, 0x03	; 3
     708:	4d ea       	ldi	r20, 0xAD	; 173
     70a:	59 e3       	ldi	r21, 0x39	; 57
     70c:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     710:	9b 01       	movw	r18, r22
     712:	ac 01       	movw	r20, r24
     714:	c5 01       	movw	r24, r10
     716:	b4 01       	movw	r22, r8
     718:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     71c:	69 8b       	std	Y+17, r22	; 0x11
     71e:	7a 8b       	std	Y+18, r23	; 0x12
     720:	8b 8b       	std	Y+19, r24	; 0x13
     722:	9c 8b       	std	Y+20, r25	; 0x14
	M = 359.2242 + 29.10535608*k - 0.0000333*T2 - 0.00000347*T3; // Sun's mean anomaly
     724:	25 ec       	ldi	r18, 0xC5	; 197
     726:	37 ed       	ldi	r19, 0xD7	; 215
     728:	48 ee       	ldi	r20, 0xE8	; 232
     72a:	51 e4       	ldi	r21, 0x41	; 65
     72c:	c7 01       	movw	r24, r14
     72e:	b6 01       	movw	r22, r12
     730:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     734:	23 eb       	ldi	r18, 0xB3	; 179
     736:	3c e9       	ldi	r19, 0x9C	; 156
     738:	43 eb       	ldi	r20, 0xB3	; 179
     73a:	53 e4       	ldi	r21, 0x43	; 67
     73c:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     740:	4b 01       	movw	r8, r22
     742:	5c 01       	movw	r10, r24
     744:	2a e9       	ldi	r18, 0x9A	; 154
     746:	3b ea       	ldi	r19, 0xAB	; 171
     748:	4b e0       	ldi	r20, 0x0B	; 11
     74a:	58 e3       	ldi	r21, 0x38	; 56
     74c:	6d 81       	ldd	r22, Y+5	; 0x05
     74e:	7e 81       	ldd	r23, Y+6	; 0x06
     750:	8f 81       	ldd	r24, Y+7	; 0x07
     752:	98 85       	ldd	r25, Y+8	; 0x08
     754:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	c5 01       	movw	r24, r10
     75e:	b4 01       	movw	r22, r8
     760:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     764:	4b 01       	movw	r8, r22
     766:	5c 01       	movw	r10, r24
     768:	25 e2       	ldi	r18, 0x25	; 37
     76a:	3e ed       	ldi	r19, 0xDE	; 222
     76c:	48 e6       	ldi	r20, 0x68	; 104
     76e:	56 e3       	ldi	r21, 0x36	; 54
     770:	6d 85       	ldd	r22, Y+13	; 0x0d
     772:	7e 85       	ldd	r23, Y+14	; 0x0e
     774:	8f 85       	ldd	r24, Y+15	; 0x0f
     776:	98 89       	ldd	r25, Y+16	; 0x10
     778:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     77c:	9b 01       	movw	r18, r22
     77e:	ac 01       	movw	r20, r24
     780:	c5 01       	movw	r24, r10
     782:	b4 01       	movw	r22, r8
     784:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     788:	69 87       	std	Y+9, r22	; 0x09
     78a:	7a 87       	std	Y+10, r23	; 0x0a
     78c:	8b 87       	std	Y+11, r24	; 0x0b
     78e:	9c 87       	std	Y+12, r25	; 0x0c
	Mpr = 306.0253 + 385.81691806*k + 0.0107306*T2 + 0.00001236*T3; // Moon's mean anomaly
     790:	21 e9       	ldi	r18, 0x91	; 145
     792:	38 ee       	ldi	r19, 0xE8	; 232
     794:	40 ec       	ldi	r20, 0xC0	; 192
     796:	53 e4       	ldi	r21, 0x43	; 67
     798:	c7 01       	movw	r24, r14
     79a:	b6 01       	movw	r22, r12
     79c:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     7a0:	2d e3       	ldi	r18, 0x3D	; 61
     7a2:	33 e0       	ldi	r19, 0x03	; 3
     7a4:	49 e9       	ldi	r20, 0x99	; 153
     7a6:	53 e4       	ldi	r21, 0x43	; 67
     7a8:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     7ac:	4b 01       	movw	r8, r22
     7ae:	5c 01       	movw	r10, r24
     7b0:	26 e6       	ldi	r18, 0x66	; 102
     7b2:	3f ec       	ldi	r19, 0xCF	; 207
     7b4:	4f e2       	ldi	r20, 0x2F	; 47
     7b6:	5c e3       	ldi	r21, 0x3C	; 60
     7b8:	6d 81       	ldd	r22, Y+5	; 0x05
     7ba:	7e 81       	ldd	r23, Y+6	; 0x06
     7bc:	8f 81       	ldd	r24, Y+7	; 0x07
     7be:	98 85       	ldd	r25, Y+8	; 0x08
     7c0:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     7c4:	9b 01       	movw	r18, r22
     7c6:	ac 01       	movw	r20, r24
     7c8:	c5 01       	movw	r24, r10
     7ca:	b4 01       	movw	r22, r8
     7cc:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     7d0:	4b 01       	movw	r8, r22
     7d2:	5c 01       	movw	r10, r24
     7d4:	2c ec       	ldi	r18, 0xCC	; 204
     7d6:	3d e5       	ldi	r19, 0x5D	; 93
     7d8:	4f e4       	ldi	r20, 0x4F	; 79
     7da:	57 e3       	ldi	r21, 0x37	; 55
     7dc:	6d 85       	ldd	r22, Y+13	; 0x0d
     7de:	7e 85       	ldd	r23, Y+14	; 0x0e
     7e0:	8f 85       	ldd	r24, Y+15	; 0x0f
     7e2:	98 89       	ldd	r25, Y+16	; 0x10
     7e4:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     7e8:	9b 01       	movw	r18, r22
     7ea:	ac 01       	movw	r20, r24
     7ec:	c5 01       	movw	r24, r10
     7ee:	b4 01       	movw	r22, r8
     7f0:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     7f4:	2b 01       	movw	r4, r22
     7f6:	3c 01       	movw	r6, r24
	F = 21.2964 + 390.67050646*k - 0.0016528*T2 - 0.00000239*T3; // Moon's argument of latitude
     7f8:	23 ed       	ldi	r18, 0xD3	; 211
     7fa:	35 e5       	ldi	r19, 0x55	; 85
     7fc:	43 ec       	ldi	r20, 0xC3	; 195
     7fe:	53 e4       	ldi	r21, 0x43	; 67
     800:	c7 01       	movw	r24, r14
     802:	b6 01       	movw	r22, r12
     804:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     808:	27 e0       	ldi	r18, 0x07	; 7
     80a:	3f e5       	ldi	r19, 0x5F	; 95
     80c:	4a ea       	ldi	r20, 0xAA	; 170
     80e:	51 e4       	ldi	r21, 0x41	; 65
     810:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     814:	6b 01       	movw	r12, r22
     816:	7c 01       	movw	r14, r24
     818:	24 ec       	ldi	r18, 0xC4	; 196
     81a:	32 ea       	ldi	r19, 0xA2	; 162
     81c:	48 ed       	ldi	r20, 0xD8	; 216
     81e:	5a e3       	ldi	r21, 0x3A	; 58
     820:	6d 81       	ldd	r22, Y+5	; 0x05
     822:	7e 81       	ldd	r23, Y+6	; 0x06
     824:	8f 81       	ldd	r24, Y+7	; 0x07
     826:	98 85       	ldd	r25, Y+8	; 0x08
     828:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     82c:	9b 01       	movw	r18, r22
     82e:	ac 01       	movw	r20, r24
     830:	c7 01       	movw	r24, r14
     832:	b6 01       	movw	r22, r12
     834:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     838:	6b 01       	movw	r12, r22
     83a:	7c 01       	movw	r14, r24
     83c:	23 ee       	ldi	r18, 0xE3	; 227
     83e:	33 e6       	ldi	r19, 0x63	; 99
     840:	40 e2       	ldi	r20, 0x20	; 32
     842:	56 e3       	ldi	r21, 0x36	; 54
     844:	6d 85       	ldd	r22, Y+13	; 0x0d
     846:	7e 85       	ldd	r23, Y+14	; 0x0e
     848:	8f 85       	ldd	r24, Y+15	; 0x0f
     84a:	98 89       	ldd	r25, Y+16	; 0x10
     84c:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     850:	9b 01       	movw	r18, r22
     852:	ac 01       	movw	r20, r24
     854:	c7 01       	movw	r24, r14
     856:	b6 01       	movw	r22, r12
     858:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     85c:	6b 01       	movw	r12, r22
     85e:	7c 01       	movw	r14, r24
	C1=(0.1734 - 0.000393*T)*sinf(M*dr) + 0.0021*sinf(2*dr*M);
     860:	21 e9       	ldi	r18, 0x91	; 145
     862:	3b e0       	ldi	r19, 0x0B	; 11
     864:	4e ec       	ldi	r20, 0xCE	; 206
     866:	59 e3       	ldi	r21, 0x39	; 57
     868:	69 81       	ldd	r22, Y+1	; 0x01
     86a:	7a 81       	ldd	r23, Y+2	; 0x02
     86c:	8b 81       	ldd	r24, Y+3	; 0x03
     86e:	9c 81       	ldd	r25, Y+4	; 0x04
     870:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     874:	9b 01       	movw	r18, r22
     876:	ac 01       	movw	r20, r24
     878:	65 ec       	ldi	r22, 0xC5	; 197
     87a:	7f e8       	ldi	r23, 0x8F	; 143
     87c:	81 e3       	ldi	r24, 0x31	; 49
     87e:	9e e3       	ldi	r25, 0x3E	; 62
     880:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     884:	4b 01       	movw	r8, r22
     886:	5c 01       	movw	r10, r24
     888:	25 e3       	ldi	r18, 0x35	; 53
     88a:	3a ef       	ldi	r19, 0xFA	; 250
     88c:	4e e8       	ldi	r20, 0x8E	; 142
     88e:	5c e3       	ldi	r21, 0x3C	; 60
     890:	69 85       	ldd	r22, Y+9	; 0x09
     892:	7a 85       	ldd	r23, Y+10	; 0x0a
     894:	8b 85       	ldd	r24, Y+11	; 0x0b
     896:	9c 85       	ldd	r25, Y+12	; 0x0c
     898:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     89c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <sin>
     8a0:	9b 01       	movw	r18, r22
     8a2:	ac 01       	movw	r20, r24
     8a4:	c5 01       	movw	r24, r10
     8a6:	b4 01       	movw	r22, r8
     8a8:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     8ac:	4b 01       	movw	r8, r22
     8ae:	5c 01       	movw	r10, r24
     8b0:	25 e3       	ldi	r18, 0x35	; 53
     8b2:	3a ef       	ldi	r19, 0xFA	; 250
     8b4:	4e e0       	ldi	r20, 0x0E	; 14
     8b6:	5d e3       	ldi	r21, 0x3D	; 61
     8b8:	69 85       	ldd	r22, Y+9	; 0x09
     8ba:	7a 85       	ldd	r23, Y+10	; 0x0a
     8bc:	8b 85       	ldd	r24, Y+11	; 0x0b
     8be:	9c 85       	ldd	r25, Y+12	; 0x0c
     8c0:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     8c4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <sin>
     8c8:	27 e2       	ldi	r18, 0x27	; 39
     8ca:	30 ea       	ldi	r19, 0xA0	; 160
     8cc:	49 e0       	ldi	r20, 0x09	; 9
     8ce:	5b e3       	ldi	r21, 0x3B	; 59
     8d0:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     8d4:	9b 01       	movw	r18, r22
     8d6:	ac 01       	movw	r20, r24
     8d8:	c5 01       	movw	r24, r10
     8da:	b4 01       	movw	r22, r8
     8dc:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     8e0:	4b 01       	movw	r8, r22
     8e2:	5c 01       	movw	r10, r24
	C1 = C1 - 0.4068*sinf(Mpr*dr) + 0.0161*sinf(dr*2*Mpr);
     8e4:	25 e3       	ldi	r18, 0x35	; 53
     8e6:	3a ef       	ldi	r19, 0xFA	; 250
     8e8:	4e e8       	ldi	r20, 0x8E	; 142
     8ea:	5c e3       	ldi	r21, 0x3C	; 60
     8ec:	c3 01       	movw	r24, r6
     8ee:	b2 01       	movw	r22, r4
     8f0:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     8f4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <sin>
     8f8:	27 e1       	ldi	r18, 0x17	; 23
     8fa:	38 e4       	ldi	r19, 0x48	; 72
     8fc:	40 ed       	ldi	r20, 0xD0	; 208
     8fe:	5e e3       	ldi	r21, 0x3E	; 62
     900:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     904:	9b 01       	movw	r18, r22
     906:	ac 01       	movw	r20, r24
     908:	c5 01       	movw	r24, r10
     90a:	b4 01       	movw	r22, r8
     90c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     910:	4b 01       	movw	r8, r22
     912:	5c 01       	movw	r10, r24
     914:	25 e3       	ldi	r18, 0x35	; 53
     916:	3a ef       	ldi	r19, 0xFA	; 250
     918:	4e e0       	ldi	r20, 0x0E	; 14
     91a:	5d e3       	ldi	r21, 0x3D	; 61
     91c:	c3 01       	movw	r24, r6
     91e:	b2 01       	movw	r22, r4
     920:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     924:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <sin>
     928:	26 e2       	ldi	r18, 0x26	; 38
     92a:	34 ee       	ldi	r19, 0xE4	; 228
     92c:	43 e8       	ldi	r20, 0x83	; 131
     92e:	5c e3       	ldi	r21, 0x3C	; 60
     930:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     934:	9b 01       	movw	r18, r22
     936:	ac 01       	movw	r20, r24
     938:	c5 01       	movw	r24, r10
     93a:	b4 01       	movw	r22, r8
     93c:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     940:	4b 01       	movw	r8, r22
     942:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0004*sinf(dr*3*Mpr);
     944:	20 e5       	ldi	r18, 0x50	; 80
     946:	37 e7       	ldi	r19, 0x77	; 119
     948:	46 e5       	ldi	r20, 0x56	; 86
     94a:	5d e3       	ldi	r21, 0x3D	; 61
     94c:	c3 01       	movw	r24, r6
     94e:	b2 01       	movw	r22, r4
     950:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     954:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <sin>
     958:	27 e1       	ldi	r18, 0x17	; 23
     95a:	37 eb       	ldi	r19, 0xB7	; 183
     95c:	41 ed       	ldi	r20, 0xD1	; 209
     95e:	59 e3       	ldi	r21, 0x39	; 57
     960:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     964:	9b 01       	movw	r18, r22
     966:	ac 01       	movw	r20, r24
     968:	c5 01       	movw	r24, r10
     96a:	b4 01       	movw	r22, r8
     96c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     970:	4b 01       	movw	r8, r22
     972:	5c 01       	movw	r10, r24
	C1 = C1 + 0.0104*sinf(dr*2*F) - 0.0051*sinf(dr*(M+Mpr));
     974:	25 e3       	ldi	r18, 0x35	; 53
     976:	3a ef       	ldi	r19, 0xFA	; 250
     978:	4e e0       	ldi	r20, 0x0E	; 14
     97a:	5d e3       	ldi	r21, 0x3D	; 61
     97c:	c7 01       	movw	r24, r14
     97e:	b6 01       	movw	r22, r12
     980:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     984:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <sin>
     988:	23 ec       	ldi	r18, 0xC3	; 195
     98a:	34 e6       	ldi	r19, 0x64	; 100
     98c:	4a e2       	ldi	r20, 0x2A	; 42
     98e:	5c e3       	ldi	r21, 0x3C	; 60
     990:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     994:	9b 01       	movw	r18, r22
     996:	ac 01       	movw	r20, r24
     998:	c5 01       	movw	r24, r10
     99a:	b4 01       	movw	r22, r8
     99c:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     9a0:	4b 01       	movw	r8, r22
     9a2:	5c 01       	movw	r10, r24
     9a4:	a3 01       	movw	r20, r6
     9a6:	92 01       	movw	r18, r4
     9a8:	69 85       	ldd	r22, Y+9	; 0x09
     9aa:	7a 85       	ldd	r23, Y+10	; 0x0a
     9ac:	8b 85       	ldd	r24, Y+11	; 0x0b
     9ae:	9c 85       	ldd	r25, Y+12	; 0x0c
     9b0:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     9b4:	25 e3       	ldi	r18, 0x35	; 53
     9b6:	3a ef       	ldi	r19, 0xFA	; 250
     9b8:	4e e8       	ldi	r20, 0x8E	; 142
     9ba:	5c e3       	ldi	r21, 0x3C	; 60
     9bc:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     9c0:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <sin>
     9c4:	27 ee       	ldi	r18, 0xE7	; 231
     9c6:	3d e1       	ldi	r19, 0x1D	; 29
     9c8:	47 ea       	ldi	r20, 0xA7	; 167
     9ca:	5b e3       	ldi	r21, 0x3B	; 59
     9cc:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     9d0:	9b 01       	movw	r18, r22
     9d2:	ac 01       	movw	r20, r24
     9d4:	c5 01       	movw	r24, r10
     9d6:	b4 01       	movw	r22, r8
     9d8:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     9dc:	4b 01       	movw	r8, r22
     9de:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0074*sinf(dr*(M-Mpr)) + 0.0004*sinf(dr*(2*F+M));
     9e0:	a3 01       	movw	r20, r6
     9e2:	92 01       	movw	r18, r4
     9e4:	69 85       	ldd	r22, Y+9	; 0x09
     9e6:	7a 85       	ldd	r23, Y+10	; 0x0a
     9e8:	8b 85       	ldd	r24, Y+11	; 0x0b
     9ea:	9c 85       	ldd	r25, Y+12	; 0x0c
     9ec:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     9f0:	25 e3       	ldi	r18, 0x35	; 53
     9f2:	3a ef       	ldi	r19, 0xFA	; 250
     9f4:	4e e8       	ldi	r20, 0x8E	; 142
     9f6:	5c e3       	ldi	r21, 0x3C	; 60
     9f8:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     9fc:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <sin>
     a00:	23 eb       	ldi	r18, 0xB3	; 179
     a02:	3b e7       	ldi	r19, 0x7B	; 123
     a04:	42 ef       	ldi	r20, 0xF2	; 242
     a06:	5b e3       	ldi	r21, 0x3B	; 59
     a08:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     a0c:	9b 01       	movw	r18, r22
     a0e:	ac 01       	movw	r20, r24
     a10:	c5 01       	movw	r24, r10
     a12:	b4 01       	movw	r22, r8
     a14:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     a18:	4b 01       	movw	r8, r22
     a1a:	5c 01       	movw	r10, r24
     a1c:	a7 01       	movw	r20, r14
     a1e:	96 01       	movw	r18, r12
     a20:	c7 01       	movw	r24, r14
     a22:	b6 01       	movw	r22, r12
     a24:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     a28:	6b 01       	movw	r12, r22
     a2a:	7c 01       	movw	r14, r24
     a2c:	9b 01       	movw	r18, r22
     a2e:	ac 01       	movw	r20, r24
     a30:	69 85       	ldd	r22, Y+9	; 0x09
     a32:	7a 85       	ldd	r23, Y+10	; 0x0a
     a34:	8b 85       	ldd	r24, Y+11	; 0x0b
     a36:	9c 85       	ldd	r25, Y+12	; 0x0c
     a38:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     a3c:	25 e3       	ldi	r18, 0x35	; 53
     a3e:	3a ef       	ldi	r19, 0xFA	; 250
     a40:	4e e8       	ldi	r20, 0x8E	; 142
     a42:	5c e3       	ldi	r21, 0x3C	; 60
     a44:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     a48:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <sin>
     a4c:	27 e1       	ldi	r18, 0x17	; 23
     a4e:	37 eb       	ldi	r19, 0xB7	; 183
     a50:	41 ed       	ldi	r20, 0xD1	; 209
     a52:	59 e3       	ldi	r21, 0x39	; 57
     a54:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     a58:	9b 01       	movw	r18, r22
     a5a:	ac 01       	movw	r20, r24
     a5c:	c5 01       	movw	r24, r10
     a5e:	b4 01       	movw	r22, r8
     a60:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     a64:	4b 01       	movw	r8, r22
     a66:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0004*sinf(dr*(2*F-M)) - 0.0006*sinf(dr*(2*F+Mpr));
     a68:	29 85       	ldd	r18, Y+9	; 0x09
     a6a:	3a 85       	ldd	r19, Y+10	; 0x0a
     a6c:	4b 85       	ldd	r20, Y+11	; 0x0b
     a6e:	5c 85       	ldd	r21, Y+12	; 0x0c
     a70:	c7 01       	movw	r24, r14
     a72:	b6 01       	movw	r22, r12
     a74:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     a78:	25 e3       	ldi	r18, 0x35	; 53
     a7a:	3a ef       	ldi	r19, 0xFA	; 250
     a7c:	4e e8       	ldi	r20, 0x8E	; 142
     a7e:	5c e3       	ldi	r21, 0x3C	; 60
     a80:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     a84:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <sin>
     a88:	27 e1       	ldi	r18, 0x17	; 23
     a8a:	37 eb       	ldi	r19, 0xB7	; 183
     a8c:	41 ed       	ldi	r20, 0xD1	; 209
     a8e:	59 e3       	ldi	r21, 0x39	; 57
     a90:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     a94:	9b 01       	movw	r18, r22
     a96:	ac 01       	movw	r20, r24
     a98:	c5 01       	movw	r24, r10
     a9a:	b4 01       	movw	r22, r8
     a9c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     aa0:	4b 01       	movw	r8, r22
     aa2:	5c 01       	movw	r10, r24
     aa4:	a7 01       	movw	r20, r14
     aa6:	96 01       	movw	r18, r12
     aa8:	c3 01       	movw	r24, r6
     aaa:	b2 01       	movw	r22, r4
     aac:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     ab0:	25 e3       	ldi	r18, 0x35	; 53
     ab2:	3a ef       	ldi	r19, 0xFA	; 250
     ab4:	4e e8       	ldi	r20, 0x8E	; 142
     ab6:	5c e3       	ldi	r21, 0x3C	; 60
     ab8:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     abc:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <sin>
     ac0:	22 e5       	ldi	r18, 0x52	; 82
     ac2:	39 e4       	ldi	r19, 0x49	; 73
     ac4:	4d e1       	ldi	r20, 0x1D	; 29
     ac6:	5a e3       	ldi	r21, 0x3A	; 58
     ac8:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     acc:	9b 01       	movw	r18, r22
     ace:	ac 01       	movw	r20, r24
     ad0:	c5 01       	movw	r24, r10
     ad2:	b4 01       	movw	r22, r8
     ad4:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     ad8:	4b 01       	movw	r8, r22
     ada:	5c 01       	movw	r10, r24
	C1 = C1 + 0.0010*sinf(dr*(2*F-Mpr)) + 0.0005*sinf(dr*(2*Mpr+M));
     adc:	a3 01       	movw	r20, r6
     ade:	92 01       	movw	r18, r4
     ae0:	c7 01       	movw	r24, r14
     ae2:	b6 01       	movw	r22, r12
     ae4:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     ae8:	25 e3       	ldi	r18, 0x35	; 53
     aea:	3a ef       	ldi	r19, 0xFA	; 250
     aec:	4e e8       	ldi	r20, 0x8E	; 142
     aee:	5c e3       	ldi	r21, 0x3C	; 60
     af0:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     af4:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <sin>
     af8:	2f e6       	ldi	r18, 0x6F	; 111
     afa:	32 e1       	ldi	r19, 0x12	; 18
     afc:	43 e8       	ldi	r20, 0x83	; 131
     afe:	5a e3       	ldi	r21, 0x3A	; 58
     b00:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     b04:	9b 01       	movw	r18, r22
     b06:	ac 01       	movw	r20, r24
     b08:	c5 01       	movw	r24, r10
     b0a:	b4 01       	movw	r22, r8
     b0c:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     b10:	6b 01       	movw	r12, r22
     b12:	7c 01       	movw	r14, r24
     b14:	a3 01       	movw	r20, r6
     b16:	92 01       	movw	r18, r4
     b18:	c3 01       	movw	r24, r6
     b1a:	b2 01       	movw	r22, r4
     b1c:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     b20:	9b 01       	movw	r18, r22
     b22:	ac 01       	movw	r20, r24
     b24:	69 85       	ldd	r22, Y+9	; 0x09
     b26:	7a 85       	ldd	r23, Y+10	; 0x0a
     b28:	8b 85       	ldd	r24, Y+11	; 0x0b
     b2a:	9c 85       	ldd	r25, Y+12	; 0x0c
     b2c:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     b30:	25 e3       	ldi	r18, 0x35	; 53
     b32:	3a ef       	ldi	r19, 0xFA	; 250
     b34:	4e e8       	ldi	r20, 0x8E	; 142
     b36:	5c e3       	ldi	r21, 0x3C	; 60
     b38:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     b3c:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <sin>
     b40:	2f e6       	ldi	r18, 0x6F	; 111
     b42:	32 e1       	ldi	r19, 0x12	; 18
     b44:	43 e0       	ldi	r20, 0x03	; 3
     b46:	5a e3       	ldi	r21, 0x3A	; 58
     b48:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     b4c:	9b 01       	movw	r18, r22
     b4e:	ac 01       	movw	r20, r24
     b50:	c7 01       	movw	r24, r14
     b52:	b6 01       	movw	r22, r12
     b54:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     b58:	6b 01       	movw	r12, r22
     b5a:	7c 01       	movw	r14, r24
	if (T < -11) {
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	30 e0       	ldi	r19, 0x00	; 0
     b60:	40 e3       	ldi	r20, 0x30	; 48
     b62:	51 ec       	ldi	r21, 0xC1	; 193
     b64:	69 81       	ldd	r22, Y+1	; 0x01
     b66:	7a 81       	ldd	r23, Y+2	; 0x02
     b68:	8b 81       	ldd	r24, Y+3	; 0x03
     b6a:	9c 81       	ldd	r25, Y+4	; 0x04
     b6c:	0e 94 cb 12 	call	0x2596	; 0x2596 <__cmpsf2>
     b70:	88 23       	and	r24, r24
     b72:	0c f0       	brlt	.+2      	; 0xb76 <__stack+0x317>
     b74:	51 c0       	rjmp	.+162    	; 0xc18 <__stack+0x3b9>
		deltat= 0.001 + 0.000839*T + 0.0002261*T2 - 0.00000845*T3 - 0.000000081*T*T3;
     b76:	26 e5       	ldi	r18, 0x56	; 86
     b78:	30 ef       	ldi	r19, 0xF0	; 240
     b7a:	4b e5       	ldi	r20, 0x5B	; 91
     b7c:	5a e3       	ldi	r21, 0x3A	; 58
     b7e:	69 81       	ldd	r22, Y+1	; 0x01
     b80:	7a 81       	ldd	r23, Y+2	; 0x02
     b82:	8b 81       	ldd	r24, Y+3	; 0x03
     b84:	9c 81       	ldd	r25, Y+4	; 0x04
     b86:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     b8a:	2f e6       	ldi	r18, 0x6F	; 111
     b8c:	32 e1       	ldi	r19, 0x12	; 18
     b8e:	43 e8       	ldi	r20, 0x83	; 131
     b90:	5a e3       	ldi	r21, 0x3A	; 58
     b92:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     b96:	4b 01       	movw	r8, r22
     b98:	5c 01       	movw	r10, r24
     b9a:	22 e4       	ldi	r18, 0x42	; 66
     b9c:	35 e1       	ldi	r19, 0x15	; 21
     b9e:	4d e6       	ldi	r20, 0x6D	; 109
     ba0:	59 e3       	ldi	r21, 0x39	; 57
     ba2:	6d 81       	ldd	r22, Y+5	; 0x05
     ba4:	7e 81       	ldd	r23, Y+6	; 0x06
     ba6:	8f 81       	ldd	r24, Y+7	; 0x07
     ba8:	98 85       	ldd	r25, Y+8	; 0x08
     baa:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     bae:	9b 01       	movw	r18, r22
     bb0:	ac 01       	movw	r20, r24
     bb2:	c5 01       	movw	r24, r10
     bb4:	b4 01       	movw	r22, r8
     bb6:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     bba:	4b 01       	movw	r8, r22
     bbc:	5c 01       	movw	r10, r24
     bbe:	29 e7       	ldi	r18, 0x79	; 121
     bc0:	34 ec       	ldi	r19, 0xC4	; 196
     bc2:	4d e0       	ldi	r20, 0x0D	; 13
     bc4:	57 e3       	ldi	r21, 0x37	; 55
     bc6:	6d 85       	ldd	r22, Y+13	; 0x0d
     bc8:	7e 85       	ldd	r23, Y+14	; 0x0e
     bca:	8f 85       	ldd	r24, Y+15	; 0x0f
     bcc:	98 89       	ldd	r25, Y+16	; 0x10
     bce:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     bd2:	9b 01       	movw	r18, r22
     bd4:	ac 01       	movw	r20, r24
     bd6:	c5 01       	movw	r24, r10
     bd8:	b4 01       	movw	r22, r8
     bda:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     bde:	4b 01       	movw	r8, r22
     be0:	5c 01       	movw	r10, r24
     be2:	29 e3       	ldi	r18, 0x39	; 57
     be4:	32 ef       	ldi	r19, 0xF2	; 242
     be6:	4d ea       	ldi	r20, 0xAD	; 173
     be8:	53 e3       	ldi	r21, 0x33	; 51
     bea:	69 81       	ldd	r22, Y+1	; 0x01
     bec:	7a 81       	ldd	r23, Y+2	; 0x02
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	9c 81       	ldd	r25, Y+4	; 0x04
     bf2:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     bf6:	9b 01       	movw	r18, r22
     bf8:	ac 01       	movw	r20, r24
     bfa:	6d 85       	ldd	r22, Y+13	; 0x0d
     bfc:	7e 85       	ldd	r23, Y+14	; 0x0e
     bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
     c00:	98 89       	ldd	r25, Y+16	; 0x10
     c02:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     c06:	9b 01       	movw	r18, r22
     c08:	ac 01       	movw	r20, r24
     c0a:	c5 01       	movw	r24, r10
     c0c:	b4 01       	movw	r22, r8
     c0e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     c12:	4b 01       	movw	r8, r22
     c14:	5c 01       	movw	r10, r24
     c16:	24 c0       	rjmp	.+72     	; 0xc60 <__stack+0x401>
		} else {
		deltat= -0.000278 + 0.000265*T + 0.000262*T2;
     c18:	23 eb       	ldi	r18, 0xB3	; 179
     c1a:	3f ee       	ldi	r19, 0xEF	; 239
     c1c:	4a e8       	ldi	r20, 0x8A	; 138
     c1e:	59 e3       	ldi	r21, 0x39	; 57
     c20:	69 81       	ldd	r22, Y+1	; 0x01
     c22:	7a 81       	ldd	r23, Y+2	; 0x02
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     c2c:	27 e8       	ldi	r18, 0x87	; 135
     c2e:	30 ec       	ldi	r19, 0xC0	; 192
     c30:	41 e9       	ldi	r20, 0x91	; 145
     c32:	59 e3       	ldi	r21, 0x39	; 57
     c34:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     c38:	4b 01       	movw	r8, r22
     c3a:	5c 01       	movw	r10, r24
     c3c:	2b e0       	ldi	r18, 0x0B	; 11
     c3e:	3d e5       	ldi	r19, 0x5D	; 93
     c40:	49 e8       	ldi	r20, 0x89	; 137
     c42:	59 e3       	ldi	r21, 0x39	; 57
     c44:	6d 81       	ldd	r22, Y+5	; 0x05
     c46:	7e 81       	ldd	r23, Y+6	; 0x06
     c48:	8f 81       	ldd	r24, Y+7	; 0x07
     c4a:	98 85       	ldd	r25, Y+8	; 0x08
     c4c:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     c50:	9b 01       	movw	r18, r22
     c52:	ac 01       	movw	r20, r24
     c54:	c5 01       	movw	r24, r10
     c56:	b4 01       	movw	r22, r8
     c58:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     c5c:	4b 01       	movw	r8, r22
     c5e:	5c 01       	movw	r10, r24
	};
	JdNew = Jd1 + C1 - deltat;
     c60:	a7 01       	movw	r20, r14
     c62:	96 01       	movw	r18, r12
     c64:	69 89       	ldd	r22, Y+17	; 0x11
     c66:	7a 89       	ldd	r23, Y+18	; 0x12
     c68:	8b 89       	ldd	r24, Y+19	; 0x13
     c6a:	9c 89       	ldd	r25, Y+20	; 0x14
     c6c:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     c70:	a5 01       	movw	r20, r10
     c72:	94 01       	movw	r18, r8
     c74:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
	return floorf(JdNew + 0.5 + timeZone/24);
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	30 e0       	ldi	r19, 0x00	; 0
     c7c:	40 e0       	ldi	r20, 0x00	; 0
     c7e:	5f e3       	ldi	r21, 0x3F	; 63
     c80:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     c84:	6b 01       	movw	r12, r22
     c86:	7c 01       	movw	r14, r24
     c88:	8d 89       	ldd	r24, Y+21	; 0x15
     c8a:	9e 89       	ldd	r25, Y+22	; 0x16
     c8c:	68 e1       	ldi	r22, 0x18	; 24
     c8e:	70 e0       	ldi	r23, 0x00	; 0
     c90:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
     c94:	07 2e       	mov	r0, r23
     c96:	00 0c       	add	r0, r0
     c98:	88 0b       	sbc	r24, r24
     c9a:	99 0b       	sbc	r25, r25
     c9c:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__floatsisf>
     ca0:	9b 01       	movw	r18, r22
     ca2:	ac 01       	movw	r20, r24
     ca4:	c7 01       	movw	r24, r14
     ca6:	b6 01       	movw	r22, r12
     ca8:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     cac:	0e 94 b5 13 	call	0x276a	; 0x276a <floor>
}
     cb0:	66 96       	adiw	r28, 0x16	; 22
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	ff 90       	pop	r15
     cc2:	ef 90       	pop	r14
     cc4:	df 90       	pop	r13
     cc6:	cf 90       	pop	r12
     cc8:	bf 90       	pop	r11
     cca:	af 90       	pop	r10
     ccc:	9f 90       	pop	r9
     cce:	8f 90       	pop	r8
     cd0:	7f 90       	pop	r7
     cd2:	6f 90       	pop	r6
     cd4:	5f 90       	pop	r5
     cd6:	4f 90       	pop	r4
     cd8:	08 95       	ret

00000cda <getSunLongitude>:

double getSunLongitude(long double jdn, int timeZone)
{
     cda:	4f 92       	push	r4
     cdc:	5f 92       	push	r5
     cde:	6f 92       	push	r6
     ce0:	7f 92       	push	r7
     ce2:	8f 92       	push	r8
     ce4:	9f 92       	push	r9
     ce6:	af 92       	push	r10
     ce8:	bf 92       	push	r11
     cea:	cf 92       	push	r12
     cec:	df 92       	push	r13
     cee:	ef 92       	push	r14
     cf0:	ff 92       	push	r15
     cf2:	cf 93       	push	r28
     cf4:	df 93       	push	r29
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	28 97       	sbiw	r28, 0x08	; 8
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	de bf       	out	0x3e, r29	; 62
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	cd bf       	out	0x3d, r28	; 61
     d06:	5a 01       	movw	r10, r20
	long double T, T2, dr, M, L0, DL, L;
	T = (jdn - 2451545.5 - timeZone/24) / 36525; // Time in Julian centuries from 2000-01-01 12:00:00 GMT
     d08:	26 e6       	ldi	r18, 0x66	; 102
     d0a:	31 ea       	ldi	r19, 0xA1	; 161
     d0c:	45 e1       	ldi	r20, 0x15	; 21
     d0e:	5a e4       	ldi	r21, 0x4A	; 74
     d10:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     d14:	6b 01       	movw	r12, r22
     d16:	7c 01       	movw	r14, r24
     d18:	c5 01       	movw	r24, r10
     d1a:	68 e1       	ldi	r22, 0x18	; 24
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
     d22:	07 2e       	mov	r0, r23
     d24:	00 0c       	add	r0, r0
     d26:	88 0b       	sbc	r24, r24
     d28:	99 0b       	sbc	r25, r25
     d2a:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__floatsisf>
     d2e:	9b 01       	movw	r18, r22
     d30:	ac 01       	movw	r20, r24
     d32:	c7 01       	movw	r24, r14
     d34:	b6 01       	movw	r22, r12
     d36:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     d3a:	20 e0       	ldi	r18, 0x00	; 0
     d3c:	3d ea       	ldi	r19, 0xAD	; 173
     d3e:	4e e0       	ldi	r20, 0x0E	; 14
     d40:	57 e4       	ldi	r21, 0x47	; 71
     d42:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__divsf3>
     d46:	6b 01       	movw	r12, r22
     d48:	7c 01       	movw	r14, r24
	T2 = T*T;
     d4a:	9b 01       	movw	r18, r22
     d4c:	ac 01       	movw	r20, r24
     d4e:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     d52:	4b 01       	movw	r8, r22
     d54:	5c 01       	movw	r10, r24
	dr = M_PI/180; // degree to radian
	M = 357.52910 + 35999.05030*T - 0.0001559*T2 - 0.00000048*T*T2; // mean anomaly, degree
     d56:	2d e0       	ldi	r18, 0x0D	; 13
     d58:	3f e9       	ldi	r19, 0x9F	; 159
     d5a:	4c e0       	ldi	r20, 0x0C	; 12
     d5c:	57 e4       	ldi	r21, 0x47	; 71
     d5e:	c7 01       	movw	r24, r14
     d60:	b6 01       	movw	r22, r12
     d62:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     d66:	2a eb       	ldi	r18, 0xBA	; 186
     d68:	33 ec       	ldi	r19, 0xC3	; 195
     d6a:	42 eb       	ldi	r20, 0xB2	; 178
     d6c:	53 e4       	ldi	r21, 0x43	; 67
     d6e:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     d72:	2b 01       	movw	r4, r22
     d74:	3c 01       	movw	r6, r24
     d76:	26 e1       	ldi	r18, 0x16	; 22
     d78:	39 e7       	ldi	r19, 0x79	; 121
     d7a:	43 e2       	ldi	r20, 0x23	; 35
     d7c:	59 e3       	ldi	r21, 0x39	; 57
     d7e:	c5 01       	movw	r24, r10
     d80:	b4 01       	movw	r22, r8
     d82:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     d86:	9b 01       	movw	r18, r22
     d88:	ac 01       	movw	r20, r24
     d8a:	c3 01       	movw	r24, r6
     d8c:	b2 01       	movw	r22, r4
     d8e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     d92:	2b 01       	movw	r4, r22
     d94:	3c 01       	movw	r6, r24
     d96:	29 e5       	ldi	r18, 0x59	; 89
     d98:	39 ed       	ldi	r19, 0xD9	; 217
     d9a:	40 e0       	ldi	r20, 0x00	; 0
     d9c:	55 e3       	ldi	r21, 0x35	; 53
     d9e:	c7 01       	movw	r24, r14
     da0:	b6 01       	movw	r22, r12
     da2:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     da6:	9b 01       	movw	r18, r22
     da8:	ac 01       	movw	r20, r24
     daa:	c5 01       	movw	r24, r10
     dac:	b4 01       	movw	r22, r8
     dae:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     db2:	9b 01       	movw	r18, r22
     db4:	ac 01       	movw	r20, r24
     db6:	c3 01       	movw	r24, r6
     db8:	b2 01       	movw	r22, r4
     dba:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     dbe:	2b 01       	movw	r4, r22
     dc0:	3c 01       	movw	r6, r24
	L0 = 280.46645 + 36000.76983*T + 0.0003032*T2; // mean longitude, degree
     dc2:	25 ec       	ldi	r18, 0xC5	; 197
     dc4:	30 ea       	ldi	r19, 0xA0	; 160
     dc6:	4c e0       	ldi	r20, 0x0C	; 12
     dc8:	57 e4       	ldi	r21, 0x47	; 71
     dca:	c7 01       	movw	r24, r14
     dcc:	b6 01       	movw	r22, r12
     dce:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     dd2:	25 eb       	ldi	r18, 0xB5	; 181
     dd4:	3b e3       	ldi	r19, 0x3B	; 59
     dd6:	4c e8       	ldi	r20, 0x8C	; 140
     dd8:	53 e4       	ldi	r21, 0x43	; 67
     dda:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     dde:	69 83       	std	Y+1, r22	; 0x01
     de0:	7a 83       	std	Y+2, r23	; 0x02
     de2:	8b 83       	std	Y+3, r24	; 0x03
     de4:	9c 83       	std	Y+4, r25	; 0x04
     de6:	21 ed       	ldi	r18, 0xD1	; 209
     de8:	36 ef       	ldi	r19, 0xF6	; 246
     dea:	4e e9       	ldi	r20, 0x9E	; 158
     dec:	59 e3       	ldi	r21, 0x39	; 57
     dee:	c5 01       	movw	r24, r10
     df0:	b4 01       	movw	r22, r8
     df2:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     df6:	9b 01       	movw	r18, r22
     df8:	ac 01       	movw	r20, r24
     dfa:	69 81       	ldd	r22, Y+1	; 0x01
     dfc:	7a 81       	ldd	r23, Y+2	; 0x02
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	9c 81       	ldd	r25, Y+4	; 0x04
     e02:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     e06:	69 83       	std	Y+1, r22	; 0x01
     e08:	7a 83       	std	Y+2, r23	; 0x02
     e0a:	8b 83       	std	Y+3, r24	; 0x03
     e0c:	9c 83       	std	Y+4, r25	; 0x04
	DL = (1.914600 - 0.004817*T - 0.000014*T2)*sinf(dr*M);
     e0e:	2d ee       	ldi	r18, 0xED	; 237
     e10:	37 ed       	ldi	r19, 0xD7	; 215
     e12:	4d e9       	ldi	r20, 0x9D	; 157
     e14:	5b e3       	ldi	r21, 0x3B	; 59
     e16:	c7 01       	movw	r24, r14
     e18:	b6 01       	movw	r22, r12
     e1a:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     e1e:	9b 01       	movw	r18, r22
     e20:	ac 01       	movw	r20, r24
     e22:	6d e9       	ldi	r22, 0x9D	; 157
     e24:	71 e1       	ldi	r23, 0x11	; 17
     e26:	85 ef       	ldi	r24, 0xF5	; 245
     e28:	9f e3       	ldi	r25, 0x3F	; 63
     e2a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     e2e:	6d 83       	std	Y+5, r22	; 0x05
     e30:	7e 83       	std	Y+6, r23	; 0x06
     e32:	8f 83       	std	Y+7, r24	; 0x07
     e34:	98 87       	std	Y+8, r25	; 0x08
     e36:	2b e8       	ldi	r18, 0x8B	; 139
     e38:	31 ee       	ldi	r19, 0xE1	; 225
     e3a:	4a e6       	ldi	r20, 0x6A	; 106
     e3c:	57 e3       	ldi	r21, 0x37	; 55
     e3e:	c5 01       	movw	r24, r10
     e40:	b4 01       	movw	r22, r8
     e42:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     e46:	9b 01       	movw	r18, r22
     e48:	ac 01       	movw	r20, r24
     e4a:	6d 81       	ldd	r22, Y+5	; 0x05
     e4c:	7e 81       	ldd	r23, Y+6	; 0x06
     e4e:	8f 81       	ldd	r24, Y+7	; 0x07
     e50:	98 85       	ldd	r25, Y+8	; 0x08
     e52:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     e56:	4b 01       	movw	r8, r22
     e58:	5c 01       	movw	r10, r24
     e5a:	25 e3       	ldi	r18, 0x35	; 53
     e5c:	3a ef       	ldi	r19, 0xFA	; 250
     e5e:	4e e8       	ldi	r20, 0x8E	; 142
     e60:	5c e3       	ldi	r21, 0x3C	; 60
     e62:	c3 01       	movw	r24, r6
     e64:	b2 01       	movw	r22, r4
     e66:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     e6a:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <sin>
     e6e:	9b 01       	movw	r18, r22
     e70:	ac 01       	movw	r20, r24
     e72:	c5 01       	movw	r24, r10
     e74:	b4 01       	movw	r22, r8
     e76:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     e7a:	4b 01       	movw	r8, r22
     e7c:	5c 01       	movw	r10, r24
	DL = DL + (0.019993 - 0.000101*T)*sinf(dr*2*M) + 0.000290*sinf(dr*3*M);
     e7e:	26 ef       	ldi	r18, 0xF6	; 246
     e80:	3f ec       	ldi	r19, 0xCF	; 207
     e82:	43 ed       	ldi	r20, 0xD3	; 211
     e84:	58 e3       	ldi	r21, 0x38	; 56
     e86:	c7 01       	movw	r24, r14
     e88:	b6 01       	movw	r22, r12
     e8a:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     e8e:	9b 01       	movw	r18, r22
     e90:	ac 01       	movw	r20, r24
     e92:	6c e5       	ldi	r22, 0x5C	; 92
     e94:	78 ec       	ldi	r23, 0xC8	; 200
     e96:	83 ea       	ldi	r24, 0xA3	; 163
     e98:	9c e3       	ldi	r25, 0x3C	; 60
     e9a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     e9e:	6b 01       	movw	r12, r22
     ea0:	7c 01       	movw	r14, r24
     ea2:	25 e3       	ldi	r18, 0x35	; 53
     ea4:	3a ef       	ldi	r19, 0xFA	; 250
     ea6:	4e e0       	ldi	r20, 0x0E	; 14
     ea8:	5d e3       	ldi	r21, 0x3D	; 61
     eaa:	c3 01       	movw	r24, r6
     eac:	b2 01       	movw	r22, r4
     eae:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     eb2:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <sin>
     eb6:	9b 01       	movw	r18, r22
     eb8:	ac 01       	movw	r20, r24
     eba:	c7 01       	movw	r24, r14
     ebc:	b6 01       	movw	r22, r12
     ebe:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     ec2:	9b 01       	movw	r18, r22
     ec4:	ac 01       	movw	r20, r24
     ec6:	c5 01       	movw	r24, r10
     ec8:	b4 01       	movw	r22, r8
     eca:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     ece:	6b 01       	movw	r12, r22
     ed0:	7c 01       	movw	r14, r24
     ed2:	20 e5       	ldi	r18, 0x50	; 80
     ed4:	37 e7       	ldi	r19, 0x77	; 119
     ed6:	46 e5       	ldi	r20, 0x56	; 86
     ed8:	5d e3       	ldi	r21, 0x3D	; 61
     eda:	c3 01       	movw	r24, r6
     edc:	b2 01       	movw	r22, r4
     ede:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     ee2:	0e 94 f4 14 	call	0x29e8	; 0x29e8 <sin>
     ee6:	24 e2       	ldi	r18, 0x24	; 36
     ee8:	3b e0       	ldi	r19, 0x0B	; 11
     eea:	48 e9       	ldi	r20, 0x98	; 152
     eec:	59 e3       	ldi	r21, 0x39	; 57
     eee:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     ef2:	9b 01       	movw	r18, r22
     ef4:	ac 01       	movw	r20, r24
     ef6:	c7 01       	movw	r24, r14
     ef8:	b6 01       	movw	r22, r12
     efa:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
     efe:	9b 01       	movw	r18, r22
     f00:	ac 01       	movw	r20, r24
	L = L0 + DL; // true longitude, degree
     f02:	69 81       	ldd	r22, Y+1	; 0x01
     f04:	7a 81       	ldd	r23, Y+2	; 0x02
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
	L = L*dr;
     f0e:	25 e3       	ldi	r18, 0x35	; 53
     f10:	3a ef       	ldi	r19, 0xFA	; 250
     f12:	4e e8       	ldi	r20, 0x8E	; 142
     f14:	5c e3       	ldi	r21, 0x3C	; 60
     f16:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     f1a:	6b 01       	movw	r12, r22
     f1c:	7c 01       	movw	r14, r24
	L = L - M_PI*2*(floorf(L/(M_PI*2))); // Normalize to (0, 2*PI)
     f1e:	2b ed       	ldi	r18, 0xDB	; 219
     f20:	3f e0       	ldi	r19, 0x0F	; 15
     f22:	49 ec       	ldi	r20, 0xC9	; 201
     f24:	50 e4       	ldi	r21, 0x40	; 64
     f26:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__divsf3>
     f2a:	0e 94 b5 13 	call	0x276a	; 0x276a <floor>
     f2e:	2b ed       	ldi	r18, 0xDB	; 219
     f30:	3f e0       	ldi	r19, 0x0F	; 15
     f32:	49 ec       	ldi	r20, 0xC9	; 201
     f34:	50 e4       	ldi	r21, 0x40	; 64
     f36:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     f3a:	9b 01       	movw	r18, r22
     f3c:	ac 01       	movw	r20, r24
     f3e:	c7 01       	movw	r24, r14
     f40:	b6 01       	movw	r22, r12
     f42:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
	return floorf(L / M_PI * 6);
     f46:	2b ed       	ldi	r18, 0xDB	; 219
     f48:	3f e0       	ldi	r19, 0x0F	; 15
     f4a:	49 e4       	ldi	r20, 0x49	; 73
     f4c:	50 e4       	ldi	r21, 0x40	; 64
     f4e:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__divsf3>
     f52:	20 e0       	ldi	r18, 0x00	; 0
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	40 ec       	ldi	r20, 0xC0	; 192
     f58:	50 e4       	ldi	r21, 0x40	; 64
     f5a:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
     f5e:	0e 94 b5 13 	call	0x276a	; 0x276a <floor>
}
     f62:	28 96       	adiw	r28, 0x08	; 8
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	df 91       	pop	r29
     f70:	cf 91       	pop	r28
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	bf 90       	pop	r11
     f7c:	af 90       	pop	r10
     f7e:	9f 90       	pop	r9
     f80:	8f 90       	pop	r8
     f82:	7f 90       	pop	r7
     f84:	6f 90       	pop	r6
     f86:	5f 90       	pop	r5
     f88:	4f 90       	pop	r4
     f8a:	08 95       	ret

00000f8c <getLunarMonth11>:

double getLunarMonth11(uint16_t yy, int timeZone)
{
     f8c:	8f 92       	push	r8
     f8e:	9f 92       	push	r9
     f90:	af 92       	push	r10
     f92:	bf 92       	push	r11
     f94:	cf 92       	push	r12
     f96:	df 92       	push	r13
     f98:	ef 92       	push	r14
     f9a:	ff 92       	push	r15
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	eb 01       	movw	r28, r22
	long double k, off, nm, sunLong;
	off = jdFromDate(31, 12, yy) - 2415021;
     fa2:	ac 01       	movw	r20, r24
     fa4:	6c e0       	ldi	r22, 0x0C	; 12
     fa6:	8f e1       	ldi	r24, 0x1F	; 31
     fa8:	0e 94 06 02 	call	0x40c	; 0x40c <jdFromDate>
     fac:	24 eb       	ldi	r18, 0xB4	; 180
     fae:	36 e6       	ldi	r19, 0x66	; 102
     fb0:	43 e1       	ldi	r20, 0x13	; 19
     fb2:	5a e4       	ldi	r21, 0x4A	; 74
     fb4:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
	k = floorf(off / 29.530588853);
     fb8:	25 ea       	ldi	r18, 0xA5	; 165
     fba:	3e e3       	ldi	r19, 0x3E	; 62
     fbc:	4c ee       	ldi	r20, 0xEC	; 236
     fbe:	51 e4       	ldi	r21, 0x41	; 65
     fc0:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__divsf3>
     fc4:	0e 94 b5 13 	call	0x276a	; 0x276a <floor>
     fc8:	4b 01       	movw	r8, r22
     fca:	5c 01       	movw	r10, r24
	nm = getNewMoonDay(k, timeZone);
     fcc:	ae 01       	movw	r20, r28
     fce:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <getNewMoonDay>
     fd2:	6b 01       	movw	r12, r22
     fd4:	7c 01       	movw	r14, r24
	sunLong = getSunLongitude(nm, timeZone); // sun longitude at local midnight
     fd6:	ae 01       	movw	r20, r28
     fd8:	0e 94 6d 06 	call	0xcda	; 0xcda <getSunLongitude>
	if (sunLong >= 9) {
     fdc:	20 e0       	ldi	r18, 0x00	; 0
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	40 e1       	ldi	r20, 0x10	; 16
     fe2:	51 e4       	ldi	r21, 0x41	; 65
     fe4:	0e 94 82 14 	call	0x2904	; 0x2904 <__gesf2>
     fe8:	88 23       	and	r24, r24
     fea:	6c f0       	brlt	.+26     	; 0x1006 <getLunarMonth11+0x7a>
		nm = getNewMoonDay(k-1, timeZone);
     fec:	20 e0       	ldi	r18, 0x00	; 0
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	40 e8       	ldi	r20, 0x80	; 128
     ff2:	5f e3       	ldi	r21, 0x3F	; 63
     ff4:	c5 01       	movw	r24, r10
     ff6:	b4 01       	movw	r22, r8
     ff8:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
     ffc:	ae 01       	movw	r20, r28
     ffe:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <getNewMoonDay>
    1002:	6b 01       	movw	r12, r22
    1004:	7c 01       	movw	r14, r24
	}
	return nm;
}
    1006:	c7 01       	movw	r24, r14
    1008:	b6 01       	movw	r22, r12
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	ff 90       	pop	r15
    1010:	ef 90       	pop	r14
    1012:	df 90       	pop	r13
    1014:	cf 90       	pop	r12
    1016:	bf 90       	pop	r11
    1018:	af 90       	pop	r10
    101a:	9f 90       	pop	r9
    101c:	8f 90       	pop	r8
    101e:	08 95       	ret

00001020 <getLeapMonthOffset>:

double getLeapMonthOffset(long double a11, int timeZone)
{
    1020:	2f 92       	push	r2
    1022:	3f 92       	push	r3
    1024:	4f 92       	push	r4
    1026:	5f 92       	push	r5
    1028:	6f 92       	push	r6
    102a:	7f 92       	push	r7
    102c:	8f 92       	push	r8
    102e:	9f 92       	push	r9
    1030:	af 92       	push	r10
    1032:	bf 92       	push	r11
    1034:	cf 92       	push	r12
    1036:	df 92       	push	r13
    1038:	ef 92       	push	r14
    103a:	ff 92       	push	r15
    103c:	0f 93       	push	r16
    103e:	1f 93       	push	r17
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
    1044:	ea 01       	movw	r28, r20
	long double k, last, arc, i;
	k = floorf((a11 - 2415021.076998695) / 29.530588853 + 0.5);
    1046:	24 eb       	ldi	r18, 0xB4	; 180
    1048:	36 e6       	ldi	r19, 0x66	; 102
    104a:	43 e1       	ldi	r20, 0x13	; 19
    104c:	5a e4       	ldi	r21, 0x4A	; 74
    104e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
    1052:	25 ea       	ldi	r18, 0xA5	; 165
    1054:	3e e3       	ldi	r19, 0x3E	; 62
    1056:	4c ee       	ldi	r20, 0xEC	; 236
    1058:	51 e4       	ldi	r21, 0x41	; 65
    105a:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__divsf3>
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	40 e0       	ldi	r20, 0x00	; 0
    1064:	5f e3       	ldi	r21, 0x3F	; 63
    1066:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
    106a:	0e 94 b5 13 	call	0x276a	; 0x276a <floor>
    106e:	4b 01       	movw	r8, r22
    1070:	5c 01       	movw	r10, r24
	last = 0;
	i = 1; // We start with the month following lunar month 11
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	40 e8       	ldi	r20, 0x80	; 128
    1078:	5f e3       	ldi	r21, 0x3F	; 63
    107a:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
    107e:	ae 01       	movw	r20, r28
    1080:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <getNewMoonDay>
    1084:	ae 01       	movw	r20, r28
    1086:	0e 94 6d 06 	call	0xcda	; 0xcda <getSunLongitude>
    108a:	56 2e       	mov	r5, r22
    108c:	47 2e       	mov	r4, r23
    108e:	38 2e       	mov	r3, r24
    1090:	29 2e       	mov	r2, r25
double getLeapMonthOffset(long double a11, int timeZone)
{
	long double k, last, arc, i;
	k = floorf((a11 - 2415021.076998695) / 29.530588853 + 0.5);
	last = 0;
	i = 1; // We start with the month following lunar month 11
    1092:	0f 2e       	mov	r0, r31
    1094:	c1 2c       	mov	r12, r1
    1096:	d1 2c       	mov	r13, r1
    1098:	f0 e8       	ldi	r31, 0x80	; 128
    109a:	ef 2e       	mov	r14, r31
    109c:	ff e3       	ldi	r31, 0x3F	; 63
    109e:	ff 2e       	mov	r15, r31
    10a0:	f0 2d       	mov	r31, r0
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
	do {
		last = arc;
		i++;
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e8       	ldi	r20, 0x80	; 128
    10a8:	5f e3       	ldi	r21, 0x3F	; 63
    10aa:	c7 01       	movw	r24, r14
    10ac:	b6 01       	movw	r22, r12
    10ae:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
    10b2:	6b 01       	movw	r12, r22
    10b4:	7c 01       	movw	r14, r24
		arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    10b6:	9b 01       	movw	r18, r22
    10b8:	ac 01       	movw	r20, r24
    10ba:	c5 01       	movw	r24, r10
    10bc:	b4 01       	movw	r22, r8
    10be:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
    10c2:	ae 01       	movw	r20, r28
    10c4:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <getNewMoonDay>
    10c8:	ae 01       	movw	r20, r28
    10ca:	0e 94 6d 06 	call	0xcda	; 0xcda <getSunLongitude>
    10ce:	16 2f       	mov	r17, r22
    10d0:	07 2f       	mov	r16, r23
    10d2:	78 2e       	mov	r7, r24
    10d4:	69 2e       	mov	r6, r25
	} while (arc != last && i < 14);
    10d6:	26 2f       	mov	r18, r22
    10d8:	37 2f       	mov	r19, r23
    10da:	48 2f       	mov	r20, r24
    10dc:	59 2f       	mov	r21, r25
    10de:	65 2d       	mov	r22, r5
    10e0:	74 2d       	mov	r23, r4
    10e2:	83 2d       	mov	r24, r3
    10e4:	92 2d       	mov	r25, r2
    10e6:	0e 94 cb 12 	call	0x2596	; 0x2596 <__cmpsf2>
    10ea:	88 23       	and	r24, r24
    10ec:	71 f0       	breq	.+28     	; 0x110a <getLeapMonthOffset+0xea>
	i = 1; // We start with the month following lunar month 11
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
	do {
		last = arc;
		i++;
		arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    10ee:	51 2e       	mov	r5, r17
    10f0:	40 2e       	mov	r4, r16
    10f2:	37 2c       	mov	r3, r7
    10f4:	26 2c       	mov	r2, r6
	} while (arc != last && i < 14);
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e6       	ldi	r20, 0x60	; 96
    10fc:	51 e4       	ldi	r21, 0x41	; 65
    10fe:	c7 01       	movw	r24, r14
    1100:	b6 01       	movw	r22, r12
    1102:	0e 94 cb 12 	call	0x2596	; 0x2596 <__cmpsf2>
    1106:	88 23       	and	r24, r24
    1108:	64 f2       	brlt	.-104    	; 0x10a2 <getLeapMonthOffset+0x82>
	return i-1;
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	40 e8       	ldi	r20, 0x80	; 128
    1110:	5f e3       	ldi	r21, 0x3F	; 63
    1112:	c7 01       	movw	r24, r14
    1114:	b6 01       	movw	r22, r12
    1116:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
}
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	1f 91       	pop	r17
    1120:	0f 91       	pop	r16
    1122:	ff 90       	pop	r15
    1124:	ef 90       	pop	r14
    1126:	df 90       	pop	r13
    1128:	cf 90       	pop	r12
    112a:	bf 90       	pop	r11
    112c:	af 90       	pop	r10
    112e:	9f 90       	pop	r9
    1130:	8f 90       	pop	r8
    1132:	7f 90       	pop	r7
    1134:	6f 90       	pop	r6
    1136:	5f 90       	pop	r5
    1138:	4f 90       	pop	r4
    113a:	3f 90       	pop	r3
    113c:	2f 90       	pop	r2
    113e:	08 95       	ret

00001140 <convertSolar2Lunar>:

double convertSolar2Lunar(uint8_t dd, uint8_t mm, uint16_t yy, int timeZone)
{
    1140:	2f 92       	push	r2
    1142:	3f 92       	push	r3
    1144:	4f 92       	push	r4
    1146:	5f 92       	push	r5
    1148:	6f 92       	push	r6
    114a:	7f 92       	push	r7
    114c:	8f 92       	push	r8
    114e:	9f 92       	push	r9
    1150:	af 92       	push	r10
    1152:	bf 92       	push	r11
    1154:	cf 92       	push	r12
    1156:	df 92       	push	r13
    1158:	ef 92       	push	r14
    115a:	ff 92       	push	r15
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	ea 01       	movw	r28, r20
    1166:	19 01       	movw	r2, r18
	long double k, dayNumber, monthStart, a11, b11, diff, leapMonthDiff;
	dayNumber = jdFromDate(dd, mm, yy);
    1168:	0e 94 06 02 	call	0x40c	; 0x40c <jdFromDate>
    116c:	4b 01       	movw	r8, r22
    116e:	5c 01       	movw	r10, r24
	k = floorf((dayNumber - 2415021.076998695) / 29.530588853);
    1170:	24 eb       	ldi	r18, 0xB4	; 180
    1172:	36 e6       	ldi	r19, 0x66	; 102
    1174:	43 e1       	ldi	r20, 0x13	; 19
    1176:	5a e4       	ldi	r21, 0x4A	; 74
    1178:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
    117c:	25 ea       	ldi	r18, 0xA5	; 165
    117e:	3e e3       	ldi	r19, 0x3E	; 62
    1180:	4c ee       	ldi	r20, 0xEC	; 236
    1182:	51 e4       	ldi	r21, 0x41	; 65
    1184:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__divsf3>
    1188:	0e 94 b5 13 	call	0x276a	; 0x276a <floor>
    118c:	2b 01       	movw	r4, r22
    118e:	3c 01       	movw	r6, r24
	monthStart = getNewMoonDay(k+1, timeZone);
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e0       	ldi	r19, 0x00	; 0
    1194:	40 e8       	ldi	r20, 0x80	; 128
    1196:	5f e3       	ldi	r21, 0x3F	; 63
    1198:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
    119c:	a1 01       	movw	r20, r2
    119e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <getNewMoonDay>
    11a2:	6b 01       	movw	r12, r22
    11a4:	7c 01       	movw	r14, r24
	if (monthStart > dayNumber) {
    11a6:	9b 01       	movw	r18, r22
    11a8:	ac 01       	movw	r20, r24
    11aa:	c5 01       	movw	r24, r10
    11ac:	b4 01       	movw	r22, r8
    11ae:	0e 94 cb 12 	call	0x2596	; 0x2596 <__cmpsf2>
    11b2:	88 23       	and	r24, r24
    11b4:	3c f4       	brge	.+14     	; 0x11c4 <convertSolar2Lunar+0x84>
		monthStart = getNewMoonDay(k, timeZone);
    11b6:	a1 01       	movw	r20, r2
    11b8:	c3 01       	movw	r24, r6
    11ba:	b2 01       	movw	r22, r4
    11bc:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <getNewMoonDay>
    11c0:	6b 01       	movw	r12, r22
    11c2:	7c 01       	movw	r14, r24
	}
	a11 = getLunarMonth11(yy, timeZone);
    11c4:	b1 01       	movw	r22, r2
    11c6:	ce 01       	movw	r24, r28
    11c8:	0e 94 c6 07 	call	0xf8c	; 0xf8c <getLunarMonth11>
    11cc:	16 2f       	mov	r17, r22
    11ce:	07 2f       	mov	r16, r23
    11d0:	78 2e       	mov	r7, r24
    11d2:	69 2e       	mov	r6, r25
	b11 = a11;
	if (a11 >= monthStart) {
    11d4:	26 2f       	mov	r18, r22
    11d6:	37 2f       	mov	r19, r23
    11d8:	48 2f       	mov	r20, r24
    11da:	59 2f       	mov	r21, r25
    11dc:	c7 01       	movw	r24, r14
    11de:	b6 01       	movw	r22, r12
    11e0:	0e 94 cb 12 	call	0x2596	; 0x2596 <__cmpsf2>
    11e4:	18 16       	cp	r1, r24
    11e6:	94 f0       	brlt	.+36     	; 0x120c <convertSolar2Lunar+0xcc>
		lunarYear = yy;
    11e8:	d0 93 96 00 	sts	0x0096, r29	; 0x800096 <lunarYear+0x1>
    11ec:	c0 93 95 00 	sts	0x0095, r28	; 0x800095 <lunarYear>
		a11 = getLunarMonth11(yy-1, timeZone);
    11f0:	b1 01       	movw	r22, r2
    11f2:	ce 01       	movw	r24, r28
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <getLunarMonth11>
	monthStart = getNewMoonDay(k+1, timeZone);
	if (monthStart > dayNumber) {
		monthStart = getNewMoonDay(k, timeZone);
	}
	a11 = getLunarMonth11(yy, timeZone);
	b11 = a11;
    11fa:	c1 2f       	mov	r28, r17
    11fc:	d0 2f       	mov	r29, r16
    11fe:	57 2c       	mov	r5, r7
    1200:	46 2c       	mov	r4, r6
	if (a11 >= monthStart) {
		lunarYear = yy;
		a11 = getLunarMonth11(yy-1, timeZone);
    1202:	16 2f       	mov	r17, r22
    1204:	07 2f       	mov	r16, r23
    1206:	78 2e       	mov	r7, r24
    1208:	69 2e       	mov	r6, r25
    120a:	0d c0       	rjmp	.+26     	; 0x1226 <convertSolar2Lunar+0xe6>
		} else {
		lunarYear = yy+1;
    120c:	ce 01       	movw	r24, r28
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <lunarYear+0x1>
    1214:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <lunarYear>
		b11 = getLunarMonth11(yy+1, timeZone);
    1218:	b1 01       	movw	r22, r2
    121a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <getLunarMonth11>
    121e:	c6 2f       	mov	r28, r22
    1220:	d7 2f       	mov	r29, r23
    1222:	58 2e       	mov	r5, r24
    1224:	49 2e       	mov	r4, r25
	}
	lunarDate = dayNumber-monthStart+1;
    1226:	a7 01       	movw	r20, r14
    1228:	96 01       	movw	r18, r12
    122a:	c5 01       	movw	r24, r10
    122c:	b4 01       	movw	r22, r8
    122e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e8       	ldi	r20, 0x80	; 128
    1238:	5f e3       	ldi	r21, 0x3F	; 63
    123a:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
    123e:	0e 94 42 13 	call	0x2684	; 0x2684 <__fixsfsi>
    1242:	70 93 86 00 	sts	0x0086, r23	; 0x800086 <lunarDate+0x1>
    1246:	60 93 85 00 	sts	0x0085, r22	; 0x800085 <lunarDate>
	diff = floorf((monthStart - a11)/29);
    124a:	21 2f       	mov	r18, r17
    124c:	30 2f       	mov	r19, r16
    124e:	47 2d       	mov	r20, r7
    1250:	56 2d       	mov	r21, r6
    1252:	c7 01       	movw	r24, r14
    1254:	b6 01       	movw	r22, r12
    1256:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
    125a:	20 e0       	ldi	r18, 0x00	; 0
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	48 ee       	ldi	r20, 0xE8	; 232
    1260:	51 e4       	ldi	r21, 0x41	; 65
    1262:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <__divsf3>
    1266:	0e 94 b5 13 	call	0x276a	; 0x276a <floor>
    126a:	6b 01       	movw	r12, r22
    126c:	7c 01       	movw	r14, r24
	lunarMonth = diff+11;
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e3       	ldi	r20, 0x30	; 48
    1274:	51 e4       	ldi	r21, 0x41	; 65
    1276:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
    127a:	0e 94 42 13 	call	0x2684	; 0x2684 <__fixsfsi>
    127e:	70 93 88 00 	sts	0x0088, r23	; 0x800088 <lunarMonth+0x1>
    1282:	60 93 87 00 	sts	0x0087, r22	; 0x800087 <lunarMonth>
	if (b11 - a11 > 365) {
    1286:	21 2f       	mov	r18, r17
    1288:	30 2f       	mov	r19, r16
    128a:	47 2d       	mov	r20, r7
    128c:	56 2d       	mov	r21, r6
    128e:	6c 2f       	mov	r22, r28
    1290:	7d 2f       	mov	r23, r29
    1292:	85 2d       	mov	r24, r5
    1294:	94 2d       	mov	r25, r4
    1296:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__subsf3>
    129a:	20 e0       	ldi	r18, 0x00	; 0
    129c:	30 e8       	ldi	r19, 0x80	; 128
    129e:	46 eb       	ldi	r20, 0xB6	; 182
    12a0:	53 e4       	ldi	r21, 0x43	; 67
    12a2:	0e 94 82 14 	call	0x2904	; 0x2904 <__gesf2>
    12a6:	18 16       	cp	r1, r24
    12a8:	ec f4       	brge	.+58     	; 0x12e4 <convertSolar2Lunar+0x1a4>
		leapMonthDiff = getLeapMonthOffset(a11, timeZone);
    12aa:	a1 01       	movw	r20, r2
    12ac:	61 2f       	mov	r22, r17
    12ae:	70 2f       	mov	r23, r16
    12b0:	87 2d       	mov	r24, r7
    12b2:	96 2d       	mov	r25, r6
    12b4:	0e 94 10 08 	call	0x1020	; 0x1020 <getLeapMonthOffset>
    12b8:	9b 01       	movw	r18, r22
    12ba:	ac 01       	movw	r20, r24
		if (diff >= leapMonthDiff) {
    12bc:	c7 01       	movw	r24, r14
    12be:	b6 01       	movw	r22, r12
    12c0:	0e 94 82 14 	call	0x2904	; 0x2904 <__gesf2>
    12c4:	88 23       	and	r24, r24
    12c6:	74 f0       	brlt	.+28     	; 0x12e4 <convertSolar2Lunar+0x1a4>
			lunarMonth = diff + 10;
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e2       	ldi	r20, 0x20	; 32
    12ce:	51 e4       	ldi	r21, 0x41	; 65
    12d0:	c7 01       	movw	r24, r14
    12d2:	b6 01       	movw	r22, r12
    12d4:	0e 94 5f 12 	call	0x24be	; 0x24be <__addsf3>
    12d8:	0e 94 42 13 	call	0x2684	; 0x2684 <__fixsfsi>
    12dc:	70 93 88 00 	sts	0x0088, r23	; 0x800088 <lunarMonth+0x1>
    12e0:	60 93 87 00 	sts	0x0087, r22	; 0x800087 <lunarMonth>
// 			if (diff == leapMonthDiff) {
// 				lunarLeap = 1;
// 			}
		}
	}
	if (lunarMonth > 12) {
    12e4:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <lunarMonth>
    12e8:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <lunarMonth+0x1>
    12ec:	0d 97       	sbiw	r24, 0x0d	; 13
    12ee:	4c f0       	brlt	.+18     	; 0x1302 <convertSolar2Lunar+0x1c2>
		lunarMonth = lunarMonth - 12;
    12f0:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <lunarMonth>
    12f4:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <lunarMonth+0x1>
    12f8:	0c 97       	sbiw	r24, 0x0c	; 12
    12fa:	90 93 88 00 	sts	0x0088, r25	; 0x800088 <lunarMonth+0x1>
    12fe:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <lunarMonth>
	}
	if (lunarMonth >= 11 && diff < 4) {
    1302:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <lunarMonth>
    1306:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <lunarMonth+0x1>
    130a:	0b 97       	sbiw	r24, 0x0b	; 11
    130c:	9c f0       	brlt	.+38     	; 0x1334 <convertSolar2Lunar+0x1f4>
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	40 e8       	ldi	r20, 0x80	; 128
    1314:	50 e4       	ldi	r21, 0x40	; 64
    1316:	c7 01       	movw	r24, r14
    1318:	b6 01       	movw	r22, r12
    131a:	0e 94 cb 12 	call	0x2596	; 0x2596 <__cmpsf2>
    131e:	88 23       	and	r24, r24
    1320:	4c f4       	brge	.+18     	; 0x1334 <convertSolar2Lunar+0x1f4>
		lunarYear -= 1;
    1322:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <lunarYear>
    1326:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <lunarYear+0x1>
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	90 93 96 00 	sts	0x0096, r25	; 0x800096 <lunarYear+0x1>
    1330:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <lunarYear>
	}
}
    1334:	df 91       	pop	r29
    1336:	cf 91       	pop	r28
    1338:	1f 91       	pop	r17
    133a:	0f 91       	pop	r16
    133c:	ff 90       	pop	r15
    133e:	ef 90       	pop	r14
    1340:	df 90       	pop	r13
    1342:	cf 90       	pop	r12
    1344:	bf 90       	pop	r11
    1346:	af 90       	pop	r10
    1348:	9f 90       	pop	r9
    134a:	8f 90       	pop	r8
    134c:	7f 90       	pop	r7
    134e:	6f 90       	pop	r6
    1350:	5f 90       	pop	r5
    1352:	4f 90       	pop	r4
    1354:	3f 90       	pop	r3
    1356:	2f 90       	pop	r2
    1358:	08 95       	ret

0000135a <spiSendByte>:
char digitsInUse = 8;

void spiSendByte (char databyte)
{
	// Copy data into the SPI data register
	SPDR = databyte;
    135a:	8f b9       	out	0x0f, r24	; 15
	// Wait until transfer is complete
	while (!(SPSR & (1 << SPIF)));
    135c:	77 9b       	sbis	0x0e, 7	; 14
    135e:	fe cf       	rjmp	.-4      	; 0x135c <spiSendByte+0x2>
}
    1360:	08 95       	ret

00001362 <MAX7219_writeData>:

void MAX7219_writeData(uint8_t data_register, uint8_t data)
{
    1362:	cf 93       	push	r28
    1364:	c6 2f       	mov	r28, r22
	MAX7219_LOAD0;
    1366:	98 b3       	in	r25, 0x18	; 24
    1368:	9f 7e       	andi	r25, 0xEF	; 239
    136a:	98 bb       	out	0x18, r25	; 24
	// Send the register where the data will be stored
	spiSendByte(data_register);
    136c:	0e 94 ad 09 	call	0x135a	; 0x135a <spiSendByte>
	// Send the data to be stored
	spiSendByte(data);
    1370:	8c 2f       	mov	r24, r28
    1372:	0e 94 ad 09 	call	0x135a	; 0x135a <spiSendByte>
	MAX7219_LOAD1;
    1376:	88 b3       	in	r24, 0x18	; 24
    1378:	80 61       	ori	r24, 0x10	; 16
    137a:	88 bb       	out	0x18, r24	; 24
}
    137c:	cf 91       	pop	r28
    137e:	08 95       	ret

00001380 <MAX7219_clearDisplay>:

void MAX7219_clearDisplay()
{
    1380:	cf 93       	push	r28
	char i = digitsInUse;
    1382:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	// Loop until 0, but don't run for zero
	do {
		// Set each display in use to blank
		MAX7219_writeData(i, MAX7219_CHAR_BLANK);
    1386:	6f e0       	ldi	r22, 0x0F	; 15
    1388:	8c 2f       	mov	r24, r28
    138a:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
	} while (--i);
    138e:	c1 50       	subi	r28, 0x01	; 1
    1390:	d1 f7       	brne	.-12     	; 0x1386 <MAX7219_clearDisplay+0x6>
}
    1392:	cf 91       	pop	r28
    1394:	08 95       	ret

00001396 <Display_7seg>:
	Month	= BCDToDec(tData[5]);
	Year	= BCDToDec(tData[6]);
}


void Display_7seg (void){
    1396:	0f 93       	push	r16
    1398:	1f 93       	push	r17
    139a:	cf 93       	push	r28
    139c:	df 93       	push	r29
	if (bsw==0)
    139e:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <bsw>
    13a2:	81 11       	cpse	r24, r1
    13a4:	8e c1       	rjmp	.+796    	; 0x16c2 <Display_7seg+0x32c>
	{
		/********display time -> hh:mm:ss***************/
		
		if (SW_time_date == 0)
    13a6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    13aa:	81 11       	cpse	r24, r1
    13ac:	61 c0       	rjmp	.+194    	; 0x1470 <Display_7seg+0xda>
		{
			MAX7219_clearDisplay();
    13ae:	0e 94 c0 09 	call	0x1380	; 0x1380 <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(Minute%10));
    13b2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    13b6:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    13ba:	ca e0       	ldi	r28, 0x0A	; 10
    13bc:	d0 e0       	ldi	r29, 0x00	; 0
    13be:	be 01       	movw	r22, r28
    13c0:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    13c4:	bc 01       	movw	r22, r24
    13c6:	88 e0       	ldi	r24, 0x08	; 8
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(Minute/10));
    13ce:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    13d2:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    13d6:	be 01       	movw	r22, r28
    13d8:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    13dc:	87 e0       	ldi	r24, 0x07	; 7
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(Hour%10));
    13e4:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    13e8:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    13ec:	be 01       	movw	r22, r28
    13ee:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    13f2:	bc 01       	movw	r22, r24
    13f4:	86 e0       	ldi	r24, 0x06	; 6
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(Hour/10));
    13fc:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    1400:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    1404:	be 01       	movw	r22, r28
    1406:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    140a:	85 e0       	ldi	r24, 0x05	; 5
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    1412:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1416:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    141a:	be 01       	movw	r22, r28
    141c:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1420:	bc 01       	movw	r22, r24
    1422:	84 e0       	ldi	r24, 0x04	; 4
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    142a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    142e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1432:	be 01       	movw	r22, r28
    1434:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1438:	83 e0       	ldi	r24, 0x03	; 3
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    1440:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1444:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1448:	be 01       	movw	r22, r28
    144a:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    144e:	bc 01       	movw	r22, r24
    1450:	82 e0       	ldi	r24, 0x02	; 2
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    1458:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    145c:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1460:	be 01       	movw	r22, r28
    1462:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
    146e:	3b c4       	rjmp	.+2166   	; 0x1ce6 <Display_7seg+0x950>
			
		}
		/********display date -> DD:MM:YY***************/
		else if (SW_time_date == 1)
    1470:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	09 f0       	breq	.+2      	; 0x147a <Display_7seg+0xe4>
    1478:	76 c0       	rjmp	.+236    	; 0x1566 <Display_7seg+0x1d0>
		{
			MAX7219_clearDisplay();
    147a:	0e 94 c0 09 	call	0x1380	; 0x1380 <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
    147e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <yyyy>
    1482:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <yyyy+0x1>
    1486:	08 ee       	ldi	r16, 0xE8	; 232
    1488:	13 e0       	ldi	r17, 0x03	; 3
    148a:	b8 01       	movw	r22, r16
    148c:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1490:	ca e0       	ldi	r28, 0x0A	; 10
    1492:	d0 e0       	ldi	r29, 0x00	; 0
    1494:	be 01       	movw	r22, r28
    1496:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    149a:	bc 01       	movw	r22, r24
    149c:	88 e0       	ldi	r24, 0x08	; 8
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
    14a4:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <yyyy>
    14a8:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <yyyy+0x1>
    14ac:	b8 01       	movw	r22, r16
    14ae:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    14b2:	be 01       	movw	r22, r28
    14b4:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    14b8:	cb 01       	movw	r24, r22
    14ba:	be 01       	movw	r22, r28
    14bc:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    14c0:	bc 01       	movw	r22, r24
    14c2:	87 e0       	ldi	r24, 0x07	; 7
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
    14ca:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <yyyy>
    14ce:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <yyyy+0x1>
    14d2:	b8 01       	movw	r22, r16
    14d4:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    14d8:	64 e6       	ldi	r22, 0x64	; 100
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    14e0:	cb 01       	movw	r24, r22
    14e2:	be 01       	movw	r22, r28
    14e4:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    14e8:	bc 01       	movw	r22, r24
    14ea:	86 e0       	ldi	r24, 0x06	; 6
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
    14f2:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <yyyy>
    14f6:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <yyyy+0x1>
    14fa:	b8 01       	movw	r22, r16
    14fc:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1500:	85 e0       	ldi	r24, 0x05	; 5
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    1508:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    150c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1510:	be 01       	movw	r22, r28
    1512:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1516:	bc 01       	movw	r22, r24
    1518:	84 e0       	ldi	r24, 0x04	; 4
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    1520:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1524:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1528:	be 01       	movw	r22, r28
    152a:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    152e:	83 e0       	ldi	r24, 0x03	; 3
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    1536:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    153a:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    153e:	be 01       	movw	r22, r28
    1540:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1544:	bc 01       	movw	r22, r24
    1546:	82 e0       	ldi	r24, 0x02	; 2
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    154e:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1552:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1556:	be 01       	movw	r22, r28
    1558:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    155c:	81 e0       	ldi	r24, 0x01	; 1
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
    1564:	c0 c3       	rjmp	.+1920   	; 0x1ce6 <Display_7seg+0x950>
			
		}
		/********display AM LICH *********************/
		else if (SW_time_date==2)
    1566:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    156a:	82 30       	cpi	r24, 0x02	; 2
    156c:	09 f0       	breq	.+2      	; 0x1570 <Display_7seg+0x1da>
    156e:	76 c0       	rjmp	.+236    	; 0x165c <Display_7seg+0x2c6>
		{
			MAX7219_clearDisplay();
    1570:	0e 94 c0 09 	call	0x1380	; 0x1380 <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,((lunarYear%1000)%10));
    1574:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <lunarYear>
    1578:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <lunarYear+0x1>
    157c:	08 ee       	ldi	r16, 0xE8	; 232
    157e:	13 e0       	ldi	r17, 0x03	; 3
    1580:	b8 01       	movw	r22, r16
    1582:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1586:	ca e0       	ldi	r28, 0x0A	; 10
    1588:	d0 e0       	ldi	r29, 0x00	; 0
    158a:	be 01       	movw	r22, r28
    158c:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1590:	bc 01       	movw	r22, r24
    1592:	88 e0       	ldi	r24, 0x08	; 8
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(((lunarYear%1000)/10)%10));
    159a:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <lunarYear>
    159e:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <lunarYear+0x1>
    15a2:	b8 01       	movw	r22, r16
    15a4:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    15a8:	be 01       	movw	r22, r28
    15aa:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    15ae:	cb 01       	movw	r24, r22
    15b0:	be 01       	movw	r22, r28
    15b2:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    15b6:	bc 01       	movw	r22, r24
    15b8:	87 e0       	ldi	r24, 0x07	; 7
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(((lunarYear%1000)/100)%10));
    15c0:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <lunarYear>
    15c4:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <lunarYear+0x1>
    15c8:	b8 01       	movw	r22, r16
    15ca:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    15ce:	64 e6       	ldi	r22, 0x64	; 100
    15d0:	70 e0       	ldi	r23, 0x00	; 0
    15d2:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    15d6:	cb 01       	movw	r24, r22
    15d8:	be 01       	movw	r22, r28
    15da:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    15de:	bc 01       	movw	r22, r24
    15e0:	86 e0       	ldi	r24, 0x06	; 6
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(lunarYear/1000));
    15e8:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <lunarYear>
    15ec:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <lunarYear+0x1>
    15f0:	b8 01       	movw	r22, r16
    15f2:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    15f6:	85 e0       	ldi	r24, 0x05	; 5
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(lunarMonth%10));
    15fe:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <lunarMonth>
    1602:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <lunarMonth+0x1>
    1606:	be 01       	movw	r22, r28
    1608:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    160c:	bc 01       	movw	r22, r24
    160e:	84 e0       	ldi	r24, 0x04	; 4
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(lunarMonth/10));
    1616:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <lunarMonth>
    161a:	90 91 88 00 	lds	r25, 0x0088	; 0x800088 <lunarMonth+0x1>
    161e:	be 01       	movw	r22, r28
    1620:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1624:	83 e0       	ldi	r24, 0x03	; 3
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(lunarDate%10));
    162c:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <lunarDate>
    1630:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <lunarDate+0x1>
    1634:	be 01       	movw	r22, r28
    1636:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    163a:	bc 01       	movw	r22, r24
    163c:	82 e0       	ldi	r24, 0x02	; 2
    163e:	90 e0       	ldi	r25, 0x00	; 0
    1640:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(lunarDate/10));
    1644:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <lunarDate>
    1648:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <lunarDate+0x1>
    164c:	be 01       	movw	r22, r28
    164e:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
    165a:	45 c3       	rjmp	.+1674   	; 0x1ce6 <Display_7seg+0x950>
			
		}
		else
		{
			MAX7219_clearDisplay();
    165c:	0e 94 c0 09 	call	0x1380	; 0x1380 <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(A_Minute%10));
    1660:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <A_Minute>
    1664:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <A_Minute+0x1>
    1668:	ca e0       	ldi	r28, 0x0A	; 10
    166a:	d0 e0       	ldi	r29, 0x00	; 0
    166c:	be 01       	movw	r22, r28
    166e:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1672:	bc 01       	movw	r22, r24
    1674:	88 e0       	ldi	r24, 0x08	; 8
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(A_Minute/10));
    167c:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <A_Minute>
    1680:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <A_Minute+0x1>
    1684:	be 01       	movw	r22, r28
    1686:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    168a:	87 e0       	ldi	r24, 0x07	; 7
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(A_Hour%10));
    1692:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <A_Hour>
    1696:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <A_Hour+0x1>
    169a:	be 01       	movw	r22, r28
    169c:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    16a0:	bc 01       	movw	r22, r24
    16a2:	86 e0       	ldi	r24, 0x06	; 6
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(A_Hour/10));
    16aa:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <A_Hour>
    16ae:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <A_Hour+0x1>
    16b2:	be 01       	movw	r22, r28
    16b4:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    16b8:	85 e0       	ldi	r24, 0x05	; 5
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
    16c0:	12 c3       	rjmp	.+1572   	; 0x1ce6 <Display_7seg+0x950>
		}
	} 
	else
	{
		if ((count==1)&&(SW_time_date==0))	//blink date
    16c2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	09 f0       	breq	.+2      	; 0x16cc <Display_7seg+0x336>
    16ca:	59 c0       	rjmp	.+178    	; 0x177e <Display_7seg+0x3e8>
    16cc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    16d0:	81 11       	cpse	r24, r1
    16d2:	55 c0       	rjmp	.+170    	; 0x177e <Display_7seg+0x3e8>
		{
			MAX7219_clearDisplay();
    16d4:	0e 94 c0 09 	call	0x1380	; 0x1380 <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(Minute%10));
    16d8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    16dc:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    16e0:	ca e0       	ldi	r28, 0x0A	; 10
    16e2:	d0 e0       	ldi	r29, 0x00	; 0
    16e4:	be 01       	movw	r22, r28
    16e6:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    16ea:	bc 01       	movw	r22, r24
    16ec:	88 e0       	ldi	r24, 0x08	; 8
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(Minute/10));
    16f4:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    16f8:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    16fc:	be 01       	movw	r22, r28
    16fe:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1702:	87 e0       	ldi	r24, 0x07	; 7
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(Hour%10));
    170a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    170e:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    1712:	be 01       	movw	r22, r28
    1714:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1718:	bc 01       	movw	r22, r24
    171a:	86 e0       	ldi	r24, 0x06	; 6
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(Hour/10));
    1722:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    1726:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    172a:	be 01       	movw	r22, r28
    172c:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1730:	85 e0       	ldi	r24, 0x05	; 5
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    1738:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    173c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1740:	be 01       	movw	r22, r28
    1742:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1746:	bc 01       	movw	r22, r24
    1748:	84 e0       	ldi	r24, 0x04	; 4
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    1750:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1754:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1758:	be 01       	movw	r22, r28
    175a:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    175e:	83 e0       	ldi	r24, 0x03	; 3
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,MAX7219_CHAR_BLANK);
    1766:	6f e0       	ldi	r22, 0x0F	; 15
    1768:	70 e0       	ldi	r23, 0x00	; 0
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,MAX7219_CHAR_BLANK);
    1772:	6f e0       	ldi	r22, 0x0F	; 15
    1774:	70 e0       	ldi	r23, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
		}
		if ((count==2)&&(SW_time_date==0))	//blink month
    177e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1782:	82 30       	cpi	r24, 0x02	; 2
    1784:	09 f0       	breq	.+2      	; 0x1788 <Display_7seg+0x3f2>
    1786:	59 c0       	rjmp	.+178    	; 0x183a <Display_7seg+0x4a4>
    1788:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    178c:	81 11       	cpse	r24, r1
    178e:	55 c0       	rjmp	.+170    	; 0x183a <Display_7seg+0x4a4>
		{
			MAX7219_clearDisplay();
    1790:	0e 94 c0 09 	call	0x1380	; 0x1380 <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(Minute%10));
    1794:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    1798:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    179c:	ca e0       	ldi	r28, 0x0A	; 10
    179e:	d0 e0       	ldi	r29, 0x00	; 0
    17a0:	be 01       	movw	r22, r28
    17a2:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    17a6:	bc 01       	movw	r22, r24
    17a8:	88 e0       	ldi	r24, 0x08	; 8
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(Minute/10));
    17b0:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    17b4:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    17b8:	be 01       	movw	r22, r28
    17ba:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    17be:	87 e0       	ldi	r24, 0x07	; 7
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(Hour%10));
    17c6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    17ca:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    17ce:	be 01       	movw	r22, r28
    17d0:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    17d4:	bc 01       	movw	r22, r24
    17d6:	86 e0       	ldi	r24, 0x06	; 6
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(Hour/10));
    17de:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    17e2:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    17e6:	be 01       	movw	r22, r28
    17e8:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    17ec:	85 e0       	ldi	r24, 0x05	; 5
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,MAX7219_CHAR_BLANK);
    17f4:	6f e0       	ldi	r22, 0x0F	; 15
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	84 e0       	ldi	r24, 0x04	; 4
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,MAX7219_CHAR_BLANK);
    1800:	6f e0       	ldi	r22, 0x0F	; 15
    1802:	70 e0       	ldi	r23, 0x00	; 0
    1804:	83 e0       	ldi	r24, 0x03	; 3
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    180c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1810:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1814:	be 01       	movw	r22, r28
    1816:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    181a:	bc 01       	movw	r22, r24
    181c:	82 e0       	ldi	r24, 0x02	; 2
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    1824:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1828:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    182c:	be 01       	movw	r22, r28
    182e:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	90 e0       	ldi	r25, 0x00	; 0
    1836:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
		}
		if ((count==3)&&(SW_time_date==0))	//blink hour
    183a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    183e:	83 30       	cpi	r24, 0x03	; 3
    1840:	09 f0       	breq	.+2      	; 0x1844 <Display_7seg+0x4ae>
    1842:	59 c0       	rjmp	.+178    	; 0x18f6 <Display_7seg+0x560>
    1844:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1848:	81 11       	cpse	r24, r1
    184a:	55 c0       	rjmp	.+170    	; 0x18f6 <Display_7seg+0x560>
		{
			MAX7219_clearDisplay();
    184c:	0e 94 c0 09 	call	0x1380	; 0x1380 <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(Minute%10));
    1850:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    1854:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    1858:	ca e0       	ldi	r28, 0x0A	; 10
    185a:	d0 e0       	ldi	r29, 0x00	; 0
    185c:	be 01       	movw	r22, r28
    185e:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1862:	bc 01       	movw	r22, r24
    1864:	88 e0       	ldi	r24, 0x08	; 8
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(Minute/10));
    186c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    1870:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    1874:	be 01       	movw	r22, r28
    1876:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    187a:	87 e0       	ldi	r24, 0x07	; 7
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    1882:	6f e0       	ldi	r22, 0x0F	; 15
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	86 e0       	ldi	r24, 0x06	; 6
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    188e:	6f e0       	ldi	r22, 0x0F	; 15
    1890:	70 e0       	ldi	r23, 0x00	; 0
    1892:	85 e0       	ldi	r24, 0x05	; 5
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    189a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    189e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    18a2:	be 01       	movw	r22, r28
    18a4:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    18a8:	bc 01       	movw	r22, r24
    18aa:	84 e0       	ldi	r24, 0x04	; 4
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    18b2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    18b6:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    18ba:	be 01       	movw	r22, r28
    18bc:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    18c0:	83 e0       	ldi	r24, 0x03	; 3
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    18c8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    18cc:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    18d0:	be 01       	movw	r22, r28
    18d2:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    18d6:	bc 01       	movw	r22, r24
    18d8:	82 e0       	ldi	r24, 0x02	; 2
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    18e0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    18e4:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    18e8:	be 01       	movw	r22, r28
    18ea:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
		}
		if ((count==4)&&(SW_time_date==0))	//blink min
    18f6:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    18fa:	84 30       	cpi	r24, 0x04	; 4
    18fc:	09 f0       	breq	.+2      	; 0x1900 <Display_7seg+0x56a>
    18fe:	59 c0       	rjmp	.+178    	; 0x19b2 <Display_7seg+0x61c>
    1900:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1904:	81 11       	cpse	r24, r1
    1906:	55 c0       	rjmp	.+170    	; 0x19b2 <Display_7seg+0x61c>
		{
			MAX7219_clearDisplay();
    1908:	0e 94 c0 09 	call	0x1380	; 0x1380 <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    190c:	6f e0       	ldi	r22, 0x0F	; 15
    190e:	70 e0       	ldi	r23, 0x00	; 0
    1910:	88 e0       	ldi	r24, 0x08	; 8
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    1918:	6f e0       	ldi	r22, 0x0F	; 15
    191a:	70 e0       	ldi	r23, 0x00	; 0
    191c:	87 e0       	ldi	r24, 0x07	; 7
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(Hour%10));
    1924:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    1928:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    192c:	ca e0       	ldi	r28, 0x0A	; 10
    192e:	d0 e0       	ldi	r29, 0x00	; 0
    1930:	be 01       	movw	r22, r28
    1932:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1936:	bc 01       	movw	r22, r24
    1938:	86 e0       	ldi	r24, 0x06	; 6
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(Hour/10));
    1940:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    1944:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    1948:	be 01       	movw	r22, r28
    194a:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    194e:	85 e0       	ldi	r24, 0x05	; 5
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    1956:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    195a:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    195e:	be 01       	movw	r22, r28
    1960:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1964:	bc 01       	movw	r22, r24
    1966:	84 e0       	ldi	r24, 0x04	; 4
    1968:	90 e0       	ldi	r25, 0x00	; 0
    196a:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    196e:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1972:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1976:	be 01       	movw	r22, r28
    1978:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    197c:	83 e0       	ldi	r24, 0x03	; 3
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    1984:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1988:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    198c:	be 01       	movw	r22, r28
    198e:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1992:	bc 01       	movw	r22, r24
    1994:	82 e0       	ldi	r24, 0x02	; 2
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    199c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    19a0:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    19a4:	be 01       	movw	r22, r28
    19a6:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
		}
		if ((count==1)&&(SW_time_date==1))	//blink date
    19b2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    19b6:	81 30       	cpi	r24, 0x01	; 1
    19b8:	09 f0       	breq	.+2      	; 0x19bc <Display_7seg+0x626>
    19ba:	6f c0       	rjmp	.+222    	; 0x1a9a <Display_7seg+0x704>
    19bc:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    19c0:	81 30       	cpi	r24, 0x01	; 1
    19c2:	09 f0       	breq	.+2      	; 0x19c6 <Display_7seg+0x630>
    19c4:	6a c0       	rjmp	.+212    	; 0x1a9a <Display_7seg+0x704>
		{
			
			MAX7219_clearDisplay();
    19c6:	0e 94 c0 09 	call	0x1380	; 0x1380 <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
    19ca:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <yyyy>
    19ce:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <yyyy+0x1>
    19d2:	08 ee       	ldi	r16, 0xE8	; 232
    19d4:	13 e0       	ldi	r17, 0x03	; 3
    19d6:	b8 01       	movw	r22, r16
    19d8:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    19dc:	ca e0       	ldi	r28, 0x0A	; 10
    19de:	d0 e0       	ldi	r29, 0x00	; 0
    19e0:	be 01       	movw	r22, r28
    19e2:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    19e6:	bc 01       	movw	r22, r24
    19e8:	88 e0       	ldi	r24, 0x08	; 8
    19ea:	90 e0       	ldi	r25, 0x00	; 0
    19ec:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
    19f0:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <yyyy>
    19f4:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <yyyy+0x1>
    19f8:	b8 01       	movw	r22, r16
    19fa:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    19fe:	be 01       	movw	r22, r28
    1a00:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1a04:	cb 01       	movw	r24, r22
    1a06:	be 01       	movw	r22, r28
    1a08:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1a0c:	bc 01       	movw	r22, r24
    1a0e:	87 e0       	ldi	r24, 0x07	; 7
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
    1a16:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <yyyy>
    1a1a:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <yyyy+0x1>
    1a1e:	b8 01       	movw	r22, r16
    1a20:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1a24:	64 e6       	ldi	r22, 0x64	; 100
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	be 01       	movw	r22, r28
    1a30:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1a34:	bc 01       	movw	r22, r24
    1a36:	86 e0       	ldi	r24, 0x06	; 6
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
    1a3e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <yyyy>
    1a42:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <yyyy+0x1>
    1a46:	b8 01       	movw	r22, r16
    1a48:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1a4c:	85 e0       	ldi	r24, 0x05	; 5
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    1a54:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1a58:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1a5c:	be 01       	movw	r22, r28
    1a5e:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1a62:	bc 01       	movw	r22, r24
    1a64:	84 e0       	ldi	r24, 0x04	; 4
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    1a6c:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1a70:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1a74:	be 01       	movw	r22, r28
    1a76:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1a7a:	83 e0       	ldi	r24, 0x03	; 3
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,MAX7219_CHAR_BLANK);
    1a82:	6f e0       	ldi	r22, 0x0F	; 15
    1a84:	70 e0       	ldi	r23, 0x00	; 0
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,MAX7219_CHAR_BLANK);
    1a8e:	6f e0       	ldi	r22, 0x0F	; 15
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
		}
		if ((count==2)&&(SW_time_date==1))	//blink month
    1a9a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1a9e:	82 30       	cpi	r24, 0x02	; 2
    1aa0:	09 f0       	breq	.+2      	; 0x1aa4 <Display_7seg+0x70e>
    1aa2:	6f c0       	rjmp	.+222    	; 0x1b82 <Display_7seg+0x7ec>
    1aa4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1aa8:	81 30       	cpi	r24, 0x01	; 1
    1aaa:	09 f0       	breq	.+2      	; 0x1aae <Display_7seg+0x718>
    1aac:	6a c0       	rjmp	.+212    	; 0x1b82 <Display_7seg+0x7ec>
		{
			
			MAX7219_clearDisplay();
    1aae:	0e 94 c0 09 	call	0x1380	; 0x1380 <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
    1ab2:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <yyyy>
    1ab6:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <yyyy+0x1>
    1aba:	08 ee       	ldi	r16, 0xE8	; 232
    1abc:	13 e0       	ldi	r17, 0x03	; 3
    1abe:	b8 01       	movw	r22, r16
    1ac0:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1ac4:	ca e0       	ldi	r28, 0x0A	; 10
    1ac6:	d0 e0       	ldi	r29, 0x00	; 0
    1ac8:	be 01       	movw	r22, r28
    1aca:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1ace:	bc 01       	movw	r22, r24
    1ad0:	88 e0       	ldi	r24, 0x08	; 8
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
    1ad8:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <yyyy>
    1adc:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <yyyy+0x1>
    1ae0:	b8 01       	movw	r22, r16
    1ae2:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1ae6:	be 01       	movw	r22, r28
    1ae8:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1aec:	cb 01       	movw	r24, r22
    1aee:	be 01       	movw	r22, r28
    1af0:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1af4:	bc 01       	movw	r22, r24
    1af6:	87 e0       	ldi	r24, 0x07	; 7
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
    1afe:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <yyyy>
    1b02:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <yyyy+0x1>
    1b06:	b8 01       	movw	r22, r16
    1b08:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1b0c:	64 e6       	ldi	r22, 0x64	; 100
    1b0e:	70 e0       	ldi	r23, 0x00	; 0
    1b10:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1b14:	cb 01       	movw	r24, r22
    1b16:	be 01       	movw	r22, r28
    1b18:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	86 e0       	ldi	r24, 0x06	; 6
    1b20:	90 e0       	ldi	r25, 0x00	; 0
    1b22:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
    1b26:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <yyyy>
    1b2a:	90 91 84 00 	lds	r25, 0x0084	; 0x800084 <yyyy+0x1>
    1b2e:	b8 01       	movw	r22, r16
    1b30:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1b34:	85 e0       	ldi	r24, 0x05	; 5
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,MAX7219_CHAR_BLANK);
    1b3c:	6f e0       	ldi	r22, 0x0F	; 15
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	84 e0       	ldi	r24, 0x04	; 4
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,MAX7219_CHAR_BLANK);
    1b48:	6f e0       	ldi	r22, 0x0F	; 15
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	83 e0       	ldi	r24, 0x03	; 3
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    1b54:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1b58:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1b5c:	be 01       	movw	r22, r28
    1b5e:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1b62:	bc 01       	movw	r22, r24
    1b64:	82 e0       	ldi	r24, 0x02	; 2
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    1b6c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1b70:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1b74:	be 01       	movw	r22, r28
    1b76:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
		}
		if ((count==3)&&(SW_time_date==1))	//blink year
    1b82:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1b86:	83 30       	cpi	r24, 0x03	; 3
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <Display_7seg+0x7f6>
    1b8a:	4f c0       	rjmp	.+158    	; 0x1c2a <Display_7seg+0x894>
    1b8c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1b90:	81 30       	cpi	r24, 0x01	; 1
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <Display_7seg+0x800>
    1b94:	4a c0       	rjmp	.+148    	; 0x1c2a <Display_7seg+0x894>
		{
			
			MAX7219_clearDisplay();
    1b96:	0e 94 c0 09 	call	0x1380	; 0x1380 <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    1b9a:	6f e0       	ldi	r22, 0x0F	; 15
    1b9c:	70 e0       	ldi	r23, 0x00	; 0
    1b9e:	88 e0       	ldi	r24, 0x08	; 8
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    1ba6:	6f e0       	ldi	r22, 0x0F	; 15
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	87 e0       	ldi	r24, 0x07	; 7
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    1bb2:	6f e0       	ldi	r22, 0x0F	; 15
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	86 e0       	ldi	r24, 0x06	; 6
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    1bbe:	6f e0       	ldi	r22, 0x0F	; 15
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	85 e0       	ldi	r24, 0x05	; 5
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    1bca:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1bce:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1bd2:	ca e0       	ldi	r28, 0x0A	; 10
    1bd4:	d0 e0       	ldi	r29, 0x00	; 0
    1bd6:	be 01       	movw	r22, r28
    1bd8:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1bdc:	bc 01       	movw	r22, r24
    1bde:	84 e0       	ldi	r24, 0x04	; 4
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    1be6:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1bea:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1bee:	be 01       	movw	r22, r28
    1bf0:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1bf4:	83 e0       	ldi	r24, 0x03	; 3
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    1bfc:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1c00:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1c04:	be 01       	movw	r22, r28
    1c06:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1c0a:	bc 01       	movw	r22, r24
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	90 e0       	ldi	r25, 0x00	; 0
    1c10:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    1c14:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1c18:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1c1c:	be 01       	movw	r22, r28
    1c1e:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
		}
		if ((count==1)&&(SW_time_date==3))	//blink A_HOUR
    1c2a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1c2e:	81 30       	cpi	r24, 0x01	; 1
    1c30:	59 f5       	brne	.+86     	; 0x1c88 <Display_7seg+0x8f2>
    1c32:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1c36:	83 30       	cpi	r24, 0x03	; 3
    1c38:	39 f5       	brne	.+78     	; 0x1c88 <Display_7seg+0x8f2>
		{
			
			MAX7219_clearDisplay();
    1c3a:	0e 94 c0 09 	call	0x1380	; 0x1380 <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(A_Minute%10));
    1c3e:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <A_Minute>
    1c42:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <A_Minute+0x1>
    1c46:	ca e0       	ldi	r28, 0x0A	; 10
    1c48:	d0 e0       	ldi	r29, 0x00	; 0
    1c4a:	be 01       	movw	r22, r28
    1c4c:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1c50:	bc 01       	movw	r22, r24
    1c52:	88 e0       	ldi	r24, 0x08	; 8
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(A_Minute/10));
    1c5a:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <A_Minute>
    1c5e:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <A_Minute+0x1>
    1c62:	be 01       	movw	r22, r28
    1c64:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1c68:	87 e0       	ldi	r24, 0x07	; 7
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    1c70:	6f e0       	ldi	r22, 0x0F	; 15
    1c72:	70 e0       	ldi	r23, 0x00	; 0
    1c74:	86 e0       	ldi	r24, 0x06	; 6
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    1c7c:	6f e0       	ldi	r22, 0x0F	; 15
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	85 e0       	ldi	r24, 0x05	; 5
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>

		}
		if ((count==2)&&(SW_time_date==3))	//blink A_MIN
    1c88:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1c8c:	82 30       	cpi	r24, 0x02	; 2
    1c8e:	59 f5       	brne	.+86     	; 0x1ce6 <Display_7seg+0x950>
    1c90:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1c94:	83 30       	cpi	r24, 0x03	; 3
    1c96:	39 f5       	brne	.+78     	; 0x1ce6 <Display_7seg+0x950>
		{
			
			MAX7219_clearDisplay();
    1c98:	0e 94 c0 09 	call	0x1380	; 0x1380 <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    1c9c:	6f e0       	ldi	r22, 0x0F	; 15
    1c9e:	70 e0       	ldi	r23, 0x00	; 0
    1ca0:	88 e0       	ldi	r24, 0x08	; 8
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    1ca8:	6f e0       	ldi	r22, 0x0F	; 15
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	87 e0       	ldi	r24, 0x07	; 7
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(A_Hour%10));
    1cb4:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <A_Hour>
    1cb8:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <A_Hour+0x1>
    1cbc:	ca e0       	ldi	r28, 0x0A	; 10
    1cbe:	d0 e0       	ldi	r29, 0x00	; 0
    1cc0:	be 01       	movw	r22, r28
    1cc2:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1cc6:	bc 01       	movw	r22, r24
    1cc8:	86 e0       	ldi	r24, 0x06	; 6
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(A_Hour/10));
    1cd0:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <A_Hour>
    1cd4:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <A_Hour+0x1>
    1cd8:	be 01       	movw	r22, r28
    1cda:	0e 94 76 15 	call	0x2aec	; 0x2aec <__divmodhi4>
    1cde:	85 e0       	ldi	r24, 0x05	; 5
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
		}
	}
	

}
    1ce6:	df 91       	pop	r29
    1ce8:	cf 91       	pop	r28
    1cea:	1f 91       	pop	r17
    1cec:	0f 91       	pop	r16
    1cee:	08 95       	ret

00001cf0 <Init_Timer0>:
	} while (--i);
}

void Init_Timer0(void){
	//Initialize Timer0 to 1s - overflow interrupt--------------------
    TCCR0=(1<<CS02)|(0<<CS01)|(1<<CS00);	//prescaler, clk/1024
    1cf0:	85 e0       	ldi	r24, 0x05	; 5
    1cf2:	83 bf       	out	0x33, r24	; 51
	
    TIMSK=(1<<TOIE0);						
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	89 bf       	out	0x39, r24	; 57
    sei();                      			
    1cf8:	78 94       	sei
    1cfa:	08 95       	ret

00001cfc <Init_interupt>:
	//----------------------------------------------------------------
}


void Init_interupt(void){
	MCUCR=(0<<ISC11)|(0<<ISC10)|(0<<ISC01)|(0<<ISC00);
    1cfc:	15 be       	out	0x35, r1	; 53
	MCUCSR=(0<<ISC2);
    1cfe:	14 be       	out	0x34, r1	; 52
	GICR=(1<<INT2)|(1<<INT1)|(1<<INT0);
    1d00:	80 ee       	ldi	r24, 0xE0	; 224
    1d02:	8b bf       	out	0x3b, r24	; 59
	sei();
    1d04:	78 94       	sei
    1d06:	08 95       	ret

00001d08 <main>:
//Main program
int main(void){	
	
	//MAX7219 init
	// SCK MOSI CS/LOAD/SS
	DDRB |= (1 << PIN_SCK) | (1 << PIN_MOSI) | (1 << PIN_SS);
    1d08:	87 b3       	in	r24, 0x17	; 23
    1d0a:	80 6b       	ori	r24, 0xB0	; 176
    1d0c:	87 bb       	out	0x17, r24	; 23

	// SPI Enable, Master mode
	SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
    1d0e:	8d b1       	in	r24, 0x0d	; 13
    1d10:	82 65       	ori	r24, 0x52	; 82
    1d12:	8d b9       	out	0x0d, r24	; 13

	
	// Scan limit runs from 0.
	MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, 0x07);
    1d14:	67 e0       	ldi	r22, 0x07	; 7
    1d16:	8b e0       	ldi	r24, 0x0B	; 11
    1d18:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_INTENSITY, 0x05);
    1d1c:	65 e0       	ldi	r22, 0x05	; 5
    1d1e:	8a e0       	ldi	r24, 0x0A	; 10
    1d20:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_POWER, ON);
    1d24:	61 e0       	ldi	r22, 0x01	; 1
    1d26:	8c e0       	ldi	r24, 0x0C	; 12
    1d28:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    1d2c:	6f ef       	ldi	r22, 0xFF	; 255
    1d2e:	89 e0       	ldi	r24, 0x09	; 9
    1d30:	0e 94 b1 09 	call	0x1362	; 0x1362 <MAX7219_writeData>
	
	//FixTime();
	Init_btn();// KEY_PORT=0xF8;
    1d34:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Init_btn>

	
	//------------------------------------
	Init_Timer0();
    1d38:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <Init_Timer0>
	
	Init_interupt();
    1d3c:	0e 94 7e 0e 	call	0x1cfc	; 0x1cfc <Init_interupt>
	
	TWI_Init(); 
    1d40:	0e 94 58 00 	call	0xb0	; 0xb0 <TWI_Init>
			
	TWI_DS1307_rblock(tData,7); 
    1d44:	67 e0       	ldi	r22, 0x07	; 7
    1d46:	8e e8       	ldi	r24, 0x8E	; 142
    1d48:	90 e0       	ldi	r25, 0x00	; 0
    1d4a:	0e 94 c3 00 	call	0x186	; 0x186 <TWI_DS1307_rblock>
	
	Decode(); 	//BCD data converter function from DS1307 to DEC
    1d4e:	0e 94 29 01 	call	0x252	; 0x252 <Decode>
    1d52:	8f ec       	ldi	r24, 0xCF	; 207
    1d54:	97 e0       	ldi	r25, 0x07	; 7
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <main+0x4e>
    1d5a:	00 c0       	rjmp	.+0      	; 0x1d5c <main+0x54>
    1d5c:	00 00       	nop
	
	_delay_ms(1);	
	userled_PORT^=(1<<userled);
    1d5e:	9b b3       	in	r25, 0x1b	; 27
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	89 27       	eor	r24, r25
    1d64:	8b bb       	out	0x1b, r24	; 27
	//************************************************************************************
	while(1){
		
		yyyy=Year+2000;
    1d66:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Year>
    1d6a:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Year+0x1>
    1d6e:	80 53       	subi	r24, 0x30	; 48
    1d70:	98 4f       	sbci	r25, 0xF8	; 248
    1d72:	90 93 84 00 	sts	0x0084, r25	; 0x800084 <yyyy+0x1>
    1d76:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <yyyy>
		convertSolar2Lunar(Date, Month, yyyy, timeZone);	
    1d7a:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <timeZone>
    1d7e:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <timeZone+0x1>
    1d82:	40 91 83 00 	lds	r20, 0x0083	; 0x800083 <yyyy>
    1d86:	50 91 84 00 	lds	r21, 0x0084	; 0x800084 <yyyy+0x1>
    1d8a:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Month>
    1d8e:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <Month+0x1>
    1d92:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1d96:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1d9a:	0e 94 a0 08 	call	0x1140	; 0x1140 <convertSolar2Lunar>
		Display_7seg();
    1d9e:	0e 94 cb 09 	call	0x1396	; 0x1396 <Display_7seg>
		if (Hour == A_Hour && Minute == A_Minute && EN_alarm == true)
    1da2:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <Hour>
    1da6:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <Hour+0x1>
    1daa:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <A_Hour>
    1dae:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <A_Hour+0x1>
    1db2:	28 17       	cp	r18, r24
    1db4:	39 07       	cpc	r19, r25
    1db6:	b9 f6       	brne	.-82     	; 0x1d66 <main+0x5e>
    1db8:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <Minute>
    1dbc:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <Minute+0x1>
    1dc0:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <A_Minute>
    1dc4:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <A_Minute+0x1>
    1dc8:	28 17       	cp	r18, r24
    1dca:	39 07       	cpc	r19, r25
    1dcc:	61 f6       	brne	.-104    	; 0x1d66 <main+0x5e>
    1dce:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <EN_alarm>
    1dd2:	88 23       	and	r24, r24
    1dd4:	41 f2       	breq	.-112    	; 0x1d66 <main+0x5e>
		{	
			
			Display_7seg();
    1dd6:	0e 94 cb 09 	call	0x1396	; 0x1396 <Display_7seg>
			BTN_PORTD |= (1<<BUZ_LED);
    1dda:	82 b3       	in	r24, 0x12	; 18
    1ddc:	80 68       	ori	r24, 0x80	; 128
    1dde:	82 bb       	out	0x12, r24	; 18
    1de0:	c2 cf       	rjmp	.-124    	; 0x1d66 <main+0x5e>

00001de2 <__vector_11>:
	return 0;
}

char data[5];

ISR(TIMER0_OVF_vect){ 	
    1de2:	1f 92       	push	r1
    1de4:	0f 92       	push	r0
    1de6:	0f b6       	in	r0, 0x3f	; 63
    1de8:	0f 92       	push	r0
    1dea:	11 24       	eor	r1, r1
    1dec:	2f 93       	push	r18
    1dee:	3f 93       	push	r19
    1df0:	4f 93       	push	r20
    1df2:	5f 93       	push	r21
    1df4:	6f 93       	push	r22
    1df6:	7f 93       	push	r23
    1df8:	8f 93       	push	r24
    1dfa:	9f 93       	push	r25
    1dfc:	af 93       	push	r26
    1dfe:	bf 93       	push	r27
    1e00:	ef 93       	push	r30
    1e02:	ff 93       	push	r31
	Time_count++;
    1e04:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Time_count>
    1e08:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <Time_count+0x1>
    1e0c:	01 96       	adiw	r24, 0x01	; 1
    1e0e:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <Time_count+0x1>
    1e12:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <Time_count>
	blink_count++;
    1e16:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <blink_count>
    1e1a:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <blink_count+0x1>
    1e1e:	01 96       	adiw	r24, 0x01	; 1
    1e20:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <blink_count+0x1>
    1e24:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <blink_count>
	if(Time_count>=10){ 	//1s Exactly
    1e28:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <Time_count>
    1e2c:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <Time_count+0x1>
    1e30:	0a 97       	sbiw	r24, 0x0a	; 10
    1e32:	28 f1       	brcs	.+74     	; 0x1e7e <__vector_11+0x9c>
		                
		if(set == false ){
    1e34:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <set>
    1e38:	81 11       	cpse	r24, r1
    1e3a:	1d c0       	rjmp	.+58     	; 0x1e76 <__vector_11+0x94>
			//Read DS1307
			TWI_DS1307_wadr(0x00); 				
    1e3c:	0e 94 5e 00 	call	0xbc	; 0xbc <TWI_DS1307_wadr>
    1e40:	8f ec       	ldi	r24, 0xCF	; 207
    1e42:	97 e0       	ldi	r25, 0x07	; 7
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <__vector_11+0x62>
    1e48:	00 c0       	rjmp	.+0      	; 0x1e4a <__vector_11+0x68>
    1e4a:	00 00       	nop
			_delay_ms(1);		   				
			TWI_DS1307_rblock(tData,7); 
    1e4c:	67 e0       	ldi	r22, 0x07	; 7
    1e4e:	8e e8       	ldi	r24, 0x8E	; 142
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	0e 94 c3 00 	call	0x186	; 0x186 <TWI_DS1307_rblock>
					
			//Print result on 7Seg led		
			if(BCDToDec(tData[0]) !=Second){ 
    1e56:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <tData>
    1e5a:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <Second>
    1e64:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <Second+0x1>
    1e68:	82 17       	cp	r24, r18
    1e6a:	93 07       	cpc	r25, r19
    1e6c:	21 f0       	breq	.+8      	; 0x1e76 <__vector_11+0x94>
				Decode();			
    1e6e:	0e 94 29 01 	call	0x252	; 0x252 <Decode>
				Display_7seg();
    1e72:	0e 94 cb 09 	call	0x1396	; 0x1396 <Display_7seg>
			} 
		}
		Time_count=0; 
    1e76:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <Time_count+0x1>
    1e7a:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <Time_count>
	}
	if (blink_count>=30)	//blink 500ms
    1e7e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <blink_count>
    1e82:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <blink_count+0x1>
    1e86:	4e 97       	sbiw	r24, 0x1e	; 30
    1e88:	80 f0       	brcs	.+32     	; 0x1eaa <__vector_11+0xc8>
	{
		if(set == true ){
    1e8a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <set>
    1e8e:	88 23       	and	r24, r24
    1e90:	41 f0       	breq	.+16     	; 0x1ea2 <__vector_11+0xc0>
				bsw^=1;
    1e92:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <bsw>
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	89 27       	eor	r24, r25
    1e9a:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <bsw>
				Display_7seg();
    1e9e:	0e 94 cb 09 	call	0x1396	; 0x1396 <Display_7seg>
		}
		blink_count=0;
    1ea2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <blink_count+0x1>
    1ea6:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <blink_count>
	}
}
    1eaa:	ff 91       	pop	r31
    1eac:	ef 91       	pop	r30
    1eae:	bf 91       	pop	r27
    1eb0:	af 91       	pop	r26
    1eb2:	9f 91       	pop	r25
    1eb4:	8f 91       	pop	r24
    1eb6:	7f 91       	pop	r23
    1eb8:	6f 91       	pop	r22
    1eba:	5f 91       	pop	r21
    1ebc:	4f 91       	pop	r20
    1ebe:	3f 91       	pop	r19
    1ec0:	2f 91       	pop	r18
    1ec2:	0f 90       	pop	r0
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	0f 90       	pop	r0
    1ec8:	1f 90       	pop	r1
    1eca:	18 95       	reti

00001ecc <__vector_1>:


//SW mode button
ISR(INT0_vect){
    1ecc:	1f 92       	push	r1
    1ece:	0f 92       	push	r0
    1ed0:	0f b6       	in	r0, 0x3f	; 63
    1ed2:	0f 92       	push	r0
    1ed4:	11 24       	eor	r1, r1
    1ed6:	2f 93       	push	r18
    1ed8:	3f 93       	push	r19
    1eda:	4f 93       	push	r20
    1edc:	5f 93       	push	r21
    1ede:	6f 93       	push	r22
    1ee0:	7f 93       	push	r23
    1ee2:	8f 93       	push	r24
    1ee4:	9f 93       	push	r25
    1ee6:	af 93       	push	r26
    1ee8:	bf 93       	push	r27
    1eea:	ef 93       	push	r30
    1eec:	ff 93       	push	r31
	
	if(set==false){
    1eee:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <set>
    1ef2:	81 11       	cpse	r24, r1
    1ef4:	0b c0       	rjmp	.+22     	; 0x1f0c <__vector_1+0x40>
		SW_time_date++;
    1ef6:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    1efa:	9f 5f       	subi	r25, 0xFF	; 255
    1efc:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__data_end>
		if(SW_time_date > 3){
    1f00:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    1f04:	94 30       	cpi	r25, 0x04	; 4
    1f06:	10 f0       	brcs	.+4      	; 0x1f0c <__vector_1+0x40>
			SW_time_date = 0;
    1f08:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
		}
	}
	if(SW_time_date==0 && set==true) {
    1f0c:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    1f10:	91 11       	cpse	r25, r1
    1f12:	0c c0       	rjmp	.+24     	; 0x1f2c <__vector_1+0x60>
    1f14:	88 23       	and	r24, r24
    1f16:	51 f0       	breq	.+20     	; 0x1f2c <__vector_1+0x60>
		SW_time_date = 0;
    1f18:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
		count=0;
    1f1c:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
		bsw=0;
    1f20:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <bsw>
		FixTime();
    1f24:	0e 94 7e 01 	call	0x2fc	; 0x2fc <FixTime>
		set=false;
    1f28:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <set>
	}
	if(SW_time_date==1 && set==true) {
    1f2c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	79 f4       	brne	.+30     	; 0x1f52 <__vector_1+0x86>
    1f34:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <set>
    1f38:	88 23       	and	r24, r24
    1f3a:	59 f0       	breq	.+22     	; 0x1f52 <__vector_1+0x86>
		SW_time_date = 1;
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
		count=0;
    1f42:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
		bsw=0;
    1f46:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <bsw>
		FixTime();
    1f4a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <FixTime>
		set=false;
    1f4e:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <set>
	}
	if(SW_time_date==3 && set==true) {
    1f52:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1f56:	83 30       	cpi	r24, 0x03	; 3
    1f58:	81 f4       	brne	.+32     	; 0x1f7a <__vector_1+0xae>
    1f5a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <set>
    1f5e:	88 23       	and	r24, r24
    1f60:	61 f0       	breq	.+24     	; 0x1f7a <__vector_1+0xae>
		SW_time_date = 3;
    1f62:	83 e0       	ldi	r24, 0x03	; 3
    1f64:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
		count=0;
    1f68:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
		bsw=0;
    1f6c:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <bsw>
		EN_alarm=true;
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <EN_alarm>
		set=false;
    1f76:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <set>
	}
}
    1f7a:	ff 91       	pop	r31
    1f7c:	ef 91       	pop	r30
    1f7e:	bf 91       	pop	r27
    1f80:	af 91       	pop	r26
    1f82:	9f 91       	pop	r25
    1f84:	8f 91       	pop	r24
    1f86:	7f 91       	pop	r23
    1f88:	6f 91       	pop	r22
    1f8a:	5f 91       	pop	r21
    1f8c:	4f 91       	pop	r20
    1f8e:	3f 91       	pop	r19
    1f90:	2f 91       	pop	r18
    1f92:	0f 90       	pop	r0
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	0f 90       	pop	r0
    1f98:	1f 90       	pop	r1
    1f9a:	18 95       	reti

00001f9c <__vector_2>:


//Set time button
ISR(INT1_vect){
    1f9c:	1f 92       	push	r1
    1f9e:	0f 92       	push	r0
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	0f 92       	push	r0
    1fa4:	11 24       	eor	r1, r1
    1fa6:	8f 93       	push	r24

	if (SW_time_date==0)
    1fa8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1fac:	81 11       	cpse	r24, r1
    1fae:	12 c0       	rjmp	.+36     	; 0x1fd4 <__vector_2+0x38>
	{
		set = true;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <set>
		count++;
    1fb6:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1fba:	8f 5f       	subi	r24, 0xFF	; 255
    1fbc:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <count>
		if(count > 4) {
    1fc0:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1fc4:	85 30       	cpi	r24, 0x05	; 5
    1fc6:	30 f0       	brcs	.+12     	; 0x1fd4 <__vector_2+0x38>
			count = 0;
    1fc8:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
			bsw=0;
    1fcc:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <bsw>
			set=false;
    1fd0:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <set>
		}
	}
	if (SW_time_date==1)
    1fd4:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1fd8:	81 30       	cpi	r24, 0x01	; 1
    1fda:	89 f4       	brne	.+34     	; 0x1ffe <__vector_2+0x62>
	{
		set = true;
    1fdc:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <set>
		count++;
    1fe0:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1fe4:	8f 5f       	subi	r24, 0xFF	; 255
    1fe6:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <count>
		if(count > 3) {
    1fea:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1fee:	84 30       	cpi	r24, 0x04	; 4
    1ff0:	30 f0       	brcs	.+12     	; 0x1ffe <__vector_2+0x62>
			count = 0;
    1ff2:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
			bsw=0;
    1ff6:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <bsw>
			set=false;
    1ffa:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <set>
		}
	}
	if (SW_time_date==3)
    1ffe:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    2002:	83 30       	cpi	r24, 0x03	; 3
    2004:	e1 f4       	brne	.+56     	; 0x203e <__vector_2+0xa2>
	{
		set = true;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <set>
		count++;
    200c:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    2010:	8f 5f       	subi	r24, 0xFF	; 255
    2012:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <count>
		if(count > 2) {
    2016:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    201a:	83 30       	cpi	r24, 0x03	; 3
    201c:	80 f0       	brcs	.+32     	; 0x203e <__vector_2+0xa2>
			count = 0;
    201e:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
			bsw=0;
    2022:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <bsw>
			A_Hour=0;
    2026:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <A_Hour+0x1>
    202a:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <A_Hour>
			A_Minute=0;
    202e:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <A_Minute+0x1>
    2032:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <A_Minute>
			EN_alarm=false;
    2036:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <EN_alarm>
			set=false;
    203a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <set>
		}
	}
}
    203e:	8f 91       	pop	r24
    2040:	0f 90       	pop	r0
    2042:	0f be       	out	0x3f, r0	; 63
    2044:	0f 90       	pop	r0
    2046:	1f 90       	pop	r1
    2048:	18 95       	reti

0000204a <__vector_3>:

//increase button
ISR(INT2_vect){
    204a:	1f 92       	push	r1
    204c:	0f 92       	push	r0
    204e:	0f b6       	in	r0, 0x3f	; 63
    2050:	0f 92       	push	r0
    2052:	11 24       	eor	r1, r1
    2054:	2f 93       	push	r18
    2056:	3f 93       	push	r19
    2058:	8f 93       	push	r24
    205a:	9f 93       	push	r25
	if (EN_alarm == true && set==false)
    205c:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <EN_alarm>
    2060:	88 23       	and	r24, r24
    2062:	39 f0       	breq	.+14     	; 0x2072 <__vector_3+0x28>
    2064:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <set>
    2068:	81 11       	cpse	r24, r1
    206a:	03 c0       	rjmp	.+6      	; 0x2072 <__vector_3+0x28>
	{
		EN_alarm=false;
    206c:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <EN_alarm>
		BTN_PORTD = (0<<BUZ_LED);
    2070:	12 ba       	out	0x12, r1	; 18
	}
	if((set == true) && (SW_time_date==0)){		//icrease dd, mm, h, min
    2072:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <set>
    2076:	88 23       	and	r24, r24
    2078:	09 f4       	brne	.+2      	; 0x207c <__vector_3+0x32>
    207a:	fd c0       	rjmp	.+506    	; 0x2276 <__vector_3+0x22c>
    207c:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    2080:	91 11       	cpse	r25, r1
    2082:	f9 c0       	rjmp	.+498    	; 0x2276 <__vector_3+0x22c>
		if(count == 1) {
    2084:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    2088:	91 30       	cpi	r25, 0x01	; 1
    208a:	09 f0       	breq	.+2      	; 0x208e <__vector_3+0x44>
    208c:	a5 c0       	rjmp	.+330    	; 0x21d8 <__vector_3+0x18e>
			Date++;
    208e:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    2092:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    2096:	2f 5f       	subi	r18, 0xFF	; 255
    2098:	3f 4f       	sbci	r19, 0xFF	; 255
    209a:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    209e:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
			if(Month == 4 || Month == 6  || Month == 9  || Month == 11)
    20a2:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    20a6:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    20aa:	24 30       	cpi	r18, 0x04	; 4
    20ac:	31 05       	cpc	r19, r1
    20ae:	a9 f0       	breq	.+42     	; 0x20da <__vector_3+0x90>
    20b0:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    20b4:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    20b8:	26 30       	cpi	r18, 0x06	; 6
    20ba:	31 05       	cpc	r19, r1
    20bc:	71 f0       	breq	.+28     	; 0x20da <__vector_3+0x90>
    20be:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    20c2:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    20c6:	29 30       	cpi	r18, 0x09	; 9
    20c8:	31 05       	cpc	r19, r1
    20ca:	39 f0       	breq	.+14     	; 0x20da <__vector_3+0x90>
    20cc:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    20d0:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    20d4:	2b 30       	cpi	r18, 0x0B	; 11
    20d6:	31 05       	cpc	r19, r1
    20d8:	79 f4       	brne	.+30     	; 0x20f8 <__vector_3+0xae>
			{
				if(Date > 30)
    20da:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    20de:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    20e2:	2f 31       	cpi	r18, 0x1F	; 31
    20e4:	31 05       	cpc	r19, r1
    20e6:	0c f4       	brge	.+2      	; 0x20ea <__vector_3+0xa0>
    20e8:	c6 c0       	rjmp	.+396    	; 0x2276 <__vector_3+0x22c>
				Date=1;
    20ea:	21 e0       	ldi	r18, 0x01	; 1
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    20f2:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    20f6:	bf c0       	rjmp	.+382    	; 0x2276 <__vector_3+0x22c>
			}
			else if(Month == 1 || Month == 3  || Month == 5  || Month == 7 || Month == 8  || Month == 10  || Month == 12)
    20f8:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    20fc:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    2100:	21 30       	cpi	r18, 0x01	; 1
    2102:	31 05       	cpc	r19, r1
    2104:	51 f1       	breq	.+84     	; 0x215a <__vector_3+0x110>
    2106:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    210a:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    210e:	23 30       	cpi	r18, 0x03	; 3
    2110:	31 05       	cpc	r19, r1
    2112:	19 f1       	breq	.+70     	; 0x215a <__vector_3+0x110>
    2114:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2118:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    211c:	25 30       	cpi	r18, 0x05	; 5
    211e:	31 05       	cpc	r19, r1
    2120:	e1 f0       	breq	.+56     	; 0x215a <__vector_3+0x110>
    2122:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2126:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    212a:	27 30       	cpi	r18, 0x07	; 7
    212c:	31 05       	cpc	r19, r1
    212e:	a9 f0       	breq	.+42     	; 0x215a <__vector_3+0x110>
    2130:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2134:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    2138:	28 30       	cpi	r18, 0x08	; 8
    213a:	31 05       	cpc	r19, r1
    213c:	71 f0       	breq	.+28     	; 0x215a <__vector_3+0x110>
    213e:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2142:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    2146:	2a 30       	cpi	r18, 0x0A	; 10
    2148:	31 05       	cpc	r19, r1
    214a:	39 f0       	breq	.+14     	; 0x215a <__vector_3+0x110>
    214c:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2150:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    2154:	2c 30       	cpi	r18, 0x0C	; 12
    2156:	31 05       	cpc	r19, r1
    2158:	79 f4       	brne	.+30     	; 0x2178 <__vector_3+0x12e>
			{
				if(Date >31)
    215a:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    215e:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    2162:	20 32       	cpi	r18, 0x20	; 32
    2164:	31 05       	cpc	r19, r1
    2166:	0c f4       	brge	.+2      	; 0x216a <__vector_3+0x120>
    2168:	86 c0       	rjmp	.+268    	; 0x2276 <__vector_3+0x22c>
				Date=1;
    216a:	21 e0       	ldi	r18, 0x01	; 1
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    2172:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    2176:	7f c0       	rjmp	.+254    	; 0x2276 <__vector_3+0x22c>
			}
			
			else if(yyyy/4 == 0 && yyyy/400 == 0)
    2178:	20 91 83 00 	lds	r18, 0x0083	; 0x800083 <yyyy>
    217c:	30 91 84 00 	lds	r19, 0x0084	; 0x800084 <yyyy+0x1>
    2180:	2d 5f       	subi	r18, 0xFD	; 253
    2182:	3f 4f       	sbci	r19, 0xFF	; 255
    2184:	27 30       	cpi	r18, 0x07	; 7
    2186:	31 05       	cpc	r19, r1
    2188:	c0 f4       	brcc	.+48     	; 0x21ba <__vector_3+0x170>
    218a:	20 91 83 00 	lds	r18, 0x0083	; 0x800083 <yyyy>
    218e:	30 91 84 00 	lds	r19, 0x0084	; 0x800084 <yyyy+0x1>
    2192:	21 57       	subi	r18, 0x71	; 113
    2194:	3e 4f       	sbci	r19, 0xFE	; 254
    2196:	2f 31       	cpi	r18, 0x1F	; 31
    2198:	33 40       	sbci	r19, 0x03	; 3
    219a:	78 f4       	brcc	.+30     	; 0x21ba <__vector_3+0x170>
			{
				if(Date > 29)
    219c:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    21a0:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    21a4:	2e 31       	cpi	r18, 0x1E	; 30
    21a6:	31 05       	cpc	r19, r1
    21a8:	0c f4       	brge	.+2      	; 0x21ac <__vector_3+0x162>
    21aa:	65 c0       	rjmp	.+202    	; 0x2276 <__vector_3+0x22c>
				Date=1;
    21ac:	21 e0       	ldi	r18, 0x01	; 1
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    21b4:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    21b8:	5e c0       	rjmp	.+188    	; 0x2276 <__vector_3+0x22c>
			}
			else
			{
				if(Date > 28)
    21ba:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    21be:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    21c2:	2d 31       	cpi	r18, 0x1D	; 29
    21c4:	31 05       	cpc	r19, r1
    21c6:	0c f4       	brge	.+2      	; 0x21ca <__vector_3+0x180>
    21c8:	56 c0       	rjmp	.+172    	; 0x2276 <__vector_3+0x22c>
				Date=1;
    21ca:	21 e0       	ldi	r18, 0x01	; 1
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    21d2:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    21d6:	4f c0       	rjmp	.+158    	; 0x2276 <__vector_3+0x22c>
			}
		}
		else if(count == 2) {
    21d8:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    21dc:	92 30       	cpi	r25, 0x02	; 2
    21de:	c1 f4       	brne	.+48     	; 0x2210 <__vector_3+0x1c6>
			Month++;
    21e0:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    21e4:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    21e8:	2f 5f       	subi	r18, 0xFF	; 255
    21ea:	3f 4f       	sbci	r19, 0xFF	; 255
    21ec:	30 93 68 00 	sts	0x0068, r19	; 0x800068 <Month+0x1>
    21f0:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <Month>
			if(Month > 12) Month = 1;
    21f4:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    21f8:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    21fc:	2d 30       	cpi	r18, 0x0D	; 13
    21fe:	31 05       	cpc	r19, r1
    2200:	d4 f1       	brlt	.+116    	; 0x2276 <__vector_3+0x22c>
    2202:	21 e0       	ldi	r18, 0x01	; 1
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	30 93 68 00 	sts	0x0068, r19	; 0x800068 <Month+0x1>
    220a:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <Month>
    220e:	33 c0       	rjmp	.+102    	; 0x2276 <__vector_3+0x22c>
		}
		else if(count == 3) {
    2210:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    2214:	93 30       	cpi	r25, 0x03	; 3
    2216:	b1 f4       	brne	.+44     	; 0x2244 <__vector_3+0x1fa>
			Hour++;
    2218:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <Hour>
    221c:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <Hour+0x1>
    2220:	2f 5f       	subi	r18, 0xFF	; 255
    2222:	3f 4f       	sbci	r19, 0xFF	; 255
    2224:	30 93 6e 00 	sts	0x006E, r19	; 0x80006e <Hour+0x1>
    2228:	20 93 6d 00 	sts	0x006D, r18	; 0x80006d <Hour>
			if(Hour > 23) Hour = 0;
    222c:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <Hour>
    2230:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <Hour+0x1>
    2234:	28 31       	cpi	r18, 0x18	; 24
    2236:	31 05       	cpc	r19, r1
    2238:	f4 f0       	brlt	.+60     	; 0x2276 <__vector_3+0x22c>
    223a:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <Hour+0x1>
    223e:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <Hour>
    2242:	19 c0       	rjmp	.+50     	; 0x2276 <__vector_3+0x22c>
		}
		else if(count == 4) {
    2244:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    2248:	94 30       	cpi	r25, 0x04	; 4
    224a:	a9 f4       	brne	.+42     	; 0x2276 <__vector_3+0x22c>
			Minute++;
    224c:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <Minute>
    2250:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <Minute+0x1>
    2254:	2f 5f       	subi	r18, 0xFF	; 255
    2256:	3f 4f       	sbci	r19, 0xFF	; 255
    2258:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <Minute+0x1>
    225c:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <Minute>
			if(Minute > 59) Minute = 0;
    2260:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <Minute>
    2264:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <Minute+0x1>
    2268:	2c 33       	cpi	r18, 0x3C	; 60
    226a:	31 05       	cpc	r19, r1
    226c:	24 f0       	brlt	.+8      	; 0x2276 <__vector_3+0x22c>
    226e:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Minute+0x1>
    2272:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <Minute>
		}
	}
	
	if((set == true) && (SW_time_date==1)){		//increase dd, mm, yyyy
    2276:	88 23       	and	r24, r24
    2278:	09 f4       	brne	.+2      	; 0x227c <__vector_3+0x232>
    227a:	e3 c0       	rjmp	.+454    	; 0x2442 <__vector_3+0x3f8>
    227c:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    2280:	91 30       	cpi	r25, 0x01	; 1
    2282:	09 f0       	breq	.+2      	; 0x2286 <__vector_3+0x23c>
    2284:	de c0       	rjmp	.+444    	; 0x2442 <__vector_3+0x3f8>
		if(count == 1) {
    2286:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    228a:	91 30       	cpi	r25, 0x01	; 1
    228c:	09 f0       	breq	.+2      	; 0x2290 <__vector_3+0x246>
    228e:	a4 c0       	rjmp	.+328    	; 0x23d8 <__vector_3+0x38e>
			Date++;
    2290:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    2294:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    2298:	2f 5f       	subi	r18, 0xFF	; 255
    229a:	3f 4f       	sbci	r19, 0xFF	; 255
    229c:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    22a0:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
			if(Month == 4 || Month == 6  || Month == 9  || Month == 11)
    22a4:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    22a8:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    22ac:	24 30       	cpi	r18, 0x04	; 4
    22ae:	31 05       	cpc	r19, r1
    22b0:	a9 f0       	breq	.+42     	; 0x22dc <__vector_3+0x292>
    22b2:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    22b6:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    22ba:	26 30       	cpi	r18, 0x06	; 6
    22bc:	31 05       	cpc	r19, r1
    22be:	71 f0       	breq	.+28     	; 0x22dc <__vector_3+0x292>
    22c0:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    22c4:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    22c8:	29 30       	cpi	r18, 0x09	; 9
    22ca:	31 05       	cpc	r19, r1
    22cc:	39 f0       	breq	.+14     	; 0x22dc <__vector_3+0x292>
    22ce:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    22d2:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    22d6:	2b 30       	cpi	r18, 0x0B	; 11
    22d8:	31 05       	cpc	r19, r1
    22da:	79 f4       	brne	.+30     	; 0x22fa <__vector_3+0x2b0>
			{
				if(Date > 30)
    22dc:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    22e0:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    22e4:	2f 31       	cpi	r18, 0x1F	; 31
    22e6:	31 05       	cpc	r19, r1
    22e8:	0c f4       	brge	.+2      	; 0x22ec <__vector_3+0x2a2>
    22ea:	ab c0       	rjmp	.+342    	; 0x2442 <__vector_3+0x3f8>
				Date=1;
    22ec:	21 e0       	ldi	r18, 0x01	; 1
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    22f4:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    22f8:	a4 c0       	rjmp	.+328    	; 0x2442 <__vector_3+0x3f8>
			}
			else if(Month == 1 || Month == 3  || Month == 5  || Month == 7 || Month == 8  || Month == 10  || Month == 12)
    22fa:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    22fe:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    2302:	21 30       	cpi	r18, 0x01	; 1
    2304:	31 05       	cpc	r19, r1
    2306:	51 f1       	breq	.+84     	; 0x235c <__vector_3+0x312>
    2308:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    230c:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    2310:	23 30       	cpi	r18, 0x03	; 3
    2312:	31 05       	cpc	r19, r1
    2314:	19 f1       	breq	.+70     	; 0x235c <__vector_3+0x312>
    2316:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    231a:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    231e:	25 30       	cpi	r18, 0x05	; 5
    2320:	31 05       	cpc	r19, r1
    2322:	e1 f0       	breq	.+56     	; 0x235c <__vector_3+0x312>
    2324:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2328:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    232c:	27 30       	cpi	r18, 0x07	; 7
    232e:	31 05       	cpc	r19, r1
    2330:	a9 f0       	breq	.+42     	; 0x235c <__vector_3+0x312>
    2332:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2336:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    233a:	28 30       	cpi	r18, 0x08	; 8
    233c:	31 05       	cpc	r19, r1
    233e:	71 f0       	breq	.+28     	; 0x235c <__vector_3+0x312>
    2340:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2344:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    2348:	2a 30       	cpi	r18, 0x0A	; 10
    234a:	31 05       	cpc	r19, r1
    234c:	39 f0       	breq	.+14     	; 0x235c <__vector_3+0x312>
    234e:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2352:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    2356:	2c 30       	cpi	r18, 0x0C	; 12
    2358:	31 05       	cpc	r19, r1
    235a:	79 f4       	brne	.+30     	; 0x237a <__vector_3+0x330>
			{
				if(Date >31)
    235c:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    2360:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    2364:	20 32       	cpi	r18, 0x20	; 32
    2366:	31 05       	cpc	r19, r1
    2368:	0c f4       	brge	.+2      	; 0x236c <__vector_3+0x322>
    236a:	6b c0       	rjmp	.+214    	; 0x2442 <__vector_3+0x3f8>
				Date=1;
    236c:	21 e0       	ldi	r18, 0x01	; 1
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    2374:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    2378:	64 c0       	rjmp	.+200    	; 0x2442 <__vector_3+0x3f8>
			}
			
			else if(yyyy/4 == 0 && yyyy/400 == 0)
    237a:	20 91 83 00 	lds	r18, 0x0083	; 0x800083 <yyyy>
    237e:	30 91 84 00 	lds	r19, 0x0084	; 0x800084 <yyyy+0x1>
    2382:	2d 5f       	subi	r18, 0xFD	; 253
    2384:	3f 4f       	sbci	r19, 0xFF	; 255
    2386:	27 30       	cpi	r18, 0x07	; 7
    2388:	31 05       	cpc	r19, r1
    238a:	c0 f4       	brcc	.+48     	; 0x23bc <__vector_3+0x372>
    238c:	20 91 83 00 	lds	r18, 0x0083	; 0x800083 <yyyy>
    2390:	30 91 84 00 	lds	r19, 0x0084	; 0x800084 <yyyy+0x1>
    2394:	21 57       	subi	r18, 0x71	; 113
    2396:	3e 4f       	sbci	r19, 0xFE	; 254
    2398:	2f 31       	cpi	r18, 0x1F	; 31
    239a:	33 40       	sbci	r19, 0x03	; 3
    239c:	78 f4       	brcc	.+30     	; 0x23bc <__vector_3+0x372>
			{
				if(Date > 29)
    239e:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    23a2:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    23a6:	2e 31       	cpi	r18, 0x1E	; 30
    23a8:	31 05       	cpc	r19, r1
    23aa:	0c f4       	brge	.+2      	; 0x23ae <__vector_3+0x364>
    23ac:	4a c0       	rjmp	.+148    	; 0x2442 <__vector_3+0x3f8>
				Date=1;
    23ae:	21 e0       	ldi	r18, 0x01	; 1
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    23b6:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    23ba:	43 c0       	rjmp	.+134    	; 0x2442 <__vector_3+0x3f8>
			}
			else
			{
				if(Date > 28)
    23bc:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    23c0:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    23c4:	2d 31       	cpi	r18, 0x1D	; 29
    23c6:	31 05       	cpc	r19, r1
    23c8:	e4 f1       	brlt	.+120    	; 0x2442 <__vector_3+0x3f8>
				Date=1;
    23ca:	21 e0       	ldi	r18, 0x01	; 1
    23cc:	30 e0       	ldi	r19, 0x00	; 0
    23ce:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    23d2:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    23d6:	35 c0       	rjmp	.+106    	; 0x2442 <__vector_3+0x3f8>
			}
		}
		else if(count == 2) {
    23d8:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    23dc:	92 30       	cpi	r25, 0x02	; 2
    23de:	c1 f4       	brne	.+48     	; 0x2410 <__vector_3+0x3c6>
			Month++;
    23e0:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    23e4:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    23e8:	2f 5f       	subi	r18, 0xFF	; 255
    23ea:	3f 4f       	sbci	r19, 0xFF	; 255
    23ec:	30 93 68 00 	sts	0x0068, r19	; 0x800068 <Month+0x1>
    23f0:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <Month>
			if(Month > 12) Month = 1;
    23f4:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    23f8:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    23fc:	2d 30       	cpi	r18, 0x0D	; 13
    23fe:	31 05       	cpc	r19, r1
    2400:	04 f1       	brlt	.+64     	; 0x2442 <__vector_3+0x3f8>
    2402:	21 e0       	ldi	r18, 0x01	; 1
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	30 93 68 00 	sts	0x0068, r19	; 0x800068 <Month+0x1>
    240a:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <Month>
    240e:	19 c0       	rjmp	.+50     	; 0x2442 <__vector_3+0x3f8>
		}
		else if(count == 3) {
    2410:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    2414:	93 30       	cpi	r25, 0x03	; 3
    2416:	a9 f4       	brne	.+42     	; 0x2442 <__vector_3+0x3f8>
			Year++;
    2418:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <Year>
    241c:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <Year+0x1>
    2420:	2f 5f       	subi	r18, 0xFF	; 255
    2422:	3f 4f       	sbci	r19, 0xFF	; 255
    2424:	30 93 66 00 	sts	0x0066, r19	; 0x800066 <Year+0x1>
    2428:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Year>
			if(Year > 99) Year = 0;
    242c:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <Year>
    2430:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <Year+0x1>
    2434:	24 36       	cpi	r18, 0x64	; 100
    2436:	31 05       	cpc	r19, r1
    2438:	24 f0       	brlt	.+8      	; 0x2442 <__vector_3+0x3f8>
    243a:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Year+0x1>
    243e:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Year>
		}
	}
	
	if((set == true) && (SW_time_date==3)){		//increase alarm
    2442:	88 23       	and	r24, r24
    2444:	91 f1       	breq	.+100    	; 0x24aa <__vector_3+0x460>
    2446:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    244a:	83 30       	cpi	r24, 0x03	; 3
    244c:	71 f5       	brne	.+92     	; 0x24aa <__vector_3+0x460>

		if(count == 1) {
    244e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    2452:	81 30       	cpi	r24, 0x01	; 1
    2454:	99 f4       	brne	.+38     	; 0x247c <__vector_3+0x432>
			A_Hour++;
    2456:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <A_Hour>
    245a:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <A_Hour+0x1>
    245e:	01 96       	adiw	r24, 0x01	; 1
    2460:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <A_Hour+0x1>
    2464:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <A_Hour>
			if(A_Hour > 23) A_Hour = 0;
    2468:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <A_Hour>
    246c:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <A_Hour+0x1>
    2470:	48 97       	sbiw	r24, 0x18	; 24
    2472:	24 f0       	brlt	.+8      	; 0x247c <__vector_3+0x432>
    2474:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <A_Hour+0x1>
    2478:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <A_Hour>
		}
		if(count == 2) {
    247c:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    2480:	82 30       	cpi	r24, 0x02	; 2
    2482:	99 f4       	brne	.+38     	; 0x24aa <__vector_3+0x460>
			A_Minute++;
    2484:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <A_Minute>
    2488:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <A_Minute+0x1>
    248c:	01 96       	adiw	r24, 0x01	; 1
    248e:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <A_Minute+0x1>
    2492:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <A_Minute>
			if(A_Minute > 59) A_Minute = 0;
    2496:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <A_Minute>
    249a:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <A_Minute+0x1>
    249e:	cc 97       	sbiw	r24, 0x3c	; 60
    24a0:	24 f0       	brlt	.+8      	; 0x24aa <__vector_3+0x460>
    24a2:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <A_Minute+0x1>
    24a6:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <A_Minute>
		}
	}
}
    24aa:	9f 91       	pop	r25
    24ac:	8f 91       	pop	r24
    24ae:	3f 91       	pop	r19
    24b0:	2f 91       	pop	r18
    24b2:	0f 90       	pop	r0
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	0f 90       	pop	r0
    24b8:	1f 90       	pop	r1
    24ba:	18 95       	reti

000024bc <__subsf3>:
    24bc:	50 58       	subi	r21, 0x80	; 128

000024be <__addsf3>:
    24be:	bb 27       	eor	r27, r27
    24c0:	aa 27       	eor	r26, r26
    24c2:	0e 94 76 12 	call	0x24ec	; 0x24ec <__addsf3x>
    24c6:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__fp_round>
    24ca:	0e 94 22 14 	call	0x2844	; 0x2844 <__fp_pscA>
    24ce:	38 f0       	brcs	.+14     	; 0x24de <__addsf3+0x20>
    24d0:	0e 94 29 14 	call	0x2852	; 0x2852 <__fp_pscB>
    24d4:	20 f0       	brcs	.+8      	; 0x24de <__addsf3+0x20>
    24d6:	39 f4       	brne	.+14     	; 0x24e6 <__addsf3+0x28>
    24d8:	9f 3f       	cpi	r25, 0xFF	; 255
    24da:	19 f4       	brne	.+6      	; 0x24e2 <__addsf3+0x24>
    24dc:	26 f4       	brtc	.+8      	; 0x24e6 <__addsf3+0x28>
    24de:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__fp_nan>
    24e2:	0e f4       	brtc	.+2      	; 0x24e6 <__addsf3+0x28>
    24e4:	e0 95       	com	r30
    24e6:	e7 fb       	bst	r30, 7
    24e8:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__fp_inf>

000024ec <__addsf3x>:
    24ec:	e9 2f       	mov	r30, r25
    24ee:	0e 94 41 14 	call	0x2882	; 0x2882 <__fp_split3>
    24f2:	58 f3       	brcs	.-42     	; 0x24ca <__addsf3+0xc>
    24f4:	ba 17       	cp	r27, r26
    24f6:	62 07       	cpc	r22, r18
    24f8:	73 07       	cpc	r23, r19
    24fa:	84 07       	cpc	r24, r20
    24fc:	95 07       	cpc	r25, r21
    24fe:	20 f0       	brcs	.+8      	; 0x2508 <__addsf3x+0x1c>
    2500:	79 f4       	brne	.+30     	; 0x2520 <__addsf3x+0x34>
    2502:	a6 f5       	brtc	.+104    	; 0x256c <__addsf3x+0x80>
    2504:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__fp_zero>
    2508:	0e f4       	brtc	.+2      	; 0x250c <__addsf3x+0x20>
    250a:	e0 95       	com	r30
    250c:	0b 2e       	mov	r0, r27
    250e:	ba 2f       	mov	r27, r26
    2510:	a0 2d       	mov	r26, r0
    2512:	0b 01       	movw	r0, r22
    2514:	b9 01       	movw	r22, r18
    2516:	90 01       	movw	r18, r0
    2518:	0c 01       	movw	r0, r24
    251a:	ca 01       	movw	r24, r20
    251c:	a0 01       	movw	r20, r0
    251e:	11 24       	eor	r1, r1
    2520:	ff 27       	eor	r31, r31
    2522:	59 1b       	sub	r21, r25
    2524:	99 f0       	breq	.+38     	; 0x254c <__addsf3x+0x60>
    2526:	59 3f       	cpi	r21, 0xF9	; 249
    2528:	50 f4       	brcc	.+20     	; 0x253e <__addsf3x+0x52>
    252a:	50 3e       	cpi	r21, 0xE0	; 224
    252c:	68 f1       	brcs	.+90     	; 0x2588 <__addsf3x+0x9c>
    252e:	1a 16       	cp	r1, r26
    2530:	f0 40       	sbci	r31, 0x00	; 0
    2532:	a2 2f       	mov	r26, r18
    2534:	23 2f       	mov	r18, r19
    2536:	34 2f       	mov	r19, r20
    2538:	44 27       	eor	r20, r20
    253a:	58 5f       	subi	r21, 0xF8	; 248
    253c:	f3 cf       	rjmp	.-26     	; 0x2524 <__addsf3x+0x38>
    253e:	46 95       	lsr	r20
    2540:	37 95       	ror	r19
    2542:	27 95       	ror	r18
    2544:	a7 95       	ror	r26
    2546:	f0 40       	sbci	r31, 0x00	; 0
    2548:	53 95       	inc	r21
    254a:	c9 f7       	brne	.-14     	; 0x253e <__addsf3x+0x52>
    254c:	7e f4       	brtc	.+30     	; 0x256c <__addsf3x+0x80>
    254e:	1f 16       	cp	r1, r31
    2550:	ba 0b       	sbc	r27, r26
    2552:	62 0b       	sbc	r22, r18
    2554:	73 0b       	sbc	r23, r19
    2556:	84 0b       	sbc	r24, r20
    2558:	ba f0       	brmi	.+46     	; 0x2588 <__addsf3x+0x9c>
    255a:	91 50       	subi	r25, 0x01	; 1
    255c:	a1 f0       	breq	.+40     	; 0x2586 <__addsf3x+0x9a>
    255e:	ff 0f       	add	r31, r31
    2560:	bb 1f       	adc	r27, r27
    2562:	66 1f       	adc	r22, r22
    2564:	77 1f       	adc	r23, r23
    2566:	88 1f       	adc	r24, r24
    2568:	c2 f7       	brpl	.-16     	; 0x255a <__addsf3x+0x6e>
    256a:	0e c0       	rjmp	.+28     	; 0x2588 <__addsf3x+0x9c>
    256c:	ba 0f       	add	r27, r26
    256e:	62 1f       	adc	r22, r18
    2570:	73 1f       	adc	r23, r19
    2572:	84 1f       	adc	r24, r20
    2574:	48 f4       	brcc	.+18     	; 0x2588 <__addsf3x+0x9c>
    2576:	87 95       	ror	r24
    2578:	77 95       	ror	r23
    257a:	67 95       	ror	r22
    257c:	b7 95       	ror	r27
    257e:	f7 95       	ror	r31
    2580:	9e 3f       	cpi	r25, 0xFE	; 254
    2582:	08 f0       	brcs	.+2      	; 0x2586 <__addsf3x+0x9a>
    2584:	b0 cf       	rjmp	.-160    	; 0x24e6 <__addsf3+0x28>
    2586:	93 95       	inc	r25
    2588:	88 0f       	add	r24, r24
    258a:	08 f0       	brcs	.+2      	; 0x258e <__addsf3x+0xa2>
    258c:	99 27       	eor	r25, r25
    258e:	ee 0f       	add	r30, r30
    2590:	97 95       	ror	r25
    2592:	87 95       	ror	r24
    2594:	08 95       	ret

00002596 <__cmpsf2>:
    2596:	0e 94 cc 13 	call	0x2798	; 0x2798 <__fp_cmp>
    259a:	08 f4       	brcc	.+2      	; 0x259e <__cmpsf2+0x8>
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	08 95       	ret

000025a0 <__divsf3>:
    25a0:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <__divsf3x>
    25a4:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__fp_round>
    25a8:	0e 94 29 14 	call	0x2852	; 0x2852 <__fp_pscB>
    25ac:	58 f0       	brcs	.+22     	; 0x25c4 <__divsf3+0x24>
    25ae:	0e 94 22 14 	call	0x2844	; 0x2844 <__fp_pscA>
    25b2:	40 f0       	brcs	.+16     	; 0x25c4 <__divsf3+0x24>
    25b4:	29 f4       	brne	.+10     	; 0x25c0 <__divsf3+0x20>
    25b6:	5f 3f       	cpi	r21, 0xFF	; 255
    25b8:	29 f0       	breq	.+10     	; 0x25c4 <__divsf3+0x24>
    25ba:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__fp_inf>
    25be:	51 11       	cpse	r21, r1
    25c0:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__fp_szero>
    25c4:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__fp_nan>

000025c8 <__divsf3x>:
    25c8:	0e 94 41 14 	call	0x2882	; 0x2882 <__fp_split3>
    25cc:	68 f3       	brcs	.-38     	; 0x25a8 <__divsf3+0x8>

000025ce <__divsf3_pse>:
    25ce:	99 23       	and	r25, r25
    25d0:	b1 f3       	breq	.-20     	; 0x25be <__divsf3+0x1e>
    25d2:	55 23       	and	r21, r21
    25d4:	91 f3       	breq	.-28     	; 0x25ba <__divsf3+0x1a>
    25d6:	95 1b       	sub	r25, r21
    25d8:	55 0b       	sbc	r21, r21
    25da:	bb 27       	eor	r27, r27
    25dc:	aa 27       	eor	r26, r26
    25de:	62 17       	cp	r22, r18
    25e0:	73 07       	cpc	r23, r19
    25e2:	84 07       	cpc	r24, r20
    25e4:	38 f0       	brcs	.+14     	; 0x25f4 <__divsf3_pse+0x26>
    25e6:	9f 5f       	subi	r25, 0xFF	; 255
    25e8:	5f 4f       	sbci	r21, 0xFF	; 255
    25ea:	22 0f       	add	r18, r18
    25ec:	33 1f       	adc	r19, r19
    25ee:	44 1f       	adc	r20, r20
    25f0:	aa 1f       	adc	r26, r26
    25f2:	a9 f3       	breq	.-22     	; 0x25de <__divsf3_pse+0x10>
    25f4:	35 d0       	rcall	.+106    	; 0x2660 <__divsf3_pse+0x92>
    25f6:	0e 2e       	mov	r0, r30
    25f8:	3a f0       	brmi	.+14     	; 0x2608 <__divsf3_pse+0x3a>
    25fa:	e0 e8       	ldi	r30, 0x80	; 128
    25fc:	32 d0       	rcall	.+100    	; 0x2662 <__divsf3_pse+0x94>
    25fe:	91 50       	subi	r25, 0x01	; 1
    2600:	50 40       	sbci	r21, 0x00	; 0
    2602:	e6 95       	lsr	r30
    2604:	00 1c       	adc	r0, r0
    2606:	ca f7       	brpl	.-14     	; 0x25fa <__divsf3_pse+0x2c>
    2608:	2b d0       	rcall	.+86     	; 0x2660 <__divsf3_pse+0x92>
    260a:	fe 2f       	mov	r31, r30
    260c:	29 d0       	rcall	.+82     	; 0x2660 <__divsf3_pse+0x92>
    260e:	66 0f       	add	r22, r22
    2610:	77 1f       	adc	r23, r23
    2612:	88 1f       	adc	r24, r24
    2614:	bb 1f       	adc	r27, r27
    2616:	26 17       	cp	r18, r22
    2618:	37 07       	cpc	r19, r23
    261a:	48 07       	cpc	r20, r24
    261c:	ab 07       	cpc	r26, r27
    261e:	b0 e8       	ldi	r27, 0x80	; 128
    2620:	09 f0       	breq	.+2      	; 0x2624 <__divsf3_pse+0x56>
    2622:	bb 0b       	sbc	r27, r27
    2624:	80 2d       	mov	r24, r0
    2626:	bf 01       	movw	r22, r30
    2628:	ff 27       	eor	r31, r31
    262a:	93 58       	subi	r25, 0x83	; 131
    262c:	5f 4f       	sbci	r21, 0xFF	; 255
    262e:	3a f0       	brmi	.+14     	; 0x263e <__divsf3_pse+0x70>
    2630:	9e 3f       	cpi	r25, 0xFE	; 254
    2632:	51 05       	cpc	r21, r1
    2634:	78 f0       	brcs	.+30     	; 0x2654 <__divsf3_pse+0x86>
    2636:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__fp_inf>
    263a:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__fp_szero>
    263e:	5f 3f       	cpi	r21, 0xFF	; 255
    2640:	e4 f3       	brlt	.-8      	; 0x263a <__divsf3_pse+0x6c>
    2642:	98 3e       	cpi	r25, 0xE8	; 232
    2644:	d4 f3       	brlt	.-12     	; 0x263a <__divsf3_pse+0x6c>
    2646:	86 95       	lsr	r24
    2648:	77 95       	ror	r23
    264a:	67 95       	ror	r22
    264c:	b7 95       	ror	r27
    264e:	f7 95       	ror	r31
    2650:	9f 5f       	subi	r25, 0xFF	; 255
    2652:	c9 f7       	brne	.-14     	; 0x2646 <__divsf3_pse+0x78>
    2654:	88 0f       	add	r24, r24
    2656:	91 1d       	adc	r25, r1
    2658:	96 95       	lsr	r25
    265a:	87 95       	ror	r24
    265c:	97 f9       	bld	r25, 7
    265e:	08 95       	ret
    2660:	e1 e0       	ldi	r30, 0x01	; 1
    2662:	66 0f       	add	r22, r22
    2664:	77 1f       	adc	r23, r23
    2666:	88 1f       	adc	r24, r24
    2668:	bb 1f       	adc	r27, r27
    266a:	62 17       	cp	r22, r18
    266c:	73 07       	cpc	r23, r19
    266e:	84 07       	cpc	r24, r20
    2670:	ba 07       	cpc	r27, r26
    2672:	20 f0       	brcs	.+8      	; 0x267c <__divsf3_pse+0xae>
    2674:	62 1b       	sub	r22, r18
    2676:	73 0b       	sbc	r23, r19
    2678:	84 0b       	sbc	r24, r20
    267a:	ba 0b       	sbc	r27, r26
    267c:	ee 1f       	adc	r30, r30
    267e:	88 f7       	brcc	.-30     	; 0x2662 <__divsf3_pse+0x94>
    2680:	e0 95       	com	r30
    2682:	08 95       	ret

00002684 <__fixsfsi>:
    2684:	0e 94 49 13 	call	0x2692	; 0x2692 <__fixunssfsi>
    2688:	68 94       	set
    268a:	b1 11       	cpse	r27, r1
    268c:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__fp_szero>
    2690:	08 95       	ret

00002692 <__fixunssfsi>:
    2692:	0e 94 49 14 	call	0x2892	; 0x2892 <__fp_splitA>
    2696:	88 f0       	brcs	.+34     	; 0x26ba <__fixunssfsi+0x28>
    2698:	9f 57       	subi	r25, 0x7F	; 127
    269a:	98 f0       	brcs	.+38     	; 0x26c2 <__fixunssfsi+0x30>
    269c:	b9 2f       	mov	r27, r25
    269e:	99 27       	eor	r25, r25
    26a0:	b7 51       	subi	r27, 0x17	; 23
    26a2:	b0 f0       	brcs	.+44     	; 0x26d0 <__fixunssfsi+0x3e>
    26a4:	e1 f0       	breq	.+56     	; 0x26de <__fixunssfsi+0x4c>
    26a6:	66 0f       	add	r22, r22
    26a8:	77 1f       	adc	r23, r23
    26aa:	88 1f       	adc	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	1a f0       	brmi	.+6      	; 0x26b6 <__fixunssfsi+0x24>
    26b0:	ba 95       	dec	r27
    26b2:	c9 f7       	brne	.-14     	; 0x26a6 <__fixunssfsi+0x14>
    26b4:	14 c0       	rjmp	.+40     	; 0x26de <__fixunssfsi+0x4c>
    26b6:	b1 30       	cpi	r27, 0x01	; 1
    26b8:	91 f0       	breq	.+36     	; 0x26de <__fixunssfsi+0x4c>
    26ba:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <__fp_zero>
    26be:	b1 e0       	ldi	r27, 0x01	; 1
    26c0:	08 95       	ret
    26c2:	0c 94 7b 14 	jmp	0x28f6	; 0x28f6 <__fp_zero>
    26c6:	67 2f       	mov	r22, r23
    26c8:	78 2f       	mov	r23, r24
    26ca:	88 27       	eor	r24, r24
    26cc:	b8 5f       	subi	r27, 0xF8	; 248
    26ce:	39 f0       	breq	.+14     	; 0x26de <__fixunssfsi+0x4c>
    26d0:	b9 3f       	cpi	r27, 0xF9	; 249
    26d2:	cc f3       	brlt	.-14     	; 0x26c6 <__fixunssfsi+0x34>
    26d4:	86 95       	lsr	r24
    26d6:	77 95       	ror	r23
    26d8:	67 95       	ror	r22
    26da:	b3 95       	inc	r27
    26dc:	d9 f7       	brne	.-10     	; 0x26d4 <__fixunssfsi+0x42>
    26de:	3e f4       	brtc	.+14     	; 0x26ee <__fixunssfsi+0x5c>
    26e0:	90 95       	com	r25
    26e2:	80 95       	com	r24
    26e4:	70 95       	com	r23
    26e6:	61 95       	neg	r22
    26e8:	7f 4f       	sbci	r23, 0xFF	; 255
    26ea:	8f 4f       	sbci	r24, 0xFF	; 255
    26ec:	9f 4f       	sbci	r25, 0xFF	; 255
    26ee:	08 95       	ret

000026f0 <__floatunsisf>:
    26f0:	e8 94       	clt
    26f2:	09 c0       	rjmp	.+18     	; 0x2706 <__floatsisf+0x12>

000026f4 <__floatsisf>:
    26f4:	97 fb       	bst	r25, 7
    26f6:	3e f4       	brtc	.+14     	; 0x2706 <__floatsisf+0x12>
    26f8:	90 95       	com	r25
    26fa:	80 95       	com	r24
    26fc:	70 95       	com	r23
    26fe:	61 95       	neg	r22
    2700:	7f 4f       	sbci	r23, 0xFF	; 255
    2702:	8f 4f       	sbci	r24, 0xFF	; 255
    2704:	9f 4f       	sbci	r25, 0xFF	; 255
    2706:	99 23       	and	r25, r25
    2708:	a9 f0       	breq	.+42     	; 0x2734 <__floatsisf+0x40>
    270a:	f9 2f       	mov	r31, r25
    270c:	96 e9       	ldi	r25, 0x96	; 150
    270e:	bb 27       	eor	r27, r27
    2710:	93 95       	inc	r25
    2712:	f6 95       	lsr	r31
    2714:	87 95       	ror	r24
    2716:	77 95       	ror	r23
    2718:	67 95       	ror	r22
    271a:	b7 95       	ror	r27
    271c:	f1 11       	cpse	r31, r1
    271e:	f8 cf       	rjmp	.-16     	; 0x2710 <__floatsisf+0x1c>
    2720:	fa f4       	brpl	.+62     	; 0x2760 <__floatsisf+0x6c>
    2722:	bb 0f       	add	r27, r27
    2724:	11 f4       	brne	.+4      	; 0x272a <__floatsisf+0x36>
    2726:	60 ff       	sbrs	r22, 0
    2728:	1b c0       	rjmp	.+54     	; 0x2760 <__floatsisf+0x6c>
    272a:	6f 5f       	subi	r22, 0xFF	; 255
    272c:	7f 4f       	sbci	r23, 0xFF	; 255
    272e:	8f 4f       	sbci	r24, 0xFF	; 255
    2730:	9f 4f       	sbci	r25, 0xFF	; 255
    2732:	16 c0       	rjmp	.+44     	; 0x2760 <__floatsisf+0x6c>
    2734:	88 23       	and	r24, r24
    2736:	11 f0       	breq	.+4      	; 0x273c <__floatsisf+0x48>
    2738:	96 e9       	ldi	r25, 0x96	; 150
    273a:	11 c0       	rjmp	.+34     	; 0x275e <__floatsisf+0x6a>
    273c:	77 23       	and	r23, r23
    273e:	21 f0       	breq	.+8      	; 0x2748 <__floatsisf+0x54>
    2740:	9e e8       	ldi	r25, 0x8E	; 142
    2742:	87 2f       	mov	r24, r23
    2744:	76 2f       	mov	r23, r22
    2746:	05 c0       	rjmp	.+10     	; 0x2752 <__floatsisf+0x5e>
    2748:	66 23       	and	r22, r22
    274a:	71 f0       	breq	.+28     	; 0x2768 <__floatsisf+0x74>
    274c:	96 e8       	ldi	r25, 0x86	; 134
    274e:	86 2f       	mov	r24, r22
    2750:	70 e0       	ldi	r23, 0x00	; 0
    2752:	60 e0       	ldi	r22, 0x00	; 0
    2754:	2a f0       	brmi	.+10     	; 0x2760 <__floatsisf+0x6c>
    2756:	9a 95       	dec	r25
    2758:	66 0f       	add	r22, r22
    275a:	77 1f       	adc	r23, r23
    275c:	88 1f       	adc	r24, r24
    275e:	da f7       	brpl	.-10     	; 0x2756 <__floatsisf+0x62>
    2760:	88 0f       	add	r24, r24
    2762:	96 95       	lsr	r25
    2764:	87 95       	ror	r24
    2766:	97 f9       	bld	r25, 7
    2768:	08 95       	ret

0000276a <floor>:
    276a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <__fp_trunc>
    276e:	90 f0       	brcs	.+36     	; 0x2794 <floor+0x2a>
    2770:	9f 37       	cpi	r25, 0x7F	; 127
    2772:	48 f4       	brcc	.+18     	; 0x2786 <floor+0x1c>
    2774:	91 11       	cpse	r25, r1
    2776:	16 f0       	brts	.+4      	; 0x277c <floor+0x12>
    2778:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__fp_szero>
    277c:	60 e0       	ldi	r22, 0x00	; 0
    277e:	70 e0       	ldi	r23, 0x00	; 0
    2780:	80 e8       	ldi	r24, 0x80	; 128
    2782:	9f eb       	ldi	r25, 0xBF	; 191
    2784:	08 95       	ret
    2786:	26 f4       	brtc	.+8      	; 0x2790 <floor+0x26>
    2788:	1b 16       	cp	r1, r27
    278a:	61 1d       	adc	r22, r1
    278c:	71 1d       	adc	r23, r1
    278e:	81 1d       	adc	r24, r1
    2790:	0c 94 f6 13 	jmp	0x27ec	; 0x27ec <__fp_mintl>
    2794:	0c 94 11 14 	jmp	0x2822	; 0x2822 <__fp_mpack>

00002798 <__fp_cmp>:
    2798:	99 0f       	add	r25, r25
    279a:	00 08       	sbc	r0, r0
    279c:	55 0f       	add	r21, r21
    279e:	aa 0b       	sbc	r26, r26
    27a0:	e0 e8       	ldi	r30, 0x80	; 128
    27a2:	fe ef       	ldi	r31, 0xFE	; 254
    27a4:	16 16       	cp	r1, r22
    27a6:	17 06       	cpc	r1, r23
    27a8:	e8 07       	cpc	r30, r24
    27aa:	f9 07       	cpc	r31, r25
    27ac:	c0 f0       	brcs	.+48     	; 0x27de <__fp_cmp+0x46>
    27ae:	12 16       	cp	r1, r18
    27b0:	13 06       	cpc	r1, r19
    27b2:	e4 07       	cpc	r30, r20
    27b4:	f5 07       	cpc	r31, r21
    27b6:	98 f0       	brcs	.+38     	; 0x27de <__fp_cmp+0x46>
    27b8:	62 1b       	sub	r22, r18
    27ba:	73 0b       	sbc	r23, r19
    27bc:	84 0b       	sbc	r24, r20
    27be:	95 0b       	sbc	r25, r21
    27c0:	39 f4       	brne	.+14     	; 0x27d0 <__fp_cmp+0x38>
    27c2:	0a 26       	eor	r0, r26
    27c4:	61 f0       	breq	.+24     	; 0x27de <__fp_cmp+0x46>
    27c6:	23 2b       	or	r18, r19
    27c8:	24 2b       	or	r18, r20
    27ca:	25 2b       	or	r18, r21
    27cc:	21 f4       	brne	.+8      	; 0x27d6 <__fp_cmp+0x3e>
    27ce:	08 95       	ret
    27d0:	0a 26       	eor	r0, r26
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <__fp_cmp+0x3e>
    27d4:	a1 40       	sbci	r26, 0x01	; 1
    27d6:	a6 95       	lsr	r26
    27d8:	8f ef       	ldi	r24, 0xFF	; 255
    27da:	81 1d       	adc	r24, r1
    27dc:	81 1d       	adc	r24, r1
    27de:	08 95       	ret

000027e0 <__fp_inf>:
    27e0:	97 f9       	bld	r25, 7
    27e2:	9f 67       	ori	r25, 0x7F	; 127
    27e4:	80 e8       	ldi	r24, 0x80	; 128
    27e6:	70 e0       	ldi	r23, 0x00	; 0
    27e8:	60 e0       	ldi	r22, 0x00	; 0
    27ea:	08 95       	ret

000027ec <__fp_mintl>:
    27ec:	88 23       	and	r24, r24
    27ee:	71 f4       	brne	.+28     	; 0x280c <__fp_mintl+0x20>
    27f0:	77 23       	and	r23, r23
    27f2:	21 f0       	breq	.+8      	; 0x27fc <__fp_mintl+0x10>
    27f4:	98 50       	subi	r25, 0x08	; 8
    27f6:	87 2b       	or	r24, r23
    27f8:	76 2f       	mov	r23, r22
    27fa:	07 c0       	rjmp	.+14     	; 0x280a <__fp_mintl+0x1e>
    27fc:	66 23       	and	r22, r22
    27fe:	11 f4       	brne	.+4      	; 0x2804 <__fp_mintl+0x18>
    2800:	99 27       	eor	r25, r25
    2802:	0d c0       	rjmp	.+26     	; 0x281e <__fp_mintl+0x32>
    2804:	90 51       	subi	r25, 0x10	; 16
    2806:	86 2b       	or	r24, r22
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	60 e0       	ldi	r22, 0x00	; 0
    280c:	2a f0       	brmi	.+10     	; 0x2818 <__fp_mintl+0x2c>
    280e:	9a 95       	dec	r25
    2810:	66 0f       	add	r22, r22
    2812:	77 1f       	adc	r23, r23
    2814:	88 1f       	adc	r24, r24
    2816:	da f7       	brpl	.-10     	; 0x280e <__fp_mintl+0x22>
    2818:	88 0f       	add	r24, r24
    281a:	96 95       	lsr	r25
    281c:	87 95       	ror	r24
    281e:	97 f9       	bld	r25, 7
    2820:	08 95       	ret

00002822 <__fp_mpack>:
    2822:	9f 3f       	cpi	r25, 0xFF	; 255
    2824:	31 f0       	breq	.+12     	; 0x2832 <__fp_mpack_finite+0xc>

00002826 <__fp_mpack_finite>:
    2826:	91 50       	subi	r25, 0x01	; 1
    2828:	20 f4       	brcc	.+8      	; 0x2832 <__fp_mpack_finite+0xc>
    282a:	87 95       	ror	r24
    282c:	77 95       	ror	r23
    282e:	67 95       	ror	r22
    2830:	b7 95       	ror	r27
    2832:	88 0f       	add	r24, r24
    2834:	91 1d       	adc	r25, r1
    2836:	96 95       	lsr	r25
    2838:	87 95       	ror	r24
    283a:	97 f9       	bld	r25, 7
    283c:	08 95       	ret

0000283e <__fp_nan>:
    283e:	9f ef       	ldi	r25, 0xFF	; 255
    2840:	80 ec       	ldi	r24, 0xC0	; 192
    2842:	08 95       	ret

00002844 <__fp_pscA>:
    2844:	00 24       	eor	r0, r0
    2846:	0a 94       	dec	r0
    2848:	16 16       	cp	r1, r22
    284a:	17 06       	cpc	r1, r23
    284c:	18 06       	cpc	r1, r24
    284e:	09 06       	cpc	r0, r25
    2850:	08 95       	ret

00002852 <__fp_pscB>:
    2852:	00 24       	eor	r0, r0
    2854:	0a 94       	dec	r0
    2856:	12 16       	cp	r1, r18
    2858:	13 06       	cpc	r1, r19
    285a:	14 06       	cpc	r1, r20
    285c:	05 06       	cpc	r0, r21
    285e:	08 95       	ret

00002860 <__fp_round>:
    2860:	09 2e       	mov	r0, r25
    2862:	03 94       	inc	r0
    2864:	00 0c       	add	r0, r0
    2866:	11 f4       	brne	.+4      	; 0x286c <__fp_round+0xc>
    2868:	88 23       	and	r24, r24
    286a:	52 f0       	brmi	.+20     	; 0x2880 <__fp_round+0x20>
    286c:	bb 0f       	add	r27, r27
    286e:	40 f4       	brcc	.+16     	; 0x2880 <__fp_round+0x20>
    2870:	bf 2b       	or	r27, r31
    2872:	11 f4       	brne	.+4      	; 0x2878 <__fp_round+0x18>
    2874:	60 ff       	sbrs	r22, 0
    2876:	04 c0       	rjmp	.+8      	; 0x2880 <__fp_round+0x20>
    2878:	6f 5f       	subi	r22, 0xFF	; 255
    287a:	7f 4f       	sbci	r23, 0xFF	; 255
    287c:	8f 4f       	sbci	r24, 0xFF	; 255
    287e:	9f 4f       	sbci	r25, 0xFF	; 255
    2880:	08 95       	ret

00002882 <__fp_split3>:
    2882:	57 fd       	sbrc	r21, 7
    2884:	90 58       	subi	r25, 0x80	; 128
    2886:	44 0f       	add	r20, r20
    2888:	55 1f       	adc	r21, r21
    288a:	59 f0       	breq	.+22     	; 0x28a2 <__fp_splitA+0x10>
    288c:	5f 3f       	cpi	r21, 0xFF	; 255
    288e:	71 f0       	breq	.+28     	; 0x28ac <__fp_splitA+0x1a>
    2890:	47 95       	ror	r20

00002892 <__fp_splitA>:
    2892:	88 0f       	add	r24, r24
    2894:	97 fb       	bst	r25, 7
    2896:	99 1f       	adc	r25, r25
    2898:	61 f0       	breq	.+24     	; 0x28b2 <__fp_splitA+0x20>
    289a:	9f 3f       	cpi	r25, 0xFF	; 255
    289c:	79 f0       	breq	.+30     	; 0x28bc <__fp_splitA+0x2a>
    289e:	87 95       	ror	r24
    28a0:	08 95       	ret
    28a2:	12 16       	cp	r1, r18
    28a4:	13 06       	cpc	r1, r19
    28a6:	14 06       	cpc	r1, r20
    28a8:	55 1f       	adc	r21, r21
    28aa:	f2 cf       	rjmp	.-28     	; 0x2890 <__fp_split3+0xe>
    28ac:	46 95       	lsr	r20
    28ae:	f1 df       	rcall	.-30     	; 0x2892 <__fp_splitA>
    28b0:	08 c0       	rjmp	.+16     	; 0x28c2 <__fp_splitA+0x30>
    28b2:	16 16       	cp	r1, r22
    28b4:	17 06       	cpc	r1, r23
    28b6:	18 06       	cpc	r1, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	f1 cf       	rjmp	.-30     	; 0x289e <__fp_splitA+0xc>
    28bc:	86 95       	lsr	r24
    28be:	71 05       	cpc	r23, r1
    28c0:	61 05       	cpc	r22, r1
    28c2:	08 94       	sec
    28c4:	08 95       	ret

000028c6 <__fp_trunc>:
    28c6:	0e 94 49 14 	call	0x2892	; 0x2892 <__fp_splitA>
    28ca:	a0 f0       	brcs	.+40     	; 0x28f4 <__fp_trunc+0x2e>
    28cc:	be e7       	ldi	r27, 0x7E	; 126
    28ce:	b9 17       	cp	r27, r25
    28d0:	88 f4       	brcc	.+34     	; 0x28f4 <__fp_trunc+0x2e>
    28d2:	bb 27       	eor	r27, r27
    28d4:	9f 38       	cpi	r25, 0x8F	; 143
    28d6:	60 f4       	brcc	.+24     	; 0x28f0 <__fp_trunc+0x2a>
    28d8:	16 16       	cp	r1, r22
    28da:	b1 1d       	adc	r27, r1
    28dc:	67 2f       	mov	r22, r23
    28de:	78 2f       	mov	r23, r24
    28e0:	88 27       	eor	r24, r24
    28e2:	98 5f       	subi	r25, 0xF8	; 248
    28e4:	f7 cf       	rjmp	.-18     	; 0x28d4 <__fp_trunc+0xe>
    28e6:	86 95       	lsr	r24
    28e8:	77 95       	ror	r23
    28ea:	67 95       	ror	r22
    28ec:	b1 1d       	adc	r27, r1
    28ee:	93 95       	inc	r25
    28f0:	96 39       	cpi	r25, 0x96	; 150
    28f2:	c8 f3       	brcs	.-14     	; 0x28e6 <__fp_trunc+0x20>
    28f4:	08 95       	ret

000028f6 <__fp_zero>:
    28f6:	e8 94       	clt

000028f8 <__fp_szero>:
    28f8:	bb 27       	eor	r27, r27
    28fa:	66 27       	eor	r22, r22
    28fc:	77 27       	eor	r23, r23
    28fe:	cb 01       	movw	r24, r22
    2900:	97 f9       	bld	r25, 7
    2902:	08 95       	ret

00002904 <__gesf2>:
    2904:	0e 94 cc 13 	call	0x2798	; 0x2798 <__fp_cmp>
    2908:	08 f4       	brcc	.+2      	; 0x290c <__gesf2+0x8>
    290a:	8f ef       	ldi	r24, 0xFF	; 255
    290c:	08 95       	ret

0000290e <__mulsf3>:
    290e:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3x>
    2912:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__fp_round>
    2916:	0e 94 22 14 	call	0x2844	; 0x2844 <__fp_pscA>
    291a:	38 f0       	brcs	.+14     	; 0x292a <__mulsf3+0x1c>
    291c:	0e 94 29 14 	call	0x2852	; 0x2852 <__fp_pscB>
    2920:	20 f0       	brcs	.+8      	; 0x292a <__mulsf3+0x1c>
    2922:	95 23       	and	r25, r21
    2924:	11 f0       	breq	.+4      	; 0x292a <__mulsf3+0x1c>
    2926:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__fp_inf>
    292a:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__fp_nan>
    292e:	11 24       	eor	r1, r1
    2930:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__fp_szero>

00002934 <__mulsf3x>:
    2934:	0e 94 41 14 	call	0x2882	; 0x2882 <__fp_split3>
    2938:	70 f3       	brcs	.-36     	; 0x2916 <__mulsf3+0x8>

0000293a <__mulsf3_pse>:
    293a:	95 9f       	mul	r25, r21
    293c:	c1 f3       	breq	.-16     	; 0x292e <__mulsf3+0x20>
    293e:	95 0f       	add	r25, r21
    2940:	50 e0       	ldi	r21, 0x00	; 0
    2942:	55 1f       	adc	r21, r21
    2944:	62 9f       	mul	r22, r18
    2946:	f0 01       	movw	r30, r0
    2948:	72 9f       	mul	r23, r18
    294a:	bb 27       	eor	r27, r27
    294c:	f0 0d       	add	r31, r0
    294e:	b1 1d       	adc	r27, r1
    2950:	63 9f       	mul	r22, r19
    2952:	aa 27       	eor	r26, r26
    2954:	f0 0d       	add	r31, r0
    2956:	b1 1d       	adc	r27, r1
    2958:	aa 1f       	adc	r26, r26
    295a:	64 9f       	mul	r22, r20
    295c:	66 27       	eor	r22, r22
    295e:	b0 0d       	add	r27, r0
    2960:	a1 1d       	adc	r26, r1
    2962:	66 1f       	adc	r22, r22
    2964:	82 9f       	mul	r24, r18
    2966:	22 27       	eor	r18, r18
    2968:	b0 0d       	add	r27, r0
    296a:	a1 1d       	adc	r26, r1
    296c:	62 1f       	adc	r22, r18
    296e:	73 9f       	mul	r23, r19
    2970:	b0 0d       	add	r27, r0
    2972:	a1 1d       	adc	r26, r1
    2974:	62 1f       	adc	r22, r18
    2976:	83 9f       	mul	r24, r19
    2978:	a0 0d       	add	r26, r0
    297a:	61 1d       	adc	r22, r1
    297c:	22 1f       	adc	r18, r18
    297e:	74 9f       	mul	r23, r20
    2980:	33 27       	eor	r19, r19
    2982:	a0 0d       	add	r26, r0
    2984:	61 1d       	adc	r22, r1
    2986:	23 1f       	adc	r18, r19
    2988:	84 9f       	mul	r24, r20
    298a:	60 0d       	add	r22, r0
    298c:	21 1d       	adc	r18, r1
    298e:	82 2f       	mov	r24, r18
    2990:	76 2f       	mov	r23, r22
    2992:	6a 2f       	mov	r22, r26
    2994:	11 24       	eor	r1, r1
    2996:	9f 57       	subi	r25, 0x7F	; 127
    2998:	50 40       	sbci	r21, 0x00	; 0
    299a:	9a f0       	brmi	.+38     	; 0x29c2 <__mulsf3_pse+0x88>
    299c:	f1 f0       	breq	.+60     	; 0x29da <__mulsf3_pse+0xa0>
    299e:	88 23       	and	r24, r24
    29a0:	4a f0       	brmi	.+18     	; 0x29b4 <__mulsf3_pse+0x7a>
    29a2:	ee 0f       	add	r30, r30
    29a4:	ff 1f       	adc	r31, r31
    29a6:	bb 1f       	adc	r27, r27
    29a8:	66 1f       	adc	r22, r22
    29aa:	77 1f       	adc	r23, r23
    29ac:	88 1f       	adc	r24, r24
    29ae:	91 50       	subi	r25, 0x01	; 1
    29b0:	50 40       	sbci	r21, 0x00	; 0
    29b2:	a9 f7       	brne	.-22     	; 0x299e <__mulsf3_pse+0x64>
    29b4:	9e 3f       	cpi	r25, 0xFE	; 254
    29b6:	51 05       	cpc	r21, r1
    29b8:	80 f0       	brcs	.+32     	; 0x29da <__mulsf3_pse+0xa0>
    29ba:	0c 94 f0 13 	jmp	0x27e0	; 0x27e0 <__fp_inf>
    29be:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__fp_szero>
    29c2:	5f 3f       	cpi	r21, 0xFF	; 255
    29c4:	e4 f3       	brlt	.-8      	; 0x29be <__mulsf3_pse+0x84>
    29c6:	98 3e       	cpi	r25, 0xE8	; 232
    29c8:	d4 f3       	brlt	.-12     	; 0x29be <__mulsf3_pse+0x84>
    29ca:	86 95       	lsr	r24
    29cc:	77 95       	ror	r23
    29ce:	67 95       	ror	r22
    29d0:	b7 95       	ror	r27
    29d2:	f7 95       	ror	r31
    29d4:	e7 95       	ror	r30
    29d6:	9f 5f       	subi	r25, 0xFF	; 255
    29d8:	c1 f7       	brne	.-16     	; 0x29ca <__mulsf3_pse+0x90>
    29da:	fe 2b       	or	r31, r30
    29dc:	88 0f       	add	r24, r24
    29de:	91 1d       	adc	r25, r1
    29e0:	96 95       	lsr	r25
    29e2:	87 95       	ror	r24
    29e4:	97 f9       	bld	r25, 7
    29e6:	08 95       	ret

000029e8 <sin>:
    29e8:	9f 93       	push	r25
    29ea:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__fp_rempio2>
    29ee:	0f 90       	pop	r0
    29f0:	07 fc       	sbrc	r0, 7
    29f2:	ee 5f       	subi	r30, 0xFE	; 254
    29f4:	0c 94 27 15 	jmp	0x2a4e	; 0x2a4e <__fp_sinus>
    29f8:	0c 94 1f 14 	jmp	0x283e	; 0x283e <__fp_nan>

000029fc <__fp_rempio2>:
    29fc:	0e 94 49 14 	call	0x2892	; 0x2892 <__fp_splitA>
    2a00:	d8 f3       	brcs	.-10     	; 0x29f8 <sin+0x10>
    2a02:	e8 94       	clt
    2a04:	e0 e0       	ldi	r30, 0x00	; 0
    2a06:	bb 27       	eor	r27, r27
    2a08:	9f 57       	subi	r25, 0x7F	; 127
    2a0a:	f0 f0       	brcs	.+60     	; 0x2a48 <__fp_rempio2+0x4c>
    2a0c:	2a ed       	ldi	r18, 0xDA	; 218
    2a0e:	3f e0       	ldi	r19, 0x0F	; 15
    2a10:	49 ec       	ldi	r20, 0xC9	; 201
    2a12:	06 c0       	rjmp	.+12     	; 0x2a20 <__fp_rempio2+0x24>
    2a14:	ee 0f       	add	r30, r30
    2a16:	bb 0f       	add	r27, r27
    2a18:	66 1f       	adc	r22, r22
    2a1a:	77 1f       	adc	r23, r23
    2a1c:	88 1f       	adc	r24, r24
    2a1e:	28 f0       	brcs	.+10     	; 0x2a2a <__fp_rempio2+0x2e>
    2a20:	b2 3a       	cpi	r27, 0xA2	; 162
    2a22:	62 07       	cpc	r22, r18
    2a24:	73 07       	cpc	r23, r19
    2a26:	84 07       	cpc	r24, r20
    2a28:	28 f0       	brcs	.+10     	; 0x2a34 <__fp_rempio2+0x38>
    2a2a:	b2 5a       	subi	r27, 0xA2	; 162
    2a2c:	62 0b       	sbc	r22, r18
    2a2e:	73 0b       	sbc	r23, r19
    2a30:	84 0b       	sbc	r24, r20
    2a32:	e3 95       	inc	r30
    2a34:	9a 95       	dec	r25
    2a36:	72 f7       	brpl	.-36     	; 0x2a14 <__fp_rempio2+0x18>
    2a38:	80 38       	cpi	r24, 0x80	; 128
    2a3a:	30 f4       	brcc	.+12     	; 0x2a48 <__fp_rempio2+0x4c>
    2a3c:	9a 95       	dec	r25
    2a3e:	bb 0f       	add	r27, r27
    2a40:	66 1f       	adc	r22, r22
    2a42:	77 1f       	adc	r23, r23
    2a44:	88 1f       	adc	r24, r24
    2a46:	d2 f7       	brpl	.-12     	; 0x2a3c <__fp_rempio2+0x40>
    2a48:	90 48       	sbci	r25, 0x80	; 128
    2a4a:	0c 94 13 14 	jmp	0x2826	; 0x2826 <__fp_mpack_finite>

00002a4e <__fp_sinus>:
    2a4e:	ef 93       	push	r30
    2a50:	e0 ff       	sbrs	r30, 0
    2a52:	07 c0       	rjmp	.+14     	; 0x2a62 <__fp_sinus+0x14>
    2a54:	a2 ea       	ldi	r26, 0xA2	; 162
    2a56:	2a ed       	ldi	r18, 0xDA	; 218
    2a58:	3f e0       	ldi	r19, 0x0F	; 15
    2a5a:	49 ec       	ldi	r20, 0xC9	; 201
    2a5c:	5f eb       	ldi	r21, 0xBF	; 191
    2a5e:	0e 94 76 12 	call	0x24ec	; 0x24ec <__addsf3x>
    2a62:	0e 94 30 14 	call	0x2860	; 0x2860 <__fp_round>
    2a66:	0f 90       	pop	r0
    2a68:	03 94       	inc	r0
    2a6a:	01 fc       	sbrc	r0, 1
    2a6c:	90 58       	subi	r25, 0x80	; 128
    2a6e:	e4 e5       	ldi	r30, 0x54	; 84
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	0c 94 3b 15 	jmp	0x2a76	; 0x2a76 <__fp_powsodd>

00002a76 <__fp_powsodd>:
    2a76:	9f 93       	push	r25
    2a78:	8f 93       	push	r24
    2a7a:	7f 93       	push	r23
    2a7c:	6f 93       	push	r22
    2a7e:	ff 93       	push	r31
    2a80:	ef 93       	push	r30
    2a82:	9b 01       	movw	r18, r22
    2a84:	ac 01       	movw	r20, r24
    2a86:	0e 94 87 14 	call	0x290e	; 0x290e <__mulsf3>
    2a8a:	ef 91       	pop	r30
    2a8c:	ff 91       	pop	r31
    2a8e:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <__fp_powser>
    2a92:	2f 91       	pop	r18
    2a94:	3f 91       	pop	r19
    2a96:	4f 91       	pop	r20
    2a98:	5f 91       	pop	r21
    2a9a:	0c 94 87 14 	jmp	0x290e	; 0x290e <__mulsf3>

00002a9e <__fp_powser>:
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	1f 93       	push	r17
    2aa4:	0f 93       	push	r16
    2aa6:	ff 92       	push	r15
    2aa8:	ef 92       	push	r14
    2aaa:	df 92       	push	r13
    2aac:	7b 01       	movw	r14, r22
    2aae:	8c 01       	movw	r16, r24
    2ab0:	68 94       	set
    2ab2:	06 c0       	rjmp	.+12     	; 0x2ac0 <__fp_powser+0x22>
    2ab4:	da 2e       	mov	r13, r26
    2ab6:	ef 01       	movw	r28, r30
    2ab8:	0e 94 9a 14 	call	0x2934	; 0x2934 <__mulsf3x>
    2abc:	fe 01       	movw	r30, r28
    2abe:	e8 94       	clt
    2ac0:	a5 91       	lpm	r26, Z+
    2ac2:	25 91       	lpm	r18, Z+
    2ac4:	35 91       	lpm	r19, Z+
    2ac6:	45 91       	lpm	r20, Z+
    2ac8:	55 91       	lpm	r21, Z+
    2aca:	a6 f3       	brts	.-24     	; 0x2ab4 <__fp_powser+0x16>
    2acc:	ef 01       	movw	r28, r30
    2ace:	0e 94 76 12 	call	0x24ec	; 0x24ec <__addsf3x>
    2ad2:	fe 01       	movw	r30, r28
    2ad4:	97 01       	movw	r18, r14
    2ad6:	a8 01       	movw	r20, r16
    2ad8:	da 94       	dec	r13
    2ada:	69 f7       	brne	.-38     	; 0x2ab6 <__fp_powser+0x18>
    2adc:	df 90       	pop	r13
    2ade:	ef 90       	pop	r14
    2ae0:	ff 90       	pop	r15
    2ae2:	0f 91       	pop	r16
    2ae4:	1f 91       	pop	r17
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <__divmodhi4>:
    2aec:	97 fb       	bst	r25, 7
    2aee:	07 2e       	mov	r0, r23
    2af0:	16 f4       	brtc	.+4      	; 0x2af6 <__divmodhi4+0xa>
    2af2:	00 94       	com	r0
    2af4:	07 d0       	rcall	.+14     	; 0x2b04 <__divmodhi4_neg1>
    2af6:	77 fd       	sbrc	r23, 7
    2af8:	09 d0       	rcall	.+18     	; 0x2b0c <__divmodhi4_neg2>
    2afa:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <__udivmodhi4>
    2afe:	07 fc       	sbrc	r0, 7
    2b00:	05 d0       	rcall	.+10     	; 0x2b0c <__divmodhi4_neg2>
    2b02:	3e f4       	brtc	.+14     	; 0x2b12 <__divmodhi4_exit>

00002b04 <__divmodhi4_neg1>:
    2b04:	90 95       	com	r25
    2b06:	81 95       	neg	r24
    2b08:	9f 4f       	sbci	r25, 0xFF	; 255
    2b0a:	08 95       	ret

00002b0c <__divmodhi4_neg2>:
    2b0c:	70 95       	com	r23
    2b0e:	61 95       	neg	r22
    2b10:	7f 4f       	sbci	r23, 0xFF	; 255

00002b12 <__divmodhi4_exit>:
    2b12:	08 95       	ret

00002b14 <__udivmodhi4>:
    2b14:	aa 1b       	sub	r26, r26
    2b16:	bb 1b       	sub	r27, r27
    2b18:	51 e1       	ldi	r21, 0x11	; 17
    2b1a:	07 c0       	rjmp	.+14     	; 0x2b2a <__udivmodhi4_ep>

00002b1c <__udivmodhi4_loop>:
    2b1c:	aa 1f       	adc	r26, r26
    2b1e:	bb 1f       	adc	r27, r27
    2b20:	a6 17       	cp	r26, r22
    2b22:	b7 07       	cpc	r27, r23
    2b24:	10 f0       	brcs	.+4      	; 0x2b2a <__udivmodhi4_ep>
    2b26:	a6 1b       	sub	r26, r22
    2b28:	b7 0b       	sbc	r27, r23

00002b2a <__udivmodhi4_ep>:
    2b2a:	88 1f       	adc	r24, r24
    2b2c:	99 1f       	adc	r25, r25
    2b2e:	5a 95       	dec	r21
    2b30:	a9 f7       	brne	.-22     	; 0x2b1c <__udivmodhi4_loop>
    2b32:	80 95       	com	r24
    2b34:	90 95       	com	r25
    2b36:	bc 01       	movw	r22, r24
    2b38:	cd 01       	movw	r24, r26
    2b3a:	08 95       	ret

00002b3c <_exit>:
    2b3c:	f8 94       	cli

00002b3e <__stop_program>:
    2b3e:	ff cf       	rjmp	.-2      	; 0x2b3e <__stop_program>
