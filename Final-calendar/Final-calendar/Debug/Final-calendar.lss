
Final-calendar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002900  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002900  00002994  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800074  00800074  000029a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000029d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00002a14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eb0  00000000  00000000  00002afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084d  00000000  00000000  000049ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001102  00000000  00000000  000051f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000498  00000000  00000000  000062fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056c  00000000  00000000  00006794  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014de  00000000  00000000  00006d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000081de  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__vector_1>
       8:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__vector_2>
       c:	0c 94 b1 0f 	jmp	0x1f62	; 0x1f62 <__vector_3>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__vector_11>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <__stack+0x15f>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	10 e0       	ldi	r17, 0x00	; 0
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	e0 e0       	ldi	r30, 0x00	; 0
      86:	f9 e2       	ldi	r31, 0x29	; 41
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	a4 37       	cpi	r26, 0x74	; 116
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	20 e0       	ldi	r18, 0x00	; 0
      96:	a4 e7       	ldi	r26, 0x74	; 116
      98:	b0 e0       	ldi	r27, 0x00	; 0
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a4 39       	cpi	r26, 0x94	; 148
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <main>
      a8:	0c 94 7e 14 	jmp	0x28fc	; 0x28fc <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <TWI_Init>:
#define TWI_Clear_TWINT	(1<<TWINT)|(1<<TWEN)		    //0x84 : xoa TWIN de bat dau doc, doc xong thi NOT ACK
#define TWI_Read_ACK	(1<<TWINT)|(1<<TWEN)|(1<<TWEA)	//0xC4 : xoa TWIN de bat dau doc, sau khi doc set ACK

//Khoi dong TWI
void TWI_Init(void){
	TWSR=0x00; //Prescaler=1
      b0:	11 b8       	out	0x01, r1	; 1
	TWBR=_100K;
      b2:	80 e2       	ldi	r24, 0x20	; 32
      b4:	80 b9       	out	0x00, r24	; 0
	TWCR=(1<<TWINT)|(1<<TWEN);
      b6:	84 e8       	ldi	r24, 0x84	; 132
      b8:	86 bf       	out	0x36, r24	; 54
      ba:	08 95       	ret

000000bc <TWI_DS1307_wadr>:

///chon dia chi thanh ghi can thao tac, dummy write
//Addr: dia thi thanh ghi can ghi
uint8_t TWI_DS1307_wadr(uint8_t Addr){ 
		
	TWCR=TWI_START;						 //goi START condition
      bc:	94 ea       	ldi	r25, 0xA4	; 164
      be:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
      c0:	06 b6       	in	r0, 0x36	; 54
      c2:	07 fe       	sbrs	r0, 7
      c4:	fd cf       	rjmp	.-6      	; 0xc0 <TWI_DS1307_wadr+0x4>
	if((TWSR&0xF8) !=0x08) return TWSR; //neu goi Start co loi thi thoat
      c6:	91 b1       	in	r25, 0x01	; 1
      c8:	98 7f       	andi	r25, 0xF8	; 248
      ca:	98 30       	cpi	r25, 0x08	; 8
      cc:	11 f0       	breq	.+4      	; 0xd2 <TWI_DS1307_wadr+0x16>
      ce:	81 b1       	in	r24, 0x01	; 1
      d0:	08 95       	ret
	
	TWDR=(DS1307_SLA<<1)+TWI_W; 		 //dia chi DS va bit W 	
      d2:	90 ed       	ldi	r25, 0xD0	; 208
      d4:	93 b9       	out	0x03, r25	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT, bat dau goi SLA
      d6:	94 e8       	ldi	r25, 0x84	; 132
      d8:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
      da:	06 b6       	in	r0, 0x36	; 54
      dc:	07 fe       	sbrs	r0, 7
      de:	fd cf       	rjmp	.-6      	; 0xda <TWI_DS1307_wadr+0x1e>
	if((TWSR&0xF8) !=0x18) return TWSR; //device address send error, escape anyway
      e0:	91 b1       	in	r25, 0x01	; 1
      e2:	98 7f       	andi	r25, 0xF8	; 248
      e4:	98 31       	cpi	r25, 0x18	; 24
      e6:	11 f0       	breq	.+4      	; 0xec <TWI_DS1307_wadr+0x30>
      e8:	81 b1       	in	r24, 0x01	; 1
      ea:	08 95       	ret
		
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
      ec:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 				 //start send address by cleaning TWINT
      ee:	84 e8       	ldi	r24, 0x84	; 132
      f0:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //check and wait for TWINT bit=1
      f2:	06 b6       	in	r0, 0x36	; 54
      f4:	07 fe       	sbrs	r0, 7
      f6:	fd cf       	rjmp	.-6      	; 0xf2 <TWI_DS1307_wadr+0x36>
	if((TWSR&0xF8) !=0x28) return TWSR; //neu du lieu goi ko thanh cong thi thoat
      f8:	81 b1       	in	r24, 0x01	; 1
      fa:	88 7f       	andi	r24, 0xF8	; 248
      fc:	88 32       	cpi	r24, 0x28	; 40
      fe:	11 f0       	breq	.+4      	; 0x104 <TWI_DS1307_wadr+0x48>
     100:	81 b1       	in	r24, 0x01	; 1
     102:	08 95       	ret
	
	TWCR=TWI_STOP;					     //STOP condition
     104:	84 e9       	ldi	r24, 0x94	; 148
     106:	86 bf       	out	0x36, r24	; 54
	return 0;
     108:	80 e0       	ldi	r24, 0x00	; 0
}
     10a:	08 95       	ret

0000010c <TWI_DS1307_wblock>:
//Addr: dia thi thanh ghi can ghi
//Data[]: mang du lieu
//len: so luong byte can ghi
uint8_t TWI_DS1307_wblock(uint8_t Addr, uint8_t Data[], uint8_t len){
		
	TWCR=TWI_START; 					 //goi START condition
     10c:	94 ea       	ldi	r25, 0xA4	; 164
     10e:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
     110:	06 b6       	in	r0, 0x36	; 54
     112:	07 fe       	sbrs	r0, 7
     114:	fd cf       	rjmp	.-6      	; 0x110 <TWI_DS1307_wblock+0x4>
	if((TWSR&0xF8) !=0x08) return TWSR; //neu goi Start co loi thi thoat
     116:	91 b1       	in	r25, 0x01	; 1
     118:	98 7f       	andi	r25, 0xF8	; 248
     11a:	98 30       	cpi	r25, 0x08	; 8
     11c:	11 f0       	breq	.+4      	; 0x122 <TWI_DS1307_wblock+0x16>
     11e:	81 b1       	in	r24, 0x01	; 1
     120:	08 95       	ret
	
	TWDR=(DS1307_SLA<<1)+TWI_W; 		 //dia chi DS va bit W 	
     122:	90 ed       	ldi	r25, 0xD0	; 208
     124:	93 b9       	out	0x03, r25	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
     126:	94 e8       	ldi	r25, 0x84	; 132
     128:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
     12a:	06 b6       	in	r0, 0x36	; 54
     12c:	07 fe       	sbrs	r0, 7
     12e:	fd cf       	rjmp	.-6      	; 0x12a <TWI_DS1307_wblock+0x1e>
	if((TWSR&0xF8) !=0x18) return TWSR; //neu co loi truyen SLA, thoat
     130:	91 b1       	in	r25, 0x01	; 1
     132:	98 7f       	andi	r25, 0xF8	; 248
     134:	98 31       	cpi	r25, 0x18	; 24
     136:	11 f0       	breq	.+4      	; 0x13c <TWI_DS1307_wblock+0x30>
     138:	81 b1       	in	r24, 0x01	; 1
     13a:	08 95       	ret
	
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
     13c:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
     13e:	84 e8       	ldi	r24, 0x84	; 132
     140:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
     142:	06 b6       	in	r0, 0x36	; 54
     144:	07 fe       	sbrs	r0, 7
     146:	fd cf       	rjmp	.-6      	; 0x142 <TWI_DS1307_wblock+0x36>
	if((TWSR&0xF8) !=0x28) return TWSR; 
     148:	81 b1       	in	r24, 0x01	; 1
     14a:	88 7f       	andi	r24, 0xF8	; 248
     14c:	88 32       	cpi	r24, 0x28	; 40
     14e:	a1 f0       	breq	.+40     	; 0x178 <TWI_DS1307_wblock+0x6c>
     150:	81 b1       	in	r24, 0x01	; 1
     152:	08 95       	ret

	for (uint8_t i=0; i <len; i++){
		TWDR=Data[i]; 						 //chuan bi xuat du lieu
     154:	fb 01       	movw	r30, r22
     156:	e8 0f       	add	r30, r24
     158:	f1 1d       	adc	r31, r1
     15a:	90 81       	ld	r25, Z
     15c:	93 b9       	out	0x03, r25	; 3
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
     15e:	94 e8       	ldi	r25, 0x84	; 132
     160:	96 bf       	out	0x36, r25	; 54
		while((TWCR & 0x80)==0x00);	 	 //cho TWINT bit=1
     162:	06 b6       	in	r0, 0x36	; 54
     164:	07 fe       	sbrs	r0, 7
     166:	fd cf       	rjmp	.-6      	; 0x162 <TWI_DS1307_wblock+0x56>
		if((TWSR&0xF8) !=0x28) return TWSR; //neu status ko phai la 0x28 thi return
     168:	91 b1       	in	r25, 0x01	; 1
     16a:	98 7f       	andi	r25, 0xF8	; 248
     16c:	98 32       	cpi	r25, 0x28	; 40
     16e:	11 f0       	breq	.+4      	; 0x174 <TWI_DS1307_wblock+0x68>
     170:	81 b1       	in	r24, 0x01	; 1
     172:	08 95       	ret
	TWDR=Addr; 							 //goi dia chi thanh ghi can ghi vao
	TWCR=TWI_Clear_TWINT; 				 //xoa TWINT de bat dau goi
	while((TWCR & 0x80)==0x00);		 //cho TWINT bit=1
	if((TWSR&0xF8) !=0x28) return TWSR; 

	for (uint8_t i=0; i <len; i++){
     174:	8f 5f       	subi	r24, 0xFF	; 255
     176:	01 c0       	rjmp	.+2      	; 0x17a <TWI_DS1307_wblock+0x6e>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	84 17       	cp	r24, r20
     17c:	58 f3       	brcs	.-42     	; 0x154 <TWI_DS1307_wblock+0x48>
		TWCR=TWI_Clear_TWINT;  				 //xoa TWINT, bat dau send
		while((TWCR & 0x80)==0x00);	 	 //cho TWINT bit=1
		if((TWSR&0xF8) !=0x28) return TWSR; //neu status ko phai la 0x28 thi return
	}
	
	TWCR=TWI_STOP;							 //STOP condition
     17e:	84 e9       	ldi	r24, 0x94	; 148
     180:	86 bf       	out	0x36, r24	; 54
	return 0;
     182:	80 e0       	ldi	r24, 0x00	; 0
}
     184:	08 95       	ret

00000186 <TWI_DS1307_rblock>:

//doc 1 mang tu DS
uint8_t TWI_DS1307_rblock(uint8_t Data[], uint8_t len ){ 	
     186:	dc 01       	movw	r26, r24
	uint8_t i;
	
	TWCR=TWI_START; // Start--------------------------------------------------------------------
     188:	84 ea       	ldi	r24, 0xA4	; 164
     18a:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x08));	 //cho TWINT bit=1 va goi START thanh cong
     18c:	06 b6       	in	r0, 0x36	; 54
     18e:	07 fe       	sbrs	r0, 7
     190:	fd cf       	rjmp	.-6      	; 0x18c <TWI_DS1307_rblock+0x6>
     192:	81 b1       	in	r24, 0x01	; 1
     194:	88 7f       	andi	r24, 0xF8	; 248
     196:	88 30       	cpi	r24, 0x08	; 8
     198:	c9 f7       	brne	.-14     	; 0x18c <TWI_DS1307_rblock+0x6>
	
	TWDR=(DS1307_SLA<<1)+TWI_R; 							 //goi dia chi SLA +READ	
     19a:	81 ed       	ldi	r24, 0xD1	; 209
     19c:	83 b9       	out	0x03, r24	; 3
	TWCR=TWI_Clear_TWINT; 									 //bat dau, xoa TWINT
     19e:	84 e8       	ldi	r24, 0x84	; 132
     1a0:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x40));	 //cho TWINT bit=1	va goi SLA thanh cong
     1a2:	06 b6       	in	r0, 0x36	; 54
     1a4:	07 fe       	sbrs	r0, 7
     1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <TWI_DS1307_rblock+0x1c>
     1a8:	91 b1       	in	r25, 0x01	; 1
     1aa:	98 7f       	andi	r25, 0xF8	; 248
     1ac:	90 34       	cpi	r25, 0x40	; 64
     1ae:	c9 f7       	brne	.-14     	; 0x1a2 <TWI_DS1307_rblock+0x1c>
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <TWI_DS1307_rblock+0x4c>
	
	//nhan len-1 bytes dau tien---------------------
    for (i=0; i <len-1; i++){
       TWCR=TWI_Read_ACK; 									 //xoa TWINT,se goi ACK sau khi nhan moi byte
     1b4:	84 ec       	ldi	r24, 0xC4	; 196
     1b6:	86 bf       	out	0x36, r24	; 54
       while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x50));//cho TWINT bit=1 hoac nhan duoc ACK	   
     1b8:	06 b6       	in	r0, 0x36	; 54
     1ba:	07 fe       	sbrs	r0, 7
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <TWI_DS1307_rblock+0x32>
     1be:	91 b1       	in	r25, 0x01	; 1
     1c0:	98 7f       	andi	r25, 0xF8	; 248
     1c2:	90 35       	cpi	r25, 0x50	; 80
     1c4:	c9 f7       	brne	.-14     	; 0x1b8 <TWI_DS1307_rblock+0x32>
	   Data[i]=TWDR;										  //doc du lieu vao mang Data 
     1c6:	fd 01       	movw	r30, r26
     1c8:	e2 0f       	add	r30, r18
     1ca:	f1 1d       	adc	r31, r1
     1cc:	83 b1       	in	r24, 0x03	; 3
     1ce:	80 83       	st	Z, r24
	TWDR=(DS1307_SLA<<1)+TWI_R; 							 //goi dia chi SLA +READ	
	TWCR=TWI_Clear_TWINT; 									 //bat dau, xoa TWINT
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x40));	 //cho TWINT bit=1	va goi SLA thanh cong
	
	//nhan len-1 bytes dau tien---------------------
    for (i=0; i <len-1; i++){
     1d0:	2f 5f       	subi	r18, 0xFF	; 255
     1d2:	e2 2f       	mov	r30, r18
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	46 2f       	mov	r20, r22
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	41 50       	subi	r20, 0x01	; 1
     1dc:	51 09       	sbc	r21, r1
     1de:	e4 17       	cp	r30, r20
     1e0:	f5 07       	cpc	r31, r21
     1e2:	44 f3       	brlt	.-48     	; 0x1b4 <TWI_DS1307_rblock+0x2e>
       TWCR=TWI_Read_ACK; 									 //xoa TWINT,se goi ACK sau khi nhan moi byte
       while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x50));//cho TWINT bit=1 hoac nhan duoc ACK	   
	   Data[i]=TWDR;										  //doc du lieu vao mang Data 
    }
	//nhan byte cuoi
	TWCR=TWI_Clear_TWINT; 									 //xoa TWINT de nhan byte cuoi, sau do set NOT ACK
     1e4:	84 e8       	ldi	r24, 0x84	; 132
     1e6:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80)==0x00)||((TWSR&0xF8) !=0x58));   //cho TWIN=1 hoac trang thai not ack	
     1e8:	06 b6       	in	r0, 0x36	; 54
     1ea:	07 fe       	sbrs	r0, 7
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <TWI_DS1307_rblock+0x62>
     1ee:	91 b1       	in	r25, 0x01	; 1
     1f0:	98 7f       	andi	r25, 0xF8	; 248
     1f2:	98 35       	cpi	r25, 0x58	; 88
     1f4:	c9 f7       	brne	.-14     	; 0x1e8 <TWI_DS1307_rblock+0x62>
	Data[len-1]=TWDR;
     1f6:	86 2f       	mov	r24, r22
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	a8 0f       	add	r26, r24
     1fe:	b9 1f       	adc	r27, r25
     200:	83 b1       	in	r24, 0x03	; 3
     202:	8c 93       	st	X, r24
	
	TWCR=TWI_STOP;											 //STOP condition
     204:	84 e9       	ldi	r24, 0x94	; 148
     206:	86 bf       	out	0x36, r24	; 54
	return 0;	
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	08 95       	ret

0000020c <BCDToDec>:
*	Convert data types and decode for max7219
*/
/* Convert BCD to Dec */
uint8_t BCDToDec(uint8_t BCD){
	uint8_t L, H;
	L=BCD & 0x0F;
     20c:	38 2f       	mov	r19, r24
     20e:	3f 70       	andi	r19, 0x0F	; 15
	H=(BCD>>4)*10;
     210:	98 2f       	mov	r25, r24
     212:	92 95       	swap	r25
     214:	9f 70       	andi	r25, 0x0F	; 15
     216:	99 0f       	add	r25, r25
     218:	29 2f       	mov	r18, r25
     21a:	22 0f       	add	r18, r18
     21c:	22 0f       	add	r18, r18
     21e:	89 2f       	mov	r24, r25
     220:	82 0f       	add	r24, r18
	return (H+L);
}
     222:	83 0f       	add	r24, r19
     224:	08 95       	ret

00000226 <DecToBCD>:
/* Convert Dec to BCD */
uint8_t DecToBCD(uint8_t Dec){
	uint8_t L, H;
	L=Dec % 10;
     226:	2d ec       	ldi	r18, 0xCD	; 205
     228:	82 9f       	mul	r24, r18
     22a:	21 2d       	mov	r18, r1
     22c:	11 24       	eor	r1, r1
     22e:	92 2f       	mov	r25, r18
     230:	96 95       	lsr	r25
     232:	96 95       	lsr	r25
     234:	96 95       	lsr	r25
     236:	99 0f       	add	r25, r25
     238:	39 2f       	mov	r19, r25
     23a:	33 0f       	add	r19, r19
     23c:	33 0f       	add	r19, r19
     23e:	93 0f       	add	r25, r19
     240:	89 1b       	sub	r24, r25
	H=(Dec/10)<<4;
     242:	26 95       	lsr	r18
     244:	26 95       	lsr	r18
     246:	26 95       	lsr	r18
	return (H+L);
}
     248:	30 e1       	ldi	r19, 0x10	; 16
     24a:	23 9f       	mul	r18, r19
     24c:	80 0d       	add	r24, r0
     24e:	11 24       	eor	r1, r1
     250:	08 95       	ret

00000252 <Decode>:

void Decode(void){
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
    //BCD data converter function from DS1307 to DEC
	Second 	= BCDToDec(tData[0] & 0x7F);
     256:	cb e8       	ldi	r28, 0x8B	; 139
     258:	d0 e0       	ldi	r29, 0x00	; 0
     25a:	88 81       	ld	r24, Y
     25c:	8f 77       	andi	r24, 0x7F	; 127
     25e:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <Second+0x1>
     268:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <Second>

	Minute 	= BCDToDec(tData[1]);
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Minute+0x1>
     278:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Minute>
	
	if (Mode != 0)
     27c:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <Mode>
     280:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <Mode+0x1>
     284:	89 2b       	or	r24, r25
     286:	59 f0       	breq	.+22     	; 0x29e <Decode+0x4c>
	{ 	
		Hour = BCDToDec(tData[2] & 0x1F); //Mode for 12h
     288:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <tData+0x2>
     28c:	8f 71       	andi	r24, 0x1F	; 31
     28e:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Hour+0x1>
     298:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Hour>
     29c:	0a c0       	rjmp	.+20     	; 0x2b2 <Decode+0x60>
	}
	else 
	{
	  	Hour = BCDToDec(tData[2] & 0x3F); //Mode for 24h	
     29e:	80 91 8d 00 	lds	r24, 0x008D	; 0x80008d <tData+0x2>
     2a2:	8f 73       	andi	r24, 0x3F	; 63
     2a4:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <Hour+0x1>
     2ae:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <Hour>
	}
	Day		= BCDToDec(tData[3]);
     2b2:	cb e8       	ldi	r28, 0x8B	; 139
     2b4:	d0 e0       	ldi	r29, 0x00	; 0
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <Day+0x1>
     2c2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <Day>
	Date   	= BCDToDec(tData[4]);
     2c6:	8c 81       	ldd	r24, Y+4	; 0x04
     2c8:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <Date+0x1>
     2d2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <Date>
	Month	= BCDToDec(tData[5]);
     2d6:	8d 81       	ldd	r24, Y+5	; 0x05
     2d8:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <Month+0x1>
     2e2:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Month>
	Year	= BCDToDec(tData[6]);
     2e6:	8e 81       	ldd	r24, Y+6	; 0x06
     2e8:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <Year+0x1>
     2f2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Year>
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <FixTime>:
		MAX7219_writeData(MAX7219_DIGIT0,(A_Hour/10));
	}
}

//Write to DS1307 time that want to change
void FixTime(){ 
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
	tData[0] = DecToBCD(Second); 
     300:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
     304:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
     308:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     30c:	cb e8       	ldi	r28, 0x8B	; 139
     30e:	d0 e0       	ldi	r29, 0x00	; 0
     310:	88 83       	st	Y, r24
	tData[1] = DecToBCD(Minute); 
     312:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
     316:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
     31a:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     31e:	89 83       	std	Y+1, r24	; 0x01
	if (Mode != 0) tData[2] = DecToBCD(Hour)|(Mode << 6)|(AP << 5); //mode 12h
     320:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <Mode>
     324:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <Mode+0x1>
     328:	89 2b       	or	r24, r25
     32a:	21 f1       	breq	.+72     	; 0x374 <FixTime+0x78>
     32c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
     330:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
     334:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     338:	40 91 7e 00 	lds	r20, 0x007E	; 0x80007e <Mode>
     33c:	50 91 7f 00 	lds	r21, 0x007F	; 0x80007f <Mode+0x1>
     340:	00 24       	eor	r0, r0
     342:	56 95       	lsr	r21
     344:	47 95       	ror	r20
     346:	07 94       	ror	r0
     348:	56 95       	lsr	r21
     34a:	47 95       	ror	r20
     34c:	07 94       	ror	r0
     34e:	54 2f       	mov	r21, r20
     350:	40 2d       	mov	r20, r0
     352:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <AP>
     356:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <AP+0x1>
     35a:	22 0f       	add	r18, r18
     35c:	33 1f       	adc	r19, r19
     35e:	22 95       	swap	r18
     360:	32 95       	swap	r19
     362:	30 7f       	andi	r19, 0xF0	; 240
     364:	32 27       	eor	r19, r18
     366:	20 7f       	andi	r18, 0xF0	; 240
     368:	32 27       	eor	r19, r18
     36a:	84 2b       	or	r24, r20
     36c:	28 2b       	or	r18, r24
     36e:	20 93 8d 00 	sts	0x008D, r18	; 0x80008d <tData+0x2>
     372:	08 c0       	rjmp	.+16     	; 0x384 <FixTime+0x88>
	else tData[2] = DecToBCD(Hour);
     374:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
     378:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
     37c:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     380:	80 93 8d 00 	sts	0x008D, r24	; 0x80008d <tData+0x2>
	tData[3] = DecToBCD(Day);
     384:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <Day>
     388:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <Day+0x1>
     38c:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     390:	cb e8       	ldi	r28, 0x8B	; 139
     392:	d0 e0       	ldi	r29, 0x00	; 0
     394:	8b 83       	std	Y+3, r24	; 0x03
	tData[4] = DecToBCD(Date);
     396:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
     39a:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
     39e:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     3a2:	8c 83       	std	Y+4, r24	; 0x04
	tData[5] = DecToBCD(Month); 
     3a4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
     3a8:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
     3ac:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     3b0:	8d 83       	std	Y+5, r24	; 0x05
	tData[6] = DecToBCD(Year); 
     3b2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Year>
     3b6:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Year+0x1>
     3ba:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     3be:	8e 83       	std	Y+6, r24	; 0x06
	TWI_DS1307_wblock(0x00, tData, 7); 
     3c0:	47 e0       	ldi	r20, 0x07	; 7
     3c2:	be 01       	movw	r22, r28
     3c4:	80 e0       	ldi	r24, 0x00	; 0
     3c6:	0e 94 86 00 	call	0x10c	; 0x10c <TWI_DS1307_wblock>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ca:	8f ec       	ldi	r24, 0xCF	; 207
     3cc:	97 e0       	ldi	r25, 0x07	; 7
     3ce:	01 97       	sbiw	r24, 0x01	; 1
     3d0:	f1 f7       	brne	.-4      	; 0x3ce <FixTime+0xd2>
     3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <FixTime+0xd8>
     3d4:	00 00       	nop
	_delay_ms(1);
	TWI_DS1307_wadr(0x00); 
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 5e 00 	call	0xbc	; 0xbc <TWI_DS1307_wadr>
     3dc:	8f ec       	ldi	r24, 0xCF	; 207
     3de:	97 e0       	ldi	r25, 0x07	; 7
     3e0:	01 97       	sbiw	r24, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <FixTime+0xe4>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <FixTime+0xea>
     3e6:	00 00       	nop
	_delay_ms(1);			
 }
     3e8:	df 91       	pop	r29
     3ea:	cf 91       	pop	r28
     3ec:	08 95       	ret

000003ee <Init_btn>:
/*
*	Init button
*/
void Init_btn(void)
{
	BTN_DDRD  &= ~((1<<SW)|(1<<ADJ));		// set input cho button setting
     3ee:	81 b3       	in	r24, 0x11	; 17
     3f0:	83 7f       	andi	r24, 0xF3	; 243
     3f2:	81 bb       	out	0x11, r24	; 17
	BTN_DDRD = (1<<BUZ_LED);																// set output cho buzzer + led
     3f4:	80 e8       	ldi	r24, 0x80	; 128
     3f6:	81 bb       	out	0x11, r24	; 17
	BTN_PORTD = (1<<SW)|(1<<ADJ);	// set dien tro keo len cho button setting
     3f8:	8c e0       	ldi	r24, 0x0C	; 12
     3fa:	82 bb       	out	0x12, r24	; 18
     3fc:	08 95       	ret

000003fe <jdFromDate>:


//-----------------------DOI DUONG LICH - AM LICH---------------------

double jdFromDate(uint8_t dd, uint8_t mm, uint16_t yy)
{
     3fe:	4f 92       	push	r4
     400:	5f 92       	push	r5
     402:	6f 92       	push	r6
     404:	7f 92       	push	r7
     406:	8f 92       	push	r8
     408:	9f 92       	push	r9
     40a:	af 92       	push	r10
     40c:	bf 92       	push	r11
     40e:	cf 92       	push	r12
     410:	df 92       	push	r13
     412:	ef 92       	push	r14
     414:	ff 92       	push	r15
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	f8 2e       	mov	r15, r24
     420:	8a 01       	movw	r16, r20
	long double a, y, m, jd;
	a = floorf((14 - mm) / 12);
     422:	c6 2f       	mov	r28, r22
     424:	d0 e0       	ldi	r29, 0x00	; 0
     426:	8e e0       	ldi	r24, 0x0E	; 14
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	8c 1b       	sub	r24, r28
     42c:	9d 0b       	sbc	r25, r29
     42e:	6c e0       	ldi	r22, 0x0C	; 12
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
     436:	07 2e       	mov	r0, r23
     438:	00 0c       	add	r0, r0
     43a:	88 0b       	sbc	r24, r24
     43c:	99 0b       	sbc	r25, r25
     43e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__floatsisf>
     442:	0e 94 95 12 	call	0x252a	; 0x252a <floor>
     446:	4b 01       	movw	r8, r22
     448:	5c 01       	movw	r10, r24
	y = yy+4800-a;
     44a:	b8 01       	movw	r22, r16
     44c:	60 54       	subi	r22, 0x40	; 64
     44e:	7d 4e       	sbci	r23, 0xED	; 237
     450:	80 e0       	ldi	r24, 0x00	; 0
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__floatunsisf>
     458:	a5 01       	movw	r20, r10
     45a:	94 01       	movw	r18, r8
     45c:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     460:	2b 01       	movw	r4, r22
     462:	3c 01       	movw	r6, r24
	m = mm+12*a-3;
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	30 e0       	ldi	r19, 0x00	; 0
     468:	40 e4       	ldi	r20, 0x40	; 64
     46a:	51 e4       	ldi	r21, 0x41	; 65
     46c:	c5 01       	movw	r24, r10
     46e:	b4 01       	movw	r22, r8
     470:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     474:	4b 01       	movw	r8, r22
     476:	5c 01       	movw	r10, r24
     478:	be 01       	movw	r22, r28
     47a:	dd 0f       	add	r29, r29
     47c:	88 0b       	sbc	r24, r24
     47e:	99 0b       	sbc	r25, r25
     480:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__floatsisf>
     484:	a5 01       	movw	r20, r10
     486:	94 01       	movw	r18, r8
     488:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	30 e0       	ldi	r19, 0x00	; 0
     490:	40 e4       	ldi	r20, 0x40	; 64
     492:	50 e4       	ldi	r21, 0x40	; 64
     494:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     498:	4b 01       	movw	r8, r22
     49a:	5c 01       	movw	r10, r24
	jd = dd + floorf((153*m+2)/5) + 365*y + floorf(y/4) - floorf(y/100) + floorf(y/400) - 32045;
     49c:	6f 2d       	mov	r22, r15
     49e:	70 e0       	ldi	r23, 0x00	; 0
     4a0:	80 e0       	ldi	r24, 0x00	; 0
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__floatsisf>
     4a8:	6b 01       	movw	r12, r22
     4aa:	7c 01       	movw	r14, r24
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	49 e1       	ldi	r20, 0x19	; 25
     4b2:	53 e4       	ldi	r21, 0x43	; 67
     4b4:	c5 01       	movw	r24, r10
     4b6:	b4 01       	movw	r22, r8
     4b8:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	40 e0       	ldi	r20, 0x00	; 0
     4c2:	50 e4       	ldi	r21, 0x40	; 64
     4c4:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	40 ea       	ldi	r20, 0xA0	; 160
     4ce:	50 e4       	ldi	r21, 0x40	; 64
     4d0:	0e 94 b0 11 	call	0x2360	; 0x2360 <__divsf3>
     4d4:	0e 94 95 12 	call	0x252a	; 0x252a <floor>
     4d8:	9b 01       	movw	r18, r22
     4da:	ac 01       	movw	r20, r24
     4dc:	c7 01       	movw	r24, r14
     4de:	b6 01       	movw	r22, r12
     4e0:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     4e4:	6b 01       	movw	r12, r22
     4e6:	7c 01       	movw	r14, r24
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	30 e8       	ldi	r19, 0x80	; 128
     4ec:	46 eb       	ldi	r20, 0xB6	; 182
     4ee:	53 e4       	ldi	r21, 0x43	; 67
     4f0:	c3 01       	movw	r24, r6
     4f2:	b2 01       	movw	r22, r4
     4f4:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     4f8:	9b 01       	movw	r18, r22
     4fa:	ac 01       	movw	r20, r24
     4fc:	c7 01       	movw	r24, r14
     4fe:	b6 01       	movw	r22, r12
     500:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     504:	6b 01       	movw	r12, r22
     506:	7c 01       	movw	r14, r24
     508:	20 e0       	ldi	r18, 0x00	; 0
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	40 e8       	ldi	r20, 0x80	; 128
     50e:	5e e3       	ldi	r21, 0x3E	; 62
     510:	c3 01       	movw	r24, r6
     512:	b2 01       	movw	r22, r4
     514:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     518:	0e 94 95 12 	call	0x252a	; 0x252a <floor>
     51c:	9b 01       	movw	r18, r22
     51e:	ac 01       	movw	r20, r24
     520:	c7 01       	movw	r24, r14
     522:	b6 01       	movw	r22, r12
     524:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     528:	6b 01       	movw	r12, r22
     52a:	7c 01       	movw	r14, r24
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	48 ec       	ldi	r20, 0xC8	; 200
     532:	52 e4       	ldi	r21, 0x42	; 66
     534:	c3 01       	movw	r24, r6
     536:	b2 01       	movw	r22, r4
     538:	0e 94 b0 11 	call	0x2360	; 0x2360 <__divsf3>
     53c:	0e 94 95 12 	call	0x252a	; 0x252a <floor>
     540:	9b 01       	movw	r18, r22
     542:	ac 01       	movw	r20, r24
     544:	c7 01       	movw	r24, r14
     546:	b6 01       	movw	r22, r12
     548:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     54c:	4b 01       	movw	r8, r22
     54e:	5c 01       	movw	r10, r24
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	48 ec       	ldi	r20, 0xC8	; 200
     556:	53 e4       	ldi	r21, 0x43	; 67
     558:	c3 01       	movw	r24, r6
     55a:	b2 01       	movw	r22, r4
     55c:	0e 94 b0 11 	call	0x2360	; 0x2360 <__divsf3>
     560:	0e 94 95 12 	call	0x252a	; 0x252a <floor>
     564:	9b 01       	movw	r18, r22
     566:	ac 01       	movw	r20, r24
     568:	c5 01       	movw	r24, r10
     56a:	b4 01       	movw	r22, r8
     56c:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	3a e5       	ldi	r19, 0x5A	; 90
     574:	4a ef       	ldi	r20, 0xFA	; 250
     576:	56 e4       	ldi	r21, 0x46	; 70
     578:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     57c:	4b 01       	movw	r8, r22
     57e:	5c 01       	movw	r10, r24
	if (jd < 2299161) {
     580:	24 e6       	ldi	r18, 0x64	; 100
     582:	34 e5       	ldi	r19, 0x54	; 84
     584:	4c e0       	ldi	r20, 0x0C	; 12
     586:	5a e4       	ldi	r21, 0x4A	; 74
     588:	0e 94 ab 11 	call	0x2356	; 0x2356 <__cmpsf2>
     58c:	88 23       	and	r24, r24
     58e:	54 f4       	brge	.+20     	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
		jd = dd + floorf((153*m+2)/5) + 365*y + floorf(y/4) - 32083;
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	36 ea       	ldi	r19, 0xA6	; 166
     594:	4a ef       	ldi	r20, 0xFA	; 250
     596:	56 e4       	ldi	r21, 0x46	; 70
     598:	c7 01       	movw	r24, r14
     59a:	b6 01       	movw	r22, r12
     59c:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     5a0:	4b 01       	movw	r8, r22
     5a2:	5c 01       	movw	r10, r24
	}
	return jd;
}
     5a4:	c5 01       	movw	r24, r10
     5a6:	b4 01       	movw	r22, r8
     5a8:	df 91       	pop	r29
     5aa:	cf 91       	pop	r28
     5ac:	1f 91       	pop	r17
     5ae:	0f 91       	pop	r16
     5b0:	ff 90       	pop	r15
     5b2:	ef 90       	pop	r14
     5b4:	df 90       	pop	r13
     5b6:	cf 90       	pop	r12
     5b8:	bf 90       	pop	r11
     5ba:	af 90       	pop	r10
     5bc:	9f 90       	pop	r9
     5be:	8f 90       	pop	r8
     5c0:	7f 90       	pop	r7
     5c2:	6f 90       	pop	r6
     5c4:	5f 90       	pop	r5
     5c6:	4f 90       	pop	r4
     5c8:	08 95       	ret

000005ca <getNewMoonDay>:

double getNewMoonDay(long double k, int timeZone)
{
     5ca:	4f 92       	push	r4
     5cc:	5f 92       	push	r5
     5ce:	6f 92       	push	r6
     5d0:	7f 92       	push	r7
     5d2:	8f 92       	push	r8
     5d4:	9f 92       	push	r9
     5d6:	af 92       	push	r10
     5d8:	bf 92       	push	r11
     5da:	cf 92       	push	r12
     5dc:	df 92       	push	r13
     5de:	ef 92       	push	r14
     5e0:	ff 92       	push	r15
     5e2:	cf 93       	push	r28
     5e4:	df 93       	push	r29
     5e6:	cd b7       	in	r28, 0x3d	; 61
     5e8:	de b7       	in	r29, 0x3e	; 62
     5ea:	66 97       	sbiw	r28, 0x16	; 22
     5ec:	0f b6       	in	r0, 0x3f	; 63
     5ee:	f8 94       	cli
     5f0:	de bf       	out	0x3e, r29	; 62
     5f2:	0f be       	out	0x3f, r0	; 63
     5f4:	cd bf       	out	0x3d, r28	; 61
     5f6:	6b 01       	movw	r12, r22
     5f8:	7c 01       	movw	r14, r24
     5fa:	5e 8b       	std	Y+22, r21	; 0x16
     5fc:	4d 8b       	std	Y+21, r20	; 0x15
	long double T, T2, T3, dr, Jd1, M, Mpr, F, C1, deltat, JdNew;
	T = k/1236.85; // Time in Julian centuries from 1900 January 0.5
     5fe:	23 e3       	ldi	r18, 0x33	; 51
     600:	3b e9       	ldi	r19, 0x9B	; 155
     602:	4a e9       	ldi	r20, 0x9A	; 154
     604:	54 e4       	ldi	r21, 0x44	; 68
     606:	0e 94 b0 11 	call	0x2360	; 0x2360 <__divsf3>
     60a:	69 83       	std	Y+1, r22	; 0x01
     60c:	7a 83       	std	Y+2, r23	; 0x02
     60e:	8b 83       	std	Y+3, r24	; 0x03
     610:	9c 83       	std	Y+4, r25	; 0x04
	T2 = T * T;
     612:	9b 01       	movw	r18, r22
     614:	ac 01       	movw	r20, r24
     616:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     61a:	6d 83       	std	Y+5, r22	; 0x05
     61c:	7e 83       	std	Y+6, r23	; 0x06
     61e:	8f 83       	std	Y+7, r24	; 0x07
     620:	98 87       	std	Y+8, r25	; 0x08
	T3 = T2 * T;
     622:	9b 01       	movw	r18, r22
     624:	ac 01       	movw	r20, r24
     626:	69 81       	ldd	r22, Y+1	; 0x01
     628:	7a 81       	ldd	r23, Y+2	; 0x02
     62a:	8b 81       	ldd	r24, Y+3	; 0x03
     62c:	9c 81       	ldd	r25, Y+4	; 0x04
     62e:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     632:	6d 87       	std	Y+13, r22	; 0x0d
     634:	7e 87       	std	Y+14, r23	; 0x0e
     636:	8f 87       	std	Y+15, r24	; 0x0f
     638:	98 8b       	std	Y+16, r25	; 0x10
	dr = M_PI/180;
	Jd1 = 2415020.75933 + 29.53058868*k + 0.0001178*T2 - 0.000000155*T3;
     63a:	25 ea       	ldi	r18, 0xA5	; 165
     63c:	3e e3       	ldi	r19, 0x3E	; 62
     63e:	4c ee       	ldi	r20, 0xEC	; 236
     640:	51 e4       	ldi	r21, 0x41	; 65
     642:	c7 01       	movw	r24, r14
     644:	b6 01       	movw	r22, r12
     646:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     64a:	23 eb       	ldi	r18, 0xB3	; 179
     64c:	36 e6       	ldi	r19, 0x66	; 102
     64e:	43 e1       	ldi	r20, 0x13	; 19
     650:	5a e4       	ldi	r21, 0x4A	; 74
     652:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     656:	4b 01       	movw	r8, r22
     658:	5c 01       	movw	r10, r24
     65a:	25 e6       	ldi	r18, 0x65	; 101
     65c:	3b e0       	ldi	r19, 0x0B	; 11
     65e:	47 ef       	ldi	r20, 0xF7	; 247
     660:	58 e3       	ldi	r21, 0x38	; 56
     662:	6d 81       	ldd	r22, Y+5	; 0x05
     664:	7e 81       	ldd	r23, Y+6	; 0x06
     666:	8f 81       	ldd	r24, Y+7	; 0x07
     668:	98 85       	ldd	r25, Y+8	; 0x08
     66a:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     66e:	9b 01       	movw	r18, r22
     670:	ac 01       	movw	r20, r24
     672:	c5 01       	movw	r24, r10
     674:	b4 01       	movw	r22, r8
     676:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     67a:	4b 01       	movw	r8, r22
     67c:	5c 01       	movw	r10, r24
     67e:	23 e1       	ldi	r18, 0x13	; 19
     680:	3e e6       	ldi	r19, 0x6E	; 110
     682:	46 e2       	ldi	r20, 0x26	; 38
     684:	54 e3       	ldi	r21, 0x34	; 52
     686:	6d 85       	ldd	r22, Y+13	; 0x0d
     688:	7e 85       	ldd	r23, Y+14	; 0x0e
     68a:	8f 85       	ldd	r24, Y+15	; 0x0f
     68c:	98 89       	ldd	r25, Y+16	; 0x10
     68e:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	c5 01       	movw	r24, r10
     698:	b4 01       	movw	r22, r8
     69a:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     69e:	4b 01       	movw	r8, r22
     6a0:	5c 01       	movw	r10, r24
	Jd1 = Jd1 + 0.00033*sinf((166.56 + 132.87*T - 0.009173*T2)*dr); // Mean new moon
     6a2:	28 eb       	ldi	r18, 0xB8	; 184
     6a4:	3e ed       	ldi	r19, 0xDE	; 222
     6a6:	44 e0       	ldi	r20, 0x04	; 4
     6a8:	53 e4       	ldi	r21, 0x43	; 67
     6aa:	69 81       	ldd	r22, Y+1	; 0x01
     6ac:	7a 81       	ldd	r23, Y+2	; 0x02
     6ae:	8b 81       	ldd	r24, Y+3	; 0x03
     6b0:	9c 81       	ldd	r25, Y+4	; 0x04
     6b2:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     6b6:	2c e5       	ldi	r18, 0x5C	; 92
     6b8:	3f e8       	ldi	r19, 0x8F	; 143
     6ba:	46 e2       	ldi	r20, 0x26	; 38
     6bc:	53 e4       	ldi	r21, 0x43	; 67
     6be:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     6c2:	2b 01       	movw	r4, r22
     6c4:	3c 01       	movw	r6, r24
     6c6:	2a e5       	ldi	r18, 0x5A	; 90
     6c8:	3a e4       	ldi	r19, 0x4A	; 74
     6ca:	46 e1       	ldi	r20, 0x16	; 22
     6cc:	5c e3       	ldi	r21, 0x3C	; 60
     6ce:	6d 81       	ldd	r22, Y+5	; 0x05
     6d0:	7e 81       	ldd	r23, Y+6	; 0x06
     6d2:	8f 81       	ldd	r24, Y+7	; 0x07
     6d4:	98 85       	ldd	r25, Y+8	; 0x08
     6d6:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     6da:	9b 01       	movw	r18, r22
     6dc:	ac 01       	movw	r20, r24
     6de:	c3 01       	movw	r24, r6
     6e0:	b2 01       	movw	r22, r4
     6e2:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     6e6:	25 e3       	ldi	r18, 0x35	; 53
     6e8:	3a ef       	ldi	r19, 0xFA	; 250
     6ea:	4e e8       	ldi	r20, 0x8E	; 142
     6ec:	5c e3       	ldi	r21, 0x3C	; 60
     6ee:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     6f2:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <sin>
     6f6:	2a ed       	ldi	r18, 0xDA	; 218
     6f8:	33 e0       	ldi	r19, 0x03	; 3
     6fa:	4d ea       	ldi	r20, 0xAD	; 173
     6fc:	59 e3       	ldi	r21, 0x39	; 57
     6fe:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     702:	9b 01       	movw	r18, r22
     704:	ac 01       	movw	r20, r24
     706:	c5 01       	movw	r24, r10
     708:	b4 01       	movw	r22, r8
     70a:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     70e:	69 8b       	std	Y+17, r22	; 0x11
     710:	7a 8b       	std	Y+18, r23	; 0x12
     712:	8b 8b       	std	Y+19, r24	; 0x13
     714:	9c 8b       	std	Y+20, r25	; 0x14
	M = 359.2242 + 29.10535608*k - 0.0000333*T2 - 0.00000347*T3; // Sun's mean anomaly
     716:	25 ec       	ldi	r18, 0xC5	; 197
     718:	37 ed       	ldi	r19, 0xD7	; 215
     71a:	48 ee       	ldi	r20, 0xE8	; 232
     71c:	51 e4       	ldi	r21, 0x41	; 65
     71e:	c7 01       	movw	r24, r14
     720:	b6 01       	movw	r22, r12
     722:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     726:	23 eb       	ldi	r18, 0xB3	; 179
     728:	3c e9       	ldi	r19, 0x9C	; 156
     72a:	43 eb       	ldi	r20, 0xB3	; 179
     72c:	53 e4       	ldi	r21, 0x43	; 67
     72e:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     732:	4b 01       	movw	r8, r22
     734:	5c 01       	movw	r10, r24
     736:	2a e9       	ldi	r18, 0x9A	; 154
     738:	3b ea       	ldi	r19, 0xAB	; 171
     73a:	4b e0       	ldi	r20, 0x0B	; 11
     73c:	58 e3       	ldi	r21, 0x38	; 56
     73e:	6d 81       	ldd	r22, Y+5	; 0x05
     740:	7e 81       	ldd	r23, Y+6	; 0x06
     742:	8f 81       	ldd	r24, Y+7	; 0x07
     744:	98 85       	ldd	r25, Y+8	; 0x08
     746:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     74a:	9b 01       	movw	r18, r22
     74c:	ac 01       	movw	r20, r24
     74e:	c5 01       	movw	r24, r10
     750:	b4 01       	movw	r22, r8
     752:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     756:	4b 01       	movw	r8, r22
     758:	5c 01       	movw	r10, r24
     75a:	25 e2       	ldi	r18, 0x25	; 37
     75c:	3e ed       	ldi	r19, 0xDE	; 222
     75e:	48 e6       	ldi	r20, 0x68	; 104
     760:	56 e3       	ldi	r21, 0x36	; 54
     762:	6d 85       	ldd	r22, Y+13	; 0x0d
     764:	7e 85       	ldd	r23, Y+14	; 0x0e
     766:	8f 85       	ldd	r24, Y+15	; 0x0f
     768:	98 89       	ldd	r25, Y+16	; 0x10
     76a:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     76e:	9b 01       	movw	r18, r22
     770:	ac 01       	movw	r20, r24
     772:	c5 01       	movw	r24, r10
     774:	b4 01       	movw	r22, r8
     776:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     77a:	69 87       	std	Y+9, r22	; 0x09
     77c:	7a 87       	std	Y+10, r23	; 0x0a
     77e:	8b 87       	std	Y+11, r24	; 0x0b
     780:	9c 87       	std	Y+12, r25	; 0x0c
	Mpr = 306.0253 + 385.81691806*k + 0.0107306*T2 + 0.00001236*T3; // Moon's mean anomaly
     782:	21 e9       	ldi	r18, 0x91	; 145
     784:	38 ee       	ldi	r19, 0xE8	; 232
     786:	40 ec       	ldi	r20, 0xC0	; 192
     788:	53 e4       	ldi	r21, 0x43	; 67
     78a:	c7 01       	movw	r24, r14
     78c:	b6 01       	movw	r22, r12
     78e:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     792:	2d e3       	ldi	r18, 0x3D	; 61
     794:	33 e0       	ldi	r19, 0x03	; 3
     796:	49 e9       	ldi	r20, 0x99	; 153
     798:	53 e4       	ldi	r21, 0x43	; 67
     79a:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     79e:	4b 01       	movw	r8, r22
     7a0:	5c 01       	movw	r10, r24
     7a2:	26 e6       	ldi	r18, 0x66	; 102
     7a4:	3f ec       	ldi	r19, 0xCF	; 207
     7a6:	4f e2       	ldi	r20, 0x2F	; 47
     7a8:	5c e3       	ldi	r21, 0x3C	; 60
     7aa:	6d 81       	ldd	r22, Y+5	; 0x05
     7ac:	7e 81       	ldd	r23, Y+6	; 0x06
     7ae:	8f 81       	ldd	r24, Y+7	; 0x07
     7b0:	98 85       	ldd	r25, Y+8	; 0x08
     7b2:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     7b6:	9b 01       	movw	r18, r22
     7b8:	ac 01       	movw	r20, r24
     7ba:	c5 01       	movw	r24, r10
     7bc:	b4 01       	movw	r22, r8
     7be:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     7c2:	4b 01       	movw	r8, r22
     7c4:	5c 01       	movw	r10, r24
     7c6:	2c ec       	ldi	r18, 0xCC	; 204
     7c8:	3d e5       	ldi	r19, 0x5D	; 93
     7ca:	4f e4       	ldi	r20, 0x4F	; 79
     7cc:	57 e3       	ldi	r21, 0x37	; 55
     7ce:	6d 85       	ldd	r22, Y+13	; 0x0d
     7d0:	7e 85       	ldd	r23, Y+14	; 0x0e
     7d2:	8f 85       	ldd	r24, Y+15	; 0x0f
     7d4:	98 89       	ldd	r25, Y+16	; 0x10
     7d6:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     7da:	9b 01       	movw	r18, r22
     7dc:	ac 01       	movw	r20, r24
     7de:	c5 01       	movw	r24, r10
     7e0:	b4 01       	movw	r22, r8
     7e2:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     7e6:	2b 01       	movw	r4, r22
     7e8:	3c 01       	movw	r6, r24
	F = 21.2964 + 390.67050646*k - 0.0016528*T2 - 0.00000239*T3; // Moon's argument of latitude
     7ea:	23 ed       	ldi	r18, 0xD3	; 211
     7ec:	35 e5       	ldi	r19, 0x55	; 85
     7ee:	43 ec       	ldi	r20, 0xC3	; 195
     7f0:	53 e4       	ldi	r21, 0x43	; 67
     7f2:	c7 01       	movw	r24, r14
     7f4:	b6 01       	movw	r22, r12
     7f6:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     7fa:	27 e0       	ldi	r18, 0x07	; 7
     7fc:	3f e5       	ldi	r19, 0x5F	; 95
     7fe:	4a ea       	ldi	r20, 0xAA	; 170
     800:	51 e4       	ldi	r21, 0x41	; 65
     802:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     806:	6b 01       	movw	r12, r22
     808:	7c 01       	movw	r14, r24
     80a:	24 ec       	ldi	r18, 0xC4	; 196
     80c:	32 ea       	ldi	r19, 0xA2	; 162
     80e:	48 ed       	ldi	r20, 0xD8	; 216
     810:	5a e3       	ldi	r21, 0x3A	; 58
     812:	6d 81       	ldd	r22, Y+5	; 0x05
     814:	7e 81       	ldd	r23, Y+6	; 0x06
     816:	8f 81       	ldd	r24, Y+7	; 0x07
     818:	98 85       	ldd	r25, Y+8	; 0x08
     81a:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     81e:	9b 01       	movw	r18, r22
     820:	ac 01       	movw	r20, r24
     822:	c7 01       	movw	r24, r14
     824:	b6 01       	movw	r22, r12
     826:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     82a:	6b 01       	movw	r12, r22
     82c:	7c 01       	movw	r14, r24
     82e:	23 ee       	ldi	r18, 0xE3	; 227
     830:	33 e6       	ldi	r19, 0x63	; 99
     832:	40 e2       	ldi	r20, 0x20	; 32
     834:	56 e3       	ldi	r21, 0x36	; 54
     836:	6d 85       	ldd	r22, Y+13	; 0x0d
     838:	7e 85       	ldd	r23, Y+14	; 0x0e
     83a:	8f 85       	ldd	r24, Y+15	; 0x0f
     83c:	98 89       	ldd	r25, Y+16	; 0x10
     83e:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     842:	9b 01       	movw	r18, r22
     844:	ac 01       	movw	r20, r24
     846:	c7 01       	movw	r24, r14
     848:	b6 01       	movw	r22, r12
     84a:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     84e:	6b 01       	movw	r12, r22
     850:	7c 01       	movw	r14, r24
	C1=(0.1734 - 0.000393*T)*sinf(M*dr) + 0.0021*sinf(2*dr*M);
     852:	21 e9       	ldi	r18, 0x91	; 145
     854:	3b e0       	ldi	r19, 0x0B	; 11
     856:	4e ec       	ldi	r20, 0xCE	; 206
     858:	59 e3       	ldi	r21, 0x39	; 57
     85a:	69 81       	ldd	r22, Y+1	; 0x01
     85c:	7a 81       	ldd	r23, Y+2	; 0x02
     85e:	8b 81       	ldd	r24, Y+3	; 0x03
     860:	9c 81       	ldd	r25, Y+4	; 0x04
     862:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     866:	9b 01       	movw	r18, r22
     868:	ac 01       	movw	r20, r24
     86a:	65 ec       	ldi	r22, 0xC5	; 197
     86c:	7f e8       	ldi	r23, 0x8F	; 143
     86e:	81 e3       	ldi	r24, 0x31	; 49
     870:	9e e3       	ldi	r25, 0x3E	; 62
     872:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     876:	4b 01       	movw	r8, r22
     878:	5c 01       	movw	r10, r24
     87a:	25 e3       	ldi	r18, 0x35	; 53
     87c:	3a ef       	ldi	r19, 0xFA	; 250
     87e:	4e e8       	ldi	r20, 0x8E	; 142
     880:	5c e3       	ldi	r21, 0x3C	; 60
     882:	69 85       	ldd	r22, Y+9	; 0x09
     884:	7a 85       	ldd	r23, Y+10	; 0x0a
     886:	8b 85       	ldd	r24, Y+11	; 0x0b
     888:	9c 85       	ldd	r25, Y+12	; 0x0c
     88a:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     88e:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <sin>
     892:	9b 01       	movw	r18, r22
     894:	ac 01       	movw	r20, r24
     896:	c5 01       	movw	r24, r10
     898:	b4 01       	movw	r22, r8
     89a:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     89e:	4b 01       	movw	r8, r22
     8a0:	5c 01       	movw	r10, r24
     8a2:	25 e3       	ldi	r18, 0x35	; 53
     8a4:	3a ef       	ldi	r19, 0xFA	; 250
     8a6:	4e e0       	ldi	r20, 0x0E	; 14
     8a8:	5d e3       	ldi	r21, 0x3D	; 61
     8aa:	69 85       	ldd	r22, Y+9	; 0x09
     8ac:	7a 85       	ldd	r23, Y+10	; 0x0a
     8ae:	8b 85       	ldd	r24, Y+11	; 0x0b
     8b0:	9c 85       	ldd	r25, Y+12	; 0x0c
     8b2:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     8b6:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <sin>
     8ba:	27 e2       	ldi	r18, 0x27	; 39
     8bc:	30 ea       	ldi	r19, 0xA0	; 160
     8be:	49 e0       	ldi	r20, 0x09	; 9
     8c0:	5b e3       	ldi	r21, 0x3B	; 59
     8c2:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     8c6:	9b 01       	movw	r18, r22
     8c8:	ac 01       	movw	r20, r24
     8ca:	c5 01       	movw	r24, r10
     8cc:	b4 01       	movw	r22, r8
     8ce:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     8d2:	4b 01       	movw	r8, r22
     8d4:	5c 01       	movw	r10, r24
	C1 = C1 - 0.4068*sinf(Mpr*dr) + 0.0161*sinf(dr*2*Mpr);
     8d6:	25 e3       	ldi	r18, 0x35	; 53
     8d8:	3a ef       	ldi	r19, 0xFA	; 250
     8da:	4e e8       	ldi	r20, 0x8E	; 142
     8dc:	5c e3       	ldi	r21, 0x3C	; 60
     8de:	c3 01       	movw	r24, r6
     8e0:	b2 01       	movw	r22, r4
     8e2:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     8e6:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <sin>
     8ea:	27 e1       	ldi	r18, 0x17	; 23
     8ec:	38 e4       	ldi	r19, 0x48	; 72
     8ee:	40 ed       	ldi	r20, 0xD0	; 208
     8f0:	5e e3       	ldi	r21, 0x3E	; 62
     8f2:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     8f6:	9b 01       	movw	r18, r22
     8f8:	ac 01       	movw	r20, r24
     8fa:	c5 01       	movw	r24, r10
     8fc:	b4 01       	movw	r22, r8
     8fe:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     902:	4b 01       	movw	r8, r22
     904:	5c 01       	movw	r10, r24
     906:	25 e3       	ldi	r18, 0x35	; 53
     908:	3a ef       	ldi	r19, 0xFA	; 250
     90a:	4e e0       	ldi	r20, 0x0E	; 14
     90c:	5d e3       	ldi	r21, 0x3D	; 61
     90e:	c3 01       	movw	r24, r6
     910:	b2 01       	movw	r22, r4
     912:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     916:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <sin>
     91a:	26 e2       	ldi	r18, 0x26	; 38
     91c:	34 ee       	ldi	r19, 0xE4	; 228
     91e:	43 e8       	ldi	r20, 0x83	; 131
     920:	5c e3       	ldi	r21, 0x3C	; 60
     922:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     926:	9b 01       	movw	r18, r22
     928:	ac 01       	movw	r20, r24
     92a:	c5 01       	movw	r24, r10
     92c:	b4 01       	movw	r22, r8
     92e:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     932:	4b 01       	movw	r8, r22
     934:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0004*sinf(dr*3*Mpr);
     936:	20 e5       	ldi	r18, 0x50	; 80
     938:	37 e7       	ldi	r19, 0x77	; 119
     93a:	46 e5       	ldi	r20, 0x56	; 86
     93c:	5d e3       	ldi	r21, 0x3D	; 61
     93e:	c3 01       	movw	r24, r6
     940:	b2 01       	movw	r22, r4
     942:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     946:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <sin>
     94a:	27 e1       	ldi	r18, 0x17	; 23
     94c:	37 eb       	ldi	r19, 0xB7	; 183
     94e:	41 ed       	ldi	r20, 0xD1	; 209
     950:	59 e3       	ldi	r21, 0x39	; 57
     952:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     956:	9b 01       	movw	r18, r22
     958:	ac 01       	movw	r20, r24
     95a:	c5 01       	movw	r24, r10
     95c:	b4 01       	movw	r22, r8
     95e:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     962:	4b 01       	movw	r8, r22
     964:	5c 01       	movw	r10, r24
	C1 = C1 + 0.0104*sinf(dr*2*F) - 0.0051*sinf(dr*(M+Mpr));
     966:	25 e3       	ldi	r18, 0x35	; 53
     968:	3a ef       	ldi	r19, 0xFA	; 250
     96a:	4e e0       	ldi	r20, 0x0E	; 14
     96c:	5d e3       	ldi	r21, 0x3D	; 61
     96e:	c7 01       	movw	r24, r14
     970:	b6 01       	movw	r22, r12
     972:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     976:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <sin>
     97a:	23 ec       	ldi	r18, 0xC3	; 195
     97c:	34 e6       	ldi	r19, 0x64	; 100
     97e:	4a e2       	ldi	r20, 0x2A	; 42
     980:	5c e3       	ldi	r21, 0x3C	; 60
     982:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     986:	9b 01       	movw	r18, r22
     988:	ac 01       	movw	r20, r24
     98a:	c5 01       	movw	r24, r10
     98c:	b4 01       	movw	r22, r8
     98e:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     992:	4b 01       	movw	r8, r22
     994:	5c 01       	movw	r10, r24
     996:	a3 01       	movw	r20, r6
     998:	92 01       	movw	r18, r4
     99a:	69 85       	ldd	r22, Y+9	; 0x09
     99c:	7a 85       	ldd	r23, Y+10	; 0x0a
     99e:	8b 85       	ldd	r24, Y+11	; 0x0b
     9a0:	9c 85       	ldd	r25, Y+12	; 0x0c
     9a2:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     9a6:	25 e3       	ldi	r18, 0x35	; 53
     9a8:	3a ef       	ldi	r19, 0xFA	; 250
     9aa:	4e e8       	ldi	r20, 0x8E	; 142
     9ac:	5c e3       	ldi	r21, 0x3C	; 60
     9ae:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     9b2:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <sin>
     9b6:	27 ee       	ldi	r18, 0xE7	; 231
     9b8:	3d e1       	ldi	r19, 0x1D	; 29
     9ba:	47 ea       	ldi	r20, 0xA7	; 167
     9bc:	5b e3       	ldi	r21, 0x3B	; 59
     9be:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     9c2:	9b 01       	movw	r18, r22
     9c4:	ac 01       	movw	r20, r24
     9c6:	c5 01       	movw	r24, r10
     9c8:	b4 01       	movw	r22, r8
     9ca:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     9ce:	4b 01       	movw	r8, r22
     9d0:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0074*sinf(dr*(M-Mpr)) + 0.0004*sinf(dr*(2*F+M));
     9d2:	a3 01       	movw	r20, r6
     9d4:	92 01       	movw	r18, r4
     9d6:	69 85       	ldd	r22, Y+9	; 0x09
     9d8:	7a 85       	ldd	r23, Y+10	; 0x0a
     9da:	8b 85       	ldd	r24, Y+11	; 0x0b
     9dc:	9c 85       	ldd	r25, Y+12	; 0x0c
     9de:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     9e2:	25 e3       	ldi	r18, 0x35	; 53
     9e4:	3a ef       	ldi	r19, 0xFA	; 250
     9e6:	4e e8       	ldi	r20, 0x8E	; 142
     9e8:	5c e3       	ldi	r21, 0x3C	; 60
     9ea:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     9ee:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <sin>
     9f2:	23 eb       	ldi	r18, 0xB3	; 179
     9f4:	3b e7       	ldi	r19, 0x7B	; 123
     9f6:	42 ef       	ldi	r20, 0xF2	; 242
     9f8:	5b e3       	ldi	r21, 0x3B	; 59
     9fa:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     9fe:	9b 01       	movw	r18, r22
     a00:	ac 01       	movw	r20, r24
     a02:	c5 01       	movw	r24, r10
     a04:	b4 01       	movw	r22, r8
     a06:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     a0a:	4b 01       	movw	r8, r22
     a0c:	5c 01       	movw	r10, r24
     a0e:	a7 01       	movw	r20, r14
     a10:	96 01       	movw	r18, r12
     a12:	c7 01       	movw	r24, r14
     a14:	b6 01       	movw	r22, r12
     a16:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     a1a:	6b 01       	movw	r12, r22
     a1c:	7c 01       	movw	r14, r24
     a1e:	9b 01       	movw	r18, r22
     a20:	ac 01       	movw	r20, r24
     a22:	69 85       	ldd	r22, Y+9	; 0x09
     a24:	7a 85       	ldd	r23, Y+10	; 0x0a
     a26:	8b 85       	ldd	r24, Y+11	; 0x0b
     a28:	9c 85       	ldd	r25, Y+12	; 0x0c
     a2a:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     a2e:	25 e3       	ldi	r18, 0x35	; 53
     a30:	3a ef       	ldi	r19, 0xFA	; 250
     a32:	4e e8       	ldi	r20, 0x8E	; 142
     a34:	5c e3       	ldi	r21, 0x3C	; 60
     a36:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     a3a:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <sin>
     a3e:	27 e1       	ldi	r18, 0x17	; 23
     a40:	37 eb       	ldi	r19, 0xB7	; 183
     a42:	41 ed       	ldi	r20, 0xD1	; 209
     a44:	59 e3       	ldi	r21, 0x39	; 57
     a46:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     a4a:	9b 01       	movw	r18, r22
     a4c:	ac 01       	movw	r20, r24
     a4e:	c5 01       	movw	r24, r10
     a50:	b4 01       	movw	r22, r8
     a52:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     a56:	4b 01       	movw	r8, r22
     a58:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0004*sinf(dr*(2*F-M)) - 0.0006*sinf(dr*(2*F+Mpr));
     a5a:	29 85       	ldd	r18, Y+9	; 0x09
     a5c:	3a 85       	ldd	r19, Y+10	; 0x0a
     a5e:	4b 85       	ldd	r20, Y+11	; 0x0b
     a60:	5c 85       	ldd	r21, Y+12	; 0x0c
     a62:	c7 01       	movw	r24, r14
     a64:	b6 01       	movw	r22, r12
     a66:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     a6a:	25 e3       	ldi	r18, 0x35	; 53
     a6c:	3a ef       	ldi	r19, 0xFA	; 250
     a6e:	4e e8       	ldi	r20, 0x8E	; 142
     a70:	5c e3       	ldi	r21, 0x3C	; 60
     a72:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     a76:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <sin>
     a7a:	27 e1       	ldi	r18, 0x17	; 23
     a7c:	37 eb       	ldi	r19, 0xB7	; 183
     a7e:	41 ed       	ldi	r20, 0xD1	; 209
     a80:	59 e3       	ldi	r21, 0x39	; 57
     a82:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     a86:	9b 01       	movw	r18, r22
     a88:	ac 01       	movw	r20, r24
     a8a:	c5 01       	movw	r24, r10
     a8c:	b4 01       	movw	r22, r8
     a8e:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     a92:	4b 01       	movw	r8, r22
     a94:	5c 01       	movw	r10, r24
     a96:	a7 01       	movw	r20, r14
     a98:	96 01       	movw	r18, r12
     a9a:	c3 01       	movw	r24, r6
     a9c:	b2 01       	movw	r22, r4
     a9e:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     aa2:	25 e3       	ldi	r18, 0x35	; 53
     aa4:	3a ef       	ldi	r19, 0xFA	; 250
     aa6:	4e e8       	ldi	r20, 0x8E	; 142
     aa8:	5c e3       	ldi	r21, 0x3C	; 60
     aaa:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     aae:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <sin>
     ab2:	22 e5       	ldi	r18, 0x52	; 82
     ab4:	39 e4       	ldi	r19, 0x49	; 73
     ab6:	4d e1       	ldi	r20, 0x1D	; 29
     ab8:	5a e3       	ldi	r21, 0x3A	; 58
     aba:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     abe:	9b 01       	movw	r18, r22
     ac0:	ac 01       	movw	r20, r24
     ac2:	c5 01       	movw	r24, r10
     ac4:	b4 01       	movw	r22, r8
     ac6:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     aca:	4b 01       	movw	r8, r22
     acc:	5c 01       	movw	r10, r24
	C1 = C1 + 0.0010*sinf(dr*(2*F-Mpr)) + 0.0005*sinf(dr*(2*Mpr+M));
     ace:	a3 01       	movw	r20, r6
     ad0:	92 01       	movw	r18, r4
     ad2:	c7 01       	movw	r24, r14
     ad4:	b6 01       	movw	r22, r12
     ad6:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     ada:	25 e3       	ldi	r18, 0x35	; 53
     adc:	3a ef       	ldi	r19, 0xFA	; 250
     ade:	4e e8       	ldi	r20, 0x8E	; 142
     ae0:	5c e3       	ldi	r21, 0x3C	; 60
     ae2:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     ae6:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <sin>
     aea:	2f e6       	ldi	r18, 0x6F	; 111
     aec:	32 e1       	ldi	r19, 0x12	; 18
     aee:	43 e8       	ldi	r20, 0x83	; 131
     af0:	5a e3       	ldi	r21, 0x3A	; 58
     af2:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     af6:	9b 01       	movw	r18, r22
     af8:	ac 01       	movw	r20, r24
     afa:	c5 01       	movw	r24, r10
     afc:	b4 01       	movw	r22, r8
     afe:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     b02:	6b 01       	movw	r12, r22
     b04:	7c 01       	movw	r14, r24
     b06:	a3 01       	movw	r20, r6
     b08:	92 01       	movw	r18, r4
     b0a:	c3 01       	movw	r24, r6
     b0c:	b2 01       	movw	r22, r4
     b0e:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     b12:	9b 01       	movw	r18, r22
     b14:	ac 01       	movw	r20, r24
     b16:	69 85       	ldd	r22, Y+9	; 0x09
     b18:	7a 85       	ldd	r23, Y+10	; 0x0a
     b1a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b1c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b1e:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     b22:	25 e3       	ldi	r18, 0x35	; 53
     b24:	3a ef       	ldi	r19, 0xFA	; 250
     b26:	4e e8       	ldi	r20, 0x8E	; 142
     b28:	5c e3       	ldi	r21, 0x3C	; 60
     b2a:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     b2e:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <sin>
     b32:	2f e6       	ldi	r18, 0x6F	; 111
     b34:	32 e1       	ldi	r19, 0x12	; 18
     b36:	43 e0       	ldi	r20, 0x03	; 3
     b38:	5a e3       	ldi	r21, 0x3A	; 58
     b3a:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
     b42:	c7 01       	movw	r24, r14
     b44:	b6 01       	movw	r22, r12
     b46:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     b4a:	6b 01       	movw	r12, r22
     b4c:	7c 01       	movw	r14, r24
	if (T < -11) {
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e3       	ldi	r20, 0x30	; 48
     b54:	51 ec       	ldi	r21, 0xC1	; 193
     b56:	69 81       	ldd	r22, Y+1	; 0x01
     b58:	7a 81       	ldd	r23, Y+2	; 0x02
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
     b5c:	9c 81       	ldd	r25, Y+4	; 0x04
     b5e:	0e 94 ab 11 	call	0x2356	; 0x2356 <__cmpsf2>
     b62:	88 23       	and	r24, r24
     b64:	0c f0       	brlt	.+2      	; 0xb68 <__stack+0x309>
     b66:	51 c0       	rjmp	.+162    	; 0xc0a <__stack+0x3ab>
		deltat= 0.001 + 0.000839*T + 0.0002261*T2 - 0.00000845*T3 - 0.000000081*T*T3;
     b68:	26 e5       	ldi	r18, 0x56	; 86
     b6a:	30 ef       	ldi	r19, 0xF0	; 240
     b6c:	4b e5       	ldi	r20, 0x5B	; 91
     b6e:	5a e3       	ldi	r21, 0x3A	; 58
     b70:	69 81       	ldd	r22, Y+1	; 0x01
     b72:	7a 81       	ldd	r23, Y+2	; 0x02
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     b7c:	2f e6       	ldi	r18, 0x6F	; 111
     b7e:	32 e1       	ldi	r19, 0x12	; 18
     b80:	43 e8       	ldi	r20, 0x83	; 131
     b82:	5a e3       	ldi	r21, 0x3A	; 58
     b84:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     b88:	4b 01       	movw	r8, r22
     b8a:	5c 01       	movw	r10, r24
     b8c:	22 e4       	ldi	r18, 0x42	; 66
     b8e:	35 e1       	ldi	r19, 0x15	; 21
     b90:	4d e6       	ldi	r20, 0x6D	; 109
     b92:	59 e3       	ldi	r21, 0x39	; 57
     b94:	6d 81       	ldd	r22, Y+5	; 0x05
     b96:	7e 81       	ldd	r23, Y+6	; 0x06
     b98:	8f 81       	ldd	r24, Y+7	; 0x07
     b9a:	98 85       	ldd	r25, Y+8	; 0x08
     b9c:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     ba0:	9b 01       	movw	r18, r22
     ba2:	ac 01       	movw	r20, r24
     ba4:	c5 01       	movw	r24, r10
     ba6:	b4 01       	movw	r22, r8
     ba8:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     bac:	4b 01       	movw	r8, r22
     bae:	5c 01       	movw	r10, r24
     bb0:	29 e7       	ldi	r18, 0x79	; 121
     bb2:	34 ec       	ldi	r19, 0xC4	; 196
     bb4:	4d e0       	ldi	r20, 0x0D	; 13
     bb6:	57 e3       	ldi	r21, 0x37	; 55
     bb8:	6d 85       	ldd	r22, Y+13	; 0x0d
     bba:	7e 85       	ldd	r23, Y+14	; 0x0e
     bbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     bbe:	98 89       	ldd	r25, Y+16	; 0x10
     bc0:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     bc4:	9b 01       	movw	r18, r22
     bc6:	ac 01       	movw	r20, r24
     bc8:	c5 01       	movw	r24, r10
     bca:	b4 01       	movw	r22, r8
     bcc:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     bd0:	4b 01       	movw	r8, r22
     bd2:	5c 01       	movw	r10, r24
     bd4:	29 e3       	ldi	r18, 0x39	; 57
     bd6:	32 ef       	ldi	r19, 0xF2	; 242
     bd8:	4d ea       	ldi	r20, 0xAD	; 173
     bda:	53 e3       	ldi	r21, 0x33	; 51
     bdc:	69 81       	ldd	r22, Y+1	; 0x01
     bde:	7a 81       	ldd	r23, Y+2	; 0x02
     be0:	8b 81       	ldd	r24, Y+3	; 0x03
     be2:	9c 81       	ldd	r25, Y+4	; 0x04
     be4:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     be8:	9b 01       	movw	r18, r22
     bea:	ac 01       	movw	r20, r24
     bec:	6d 85       	ldd	r22, Y+13	; 0x0d
     bee:	7e 85       	ldd	r23, Y+14	; 0x0e
     bf0:	8f 85       	ldd	r24, Y+15	; 0x0f
     bf2:	98 89       	ldd	r25, Y+16	; 0x10
     bf4:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     bf8:	9b 01       	movw	r18, r22
     bfa:	ac 01       	movw	r20, r24
     bfc:	c5 01       	movw	r24, r10
     bfe:	b4 01       	movw	r22, r8
     c00:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     c04:	4b 01       	movw	r8, r22
     c06:	5c 01       	movw	r10, r24
     c08:	24 c0       	rjmp	.+72     	; 0xc52 <__stack+0x3f3>
		} else {
		deltat= -0.000278 + 0.000265*T + 0.000262*T2;
     c0a:	23 eb       	ldi	r18, 0xB3	; 179
     c0c:	3f ee       	ldi	r19, 0xEF	; 239
     c0e:	4a e8       	ldi	r20, 0x8A	; 138
     c10:	59 e3       	ldi	r21, 0x39	; 57
     c12:	69 81       	ldd	r22, Y+1	; 0x01
     c14:	7a 81       	ldd	r23, Y+2	; 0x02
     c16:	8b 81       	ldd	r24, Y+3	; 0x03
     c18:	9c 81       	ldd	r25, Y+4	; 0x04
     c1a:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     c1e:	27 e8       	ldi	r18, 0x87	; 135
     c20:	30 ec       	ldi	r19, 0xC0	; 192
     c22:	41 e9       	ldi	r20, 0x91	; 145
     c24:	59 e3       	ldi	r21, 0x39	; 57
     c26:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     c2a:	4b 01       	movw	r8, r22
     c2c:	5c 01       	movw	r10, r24
     c2e:	2b e0       	ldi	r18, 0x0B	; 11
     c30:	3d e5       	ldi	r19, 0x5D	; 93
     c32:	49 e8       	ldi	r20, 0x89	; 137
     c34:	59 e3       	ldi	r21, 0x39	; 57
     c36:	6d 81       	ldd	r22, Y+5	; 0x05
     c38:	7e 81       	ldd	r23, Y+6	; 0x06
     c3a:	8f 81       	ldd	r24, Y+7	; 0x07
     c3c:	98 85       	ldd	r25, Y+8	; 0x08
     c3e:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     c42:	9b 01       	movw	r18, r22
     c44:	ac 01       	movw	r20, r24
     c46:	c5 01       	movw	r24, r10
     c48:	b4 01       	movw	r22, r8
     c4a:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     c4e:	4b 01       	movw	r8, r22
     c50:	5c 01       	movw	r10, r24
	};
	JdNew = Jd1 + C1 - deltat;
     c52:	a7 01       	movw	r20, r14
     c54:	96 01       	movw	r18, r12
     c56:	69 89       	ldd	r22, Y+17	; 0x11
     c58:	7a 89       	ldd	r23, Y+18	; 0x12
     c5a:	8b 89       	ldd	r24, Y+19	; 0x13
     c5c:	9c 89       	ldd	r25, Y+20	; 0x14
     c5e:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     c62:	a5 01       	movw	r20, r10
     c64:	94 01       	movw	r18, r8
     c66:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
	return floorf(JdNew + 0.5 + timeZone/24);
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	5f e3       	ldi	r21, 0x3F	; 63
     c72:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     c76:	6b 01       	movw	r12, r22
     c78:	7c 01       	movw	r14, r24
     c7a:	8d 89       	ldd	r24, Y+21	; 0x15
     c7c:	9e 89       	ldd	r25, Y+22	; 0x16
     c7e:	68 e1       	ldi	r22, 0x18	; 24
     c80:	70 e0       	ldi	r23, 0x00	; 0
     c82:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
     c86:	07 2e       	mov	r0, r23
     c88:	00 0c       	add	r0, r0
     c8a:	88 0b       	sbc	r24, r24
     c8c:	99 0b       	sbc	r25, r25
     c8e:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__floatsisf>
     c92:	9b 01       	movw	r18, r22
     c94:	ac 01       	movw	r20, r24
     c96:	c7 01       	movw	r24, r14
     c98:	b6 01       	movw	r22, r12
     c9a:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     c9e:	0e 94 95 12 	call	0x252a	; 0x252a <floor>
}
     ca2:	66 96       	adiw	r28, 0x16	; 22
     ca4:	0f b6       	in	r0, 0x3f	; 63
     ca6:	f8 94       	cli
     ca8:	de bf       	out	0x3e, r29	; 62
     caa:	0f be       	out	0x3f, r0	; 63
     cac:	cd bf       	out	0x3d, r28	; 61
     cae:	df 91       	pop	r29
     cb0:	cf 91       	pop	r28
     cb2:	ff 90       	pop	r15
     cb4:	ef 90       	pop	r14
     cb6:	df 90       	pop	r13
     cb8:	cf 90       	pop	r12
     cba:	bf 90       	pop	r11
     cbc:	af 90       	pop	r10
     cbe:	9f 90       	pop	r9
     cc0:	8f 90       	pop	r8
     cc2:	7f 90       	pop	r7
     cc4:	6f 90       	pop	r6
     cc6:	5f 90       	pop	r5
     cc8:	4f 90       	pop	r4
     cca:	08 95       	ret

00000ccc <getSunLongitude>:

double getSunLongitude(long double jdn, int timeZone)
{
     ccc:	4f 92       	push	r4
     cce:	5f 92       	push	r5
     cd0:	6f 92       	push	r6
     cd2:	7f 92       	push	r7
     cd4:	8f 92       	push	r8
     cd6:	9f 92       	push	r9
     cd8:	af 92       	push	r10
     cda:	bf 92       	push	r11
     cdc:	cf 92       	push	r12
     cde:	df 92       	push	r13
     ce0:	ef 92       	push	r14
     ce2:	ff 92       	push	r15
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	cd b7       	in	r28, 0x3d	; 61
     cea:	de b7       	in	r29, 0x3e	; 62
     cec:	28 97       	sbiw	r28, 0x08	; 8
     cee:	0f b6       	in	r0, 0x3f	; 63
     cf0:	f8 94       	cli
     cf2:	de bf       	out	0x3e, r29	; 62
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	cd bf       	out	0x3d, r28	; 61
     cf8:	5a 01       	movw	r10, r20
	long double T, T2, dr, M, L0, DL, L;
	T = (jdn - 2451545.5 - timeZone/24) / 36525; // Time in Julian centuries from 2000-01-01 12:00:00 GMT
     cfa:	26 e6       	ldi	r18, 0x66	; 102
     cfc:	31 ea       	ldi	r19, 0xA1	; 161
     cfe:	45 e1       	ldi	r20, 0x15	; 21
     d00:	5a e4       	ldi	r21, 0x4A	; 74
     d02:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     d06:	6b 01       	movw	r12, r22
     d08:	7c 01       	movw	r14, r24
     d0a:	c5 01       	movw	r24, r10
     d0c:	68 e1       	ldi	r22, 0x18	; 24
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
     d14:	07 2e       	mov	r0, r23
     d16:	00 0c       	add	r0, r0
     d18:	88 0b       	sbc	r24, r24
     d1a:	99 0b       	sbc	r25, r25
     d1c:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <__floatsisf>
     d20:	9b 01       	movw	r18, r22
     d22:	ac 01       	movw	r20, r24
     d24:	c7 01       	movw	r24, r14
     d26:	b6 01       	movw	r22, r12
     d28:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	3d ea       	ldi	r19, 0xAD	; 173
     d30:	4e e0       	ldi	r20, 0x0E	; 14
     d32:	57 e4       	ldi	r21, 0x47	; 71
     d34:	0e 94 b0 11 	call	0x2360	; 0x2360 <__divsf3>
     d38:	6b 01       	movw	r12, r22
     d3a:	7c 01       	movw	r14, r24
	T2 = T*T;
     d3c:	9b 01       	movw	r18, r22
     d3e:	ac 01       	movw	r20, r24
     d40:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     d44:	4b 01       	movw	r8, r22
     d46:	5c 01       	movw	r10, r24
	dr = M_PI/180; // degree to radian
	M = 357.52910 + 35999.05030*T - 0.0001559*T2 - 0.00000048*T*T2; // mean anomaly, degree
     d48:	2d e0       	ldi	r18, 0x0D	; 13
     d4a:	3f e9       	ldi	r19, 0x9F	; 159
     d4c:	4c e0       	ldi	r20, 0x0C	; 12
     d4e:	57 e4       	ldi	r21, 0x47	; 71
     d50:	c7 01       	movw	r24, r14
     d52:	b6 01       	movw	r22, r12
     d54:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     d58:	2a eb       	ldi	r18, 0xBA	; 186
     d5a:	33 ec       	ldi	r19, 0xC3	; 195
     d5c:	42 eb       	ldi	r20, 0xB2	; 178
     d5e:	53 e4       	ldi	r21, 0x43	; 67
     d60:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     d64:	2b 01       	movw	r4, r22
     d66:	3c 01       	movw	r6, r24
     d68:	26 e1       	ldi	r18, 0x16	; 22
     d6a:	39 e7       	ldi	r19, 0x79	; 121
     d6c:	43 e2       	ldi	r20, 0x23	; 35
     d6e:	59 e3       	ldi	r21, 0x39	; 57
     d70:	c5 01       	movw	r24, r10
     d72:	b4 01       	movw	r22, r8
     d74:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     d78:	9b 01       	movw	r18, r22
     d7a:	ac 01       	movw	r20, r24
     d7c:	c3 01       	movw	r24, r6
     d7e:	b2 01       	movw	r22, r4
     d80:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     d84:	2b 01       	movw	r4, r22
     d86:	3c 01       	movw	r6, r24
     d88:	29 e5       	ldi	r18, 0x59	; 89
     d8a:	39 ed       	ldi	r19, 0xD9	; 217
     d8c:	40 e0       	ldi	r20, 0x00	; 0
     d8e:	55 e3       	ldi	r21, 0x35	; 53
     d90:	c7 01       	movw	r24, r14
     d92:	b6 01       	movw	r22, r12
     d94:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     d98:	9b 01       	movw	r18, r22
     d9a:	ac 01       	movw	r20, r24
     d9c:	c5 01       	movw	r24, r10
     d9e:	b4 01       	movw	r22, r8
     da0:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     da4:	9b 01       	movw	r18, r22
     da6:	ac 01       	movw	r20, r24
     da8:	c3 01       	movw	r24, r6
     daa:	b2 01       	movw	r22, r4
     dac:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     db0:	2b 01       	movw	r4, r22
     db2:	3c 01       	movw	r6, r24
	L0 = 280.46645 + 36000.76983*T + 0.0003032*T2; // mean longitude, degree
     db4:	25 ec       	ldi	r18, 0xC5	; 197
     db6:	30 ea       	ldi	r19, 0xA0	; 160
     db8:	4c e0       	ldi	r20, 0x0C	; 12
     dba:	57 e4       	ldi	r21, 0x47	; 71
     dbc:	c7 01       	movw	r24, r14
     dbe:	b6 01       	movw	r22, r12
     dc0:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     dc4:	25 eb       	ldi	r18, 0xB5	; 181
     dc6:	3b e3       	ldi	r19, 0x3B	; 59
     dc8:	4c e8       	ldi	r20, 0x8C	; 140
     dca:	53 e4       	ldi	r21, 0x43	; 67
     dcc:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     dd0:	69 83       	std	Y+1, r22	; 0x01
     dd2:	7a 83       	std	Y+2, r23	; 0x02
     dd4:	8b 83       	std	Y+3, r24	; 0x03
     dd6:	9c 83       	std	Y+4, r25	; 0x04
     dd8:	21 ed       	ldi	r18, 0xD1	; 209
     dda:	36 ef       	ldi	r19, 0xF6	; 246
     ddc:	4e e9       	ldi	r20, 0x9E	; 158
     dde:	59 e3       	ldi	r21, 0x39	; 57
     de0:	c5 01       	movw	r24, r10
     de2:	b4 01       	movw	r22, r8
     de4:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     de8:	9b 01       	movw	r18, r22
     dea:	ac 01       	movw	r20, r24
     dec:	69 81       	ldd	r22, Y+1	; 0x01
     dee:	7a 81       	ldd	r23, Y+2	; 0x02
     df0:	8b 81       	ldd	r24, Y+3	; 0x03
     df2:	9c 81       	ldd	r25, Y+4	; 0x04
     df4:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     df8:	69 83       	std	Y+1, r22	; 0x01
     dfa:	7a 83       	std	Y+2, r23	; 0x02
     dfc:	8b 83       	std	Y+3, r24	; 0x03
     dfe:	9c 83       	std	Y+4, r25	; 0x04
	DL = (1.914600 - 0.004817*T - 0.000014*T2)*sinf(dr*M);
     e00:	2d ee       	ldi	r18, 0xED	; 237
     e02:	37 ed       	ldi	r19, 0xD7	; 215
     e04:	4d e9       	ldi	r20, 0x9D	; 157
     e06:	5b e3       	ldi	r21, 0x3B	; 59
     e08:	c7 01       	movw	r24, r14
     e0a:	b6 01       	movw	r22, r12
     e0c:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     e10:	9b 01       	movw	r18, r22
     e12:	ac 01       	movw	r20, r24
     e14:	6d e9       	ldi	r22, 0x9D	; 157
     e16:	71 e1       	ldi	r23, 0x11	; 17
     e18:	85 ef       	ldi	r24, 0xF5	; 245
     e1a:	9f e3       	ldi	r25, 0x3F	; 63
     e1c:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     e20:	6d 83       	std	Y+5, r22	; 0x05
     e22:	7e 83       	std	Y+6, r23	; 0x06
     e24:	8f 83       	std	Y+7, r24	; 0x07
     e26:	98 87       	std	Y+8, r25	; 0x08
     e28:	2b e8       	ldi	r18, 0x8B	; 139
     e2a:	31 ee       	ldi	r19, 0xE1	; 225
     e2c:	4a e6       	ldi	r20, 0x6A	; 106
     e2e:	57 e3       	ldi	r21, 0x37	; 55
     e30:	c5 01       	movw	r24, r10
     e32:	b4 01       	movw	r22, r8
     e34:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     e38:	9b 01       	movw	r18, r22
     e3a:	ac 01       	movw	r20, r24
     e3c:	6d 81       	ldd	r22, Y+5	; 0x05
     e3e:	7e 81       	ldd	r23, Y+6	; 0x06
     e40:	8f 81       	ldd	r24, Y+7	; 0x07
     e42:	98 85       	ldd	r25, Y+8	; 0x08
     e44:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     e48:	4b 01       	movw	r8, r22
     e4a:	5c 01       	movw	r10, r24
     e4c:	25 e3       	ldi	r18, 0x35	; 53
     e4e:	3a ef       	ldi	r19, 0xFA	; 250
     e50:	4e e8       	ldi	r20, 0x8E	; 142
     e52:	5c e3       	ldi	r21, 0x3C	; 60
     e54:	c3 01       	movw	r24, r6
     e56:	b2 01       	movw	r22, r4
     e58:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     e5c:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <sin>
     e60:	9b 01       	movw	r18, r22
     e62:	ac 01       	movw	r20, r24
     e64:	c5 01       	movw	r24, r10
     e66:	b4 01       	movw	r22, r8
     e68:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     e6c:	4b 01       	movw	r8, r22
     e6e:	5c 01       	movw	r10, r24
	DL = DL + (0.019993 - 0.000101*T)*sinf(dr*2*M) + 0.000290*sinf(dr*3*M);
     e70:	26 ef       	ldi	r18, 0xF6	; 246
     e72:	3f ec       	ldi	r19, 0xCF	; 207
     e74:	43 ed       	ldi	r20, 0xD3	; 211
     e76:	58 e3       	ldi	r21, 0x38	; 56
     e78:	c7 01       	movw	r24, r14
     e7a:	b6 01       	movw	r22, r12
     e7c:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     e80:	9b 01       	movw	r18, r22
     e82:	ac 01       	movw	r20, r24
     e84:	6c e5       	ldi	r22, 0x5C	; 92
     e86:	78 ec       	ldi	r23, 0xC8	; 200
     e88:	83 ea       	ldi	r24, 0xA3	; 163
     e8a:	9c e3       	ldi	r25, 0x3C	; 60
     e8c:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     e90:	6b 01       	movw	r12, r22
     e92:	7c 01       	movw	r14, r24
     e94:	25 e3       	ldi	r18, 0x35	; 53
     e96:	3a ef       	ldi	r19, 0xFA	; 250
     e98:	4e e0       	ldi	r20, 0x0E	; 14
     e9a:	5d e3       	ldi	r21, 0x3D	; 61
     e9c:	c3 01       	movw	r24, r6
     e9e:	b2 01       	movw	r22, r4
     ea0:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     ea4:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <sin>
     ea8:	9b 01       	movw	r18, r22
     eaa:	ac 01       	movw	r20, r24
     eac:	c7 01       	movw	r24, r14
     eae:	b6 01       	movw	r22, r12
     eb0:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     eb4:	9b 01       	movw	r18, r22
     eb6:	ac 01       	movw	r20, r24
     eb8:	c5 01       	movw	r24, r10
     eba:	b4 01       	movw	r22, r8
     ebc:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     ec0:	6b 01       	movw	r12, r22
     ec2:	7c 01       	movw	r14, r24
     ec4:	20 e5       	ldi	r18, 0x50	; 80
     ec6:	37 e7       	ldi	r19, 0x77	; 119
     ec8:	46 e5       	ldi	r20, 0x56	; 86
     eca:	5d e3       	ldi	r21, 0x3D	; 61
     ecc:	c3 01       	movw	r24, r6
     ece:	b2 01       	movw	r22, r4
     ed0:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     ed4:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <sin>
     ed8:	24 e2       	ldi	r18, 0x24	; 36
     eda:	3b e0       	ldi	r19, 0x0B	; 11
     edc:	48 e9       	ldi	r20, 0x98	; 152
     ede:	59 e3       	ldi	r21, 0x39	; 57
     ee0:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     ee4:	9b 01       	movw	r18, r22
     ee6:	ac 01       	movw	r20, r24
     ee8:	c7 01       	movw	r24, r14
     eea:	b6 01       	movw	r22, r12
     eec:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
     ef0:	9b 01       	movw	r18, r22
     ef2:	ac 01       	movw	r20, r24
	L = L0 + DL; // true longitude, degree
     ef4:	69 81       	ldd	r22, Y+1	; 0x01
     ef6:	7a 81       	ldd	r23, Y+2	; 0x02
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	9c 81       	ldd	r25, Y+4	; 0x04
     efc:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
	L = L*dr;
     f00:	25 e3       	ldi	r18, 0x35	; 53
     f02:	3a ef       	ldi	r19, 0xFA	; 250
     f04:	4e e8       	ldi	r20, 0x8E	; 142
     f06:	5c e3       	ldi	r21, 0x3C	; 60
     f08:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     f0c:	6b 01       	movw	r12, r22
     f0e:	7c 01       	movw	r14, r24
	L = L - M_PI*2*(floorf(L/(M_PI*2))); // Normalize to (0, 2*PI)
     f10:	2b ed       	ldi	r18, 0xDB	; 219
     f12:	3f e0       	ldi	r19, 0x0F	; 15
     f14:	49 ec       	ldi	r20, 0xC9	; 201
     f16:	50 e4       	ldi	r21, 0x40	; 64
     f18:	0e 94 b0 11 	call	0x2360	; 0x2360 <__divsf3>
     f1c:	0e 94 95 12 	call	0x252a	; 0x252a <floor>
     f20:	2b ed       	ldi	r18, 0xDB	; 219
     f22:	3f e0       	ldi	r19, 0x0F	; 15
     f24:	49 ec       	ldi	r20, 0xC9	; 201
     f26:	50 e4       	ldi	r21, 0x40	; 64
     f28:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     f2c:	9b 01       	movw	r18, r22
     f2e:	ac 01       	movw	r20, r24
     f30:	c7 01       	movw	r24, r14
     f32:	b6 01       	movw	r22, r12
     f34:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
	return floorf(L / M_PI * 6);
     f38:	2b ed       	ldi	r18, 0xDB	; 219
     f3a:	3f e0       	ldi	r19, 0x0F	; 15
     f3c:	49 e4       	ldi	r20, 0x49	; 73
     f3e:	50 e4       	ldi	r21, 0x40	; 64
     f40:	0e 94 b0 11 	call	0x2360	; 0x2360 <__divsf3>
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 ec       	ldi	r20, 0xC0	; 192
     f4a:	50 e4       	ldi	r21, 0x40	; 64
     f4c:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
     f50:	0e 94 95 12 	call	0x252a	; 0x252a <floor>
}
     f54:	28 96       	adiw	r28, 0x08	; 8
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	ff 90       	pop	r15
     f66:	ef 90       	pop	r14
     f68:	df 90       	pop	r13
     f6a:	cf 90       	pop	r12
     f6c:	bf 90       	pop	r11
     f6e:	af 90       	pop	r10
     f70:	9f 90       	pop	r9
     f72:	8f 90       	pop	r8
     f74:	7f 90       	pop	r7
     f76:	6f 90       	pop	r6
     f78:	5f 90       	pop	r5
     f7a:	4f 90       	pop	r4
     f7c:	08 95       	ret

00000f7e <getLunarMonth11>:

double getLunarMonth11(uint16_t yy, int timeZone)
{
     f7e:	8f 92       	push	r8
     f80:	9f 92       	push	r9
     f82:	af 92       	push	r10
     f84:	bf 92       	push	r11
     f86:	cf 92       	push	r12
     f88:	df 92       	push	r13
     f8a:	ef 92       	push	r14
     f8c:	ff 92       	push	r15
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	eb 01       	movw	r28, r22
	long double k, off, nm, sunLong;
	off = jdFromDate(31, 12, yy) - 2415021;
     f94:	ac 01       	movw	r20, r24
     f96:	6c e0       	ldi	r22, 0x0C	; 12
     f98:	8f e1       	ldi	r24, 0x1F	; 31
     f9a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <jdFromDate>
     f9e:	24 eb       	ldi	r18, 0xB4	; 180
     fa0:	36 e6       	ldi	r19, 0x66	; 102
     fa2:	43 e1       	ldi	r20, 0x13	; 19
     fa4:	5a e4       	ldi	r21, 0x4A	; 74
     fa6:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
	k = floorf(off / 29.530588853);
     faa:	25 ea       	ldi	r18, 0xA5	; 165
     fac:	3e e3       	ldi	r19, 0x3E	; 62
     fae:	4c ee       	ldi	r20, 0xEC	; 236
     fb0:	51 e4       	ldi	r21, 0x41	; 65
     fb2:	0e 94 b0 11 	call	0x2360	; 0x2360 <__divsf3>
     fb6:	0e 94 95 12 	call	0x252a	; 0x252a <floor>
     fba:	4b 01       	movw	r8, r22
     fbc:	5c 01       	movw	r10, r24
	nm = getNewMoonDay(k, timeZone);
     fbe:	ae 01       	movw	r20, r28
     fc0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <getNewMoonDay>
     fc4:	6b 01       	movw	r12, r22
     fc6:	7c 01       	movw	r14, r24
	sunLong = getSunLongitude(nm, timeZone); // sun longitude at local midnight
     fc8:	ae 01       	movw	r20, r28
     fca:	0e 94 66 06 	call	0xccc	; 0xccc <getSunLongitude>
	if (sunLong >= 9) {
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e1       	ldi	r20, 0x10	; 16
     fd4:	51 e4       	ldi	r21, 0x41	; 65
     fd6:	0e 94 62 13 	call	0x26c4	; 0x26c4 <__gesf2>
     fda:	88 23       	and	r24, r24
     fdc:	6c f0       	brlt	.+26     	; 0xff8 <getLunarMonth11+0x7a>
		nm = getNewMoonDay(k-1, timeZone);
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e8       	ldi	r20, 0x80	; 128
     fe4:	5f e3       	ldi	r21, 0x3F	; 63
     fe6:	c5 01       	movw	r24, r10
     fe8:	b4 01       	movw	r22, r8
     fea:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
     fee:	ae 01       	movw	r20, r28
     ff0:	0e 94 e5 02 	call	0x5ca	; 0x5ca <getNewMoonDay>
     ff4:	6b 01       	movw	r12, r22
     ff6:	7c 01       	movw	r14, r24
	}
	return nm;
}
     ff8:	c7 01       	movw	r24, r14
     ffa:	b6 01       	movw	r22, r12
     ffc:	df 91       	pop	r29
     ffe:	cf 91       	pop	r28
    1000:	ff 90       	pop	r15
    1002:	ef 90       	pop	r14
    1004:	df 90       	pop	r13
    1006:	cf 90       	pop	r12
    1008:	bf 90       	pop	r11
    100a:	af 90       	pop	r10
    100c:	9f 90       	pop	r9
    100e:	8f 90       	pop	r8
    1010:	08 95       	ret

00001012 <getLeapMonthOffset>:

double getLeapMonthOffset(long double a11, int timeZone)
{
    1012:	2f 92       	push	r2
    1014:	3f 92       	push	r3
    1016:	4f 92       	push	r4
    1018:	5f 92       	push	r5
    101a:	6f 92       	push	r6
    101c:	7f 92       	push	r7
    101e:	8f 92       	push	r8
    1020:	9f 92       	push	r9
    1022:	af 92       	push	r10
    1024:	bf 92       	push	r11
    1026:	cf 92       	push	r12
    1028:	df 92       	push	r13
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	ea 01       	movw	r28, r20
	long double k, last, arc, i;
	k = floorf((a11 - 2415021.076998695) / 29.530588853 + 0.5);
    1038:	24 eb       	ldi	r18, 0xB4	; 180
    103a:	36 e6       	ldi	r19, 0x66	; 102
    103c:	43 e1       	ldi	r20, 0x13	; 19
    103e:	5a e4       	ldi	r21, 0x4A	; 74
    1040:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
    1044:	25 ea       	ldi	r18, 0xA5	; 165
    1046:	3e e3       	ldi	r19, 0x3E	; 62
    1048:	4c ee       	ldi	r20, 0xEC	; 236
    104a:	51 e4       	ldi	r21, 0x41	; 65
    104c:	0e 94 b0 11 	call	0x2360	; 0x2360 <__divsf3>
    1050:	20 e0       	ldi	r18, 0x00	; 0
    1052:	30 e0       	ldi	r19, 0x00	; 0
    1054:	40 e0       	ldi	r20, 0x00	; 0
    1056:	5f e3       	ldi	r21, 0x3F	; 63
    1058:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
    105c:	0e 94 95 12 	call	0x252a	; 0x252a <floor>
    1060:	4b 01       	movw	r8, r22
    1062:	5c 01       	movw	r10, r24
	last = 0;
	i = 1; // We start with the month following lunar month 11
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	40 e8       	ldi	r20, 0x80	; 128
    106a:	5f e3       	ldi	r21, 0x3F	; 63
    106c:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
    1070:	ae 01       	movw	r20, r28
    1072:	0e 94 e5 02 	call	0x5ca	; 0x5ca <getNewMoonDay>
    1076:	ae 01       	movw	r20, r28
    1078:	0e 94 66 06 	call	0xccc	; 0xccc <getSunLongitude>
    107c:	56 2e       	mov	r5, r22
    107e:	47 2e       	mov	r4, r23
    1080:	38 2e       	mov	r3, r24
    1082:	29 2e       	mov	r2, r25
double getLeapMonthOffset(long double a11, int timeZone)
{
	long double k, last, arc, i;
	k = floorf((a11 - 2415021.076998695) / 29.530588853 + 0.5);
	last = 0;
	i = 1; // We start with the month following lunar month 11
    1084:	0f 2e       	mov	r0, r31
    1086:	c1 2c       	mov	r12, r1
    1088:	d1 2c       	mov	r13, r1
    108a:	f0 e8       	ldi	r31, 0x80	; 128
    108c:	ef 2e       	mov	r14, r31
    108e:	ff e3       	ldi	r31, 0x3F	; 63
    1090:	ff 2e       	mov	r15, r31
    1092:	f0 2d       	mov	r31, r0
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
	do {
		last = arc;
		i++;
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	40 e8       	ldi	r20, 0x80	; 128
    109a:	5f e3       	ldi	r21, 0x3F	; 63
    109c:	c7 01       	movw	r24, r14
    109e:	b6 01       	movw	r22, r12
    10a0:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
    10a4:	6b 01       	movw	r12, r22
    10a6:	7c 01       	movw	r14, r24
		arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    10a8:	9b 01       	movw	r18, r22
    10aa:	ac 01       	movw	r20, r24
    10ac:	c5 01       	movw	r24, r10
    10ae:	b4 01       	movw	r22, r8
    10b0:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
    10b4:	ae 01       	movw	r20, r28
    10b6:	0e 94 e5 02 	call	0x5ca	; 0x5ca <getNewMoonDay>
    10ba:	ae 01       	movw	r20, r28
    10bc:	0e 94 66 06 	call	0xccc	; 0xccc <getSunLongitude>
    10c0:	16 2f       	mov	r17, r22
    10c2:	07 2f       	mov	r16, r23
    10c4:	78 2e       	mov	r7, r24
    10c6:	69 2e       	mov	r6, r25
	} while (arc != last && i < 14);
    10c8:	26 2f       	mov	r18, r22
    10ca:	37 2f       	mov	r19, r23
    10cc:	48 2f       	mov	r20, r24
    10ce:	59 2f       	mov	r21, r25
    10d0:	65 2d       	mov	r22, r5
    10d2:	74 2d       	mov	r23, r4
    10d4:	83 2d       	mov	r24, r3
    10d6:	92 2d       	mov	r25, r2
    10d8:	0e 94 ab 11 	call	0x2356	; 0x2356 <__cmpsf2>
    10dc:	88 23       	and	r24, r24
    10de:	71 f0       	breq	.+28     	; 0x10fc <getLeapMonthOffset+0xea>
	i = 1; // We start with the month following lunar month 11
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
	do {
		last = arc;
		i++;
		arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    10e0:	51 2e       	mov	r5, r17
    10e2:	40 2e       	mov	r4, r16
    10e4:	37 2c       	mov	r3, r7
    10e6:	26 2c       	mov	r2, r6
	} while (arc != last && i < 14);
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e6       	ldi	r20, 0x60	; 96
    10ee:	51 e4       	ldi	r21, 0x41	; 65
    10f0:	c7 01       	movw	r24, r14
    10f2:	b6 01       	movw	r22, r12
    10f4:	0e 94 ab 11 	call	0x2356	; 0x2356 <__cmpsf2>
    10f8:	88 23       	and	r24, r24
    10fa:	64 f2       	brlt	.-104    	; 0x1094 <getLeapMonthOffset+0x82>
	return i-1;
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	40 e8       	ldi	r20, 0x80	; 128
    1102:	5f e3       	ldi	r21, 0x3F	; 63
    1104:	c7 01       	movw	r24, r14
    1106:	b6 01       	movw	r22, r12
    1108:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
}
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ff 90       	pop	r15
    1116:	ef 90       	pop	r14
    1118:	df 90       	pop	r13
    111a:	cf 90       	pop	r12
    111c:	bf 90       	pop	r11
    111e:	af 90       	pop	r10
    1120:	9f 90       	pop	r9
    1122:	8f 90       	pop	r8
    1124:	7f 90       	pop	r7
    1126:	6f 90       	pop	r6
    1128:	5f 90       	pop	r5
    112a:	4f 90       	pop	r4
    112c:	3f 90       	pop	r3
    112e:	2f 90       	pop	r2
    1130:	08 95       	ret

00001132 <convertSolar2Lunar>:

double convertSolar2Lunar(uint8_t dd, uint8_t mm, uint16_t yy, int timeZone)
{
    1132:	2f 92       	push	r2
    1134:	3f 92       	push	r3
    1136:	4f 92       	push	r4
    1138:	5f 92       	push	r5
    113a:	6f 92       	push	r6
    113c:	7f 92       	push	r7
    113e:	8f 92       	push	r8
    1140:	9f 92       	push	r9
    1142:	af 92       	push	r10
    1144:	bf 92       	push	r11
    1146:	cf 92       	push	r12
    1148:	df 92       	push	r13
    114a:	ef 92       	push	r14
    114c:	ff 92       	push	r15
    114e:	0f 93       	push	r16
    1150:	1f 93       	push	r17
    1152:	cf 93       	push	r28
    1154:	df 93       	push	r29
    1156:	ea 01       	movw	r28, r20
    1158:	19 01       	movw	r2, r18
	long double k, dayNumber, monthStart, a11, b11, diff, leapMonthDiff;
	dayNumber = jdFromDate(dd, mm, yy);
    115a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <jdFromDate>
    115e:	4b 01       	movw	r8, r22
    1160:	5c 01       	movw	r10, r24
	k = floorf((dayNumber - 2415021.076998695) / 29.530588853);
    1162:	24 eb       	ldi	r18, 0xB4	; 180
    1164:	36 e6       	ldi	r19, 0x66	; 102
    1166:	43 e1       	ldi	r20, 0x13	; 19
    1168:	5a e4       	ldi	r21, 0x4A	; 74
    116a:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
    116e:	25 ea       	ldi	r18, 0xA5	; 165
    1170:	3e e3       	ldi	r19, 0x3E	; 62
    1172:	4c ee       	ldi	r20, 0xEC	; 236
    1174:	51 e4       	ldi	r21, 0x41	; 65
    1176:	0e 94 b0 11 	call	0x2360	; 0x2360 <__divsf3>
    117a:	0e 94 95 12 	call	0x252a	; 0x252a <floor>
    117e:	2b 01       	movw	r4, r22
    1180:	3c 01       	movw	r6, r24
	monthStart = getNewMoonDay(k+1, timeZone);
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	40 e8       	ldi	r20, 0x80	; 128
    1188:	5f e3       	ldi	r21, 0x3F	; 63
    118a:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
    118e:	a1 01       	movw	r20, r2
    1190:	0e 94 e5 02 	call	0x5ca	; 0x5ca <getNewMoonDay>
    1194:	6b 01       	movw	r12, r22
    1196:	7c 01       	movw	r14, r24
	if (monthStart > dayNumber) {
    1198:	9b 01       	movw	r18, r22
    119a:	ac 01       	movw	r20, r24
    119c:	c5 01       	movw	r24, r10
    119e:	b4 01       	movw	r22, r8
    11a0:	0e 94 ab 11 	call	0x2356	; 0x2356 <__cmpsf2>
    11a4:	88 23       	and	r24, r24
    11a6:	3c f4       	brge	.+14     	; 0x11b6 <convertSolar2Lunar+0x84>
		monthStart = getNewMoonDay(k, timeZone);
    11a8:	a1 01       	movw	r20, r2
    11aa:	c3 01       	movw	r24, r6
    11ac:	b2 01       	movw	r22, r4
    11ae:	0e 94 e5 02 	call	0x5ca	; 0x5ca <getNewMoonDay>
    11b2:	6b 01       	movw	r12, r22
    11b4:	7c 01       	movw	r14, r24
	}
	a11 = getLunarMonth11(yy, timeZone);
    11b6:	b1 01       	movw	r22, r2
    11b8:	ce 01       	movw	r24, r28
    11ba:	0e 94 bf 07 	call	0xf7e	; 0xf7e <getLunarMonth11>
    11be:	16 2f       	mov	r17, r22
    11c0:	07 2f       	mov	r16, r23
    11c2:	78 2e       	mov	r7, r24
    11c4:	69 2e       	mov	r6, r25
	b11 = a11;
	if (a11 >= monthStart) {
    11c6:	26 2f       	mov	r18, r22
    11c8:	37 2f       	mov	r19, r23
    11ca:	48 2f       	mov	r20, r24
    11cc:	59 2f       	mov	r21, r25
    11ce:	c7 01       	movw	r24, r14
    11d0:	b6 01       	movw	r22, r12
    11d2:	0e 94 ab 11 	call	0x2356	; 0x2356 <__cmpsf2>
    11d6:	18 16       	cp	r1, r24
    11d8:	94 f0       	brlt	.+36     	; 0x11fe <convertSolar2Lunar+0xcc>
		lunarYear = yy;
    11da:	d0 93 93 00 	sts	0x0093, r29	; 0x800093 <lunarYear+0x1>
    11de:	c0 93 92 00 	sts	0x0092, r28	; 0x800092 <lunarYear>
		a11 = getLunarMonth11(yy-1, timeZone);
    11e2:	b1 01       	movw	r22, r2
    11e4:	ce 01       	movw	r24, r28
    11e6:	01 97       	sbiw	r24, 0x01	; 1
    11e8:	0e 94 bf 07 	call	0xf7e	; 0xf7e <getLunarMonth11>
	monthStart = getNewMoonDay(k+1, timeZone);
	if (monthStart > dayNumber) {
		monthStart = getNewMoonDay(k, timeZone);
	}
	a11 = getLunarMonth11(yy, timeZone);
	b11 = a11;
    11ec:	c1 2f       	mov	r28, r17
    11ee:	d0 2f       	mov	r29, r16
    11f0:	57 2c       	mov	r5, r7
    11f2:	46 2c       	mov	r4, r6
	if (a11 >= monthStart) {
		lunarYear = yy;
		a11 = getLunarMonth11(yy-1, timeZone);
    11f4:	16 2f       	mov	r17, r22
    11f6:	07 2f       	mov	r16, r23
    11f8:	78 2e       	mov	r7, r24
    11fa:	69 2e       	mov	r6, r25
    11fc:	0d c0       	rjmp	.+26     	; 0x1218 <convertSolar2Lunar+0xe6>
		} else {
		lunarYear = yy+1;
    11fe:	ce 01       	movw	r24, r28
    1200:	01 96       	adiw	r24, 0x01	; 1
    1202:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <lunarYear+0x1>
    1206:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <lunarYear>
		b11 = getLunarMonth11(yy+1, timeZone);
    120a:	b1 01       	movw	r22, r2
    120c:	0e 94 bf 07 	call	0xf7e	; 0xf7e <getLunarMonth11>
    1210:	c6 2f       	mov	r28, r22
    1212:	d7 2f       	mov	r29, r23
    1214:	58 2e       	mov	r5, r24
    1216:	49 2e       	mov	r4, r25
	}
	lunarDate = dayNumber-monthStart+1;
    1218:	a7 01       	movw	r20, r14
    121a:	96 01       	movw	r18, r12
    121c:	c5 01       	movw	r24, r10
    121e:	b4 01       	movw	r22, r8
    1220:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	40 e8       	ldi	r20, 0x80	; 128
    122a:	5f e3       	ldi	r21, 0x3F	; 63
    122c:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
    1230:	0e 94 22 12 	call	0x2444	; 0x2444 <__fixsfsi>
    1234:	70 93 83 00 	sts	0x0083, r23	; 0x800083 <lunarDate+0x1>
    1238:	60 93 82 00 	sts	0x0082, r22	; 0x800082 <lunarDate>
	diff = floorf((monthStart - a11)/29);
    123c:	21 2f       	mov	r18, r17
    123e:	30 2f       	mov	r19, r16
    1240:	47 2d       	mov	r20, r7
    1242:	56 2d       	mov	r21, r6
    1244:	c7 01       	movw	r24, r14
    1246:	b6 01       	movw	r22, r12
    1248:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	48 ee       	ldi	r20, 0xE8	; 232
    1252:	51 e4       	ldi	r21, 0x41	; 65
    1254:	0e 94 b0 11 	call	0x2360	; 0x2360 <__divsf3>
    1258:	0e 94 95 12 	call	0x252a	; 0x252a <floor>
    125c:	6b 01       	movw	r12, r22
    125e:	7c 01       	movw	r14, r24
	lunarMonth = diff+11;
    1260:	20 e0       	ldi	r18, 0x00	; 0
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	40 e3       	ldi	r20, 0x30	; 48
    1266:	51 e4       	ldi	r21, 0x41	; 65
    1268:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
    126c:	0e 94 22 12 	call	0x2444	; 0x2444 <__fixsfsi>
    1270:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <lunarMonth+0x1>
    1274:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <lunarMonth>
	if (b11 - a11 > 365) {
    1278:	21 2f       	mov	r18, r17
    127a:	30 2f       	mov	r19, r16
    127c:	47 2d       	mov	r20, r7
    127e:	56 2d       	mov	r21, r6
    1280:	6c 2f       	mov	r22, r28
    1282:	7d 2f       	mov	r23, r29
    1284:	85 2d       	mov	r24, r5
    1286:	94 2d       	mov	r25, r4
    1288:	0e 94 3e 11 	call	0x227c	; 0x227c <__subsf3>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e8       	ldi	r19, 0x80	; 128
    1290:	46 eb       	ldi	r20, 0xB6	; 182
    1292:	53 e4       	ldi	r21, 0x43	; 67
    1294:	0e 94 62 13 	call	0x26c4	; 0x26c4 <__gesf2>
    1298:	18 16       	cp	r1, r24
    129a:	ec f4       	brge	.+58     	; 0x12d6 <convertSolar2Lunar+0x1a4>
		leapMonthDiff = getLeapMonthOffset(a11, timeZone);
    129c:	a1 01       	movw	r20, r2
    129e:	61 2f       	mov	r22, r17
    12a0:	70 2f       	mov	r23, r16
    12a2:	87 2d       	mov	r24, r7
    12a4:	96 2d       	mov	r25, r6
    12a6:	0e 94 09 08 	call	0x1012	; 0x1012 <getLeapMonthOffset>
    12aa:	9b 01       	movw	r18, r22
    12ac:	ac 01       	movw	r20, r24
		if (diff >= leapMonthDiff) {
    12ae:	c7 01       	movw	r24, r14
    12b0:	b6 01       	movw	r22, r12
    12b2:	0e 94 62 13 	call	0x26c4	; 0x26c4 <__gesf2>
    12b6:	88 23       	and	r24, r24
    12b8:	74 f0       	brlt	.+28     	; 0x12d6 <convertSolar2Lunar+0x1a4>
			lunarMonth = diff + 10;
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e2       	ldi	r20, 0x20	; 32
    12c0:	51 e4       	ldi	r21, 0x41	; 65
    12c2:	c7 01       	movw	r24, r14
    12c4:	b6 01       	movw	r22, r12
    12c6:	0e 94 3f 11 	call	0x227e	; 0x227e <__addsf3>
    12ca:	0e 94 22 12 	call	0x2444	; 0x2444 <__fixsfsi>
    12ce:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <lunarMonth+0x1>
    12d2:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <lunarMonth>
// 			if (diff == leapMonthDiff) {
// 				lunarLeap = 1;
// 			}
		}
	}
	if (lunarMonth > 12) {
    12d6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <lunarMonth>
    12da:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <lunarMonth+0x1>
    12de:	0d 97       	sbiw	r24, 0x0d	; 13
    12e0:	4c f0       	brlt	.+18     	; 0x12f4 <convertSolar2Lunar+0x1c2>
		lunarMonth = lunarMonth - 12;
    12e2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <lunarMonth>
    12e6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <lunarMonth+0x1>
    12ea:	0c 97       	sbiw	r24, 0x0c	; 12
    12ec:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <lunarMonth+0x1>
    12f0:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <lunarMonth>
	}
	if (lunarMonth >= 11 && diff < 4) {
    12f4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <lunarMonth>
    12f8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <lunarMonth+0x1>
    12fc:	0b 97       	sbiw	r24, 0x0b	; 11
    12fe:	9c f0       	brlt	.+38     	; 0x1326 <convertSolar2Lunar+0x1f4>
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	40 e8       	ldi	r20, 0x80	; 128
    1306:	50 e4       	ldi	r21, 0x40	; 64
    1308:	c7 01       	movw	r24, r14
    130a:	b6 01       	movw	r22, r12
    130c:	0e 94 ab 11 	call	0x2356	; 0x2356 <__cmpsf2>
    1310:	88 23       	and	r24, r24
    1312:	4c f4       	brge	.+18     	; 0x1326 <convertSolar2Lunar+0x1f4>
		lunarYear -= 1;
    1314:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <lunarYear>
    1318:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <lunarYear+0x1>
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	90 93 93 00 	sts	0x0093, r25	; 0x800093 <lunarYear+0x1>
    1322:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <lunarYear>
	}
}
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	1f 91       	pop	r17
    132c:	0f 91       	pop	r16
    132e:	ff 90       	pop	r15
    1330:	ef 90       	pop	r14
    1332:	df 90       	pop	r13
    1334:	cf 90       	pop	r12
    1336:	bf 90       	pop	r11
    1338:	af 90       	pop	r10
    133a:	9f 90       	pop	r9
    133c:	8f 90       	pop	r8
    133e:	7f 90       	pop	r7
    1340:	6f 90       	pop	r6
    1342:	5f 90       	pop	r5
    1344:	4f 90       	pop	r4
    1346:	3f 90       	pop	r3
    1348:	2f 90       	pop	r2
    134a:	08 95       	ret

0000134c <spiSendByte>:
char digitsInUse = 8;

void spiSendByte (char databyte)
{
	// Copy data into the SPI data register
	SPDR = databyte;
    134c:	8f b9       	out	0x0f, r24	; 15
	// Wait until transfer is complete
	while (!(SPSR & (1 << SPIF)));
    134e:	77 9b       	sbis	0x0e, 7	; 14
    1350:	fe cf       	rjmp	.-4      	; 0x134e <spiSendByte+0x2>
}
    1352:	08 95       	ret

00001354 <MAX7219_writeData>:

void MAX7219_writeData(uint8_t data_register, uint8_t data)
{
    1354:	cf 93       	push	r28
    1356:	c6 2f       	mov	r28, r22
	MAX7219_LOAD0;
    1358:	98 b3       	in	r25, 0x18	; 24
    135a:	9f 7e       	andi	r25, 0xEF	; 239
    135c:	98 bb       	out	0x18, r25	; 24
	// Send the register where the data will be stored
	spiSendByte(data_register);
    135e:	0e 94 a6 09 	call	0x134c	; 0x134c <spiSendByte>
	// Send the data to be stored
	spiSendByte(data);
    1362:	8c 2f       	mov	r24, r28
    1364:	0e 94 a6 09 	call	0x134c	; 0x134c <spiSendByte>
	MAX7219_LOAD1;
    1368:	88 b3       	in	r24, 0x18	; 24
    136a:	80 61       	ori	r24, 0x10	; 16
    136c:	88 bb       	out	0x18, r24	; 24
}
    136e:	cf 91       	pop	r28
    1370:	08 95       	ret

00001372 <MAX7219_clearDisplay>:

void MAX7219_clearDisplay()
{
    1372:	cf 93       	push	r28
	char i = digitsInUse;
    1374:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	// Loop until 0, but don't run for zero
	do {
		// Set each display in use to blank
		MAX7219_writeData(i, MAX7219_CHAR_BLANK);
    1378:	6f e0       	ldi	r22, 0x0F	; 15
    137a:	8c 2f       	mov	r24, r28
    137c:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
	} while (--i);
    1380:	c1 50       	subi	r28, 0x01	; 1
    1382:	d1 f7       	brne	.-12     	; 0x1378 <MAX7219_clearDisplay+0x6>
}
    1384:	cf 91       	pop	r28
    1386:	08 95       	ret

00001388 <Display_7seg>:
	Month	= BCDToDec(tData[5]);
	Year	= BCDToDec(tData[6]);
}


void Display_7seg (void){
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
	/********display time -> hh:mm:ss***************/
	
	if (SW_time_date == 0)
    1390:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1394:	81 11       	cpse	r24, r1
    1396:	56 c0       	rjmp	.+172    	; 0x1444 <Display_7seg+0xbc>
	{
		MAX7219_clearDisplay();
    1398:	0e 94 b9 09 	call	0x1372	; 0x1372 <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    139c:	6f e0       	ldi	r22, 0x0F	; 15
    139e:	70 e0       	ldi	r23, 0x00	; 0
    13a0:	88 e0       	ldi	r24, 0x08	; 8
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    13a8:	6f e0       	ldi	r22, 0x0F	; 15
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	87 e0       	ldi	r24, 0x07	; 7
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(Second%10));
    13b4:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    13b8:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    13bc:	ca e0       	ldi	r28, 0x0A	; 10
    13be:	d0 e0       	ldi	r29, 0x00	; 0
    13c0:	be 01       	movw	r22, r28
    13c2:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    13c6:	bc 01       	movw	r22, r24
    13c8:	86 e0       	ldi	r24, 0x06	; 6
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(Second/10));
    13d0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    13d4:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    13d8:	be 01       	movw	r22, r28
    13da:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    13de:	85 e0       	ldi	r24, 0x05	; 5
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Minute%10));
    13e6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    13ea:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    13ee:	be 01       	movw	r22, r28
    13f0:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    13f4:	bc 01       	movw	r22, r24
    13f6:	84 e0       	ldi	r24, 0x04	; 4
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Minute/10));
    13fe:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    1402:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    1406:	be 01       	movw	r22, r28
    1408:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Hour%10));
    1414:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    1418:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    141c:	be 01       	movw	r22, r28
    141e:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1422:	bc 01       	movw	r22, r24
    1424:	82 e0       	ldi	r24, 0x02	; 2
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Hour/10));
    142c:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    1430:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    1434:	be 01       	movw	r22, r28
    1436:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
    1442:	28 c1       	rjmp	.+592    	; 0x1694 <Display_7seg+0x30c>
		
	}
	/********display date -> DD:MM:YY***************/
	else if (SW_time_date == 1)
    1444:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1448:	81 30       	cpi	r24, 0x01	; 1
    144a:	09 f0       	breq	.+2      	; 0x144e <Display_7seg+0xc6>
    144c:	76 c0       	rjmp	.+236    	; 0x153a <Display_7seg+0x1b2>
	{
		MAX7219_clearDisplay();
    144e:	0e 94 b9 09 	call	0x1372	; 0x1372 <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
    1452:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1456:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    145a:	08 ee       	ldi	r16, 0xE8	; 232
    145c:	13 e0       	ldi	r17, 0x03	; 3
    145e:	b8 01       	movw	r22, r16
    1460:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1464:	ca e0       	ldi	r28, 0x0A	; 10
    1466:	d0 e0       	ldi	r29, 0x00	; 0
    1468:	be 01       	movw	r22, r28
    146a:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    146e:	bc 01       	movw	r22, r24
    1470:	88 e0       	ldi	r24, 0x08	; 8
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
    1478:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    147c:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1480:	b8 01       	movw	r22, r16
    1482:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1486:	be 01       	movw	r22, r28
    1488:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    148c:	cb 01       	movw	r24, r22
    148e:	be 01       	movw	r22, r28
    1490:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1494:	bc 01       	movw	r22, r24
    1496:	87 e0       	ldi	r24, 0x07	; 7
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
    149e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    14a2:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    14a6:	b8 01       	movw	r22, r16
    14a8:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    14ac:	64 e6       	ldi	r22, 0x64	; 100
    14ae:	70 e0       	ldi	r23, 0x00	; 0
    14b0:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    14b4:	cb 01       	movw	r24, r22
    14b6:	be 01       	movw	r22, r28
    14b8:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    14bc:	bc 01       	movw	r22, r24
    14be:	86 e0       	ldi	r24, 0x06	; 6
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
    14c6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    14ca:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    14ce:	b8 01       	movw	r22, r16
    14d0:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    14d4:	85 e0       	ldi	r24, 0x05	; 5
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    14dc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    14e0:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    14e4:	be 01       	movw	r22, r28
    14e6:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    14ea:	bc 01       	movw	r22, r24
    14ec:	84 e0       	ldi	r24, 0x04	; 4
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    14f4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    14f8:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    14fc:	be 01       	movw	r22, r28
    14fe:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    150a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    150e:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1512:	be 01       	movw	r22, r28
    1514:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1518:	bc 01       	movw	r22, r24
    151a:	82 e0       	ldi	r24, 0x02	; 2
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    1522:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1526:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    152a:	be 01       	movw	r22, r28
    152c:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
    1538:	ad c0       	rjmp	.+346    	; 0x1694 <Display_7seg+0x30c>
		
	}
	/********display AM LICH *********************/
	else if (SW_time_date==2)
    153a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    153e:	82 30       	cpi	r24, 0x02	; 2
    1540:	09 f0       	breq	.+2      	; 0x1544 <Display_7seg+0x1bc>
    1542:	76 c0       	rjmp	.+236    	; 0x1630 <Display_7seg+0x2a8>
	{
		MAX7219_clearDisplay();
    1544:	0e 94 b9 09 	call	0x1372	; 0x1372 <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,((lunarYear%1000)%10));
    1548:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <lunarYear>
    154c:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <lunarYear+0x1>
    1550:	08 ee       	ldi	r16, 0xE8	; 232
    1552:	13 e0       	ldi	r17, 0x03	; 3
    1554:	b8 01       	movw	r22, r16
    1556:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    155a:	ca e0       	ldi	r28, 0x0A	; 10
    155c:	d0 e0       	ldi	r29, 0x00	; 0
    155e:	be 01       	movw	r22, r28
    1560:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1564:	bc 01       	movw	r22, r24
    1566:	88 e0       	ldi	r24, 0x08	; 8
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,(((lunarYear%1000)/10)%10));
    156e:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <lunarYear>
    1572:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <lunarYear+0x1>
    1576:	b8 01       	movw	r22, r16
    1578:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    157c:	be 01       	movw	r22, r28
    157e:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1582:	cb 01       	movw	r24, r22
    1584:	be 01       	movw	r22, r28
    1586:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    158a:	bc 01       	movw	r22, r24
    158c:	87 e0       	ldi	r24, 0x07	; 7
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(((lunarYear%1000)/100)%10));
    1594:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <lunarYear>
    1598:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <lunarYear+0x1>
    159c:	b8 01       	movw	r22, r16
    159e:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    15a2:	64 e6       	ldi	r22, 0x64	; 100
    15a4:	70 e0       	ldi	r23, 0x00	; 0
    15a6:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    15aa:	cb 01       	movw	r24, r22
    15ac:	be 01       	movw	r22, r28
    15ae:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    15b2:	bc 01       	movw	r22, r24
    15b4:	86 e0       	ldi	r24, 0x06	; 6
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(lunarYear/1000));
    15bc:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <lunarYear>
    15c0:	90 91 93 00 	lds	r25, 0x0093	; 0x800093 <lunarYear+0x1>
    15c4:	b8 01       	movw	r22, r16
    15c6:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    15ca:	85 e0       	ldi	r24, 0x05	; 5
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(lunarMonth%10));
    15d2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <lunarMonth>
    15d6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <lunarMonth+0x1>
    15da:	be 01       	movw	r22, r28
    15dc:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    15e0:	bc 01       	movw	r22, r24
    15e2:	84 e0       	ldi	r24, 0x04	; 4
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(lunarMonth/10));
    15ea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <lunarMonth>
    15ee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <lunarMonth+0x1>
    15f2:	be 01       	movw	r22, r28
    15f4:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    15f8:	83 e0       	ldi	r24, 0x03	; 3
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(lunarDate%10));
    1600:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <lunarDate>
    1604:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <lunarDate+0x1>
    1608:	be 01       	movw	r22, r28
    160a:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    160e:	bc 01       	movw	r22, r24
    1610:	82 e0       	ldi	r24, 0x02	; 2
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(lunarDate/10));
    1618:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <lunarDate>
    161c:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <lunarDate+0x1>
    1620:	be 01       	movw	r22, r28
    1622:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1626:	81 e0       	ldi	r24, 0x01	; 1
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
    162e:	32 c0       	rjmp	.+100    	; 0x1694 <Display_7seg+0x30c>
		
	}
	else
	{
		MAX7219_clearDisplay();
    1630:	0e 94 b9 09 	call	0x1372	; 0x1372 <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT3,(A_Minute%10));
    1634:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <A_Minute>
    1638:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <A_Minute+0x1>
    163c:	ca e0       	ldi	r28, 0x0A	; 10
    163e:	d0 e0       	ldi	r29, 0x00	; 0
    1640:	be 01       	movw	r22, r28
    1642:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1646:	bc 01       	movw	r22, r24
    1648:	84 e0       	ldi	r24, 0x04	; 4
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(A_Minute/10));
    1650:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <A_Minute>
    1654:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <A_Minute+0x1>
    1658:	be 01       	movw	r22, r28
    165a:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    165e:	83 e0       	ldi	r24, 0x03	; 3
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(A_Hour%10));
    1666:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Hour>
    166a:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Hour+0x1>
    166e:	be 01       	movw	r22, r28
    1670:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1674:	bc 01       	movw	r22, r24
    1676:	82 e0       	ldi	r24, 0x02	; 2
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(A_Hour/10));
    167e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Hour>
    1682:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Hour+0x1>
    1686:	be 01       	movw	r22, r28
    1688:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
	}
}
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	1f 91       	pop	r17
    169a:	0f 91       	pop	r16
    169c:	08 95       	ret

0000169e <Init_Timer0>:
	} while (--i);
}

void Init_Timer0(void){
	//Initialize Timer0 to 1s - overflow interrupt--------------------
    TCCR0=(1<<CS02)|(0<<CS01)|(1<<CS00);	//prescaler, clk/1024
    169e:	85 e0       	ldi	r24, 0x05	; 5
    16a0:	83 bf       	out	0x33, r24	; 51
	
    TIMSK=(1<<TOIE0);						
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	89 bf       	out	0x39, r24	; 57
    sei();                      			
    16a6:	78 94       	sei
    16a8:	08 95       	ret

000016aa <Init_interupt>:
	//----------------------------------------------------------------
}

void Init_interupt(void){
	MCUCR=(0<<ISC11)|(0<<ISC10)|(0<<ISC01)|(0<<ISC00);
    16aa:	15 be       	out	0x35, r1	; 53
	MCUCSR=(0<<ISC2);
    16ac:	14 be       	out	0x34, r1	; 52
	GICR=(1<<INT2)|(1<<INT1)|(1<<INT0);
    16ae:	80 ee       	ldi	r24, 0xE0	; 224
    16b0:	8b bf       	out	0x3b, r24	; 59
	sei();
    16b2:	78 94       	sei
    16b4:	08 95       	ret

000016b6 <main>:
//Main program
int main(void){	
	
	//MAX7219 init
	// SCK MOSI CS/LOAD/SS
	DDRB |= (1 << PIN_SCK) | (1 << PIN_MOSI) | (1 << PIN_SS);
    16b6:	87 b3       	in	r24, 0x17	; 23
    16b8:	80 6b       	ori	r24, 0xB0	; 176
    16ba:	87 bb       	out	0x17, r24	; 23

	// SPI Enable, Master mode
	SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
    16bc:	8d b1       	in	r24, 0x0d	; 13
    16be:	82 65       	ori	r24, 0x52	; 82
    16c0:	8d b9       	out	0x0d, r24	; 13

	// Decode mode to "Font Code-B"
	/*MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);*/

	// Scan limit runs from 0.
	MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, 0x07);
    16c2:	67 e0       	ldi	r22, 0x07	; 7
    16c4:	8b e0       	ldi	r24, 0x0B	; 11
    16c6:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_INTENSITY, 0x05);
    16ca:	65 e0       	ldi	r22, 0x05	; 5
    16cc:	8a e0       	ldi	r24, 0x0A	; 10
    16ce:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_POWER, ON);
    16d2:	61 e0       	ldi	r22, 0x01	; 1
    16d4:	8c e0       	ldi	r24, 0x0C	; 12
    16d6:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    16da:	6f ef       	ldi	r22, 0xFF	; 255
    16dc:	89 e0       	ldi	r24, 0x09	; 9
    16de:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
	
	FixTime();
    16e2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <FixTime>
	Init_btn();// KEY_PORT=0xF8;
    16e6:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Init_btn>

	
	//------------------------------------
	Init_Timer0();
    16ea:	0e 94 4f 0b 	call	0x169e	; 0x169e <Init_Timer0>
	
	Init_interupt();
    16ee:	0e 94 55 0b 	call	0x16aa	; 0x16aa <Init_interupt>
	
	TWI_Init(); 
    16f2:	0e 94 58 00 	call	0xb0	; 0xb0 <TWI_Init>
			
	TWI_DS1307_rblock(tData,7); 
    16f6:	67 e0       	ldi	r22, 0x07	; 7
    16f8:	8b e8       	ldi	r24, 0x8B	; 139
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	0e 94 c3 00 	call	0x186	; 0x186 <TWI_DS1307_rblock>
	
	Decode(); 	//BCD data converter function from DS1307 to DEC
    1700:	0e 94 29 01 	call	0x252	; 0x252 <Decode>
    1704:	8f ec       	ldi	r24, 0xCF	; 207
    1706:	97 e0       	ldi	r25, 0x07	; 7
    1708:	01 97       	sbiw	r24, 0x01	; 1
    170a:	f1 f7       	brne	.-4      	; 0x1708 <main+0x52>
    170c:	00 c0       	rjmp	.+0      	; 0x170e <main+0x58>
    170e:	00 00       	nop
	_delay_ms(1);	
	
	//************************************************************************************
	while(1){
		
		yyyy=Year+2000;
    1710:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Year>
    1714:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <Year+0x1>
    1718:	80 53       	subi	r24, 0x30	; 48
    171a:	98 4f       	sbci	r25, 0xF8	; 248
    171c:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <yyyy+0x1>
    1720:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <yyyy>
		convertSolar2Lunar(Date, Month, yyyy, timeZone);	
    1724:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <timeZone>
    1728:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <timeZone+0x1>
    172c:	40 91 80 00 	lds	r20, 0x0080	; 0x800080 <yyyy>
    1730:	50 91 81 00 	lds	r21, 0x0081	; 0x800081 <yyyy+0x1>
    1734:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Month>
    1738:	70 91 68 00 	lds	r23, 0x0068	; 0x800068 <Month+0x1>
    173c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1740:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1744:	0e 94 99 08 	call	0x1132	; 0x1132 <convertSolar2Lunar>
		Display_7seg();
    1748:	0e 94 c4 09 	call	0x1388	; 0x1388 <Display_7seg>
		if (Hour == A_Hour && Minute == A_Minute && EN_alarm == true)
    174c:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <Hour>
    1750:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <Hour+0x1>
    1754:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Hour>
    1758:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Hour+0x1>
    175c:	28 17       	cp	r18, r24
    175e:	39 07       	cpc	r19, r25
    1760:	b9 f6       	brne	.-82     	; 0x1710 <main+0x5a>
    1762:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <Minute>
    1766:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <Minute+0x1>
    176a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <A_Minute>
    176e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <A_Minute+0x1>
    1772:	28 17       	cp	r18, r24
    1774:	39 07       	cpc	r19, r25
    1776:	61 f6       	brne	.-104    	; 0x1710 <main+0x5a>
    1778:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <EN_alarm>
    177c:	88 23       	and	r24, r24
    177e:	41 f2       	breq	.-112    	; 0x1710 <main+0x5a>
		{	
			
			Display_7seg();
    1780:	0e 94 c4 09 	call	0x1388	; 0x1388 <Display_7seg>
			BTN_PORTD |= (1<<BUZ_LED);
    1784:	82 b3       	in	r24, 0x12	; 18
    1786:	80 68       	ori	r24, 0x80	; 128
    1788:	82 bb       	out	0x12, r24	; 18
    178a:	c2 cf       	rjmp	.-124    	; 0x1710 <main+0x5a>

0000178c <__vector_11>:
	return 0;
}

char data[5];

ISR(TIMER0_OVF_vect){ 	
    178c:	1f 92       	push	r1
    178e:	0f 92       	push	r0
    1790:	0f b6       	in	r0, 0x3f	; 63
    1792:	0f 92       	push	r0
    1794:	11 24       	eor	r1, r1
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	2f 93       	push	r18
    179c:	3f 93       	push	r19
    179e:	4f 93       	push	r20
    17a0:	5f 93       	push	r21
    17a2:	6f 93       	push	r22
    17a4:	7f 93       	push	r23
    17a6:	8f 93       	push	r24
    17a8:	9f 93       	push	r25
    17aa:	af 93       	push	r26
    17ac:	bf 93       	push	r27
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	ef 93       	push	r30
    17b4:	ff 93       	push	r31
	Time_count++;
    17b6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    17ba:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    17be:	01 96       	adiw	r24, 0x01	; 1
    17c0:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <Time_count+0x1>
    17c4:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <Time_count>
	if(Time_count>=10){ 	//1s Exactly
    17c8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    17cc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    17d0:	0a 97       	sbiw	r24, 0x0a	; 10
    17d2:	28 f1       	brcs	.+74     	; 0x181e <__vector_11+0x92>
		                
		if(set == false ){
    17d4:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    17d8:	81 11       	cpse	r24, r1
    17da:	1d c0       	rjmp	.+58     	; 0x1816 <__vector_11+0x8a>
			//Read DS1307
			TWI_DS1307_wadr(0x00); 				
    17dc:	0e 94 5e 00 	call	0xbc	; 0xbc <TWI_DS1307_wadr>
    17e0:	8f ec       	ldi	r24, 0xCF	; 207
    17e2:	97 e0       	ldi	r25, 0x07	; 7
    17e4:	01 97       	sbiw	r24, 0x01	; 1
    17e6:	f1 f7       	brne	.-4      	; 0x17e4 <__vector_11+0x58>
    17e8:	00 c0       	rjmp	.+0      	; 0x17ea <__vector_11+0x5e>
    17ea:	00 00       	nop
			_delay_ms(1);		   				
			TWI_DS1307_rblock(tData,7); 
    17ec:	67 e0       	ldi	r22, 0x07	; 7
    17ee:	8b e8       	ldi	r24, 0x8B	; 139
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	0e 94 c3 00 	call	0x186	; 0x186 <TWI_DS1307_rblock>
					
			//Print result on LCD + 7Seg led		
			if(BCDToDec(tData[0]) !=Second){ 
    17f6:	80 91 8b 00 	lds	r24, 0x008B	; 0x80008b <tData>
    17fa:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <Second>
    1804:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <Second+0x1>
    1808:	82 17       	cp	r24, r18
    180a:	93 07       	cpc	r25, r19
    180c:	21 f0       	breq	.+8      	; 0x1816 <__vector_11+0x8a>
				Decode();			
    180e:	0e 94 29 01 	call	0x252	; 0x252 <Decode>
				Display_7seg();
    1812:	0e 94 c4 09 	call	0x1388	; 0x1388 <Display_7seg>
			} 
		}
		Time_count=0; 
    1816:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <Time_count+0x1>
    181a:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <Time_count>
	}
	
	if ((Time_count>5)&&(Time_count<10)&&(count==1)&&(SW_time_date==0))	//blink hour
    181e:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1822:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1826:	06 97       	sbiw	r24, 0x06	; 6
    1828:	08 f4       	brcc	.+2      	; 0x182c <__vector_11+0xa0>
    182a:	52 c0       	rjmp	.+164    	; 0x18d0 <__vector_11+0x144>
    182c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1830:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1834:	0a 97       	sbiw	r24, 0x0a	; 10
    1836:	08 f0       	brcs	.+2      	; 0x183a <__vector_11+0xae>
    1838:	4b c0       	rjmp	.+150    	; 0x18d0 <__vector_11+0x144>
    183a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    183e:	81 30       	cpi	r24, 0x01	; 1
    1840:	09 f0       	breq	.+2      	; 0x1844 <__vector_11+0xb8>
    1842:	46 c0       	rjmp	.+140    	; 0x18d0 <__vector_11+0x144>
    1844:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1848:	81 11       	cpse	r24, r1
    184a:	42 c0       	rjmp	.+132    	; 0x18d0 <__vector_11+0x144>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    184c:	6f ef       	ldi	r22, 0xFF	; 255
    184e:	89 e0       	ldi	r24, 0x09	; 9
    1850:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_clearDisplay();
    1854:	0e 94 b9 09 	call	0x1372	; 0x1372 <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    1858:	6f e0       	ldi	r22, 0x0F	; 15
    185a:	88 e0       	ldi	r24, 0x08	; 8
    185c:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    1860:	6f e0       	ldi	r22, 0x0F	; 15
    1862:	87 e0       	ldi	r24, 0x07	; 7
    1864:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(Second%10));
    1868:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    186c:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    1870:	ca e0       	ldi	r28, 0x0A	; 10
    1872:	d0 e0       	ldi	r29, 0x00	; 0
    1874:	be 01       	movw	r22, r28
    1876:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    187a:	68 2f       	mov	r22, r24
    187c:	86 e0       	ldi	r24, 0x06	; 6
    187e:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(Second/10));
    1882:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    1886:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    188a:	be 01       	movw	r22, r28
    188c:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1890:	85 e0       	ldi	r24, 0x05	; 5
    1892:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Minute%10));
    1896:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    189a:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    189e:	be 01       	movw	r22, r28
    18a0:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    18a4:	68 2f       	mov	r22, r24
    18a6:	84 e0       	ldi	r24, 0x04	; 4
    18a8:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Minute/10));
    18ac:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    18b0:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    18b4:	be 01       	movw	r22, r28
    18b6:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    18ba:	83 e0       	ldi	r24, 0x03	; 3
    18bc:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,MAX7219_CHAR_BLANK);
    18c0:	6f e0       	ldi	r22, 0x0F	; 15
    18c2:	82 e0       	ldi	r24, 0x02	; 2
    18c4:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,MAX7219_CHAR_BLANK);
    18c8:	6f e0       	ldi	r22, 0x0F	; 15
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==2)&&(SW_time_date==0))	//blink min
    18d0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    18d4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    18d8:	06 97       	sbiw	r24, 0x06	; 6
    18da:	08 f4       	brcc	.+2      	; 0x18de <__vector_11+0x152>
    18dc:	52 c0       	rjmp	.+164    	; 0x1982 <__vector_11+0x1f6>
    18de:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    18e2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    18e6:	0a 97       	sbiw	r24, 0x0a	; 10
    18e8:	08 f0       	brcs	.+2      	; 0x18ec <__vector_11+0x160>
    18ea:	4b c0       	rjmp	.+150    	; 0x1982 <__vector_11+0x1f6>
    18ec:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    18f0:	82 30       	cpi	r24, 0x02	; 2
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <__vector_11+0x16a>
    18f4:	46 c0       	rjmp	.+140    	; 0x1982 <__vector_11+0x1f6>
    18f6:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    18fa:	81 11       	cpse	r24, r1
    18fc:	42 c0       	rjmp	.+132    	; 0x1982 <__vector_11+0x1f6>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    18fe:	6f ef       	ldi	r22, 0xFF	; 255
    1900:	89 e0       	ldi	r24, 0x09	; 9
    1902:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_clearDisplay();
    1906:	0e 94 b9 09 	call	0x1372	; 0x1372 <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    190a:	6f e0       	ldi	r22, 0x0F	; 15
    190c:	88 e0       	ldi	r24, 0x08	; 8
    190e:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    1912:	6f e0       	ldi	r22, 0x0F	; 15
    1914:	87 e0       	ldi	r24, 0x07	; 7
    1916:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(Second%10));
    191a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    191e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    1922:	ca e0       	ldi	r28, 0x0A	; 10
    1924:	d0 e0       	ldi	r29, 0x00	; 0
    1926:	be 01       	movw	r22, r28
    1928:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    192c:	68 2f       	mov	r22, r24
    192e:	86 e0       	ldi	r24, 0x06	; 6
    1930:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(Second/10));
    1934:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <Second>
    1938:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <Second+0x1>
    193c:	be 01       	movw	r22, r28
    193e:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1942:	85 e0       	ldi	r24, 0x05	; 5
    1944:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,MAX7219_CHAR_BLANK);
    1948:	6f e0       	ldi	r22, 0x0F	; 15
    194a:	84 e0       	ldi	r24, 0x04	; 4
    194c:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,MAX7219_CHAR_BLANK);
    1950:	6f e0       	ldi	r22, 0x0F	; 15
    1952:	83 e0       	ldi	r24, 0x03	; 3
    1954:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Hour%10));
    1958:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    195c:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    1960:	be 01       	movw	r22, r28
    1962:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1966:	68 2f       	mov	r22, r24
    1968:	82 e0       	ldi	r24, 0x02	; 2
    196a:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Hour/10));
    196e:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    1972:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    1976:	be 01       	movw	r22, r28
    1978:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==3)&&(SW_time_date==0))	//blink sec
    1982:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1986:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    198a:	06 97       	sbiw	r24, 0x06	; 6
    198c:	08 f4       	brcc	.+2      	; 0x1990 <__vector_11+0x204>
    198e:	52 c0       	rjmp	.+164    	; 0x1a34 <__vector_11+0x2a8>
    1990:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1994:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1998:	0a 97       	sbiw	r24, 0x0a	; 10
    199a:	08 f0       	brcs	.+2      	; 0x199e <__vector_11+0x212>
    199c:	4b c0       	rjmp	.+150    	; 0x1a34 <__vector_11+0x2a8>
    199e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    19a2:	83 30       	cpi	r24, 0x03	; 3
    19a4:	09 f0       	breq	.+2      	; 0x19a8 <__vector_11+0x21c>
    19a6:	46 c0       	rjmp	.+140    	; 0x1a34 <__vector_11+0x2a8>
    19a8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    19ac:	81 11       	cpse	r24, r1
    19ae:	42 c0       	rjmp	.+132    	; 0x1a34 <__vector_11+0x2a8>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    19b0:	6f ef       	ldi	r22, 0xFF	; 255
    19b2:	89 e0       	ldi	r24, 0x09	; 9
    19b4:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_clearDisplay();
    19b8:	0e 94 b9 09 	call	0x1372	; 0x1372 <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    19bc:	6f e0       	ldi	r22, 0x0F	; 15
    19be:	88 e0       	ldi	r24, 0x08	; 8
    19c0:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    19c4:	6f e0       	ldi	r22, 0x0F	; 15
    19c6:	87 e0       	ldi	r24, 0x07	; 7
    19c8:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    19cc:	6f e0       	ldi	r22, 0x0F	; 15
    19ce:	86 e0       	ldi	r24, 0x06	; 6
    19d0:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    19d4:	6f e0       	ldi	r22, 0x0F	; 15
    19d6:	85 e0       	ldi	r24, 0x05	; 5
    19d8:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Minute%10));
    19dc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    19e0:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    19e4:	ca e0       	ldi	r28, 0x0A	; 10
    19e6:	d0 e0       	ldi	r29, 0x00	; 0
    19e8:	be 01       	movw	r22, r28
    19ea:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    19ee:	68 2f       	mov	r22, r24
    19f0:	84 e0       	ldi	r24, 0x04	; 4
    19f2:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Minute/10));
    19f6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Minute>
    19fa:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Minute+0x1>
    19fe:	be 01       	movw	r22, r28
    1a00:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1a04:	83 e0       	ldi	r24, 0x03	; 3
    1a06:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Hour%10));
    1a0a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    1a0e:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    1a12:	be 01       	movw	r22, r28
    1a14:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1a18:	68 2f       	mov	r22, r24
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Hour/10));
    1a20:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <Hour>
    1a24:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <Hour+0x1>
    1a28:	be 01       	movw	r22, r28
    1a2a:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==1)&&(SW_time_date==1))	//blink date
    1a34:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1a38:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1a3c:	06 97       	sbiw	r24, 0x06	; 6
    1a3e:	08 f4       	brcc	.+2      	; 0x1a42 <__vector_11+0x2b6>
    1a40:	75 c0       	rjmp	.+234    	; 0x1b2c <__vector_11+0x3a0>
    1a42:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1a46:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1a4a:	0a 97       	sbiw	r24, 0x0a	; 10
    1a4c:	08 f0       	brcs	.+2      	; 0x1a50 <__vector_11+0x2c4>
    1a4e:	6e c0       	rjmp	.+220    	; 0x1b2c <__vector_11+0x3a0>
    1a50:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1a54:	81 30       	cpi	r24, 0x01	; 1
    1a56:	09 f0       	breq	.+2      	; 0x1a5a <__vector_11+0x2ce>
    1a58:	69 c0       	rjmp	.+210    	; 0x1b2c <__vector_11+0x3a0>
    1a5a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1a5e:	81 30       	cpi	r24, 0x01	; 1
    1a60:	09 f0       	breq	.+2      	; 0x1a64 <__vector_11+0x2d8>
    1a62:	64 c0       	rjmp	.+200    	; 0x1b2c <__vector_11+0x3a0>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    1a64:	6f ef       	ldi	r22, 0xFF	; 255
    1a66:	89 e0       	ldi	r24, 0x09	; 9
    1a68:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_clearDisplay();
    1a6c:	0e 94 b9 09 	call	0x1372	; 0x1372 <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
    1a70:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1a74:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1a78:	08 ee       	ldi	r16, 0xE8	; 232
    1a7a:	13 e0       	ldi	r17, 0x03	; 3
    1a7c:	b8 01       	movw	r22, r16
    1a7e:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1a82:	ca e0       	ldi	r28, 0x0A	; 10
    1a84:	d0 e0       	ldi	r29, 0x00	; 0
    1a86:	be 01       	movw	r22, r28
    1a88:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1a8c:	68 2f       	mov	r22, r24
    1a8e:	88 e0       	ldi	r24, 0x08	; 8
    1a90:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
    1a94:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1a98:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1a9c:	b8 01       	movw	r22, r16
    1a9e:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1aa2:	be 01       	movw	r22, r28
    1aa4:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1aa8:	cb 01       	movw	r24, r22
    1aaa:	be 01       	movw	r22, r28
    1aac:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1ab0:	68 2f       	mov	r22, r24
    1ab2:	87 e0       	ldi	r24, 0x07	; 7
    1ab4:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
    1ab8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1abc:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1ac0:	b8 01       	movw	r22, r16
    1ac2:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1ac6:	64 e6       	ldi	r22, 0x64	; 100
    1ac8:	70 e0       	ldi	r23, 0x00	; 0
    1aca:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1ace:	cb 01       	movw	r24, r22
    1ad0:	be 01       	movw	r22, r28
    1ad2:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1ad6:	68 2f       	mov	r22, r24
    1ad8:	86 e0       	ldi	r24, 0x06	; 6
    1ada:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
    1ade:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1ae2:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1ae6:	b8 01       	movw	r22, r16
    1ae8:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1aec:	85 e0       	ldi	r24, 0x05	; 5
    1aee:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    1af2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1af6:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1afa:	be 01       	movw	r22, r28
    1afc:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1b00:	68 2f       	mov	r22, r24
    1b02:	84 e0       	ldi	r24, 0x04	; 4
    1b04:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    1b08:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1b0c:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1b10:	be 01       	movw	r22, r28
    1b12:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1b16:	83 e0       	ldi	r24, 0x03	; 3
    1b18:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,MAX7219_CHAR_BLANK);
    1b1c:	6f e0       	ldi	r22, 0x0F	; 15
    1b1e:	82 e0       	ldi	r24, 0x02	; 2
    1b20:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,MAX7219_CHAR_BLANK);
    1b24:	6f e0       	ldi	r22, 0x0F	; 15
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==2)&&(SW_time_date==1))	//blink month
    1b2c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1b30:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1b34:	06 97       	sbiw	r24, 0x06	; 6
    1b36:	08 f4       	brcc	.+2      	; 0x1b3a <__vector_11+0x3ae>
    1b38:	75 c0       	rjmp	.+234    	; 0x1c24 <__vector_11+0x498>
    1b3a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1b3e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1b42:	0a 97       	sbiw	r24, 0x0a	; 10
    1b44:	08 f0       	brcs	.+2      	; 0x1b48 <__vector_11+0x3bc>
    1b46:	6e c0       	rjmp	.+220    	; 0x1c24 <__vector_11+0x498>
    1b48:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1b4c:	82 30       	cpi	r24, 0x02	; 2
    1b4e:	09 f0       	breq	.+2      	; 0x1b52 <__vector_11+0x3c6>
    1b50:	69 c0       	rjmp	.+210    	; 0x1c24 <__vector_11+0x498>
    1b52:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1b56:	81 30       	cpi	r24, 0x01	; 1
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <__vector_11+0x3d0>
    1b5a:	64 c0       	rjmp	.+200    	; 0x1c24 <__vector_11+0x498>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    1b5c:	6f ef       	ldi	r22, 0xFF	; 255
    1b5e:	89 e0       	ldi	r24, 0x09	; 9
    1b60:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_clearDisplay();
    1b64:	0e 94 b9 09 	call	0x1372	; 0x1372 <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
    1b68:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1b6c:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1b70:	08 ee       	ldi	r16, 0xE8	; 232
    1b72:	13 e0       	ldi	r17, 0x03	; 3
    1b74:	b8 01       	movw	r22, r16
    1b76:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1b7a:	ca e0       	ldi	r28, 0x0A	; 10
    1b7c:	d0 e0       	ldi	r29, 0x00	; 0
    1b7e:	be 01       	movw	r22, r28
    1b80:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1b84:	68 2f       	mov	r22, r24
    1b86:	88 e0       	ldi	r24, 0x08	; 8
    1b88:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
    1b8c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1b90:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1b94:	b8 01       	movw	r22, r16
    1b96:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1b9a:	be 01       	movw	r22, r28
    1b9c:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1ba0:	cb 01       	movw	r24, r22
    1ba2:	be 01       	movw	r22, r28
    1ba4:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1ba8:	68 2f       	mov	r22, r24
    1baa:	87 e0       	ldi	r24, 0x07	; 7
    1bac:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
    1bb0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1bb4:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1bb8:	b8 01       	movw	r22, r16
    1bba:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1bbe:	64 e6       	ldi	r22, 0x64	; 100
    1bc0:	70 e0       	ldi	r23, 0x00	; 0
    1bc2:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	be 01       	movw	r22, r28
    1bca:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1bce:	68 2f       	mov	r22, r24
    1bd0:	86 e0       	ldi	r24, 0x06	; 6
    1bd2:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
    1bd6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <yyyy>
    1bda:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <yyyy+0x1>
    1bde:	b8 01       	movw	r22, r16
    1be0:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1be4:	85 e0       	ldi	r24, 0x05	; 5
    1be6:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,MAX7219_CHAR_BLANK);
    1bea:	6f e0       	ldi	r22, 0x0F	; 15
    1bec:	84 e0       	ldi	r24, 0x04	; 4
    1bee:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,MAX7219_CHAR_BLANK);
    1bf2:	6f e0       	ldi	r22, 0x0F	; 15
    1bf4:	83 e0       	ldi	r24, 0x03	; 3
    1bf6:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    1bfa:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1bfe:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1c02:	be 01       	movw	r22, r28
    1c04:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1c08:	68 2f       	mov	r22, r24
    1c0a:	82 e0       	ldi	r24, 0x02	; 2
    1c0c:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    1c10:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1c14:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1c18:	be 01       	movw	r22, r28
    1c1a:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1c1e:	81 e0       	ldi	r24, 0x01	; 1
    1c20:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==3)&&(SW_time_date==1))	//blink year
    1c24:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1c28:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1c2c:	06 97       	sbiw	r24, 0x06	; 6
    1c2e:	08 f4       	brcc	.+2      	; 0x1c32 <__vector_11+0x4a6>
    1c30:	53 c0       	rjmp	.+166    	; 0x1cd8 <__vector_11+0x54c>
    1c32:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1c36:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1c3a:	0a 97       	sbiw	r24, 0x0a	; 10
    1c3c:	08 f0       	brcs	.+2      	; 0x1c40 <__vector_11+0x4b4>
    1c3e:	4c c0       	rjmp	.+152    	; 0x1cd8 <__vector_11+0x54c>
    1c40:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1c44:	83 30       	cpi	r24, 0x03	; 3
    1c46:	09 f0       	breq	.+2      	; 0x1c4a <__vector_11+0x4be>
    1c48:	47 c0       	rjmp	.+142    	; 0x1cd8 <__vector_11+0x54c>
    1c4a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1c4e:	81 30       	cpi	r24, 0x01	; 1
    1c50:	09 f0       	breq	.+2      	; 0x1c54 <__vector_11+0x4c8>
    1c52:	42 c0       	rjmp	.+132    	; 0x1cd8 <__vector_11+0x54c>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    1c54:	6f ef       	ldi	r22, 0xFF	; 255
    1c56:	89 e0       	ldi	r24, 0x09	; 9
    1c58:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_clearDisplay();
    1c5c:	0e 94 b9 09 	call	0x1372	; 0x1372 <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    1c60:	6f e0       	ldi	r22, 0x0F	; 15
    1c62:	88 e0       	ldi	r24, 0x08	; 8
    1c64:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    1c68:	6f e0       	ldi	r22, 0x0F	; 15
    1c6a:	87 e0       	ldi	r24, 0x07	; 7
    1c6c:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    1c70:	6f e0       	ldi	r22, 0x0F	; 15
    1c72:	86 e0       	ldi	r24, 0x06	; 6
    1c74:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    1c78:	6f e0       	ldi	r22, 0x0F	; 15
    1c7a:	85 e0       	ldi	r24, 0x05	; 5
    1c7c:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    1c80:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1c84:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1c88:	ca e0       	ldi	r28, 0x0A	; 10
    1c8a:	d0 e0       	ldi	r29, 0x00	; 0
    1c8c:	be 01       	movw	r22, r28
    1c8e:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1c92:	68 2f       	mov	r22, r24
    1c94:	84 e0       	ldi	r24, 0x04	; 4
    1c96:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    1c9a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Month>
    1c9e:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <Month+0x1>
    1ca2:	be 01       	movw	r22, r28
    1ca4:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1ca8:	83 e0       	ldi	r24, 0x03	; 3
    1caa:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    1cae:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1cb2:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1cb6:	be 01       	movw	r22, r28
    1cb8:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1cbc:	68 2f       	mov	r22, r24
    1cbe:	82 e0       	ldi	r24, 0x02	; 2
    1cc0:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    1cc4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <Date>
    1cc8:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <Date+0x1>
    1ccc:	be 01       	movw	r22, r28
    1cce:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==1)&&(SW_time_date==3))	//blink A_HOUR
    1cd8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1cdc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1ce0:	06 97       	sbiw	r24, 0x06	; 6
    1ce2:	08 f4       	brcc	.+2      	; 0x1ce6 <__vector_11+0x55a>
    1ce4:	43 c0       	rjmp	.+134    	; 0x1d6c <__vector_11+0x5e0>
    1ce6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1cea:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1cee:	0a 97       	sbiw	r24, 0x0a	; 10
    1cf0:	e8 f5       	brcc	.+122    	; 0x1d6c <__vector_11+0x5e0>
    1cf2:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1cf6:	81 30       	cpi	r24, 0x01	; 1
    1cf8:	c9 f5       	brne	.+114    	; 0x1d6c <__vector_11+0x5e0>
    1cfa:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1cfe:	83 30       	cpi	r24, 0x03	; 3
    1d00:	a9 f5       	brne	.+106    	; 0x1d6c <__vector_11+0x5e0>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    1d02:	6f ef       	ldi	r22, 0xFF	; 255
    1d04:	89 e0       	ldi	r24, 0x09	; 9
    1d06:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_clearDisplay();
    1d0a:	0e 94 b9 09 	call	0x1372	; 0x1372 <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    1d0e:	6f e0       	ldi	r22, 0x0F	; 15
    1d10:	88 e0       	ldi	r24, 0x08	; 8
    1d12:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    1d16:	6f e0       	ldi	r22, 0x0F	; 15
    1d18:	87 e0       	ldi	r24, 0x07	; 7
    1d1a:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    1d1e:	6f e0       	ldi	r22, 0x0F	; 15
    1d20:	86 e0       	ldi	r24, 0x06	; 6
    1d22:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    1d26:	6f e0       	ldi	r22, 0x0F	; 15
    1d28:	85 e0       	ldi	r24, 0x05	; 5
    1d2a:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,(A_Minute%10));
    1d2e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <A_Minute>
    1d32:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <A_Minute+0x1>
    1d36:	ca e0       	ldi	r28, 0x0A	; 10
    1d38:	d0 e0       	ldi	r29, 0x00	; 0
    1d3a:	be 01       	movw	r22, r28
    1d3c:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1d40:	68 2f       	mov	r22, r24
    1d42:	84 e0       	ldi	r24, 0x04	; 4
    1d44:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,(A_Minute/10));
    1d48:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <A_Minute>
    1d4c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <A_Minute+0x1>
    1d50:	be 01       	movw	r22, r28
    1d52:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1d56:	83 e0       	ldi	r24, 0x03	; 3
    1d58:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,MAX7219_CHAR_BLANK);
    1d5c:	6f e0       	ldi	r22, 0x0F	; 15
    1d5e:	82 e0       	ldi	r24, 0x02	; 2
    1d60:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,MAX7219_CHAR_BLANK);
    1d64:	6f e0       	ldi	r22, 0x0F	; 15
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
	}
	if ((Time_count>5)&&(Time_count<10)&&(count==2)&&(SW_time_date==3))	//blink A_MIN
    1d6c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1d70:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1d74:	06 97       	sbiw	r24, 0x06	; 6
    1d76:	08 f4       	brcc	.+2      	; 0x1d7a <__vector_11+0x5ee>
    1d78:	43 c0       	rjmp	.+134    	; 0x1e00 <__vector_11+0x674>
    1d7a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <Time_count>
    1d7e:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <Time_count+0x1>
    1d82:	0a 97       	sbiw	r24, 0x0a	; 10
    1d84:	e8 f5       	brcc	.+122    	; 0x1e00 <__vector_11+0x674>
    1d86:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1d8a:	82 30       	cpi	r24, 0x02	; 2
    1d8c:	c9 f5       	brne	.+114    	; 0x1e00 <__vector_11+0x674>
    1d8e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1d92:	83 30       	cpi	r24, 0x03	; 3
    1d94:	a9 f5       	brne	.+106    	; 0x1e00 <__vector_11+0x674>
	{
		MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    1d96:	6f ef       	ldi	r22, 0xFF	; 255
    1d98:	89 e0       	ldi	r24, 0x09	; 9
    1d9a:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_clearDisplay();
    1d9e:	0e 94 b9 09 	call	0x1372	; 0x1372 <MAX7219_clearDisplay>
		
		MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    1da2:	6f e0       	ldi	r22, 0x0F	; 15
    1da4:	88 e0       	ldi	r24, 0x08	; 8
    1da6:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    1daa:	6f e0       	ldi	r22, 0x0F	; 15
    1dac:	87 e0       	ldi	r24, 0x07	; 7
    1dae:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    1db2:	6f e0       	ldi	r22, 0x0F	; 15
    1db4:	86 e0       	ldi	r24, 0x06	; 6
    1db6:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    1dba:	6f e0       	ldi	r22, 0x0F	; 15
    1dbc:	85 e0       	ldi	r24, 0x05	; 5
    1dbe:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT3,MAX7219_CHAR_BLANK);
    1dc2:	6f e0       	ldi	r22, 0x0F	; 15
    1dc4:	84 e0       	ldi	r24, 0x04	; 4
    1dc6:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT2,MAX7219_CHAR_BLANK);
    1dca:	6f e0       	ldi	r22, 0x0F	; 15
    1dcc:	83 e0       	ldi	r24, 0x03	; 3
    1dce:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT1,(A_Hour%10));
    1dd2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Hour>
    1dd6:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Hour+0x1>
    1dda:	ca e0       	ldi	r28, 0x0A	; 10
    1ddc:	d0 e0       	ldi	r29, 0x00	; 0
    1dde:	be 01       	movw	r22, r28
    1de0:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1de4:	68 2f       	mov	r22, r24
    1de6:	82 e0       	ldi	r24, 0x02	; 2
    1de8:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
		MAX7219_writeData(MAX7219_DIGIT0,(A_Hour/10));
    1dec:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Hour>
    1df0:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Hour+0x1>
    1df4:	be 01       	movw	r22, r28
    1df6:	0e 94 56 14 	call	0x28ac	; 0x28ac <__divmodhi4>
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	0e 94 aa 09 	call	0x1354	; 0x1354 <MAX7219_writeData>
	}
}
    1e00:	ff 91       	pop	r31
    1e02:	ef 91       	pop	r30
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	bf 91       	pop	r27
    1e0a:	af 91       	pop	r26
    1e0c:	9f 91       	pop	r25
    1e0e:	8f 91       	pop	r24
    1e10:	7f 91       	pop	r23
    1e12:	6f 91       	pop	r22
    1e14:	5f 91       	pop	r21
    1e16:	4f 91       	pop	r20
    1e18:	3f 91       	pop	r19
    1e1a:	2f 91       	pop	r18
    1e1c:	1f 91       	pop	r17
    1e1e:	0f 91       	pop	r16
    1e20:	0f 90       	pop	r0
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	0f 90       	pop	r0
    1e26:	1f 90       	pop	r1
    1e28:	18 95       	reti

00001e2a <__vector_1>:


//SW mode button
ISR(INT0_vect){
    1e2a:	1f 92       	push	r1
    1e2c:	0f 92       	push	r0
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	0f 92       	push	r0
    1e32:	11 24       	eor	r1, r1
    1e34:	2f 93       	push	r18
    1e36:	3f 93       	push	r19
    1e38:	4f 93       	push	r20
    1e3a:	5f 93       	push	r21
    1e3c:	6f 93       	push	r22
    1e3e:	7f 93       	push	r23
    1e40:	8f 93       	push	r24
    1e42:	9f 93       	push	r25
    1e44:	af 93       	push	r26
    1e46:	bf 93       	push	r27
    1e48:	ef 93       	push	r30
    1e4a:	ff 93       	push	r31
	
	if(set==false){
    1e4c:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    1e50:	81 11       	cpse	r24, r1
    1e52:	0b c0       	rjmp	.+22     	; 0x1e6a <__vector_1+0x40>
		SW_time_date++;
    1e54:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    1e58:	9f 5f       	subi	r25, 0xFF	; 255
    1e5a:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <__data_end>
		if(SW_time_date > 3){
    1e5e:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    1e62:	94 30       	cpi	r25, 0x04	; 4
    1e64:	10 f0       	brcs	.+4      	; 0x1e6a <__vector_1+0x40>
			SW_time_date = 0;
    1e66:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
		}
	}
	if(SW_time_date==0 && set==true) {
    1e6a:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    1e6e:	91 11       	cpse	r25, r1
    1e70:	0a c0       	rjmp	.+20     	; 0x1e86 <__vector_1+0x5c>
    1e72:	88 23       	and	r24, r24
    1e74:	41 f0       	breq	.+16     	; 0x1e86 <__vector_1+0x5c>
		SW_time_date = 0;
    1e76:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__data_end>
		count=0;
    1e7a:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
		FixTime();
    1e7e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <FixTime>
		set=false;
    1e82:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
	}
	if(SW_time_date==1 && set==true) {
    1e86:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1e8a:	81 30       	cpi	r24, 0x01	; 1
    1e8c:	69 f4       	brne	.+26     	; 0x1ea8 <__vector_1+0x7e>
    1e8e:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    1e92:	88 23       	and	r24, r24
    1e94:	49 f0       	breq	.+18     	; 0x1ea8 <__vector_1+0x7e>
		SW_time_date = 1;
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
		count=0;
    1e9c:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
		FixTime();
    1ea0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <FixTime>
		set=false;
    1ea4:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
	}
	if(SW_time_date==3 && set==true) {
    1ea8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1eac:	83 30       	cpi	r24, 0x03	; 3
    1eae:	71 f4       	brne	.+28     	; 0x1ecc <__vector_1+0xa2>
    1eb0:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    1eb4:	88 23       	and	r24, r24
    1eb6:	51 f0       	breq	.+20     	; 0x1ecc <__vector_1+0xa2>
		SW_time_date = 3;
    1eb8:	83 e0       	ldi	r24, 0x03	; 3
    1eba:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__data_end>
		count=0;
    1ebe:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
		EN_alarm=true;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <EN_alarm>
		set=false;
    1ec8:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
	}
}
    1ecc:	ff 91       	pop	r31
    1ece:	ef 91       	pop	r30
    1ed0:	bf 91       	pop	r27
    1ed2:	af 91       	pop	r26
    1ed4:	9f 91       	pop	r25
    1ed6:	8f 91       	pop	r24
    1ed8:	7f 91       	pop	r23
    1eda:	6f 91       	pop	r22
    1edc:	5f 91       	pop	r21
    1ede:	4f 91       	pop	r20
    1ee0:	3f 91       	pop	r19
    1ee2:	2f 91       	pop	r18
    1ee4:	0f 90       	pop	r0
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	0f 90       	pop	r0
    1eea:	1f 90       	pop	r1
    1eec:	18 95       	reti

00001eee <__vector_2>:


//Set time button
ISR(INT1_vect){
    1eee:	1f 92       	push	r1
    1ef0:	0f 92       	push	r0
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	0f 92       	push	r0
    1ef6:	11 24       	eor	r1, r1
    1ef8:	8f 93       	push	r24

	set = true;
    1efa:	81 e0       	ldi	r24, 0x01	; 1
    1efc:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <set>
	count++;
    1f00:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1f04:	8f 5f       	subi	r24, 0xFF	; 255
    1f06:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <count>
	if (SW_time_date==0)
    1f0a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1f0e:	81 11       	cpse	r24, r1
    1f10:	08 c0       	rjmp	.+16     	; 0x1f22 <__vector_2+0x34>
	{
		if(count > 3) {
    1f12:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1f16:	84 30       	cpi	r24, 0x04	; 4
    1f18:	20 f0       	brcs	.+8      	; 0x1f22 <__vector_2+0x34>
			count = 0;
    1f1a:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
			set=false;
    1f1e:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
		}
	}
	if (SW_time_date==1)
    1f22:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1f26:	81 30       	cpi	r24, 0x01	; 1
    1f28:	41 f4       	brne	.+16     	; 0x1f3a <__vector_2+0x4c>
	{
		if(count > 3) {
    1f2a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1f2e:	84 30       	cpi	r24, 0x04	; 4
    1f30:	20 f0       	brcs	.+8      	; 0x1f3a <__vector_2+0x4c>
			count = 0;
    1f32:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
			set=false;
    1f36:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
		}
	}
	if (SW_time_date==3)
    1f3a:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    1f3e:	83 30       	cpi	r24, 0x03	; 3
    1f40:	51 f4       	brne	.+20     	; 0x1f56 <__vector_2+0x68>
	{
		if(count > 2) {
    1f42:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    1f46:	83 30       	cpi	r24, 0x03	; 3
    1f48:	30 f0       	brcs	.+12     	; 0x1f56 <__vector_2+0x68>
			count = 0;
    1f4a:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <count>
			EN_alarm=false;
    1f4e:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <EN_alarm>
			set=false;
    1f52:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <set>
		}
	}
}
    1f56:	8f 91       	pop	r24
    1f58:	0f 90       	pop	r0
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	0f 90       	pop	r0
    1f5e:	1f 90       	pop	r1
    1f60:	18 95       	reti

00001f62 <__vector_3>:

//increase button
ISR(INT2_vect){
    1f62:	1f 92       	push	r1
    1f64:	0f 92       	push	r0
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	0f 92       	push	r0
    1f6a:	11 24       	eor	r1, r1
    1f6c:	2f 93       	push	r18
    1f6e:	3f 93       	push	r19
    1f70:	8f 93       	push	r24
    1f72:	9f 93       	push	r25
	if (EN_alarm == true && set==false)
    1f74:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <EN_alarm>
    1f78:	88 23       	and	r24, r24
    1f7a:	39 f0       	breq	.+14     	; 0x1f8a <__vector_3+0x28>
    1f7c:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    1f80:	81 11       	cpse	r24, r1
    1f82:	03 c0       	rjmp	.+6      	; 0x1f8a <__vector_3+0x28>
	{
		EN_alarm=false;
    1f84:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <EN_alarm>
		BTN_PORTD = (0<<BUZ_LED);
    1f88:	12 ba       	out	0x12, r1	; 18
	}
	if((set == true) && (SW_time_date==0)){		//icrease hh, mm, ss
    1f8a:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <set>
    1f8e:	88 23       	and	r24, r24
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <__vector_3+0x32>
    1f92:	51 c0       	rjmp	.+162    	; 0x2036 <__vector_3+0xd4>
    1f94:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    1f98:	91 11       	cpse	r25, r1
    1f9a:	4d c0       	rjmp	.+154    	; 0x2036 <__vector_3+0xd4>
		if(count == 1) {
    1f9c:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    1fa0:	91 30       	cpi	r25, 0x01	; 1
    1fa2:	b1 f4       	brne	.+44     	; 0x1fd0 <__vector_3+0x6e>
			Hour++;
    1fa4:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <Hour>
    1fa8:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <Hour+0x1>
    1fac:	2f 5f       	subi	r18, 0xFF	; 255
    1fae:	3f 4f       	sbci	r19, 0xFF	; 255
    1fb0:	30 93 6e 00 	sts	0x006E, r19	; 0x80006e <Hour+0x1>
    1fb4:	20 93 6d 00 	sts	0x006D, r18	; 0x80006d <Hour>
			if(Hour > 23) Hour = 0;
    1fb8:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <Hour>
    1fbc:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <Hour+0x1>
    1fc0:	28 31       	cpi	r18, 0x18	; 24
    1fc2:	31 05       	cpc	r19, r1
    1fc4:	c4 f1       	brlt	.+112    	; 0x2036 <__vector_3+0xd4>
    1fc6:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <Hour+0x1>
    1fca:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <Hour>
    1fce:	33 c0       	rjmp	.+102    	; 0x2036 <__vector_3+0xd4>
		}
		else if(count == 2) {
    1fd0:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    1fd4:	92 30       	cpi	r25, 0x02	; 2
    1fd6:	b1 f4       	brne	.+44     	; 0x2004 <__vector_3+0xa2>
			Minute++;
    1fd8:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <Minute>
    1fdc:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <Minute+0x1>
    1fe0:	2f 5f       	subi	r18, 0xFF	; 255
    1fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe4:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <Minute+0x1>
    1fe8:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <Minute>
			if(Minute > 59) Minute = 0;
    1fec:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <Minute>
    1ff0:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <Minute+0x1>
    1ff4:	2c 33       	cpi	r18, 0x3C	; 60
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	f4 f0       	brlt	.+60     	; 0x2036 <__vector_3+0xd4>
    1ffa:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Minute+0x1>
    1ffe:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <Minute>
    2002:	19 c0       	rjmp	.+50     	; 0x2036 <__vector_3+0xd4>
		}
		else if(count == 3) {
    2004:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    2008:	93 30       	cpi	r25, 0x03	; 3
    200a:	a9 f4       	brne	.+42     	; 0x2036 <__vector_3+0xd4>
			Second++;
    200c:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <Second>
    2010:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <Second+0x1>
    2014:	2f 5f       	subi	r18, 0xFF	; 255
    2016:	3f 4f       	sbci	r19, 0xFF	; 255
    2018:	30 93 72 00 	sts	0x0072, r19	; 0x800072 <Second+0x1>
    201c:	20 93 71 00 	sts	0x0071, r18	; 0x800071 <Second>
			if(Second > 59) Second = 0;
    2020:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <Second>
    2024:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <Second+0x1>
    2028:	2c 33       	cpi	r18, 0x3C	; 60
    202a:	31 05       	cpc	r19, r1
    202c:	24 f0       	brlt	.+8      	; 0x2036 <__vector_3+0xd4>
    202e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <Second+0x1>
    2032:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <Second>
		}
	}
	
	if((set == true) && (SW_time_date==1)){		//increase dd, mm, yyyy
    2036:	88 23       	and	r24, r24
    2038:	09 f4       	brne	.+2      	; 0x203c <__vector_3+0xda>
    203a:	e3 c0       	rjmp	.+454    	; 0x2202 <__vector_3+0x2a0>
    203c:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <__data_end>
    2040:	91 30       	cpi	r25, 0x01	; 1
    2042:	09 f0       	breq	.+2      	; 0x2046 <__vector_3+0xe4>
    2044:	de c0       	rjmp	.+444    	; 0x2202 <__vector_3+0x2a0>
		if(count == 1) {
    2046:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    204a:	91 30       	cpi	r25, 0x01	; 1
    204c:	09 f0       	breq	.+2      	; 0x2050 <__vector_3+0xee>
    204e:	a4 c0       	rjmp	.+328    	; 0x2198 <__vector_3+0x236>
			Date++;
    2050:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    2054:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    2058:	2f 5f       	subi	r18, 0xFF	; 255
    205a:	3f 4f       	sbci	r19, 0xFF	; 255
    205c:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    2060:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
			if(Month == 4 || Month == 6  || Month == 9  || Month == 11)
    2064:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2068:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    206c:	24 30       	cpi	r18, 0x04	; 4
    206e:	31 05       	cpc	r19, r1
    2070:	a9 f0       	breq	.+42     	; 0x209c <__vector_3+0x13a>
    2072:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2076:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    207a:	26 30       	cpi	r18, 0x06	; 6
    207c:	31 05       	cpc	r19, r1
    207e:	71 f0       	breq	.+28     	; 0x209c <__vector_3+0x13a>
    2080:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2084:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    2088:	29 30       	cpi	r18, 0x09	; 9
    208a:	31 05       	cpc	r19, r1
    208c:	39 f0       	breq	.+14     	; 0x209c <__vector_3+0x13a>
    208e:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2092:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    2096:	2b 30       	cpi	r18, 0x0B	; 11
    2098:	31 05       	cpc	r19, r1
    209a:	79 f4       	brne	.+30     	; 0x20ba <__vector_3+0x158>
			{
				if(Date > 30)
    209c:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    20a0:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    20a4:	2f 31       	cpi	r18, 0x1F	; 31
    20a6:	31 05       	cpc	r19, r1
    20a8:	0c f4       	brge	.+2      	; 0x20ac <__vector_3+0x14a>
    20aa:	ab c0       	rjmp	.+342    	; 0x2202 <__vector_3+0x2a0>
				Date=1;
    20ac:	21 e0       	ldi	r18, 0x01	; 1
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    20b4:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    20b8:	a4 c0       	rjmp	.+328    	; 0x2202 <__vector_3+0x2a0>
			}
			else if(Month == 1 || Month == 3  || Month == 5  || Month == 7 || Month == 8  || Month == 10  || Month == 12)
    20ba:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    20be:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    20c2:	21 30       	cpi	r18, 0x01	; 1
    20c4:	31 05       	cpc	r19, r1
    20c6:	51 f1       	breq	.+84     	; 0x211c <__vector_3+0x1ba>
    20c8:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    20cc:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    20d0:	23 30       	cpi	r18, 0x03	; 3
    20d2:	31 05       	cpc	r19, r1
    20d4:	19 f1       	breq	.+70     	; 0x211c <__vector_3+0x1ba>
    20d6:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    20da:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    20de:	25 30       	cpi	r18, 0x05	; 5
    20e0:	31 05       	cpc	r19, r1
    20e2:	e1 f0       	breq	.+56     	; 0x211c <__vector_3+0x1ba>
    20e4:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    20e8:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    20ec:	27 30       	cpi	r18, 0x07	; 7
    20ee:	31 05       	cpc	r19, r1
    20f0:	a9 f0       	breq	.+42     	; 0x211c <__vector_3+0x1ba>
    20f2:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    20f6:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    20fa:	28 30       	cpi	r18, 0x08	; 8
    20fc:	31 05       	cpc	r19, r1
    20fe:	71 f0       	breq	.+28     	; 0x211c <__vector_3+0x1ba>
    2100:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2104:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    2108:	2a 30       	cpi	r18, 0x0A	; 10
    210a:	31 05       	cpc	r19, r1
    210c:	39 f0       	breq	.+14     	; 0x211c <__vector_3+0x1ba>
    210e:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    2112:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    2116:	2c 30       	cpi	r18, 0x0C	; 12
    2118:	31 05       	cpc	r19, r1
    211a:	79 f4       	brne	.+30     	; 0x213a <__vector_3+0x1d8>
			{
				if(Date >31)
    211c:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    2120:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    2124:	20 32       	cpi	r18, 0x20	; 32
    2126:	31 05       	cpc	r19, r1
    2128:	0c f4       	brge	.+2      	; 0x212c <__vector_3+0x1ca>
    212a:	6b c0       	rjmp	.+214    	; 0x2202 <__vector_3+0x2a0>
				Date=1;
    212c:	21 e0       	ldi	r18, 0x01	; 1
    212e:	30 e0       	ldi	r19, 0x00	; 0
    2130:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    2134:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    2138:	64 c0       	rjmp	.+200    	; 0x2202 <__vector_3+0x2a0>
			}
			
			else if(yyyy/4 == 0 && yyyy/400 == 0)
    213a:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <yyyy>
    213e:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <yyyy+0x1>
    2142:	2d 5f       	subi	r18, 0xFD	; 253
    2144:	3f 4f       	sbci	r19, 0xFF	; 255
    2146:	27 30       	cpi	r18, 0x07	; 7
    2148:	31 05       	cpc	r19, r1
    214a:	c0 f4       	brcc	.+48     	; 0x217c <__vector_3+0x21a>
    214c:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <yyyy>
    2150:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <yyyy+0x1>
    2154:	21 57       	subi	r18, 0x71	; 113
    2156:	3e 4f       	sbci	r19, 0xFE	; 254
    2158:	2f 31       	cpi	r18, 0x1F	; 31
    215a:	33 40       	sbci	r19, 0x03	; 3
    215c:	78 f4       	brcc	.+30     	; 0x217c <__vector_3+0x21a>
			{
				if(Date > 29)
    215e:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    2162:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    2166:	2e 31       	cpi	r18, 0x1E	; 30
    2168:	31 05       	cpc	r19, r1
    216a:	0c f4       	brge	.+2      	; 0x216e <__vector_3+0x20c>
    216c:	4a c0       	rjmp	.+148    	; 0x2202 <__vector_3+0x2a0>
				Date=1;
    216e:	21 e0       	ldi	r18, 0x01	; 1
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    2176:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    217a:	43 c0       	rjmp	.+134    	; 0x2202 <__vector_3+0x2a0>
			}
			else
			{
				if(Date > 28)
    217c:	20 91 69 00 	lds	r18, 0x0069	; 0x800069 <Date>
    2180:	30 91 6a 00 	lds	r19, 0x006A	; 0x80006a <Date+0x1>
    2184:	2d 31       	cpi	r18, 0x1D	; 29
    2186:	31 05       	cpc	r19, r1
    2188:	e4 f1       	brlt	.+120    	; 0x2202 <__vector_3+0x2a0>
				Date=1;
    218a:	21 e0       	ldi	r18, 0x01	; 1
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	30 93 6a 00 	sts	0x006A, r19	; 0x80006a <Date+0x1>
    2192:	20 93 69 00 	sts	0x0069, r18	; 0x800069 <Date>
    2196:	35 c0       	rjmp	.+106    	; 0x2202 <__vector_3+0x2a0>
			}
		}
		else if(count == 2) {
    2198:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    219c:	92 30       	cpi	r25, 0x02	; 2
    219e:	c1 f4       	brne	.+48     	; 0x21d0 <__vector_3+0x26e>
			Month++;
    21a0:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    21a4:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    21a8:	2f 5f       	subi	r18, 0xFF	; 255
    21aa:	3f 4f       	sbci	r19, 0xFF	; 255
    21ac:	30 93 68 00 	sts	0x0068, r19	; 0x800068 <Month+0x1>
    21b0:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <Month>
			if(Month > 12) Month = 1;
    21b4:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <Month>
    21b8:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <Month+0x1>
    21bc:	2d 30       	cpi	r18, 0x0D	; 13
    21be:	31 05       	cpc	r19, r1
    21c0:	04 f1       	brlt	.+64     	; 0x2202 <__vector_3+0x2a0>
    21c2:	21 e0       	ldi	r18, 0x01	; 1
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	30 93 68 00 	sts	0x0068, r19	; 0x800068 <Month+0x1>
    21ca:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <Month>
    21ce:	19 c0       	rjmp	.+50     	; 0x2202 <__vector_3+0x2a0>
		}
		else if(count == 3) {
    21d0:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <count>
    21d4:	93 30       	cpi	r25, 0x03	; 3
    21d6:	a9 f4       	brne	.+42     	; 0x2202 <__vector_3+0x2a0>
			Year++;
    21d8:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <Year>
    21dc:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <Year+0x1>
    21e0:	2f 5f       	subi	r18, 0xFF	; 255
    21e2:	3f 4f       	sbci	r19, 0xFF	; 255
    21e4:	30 93 66 00 	sts	0x0066, r19	; 0x800066 <Year+0x1>
    21e8:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Year>
			if(Year > 99) Year = 0;
    21ec:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <Year>
    21f0:	30 91 66 00 	lds	r19, 0x0066	; 0x800066 <Year+0x1>
    21f4:	24 36       	cpi	r18, 0x64	; 100
    21f6:	31 05       	cpc	r19, r1
    21f8:	24 f0       	brlt	.+8      	; 0x2202 <__vector_3+0x2a0>
    21fa:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <Year+0x1>
    21fe:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <Year>
		}
	}
	
	if((set == true) && (SW_time_date==3))		//increase alarm
    2202:	88 23       	and	r24, r24
    2204:	91 f1       	breq	.+100    	; 0x226a <__vector_3+0x308>
    2206:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__data_end>
    220a:	83 30       	cpi	r24, 0x03	; 3
    220c:	71 f5       	brne	.+92     	; 0x226a <__vector_3+0x308>
	{		

		if(count == 1) {
    220e:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    2212:	81 30       	cpi	r24, 0x01	; 1
    2214:	99 f4       	brne	.+38     	; 0x223c <__vector_3+0x2da>
			A_Hour++;
    2216:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Hour>
    221a:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Hour+0x1>
    221e:	01 96       	adiw	r24, 0x01	; 1
    2220:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <A_Hour+0x1>
    2224:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <A_Hour>
			if(A_Hour > 23) A_Hour = 0;
    2228:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <A_Hour>
    222c:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <A_Hour+0x1>
    2230:	48 97       	sbiw	r24, 0x18	; 24
    2232:	24 f0       	brlt	.+8      	; 0x223c <__vector_3+0x2da>
    2234:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <A_Hour+0x1>
    2238:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <A_Hour>
		}
		if(count == 2) {
    223c:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <count>
    2240:	82 30       	cpi	r24, 0x02	; 2
    2242:	99 f4       	brne	.+38     	; 0x226a <__vector_3+0x308>
			A_Minute++;
    2244:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <A_Minute>
    2248:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <A_Minute+0x1>
    224c:	01 96       	adiw	r24, 0x01	; 1
    224e:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <A_Minute+0x1>
    2252:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <A_Minute>
			if(A_Minute > 59) A_Minute = 0;
    2256:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <A_Minute>
    225a:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <A_Minute+0x1>
    225e:	cc 97       	sbiw	r24, 0x3c	; 60
    2260:	24 f0       	brlt	.+8      	; 0x226a <__vector_3+0x308>
    2262:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <A_Minute+0x1>
    2266:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <A_Minute>
		}
	}
}
    226a:	9f 91       	pop	r25
    226c:	8f 91       	pop	r24
    226e:	3f 91       	pop	r19
    2270:	2f 91       	pop	r18
    2272:	0f 90       	pop	r0
    2274:	0f be       	out	0x3f, r0	; 63
    2276:	0f 90       	pop	r0
    2278:	1f 90       	pop	r1
    227a:	18 95       	reti

0000227c <__subsf3>:
    227c:	50 58       	subi	r21, 0x80	; 128

0000227e <__addsf3>:
    227e:	bb 27       	eor	r27, r27
    2280:	aa 27       	eor	r26, r26
    2282:	0e 94 56 11 	call	0x22ac	; 0x22ac <__addsf3x>
    2286:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__fp_round>
    228a:	0e 94 02 13 	call	0x2604	; 0x2604 <__fp_pscA>
    228e:	38 f0       	brcs	.+14     	; 0x229e <__addsf3+0x20>
    2290:	0e 94 09 13 	call	0x2612	; 0x2612 <__fp_pscB>
    2294:	20 f0       	brcs	.+8      	; 0x229e <__addsf3+0x20>
    2296:	39 f4       	brne	.+14     	; 0x22a6 <__addsf3+0x28>
    2298:	9f 3f       	cpi	r25, 0xFF	; 255
    229a:	19 f4       	brne	.+6      	; 0x22a2 <__addsf3+0x24>
    229c:	26 f4       	brtc	.+8      	; 0x22a6 <__addsf3+0x28>
    229e:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__fp_nan>
    22a2:	0e f4       	brtc	.+2      	; 0x22a6 <__addsf3+0x28>
    22a4:	e0 95       	com	r30
    22a6:	e7 fb       	bst	r30, 7
    22a8:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__fp_inf>

000022ac <__addsf3x>:
    22ac:	e9 2f       	mov	r30, r25
    22ae:	0e 94 21 13 	call	0x2642	; 0x2642 <__fp_split3>
    22b2:	58 f3       	brcs	.-42     	; 0x228a <__addsf3+0xc>
    22b4:	ba 17       	cp	r27, r26
    22b6:	62 07       	cpc	r22, r18
    22b8:	73 07       	cpc	r23, r19
    22ba:	84 07       	cpc	r24, r20
    22bc:	95 07       	cpc	r25, r21
    22be:	20 f0       	brcs	.+8      	; 0x22c8 <__addsf3x+0x1c>
    22c0:	79 f4       	brne	.+30     	; 0x22e0 <__addsf3x+0x34>
    22c2:	a6 f5       	brtc	.+104    	; 0x232c <__addsf3x+0x80>
    22c4:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__fp_zero>
    22c8:	0e f4       	brtc	.+2      	; 0x22cc <__addsf3x+0x20>
    22ca:	e0 95       	com	r30
    22cc:	0b 2e       	mov	r0, r27
    22ce:	ba 2f       	mov	r27, r26
    22d0:	a0 2d       	mov	r26, r0
    22d2:	0b 01       	movw	r0, r22
    22d4:	b9 01       	movw	r22, r18
    22d6:	90 01       	movw	r18, r0
    22d8:	0c 01       	movw	r0, r24
    22da:	ca 01       	movw	r24, r20
    22dc:	a0 01       	movw	r20, r0
    22de:	11 24       	eor	r1, r1
    22e0:	ff 27       	eor	r31, r31
    22e2:	59 1b       	sub	r21, r25
    22e4:	99 f0       	breq	.+38     	; 0x230c <__addsf3x+0x60>
    22e6:	59 3f       	cpi	r21, 0xF9	; 249
    22e8:	50 f4       	brcc	.+20     	; 0x22fe <__addsf3x+0x52>
    22ea:	50 3e       	cpi	r21, 0xE0	; 224
    22ec:	68 f1       	brcs	.+90     	; 0x2348 <__addsf3x+0x9c>
    22ee:	1a 16       	cp	r1, r26
    22f0:	f0 40       	sbci	r31, 0x00	; 0
    22f2:	a2 2f       	mov	r26, r18
    22f4:	23 2f       	mov	r18, r19
    22f6:	34 2f       	mov	r19, r20
    22f8:	44 27       	eor	r20, r20
    22fa:	58 5f       	subi	r21, 0xF8	; 248
    22fc:	f3 cf       	rjmp	.-26     	; 0x22e4 <__addsf3x+0x38>
    22fe:	46 95       	lsr	r20
    2300:	37 95       	ror	r19
    2302:	27 95       	ror	r18
    2304:	a7 95       	ror	r26
    2306:	f0 40       	sbci	r31, 0x00	; 0
    2308:	53 95       	inc	r21
    230a:	c9 f7       	brne	.-14     	; 0x22fe <__addsf3x+0x52>
    230c:	7e f4       	brtc	.+30     	; 0x232c <__addsf3x+0x80>
    230e:	1f 16       	cp	r1, r31
    2310:	ba 0b       	sbc	r27, r26
    2312:	62 0b       	sbc	r22, r18
    2314:	73 0b       	sbc	r23, r19
    2316:	84 0b       	sbc	r24, r20
    2318:	ba f0       	brmi	.+46     	; 0x2348 <__addsf3x+0x9c>
    231a:	91 50       	subi	r25, 0x01	; 1
    231c:	a1 f0       	breq	.+40     	; 0x2346 <__addsf3x+0x9a>
    231e:	ff 0f       	add	r31, r31
    2320:	bb 1f       	adc	r27, r27
    2322:	66 1f       	adc	r22, r22
    2324:	77 1f       	adc	r23, r23
    2326:	88 1f       	adc	r24, r24
    2328:	c2 f7       	brpl	.-16     	; 0x231a <__addsf3x+0x6e>
    232a:	0e c0       	rjmp	.+28     	; 0x2348 <__addsf3x+0x9c>
    232c:	ba 0f       	add	r27, r26
    232e:	62 1f       	adc	r22, r18
    2330:	73 1f       	adc	r23, r19
    2332:	84 1f       	adc	r24, r20
    2334:	48 f4       	brcc	.+18     	; 0x2348 <__addsf3x+0x9c>
    2336:	87 95       	ror	r24
    2338:	77 95       	ror	r23
    233a:	67 95       	ror	r22
    233c:	b7 95       	ror	r27
    233e:	f7 95       	ror	r31
    2340:	9e 3f       	cpi	r25, 0xFE	; 254
    2342:	08 f0       	brcs	.+2      	; 0x2346 <__addsf3x+0x9a>
    2344:	b0 cf       	rjmp	.-160    	; 0x22a6 <__addsf3+0x28>
    2346:	93 95       	inc	r25
    2348:	88 0f       	add	r24, r24
    234a:	08 f0       	brcs	.+2      	; 0x234e <__addsf3x+0xa2>
    234c:	99 27       	eor	r25, r25
    234e:	ee 0f       	add	r30, r30
    2350:	97 95       	ror	r25
    2352:	87 95       	ror	r24
    2354:	08 95       	ret

00002356 <__cmpsf2>:
    2356:	0e 94 ac 12 	call	0x2558	; 0x2558 <__fp_cmp>
    235a:	08 f4       	brcc	.+2      	; 0x235e <__cmpsf2+0x8>
    235c:	81 e0       	ldi	r24, 0x01	; 1
    235e:	08 95       	ret

00002360 <__divsf3>:
    2360:	0e 94 c4 11 	call	0x2388	; 0x2388 <__divsf3x>
    2364:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__fp_round>
    2368:	0e 94 09 13 	call	0x2612	; 0x2612 <__fp_pscB>
    236c:	58 f0       	brcs	.+22     	; 0x2384 <__divsf3+0x24>
    236e:	0e 94 02 13 	call	0x2604	; 0x2604 <__fp_pscA>
    2372:	40 f0       	brcs	.+16     	; 0x2384 <__divsf3+0x24>
    2374:	29 f4       	brne	.+10     	; 0x2380 <__divsf3+0x20>
    2376:	5f 3f       	cpi	r21, 0xFF	; 255
    2378:	29 f0       	breq	.+10     	; 0x2384 <__divsf3+0x24>
    237a:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__fp_inf>
    237e:	51 11       	cpse	r21, r1
    2380:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__fp_szero>
    2384:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__fp_nan>

00002388 <__divsf3x>:
    2388:	0e 94 21 13 	call	0x2642	; 0x2642 <__fp_split3>
    238c:	68 f3       	brcs	.-38     	; 0x2368 <__divsf3+0x8>

0000238e <__divsf3_pse>:
    238e:	99 23       	and	r25, r25
    2390:	b1 f3       	breq	.-20     	; 0x237e <__divsf3+0x1e>
    2392:	55 23       	and	r21, r21
    2394:	91 f3       	breq	.-28     	; 0x237a <__divsf3+0x1a>
    2396:	95 1b       	sub	r25, r21
    2398:	55 0b       	sbc	r21, r21
    239a:	bb 27       	eor	r27, r27
    239c:	aa 27       	eor	r26, r26
    239e:	62 17       	cp	r22, r18
    23a0:	73 07       	cpc	r23, r19
    23a2:	84 07       	cpc	r24, r20
    23a4:	38 f0       	brcs	.+14     	; 0x23b4 <__divsf3_pse+0x26>
    23a6:	9f 5f       	subi	r25, 0xFF	; 255
    23a8:	5f 4f       	sbci	r21, 0xFF	; 255
    23aa:	22 0f       	add	r18, r18
    23ac:	33 1f       	adc	r19, r19
    23ae:	44 1f       	adc	r20, r20
    23b0:	aa 1f       	adc	r26, r26
    23b2:	a9 f3       	breq	.-22     	; 0x239e <__divsf3_pse+0x10>
    23b4:	35 d0       	rcall	.+106    	; 0x2420 <__divsf3_pse+0x92>
    23b6:	0e 2e       	mov	r0, r30
    23b8:	3a f0       	brmi	.+14     	; 0x23c8 <__divsf3_pse+0x3a>
    23ba:	e0 e8       	ldi	r30, 0x80	; 128
    23bc:	32 d0       	rcall	.+100    	; 0x2422 <__divsf3_pse+0x94>
    23be:	91 50       	subi	r25, 0x01	; 1
    23c0:	50 40       	sbci	r21, 0x00	; 0
    23c2:	e6 95       	lsr	r30
    23c4:	00 1c       	adc	r0, r0
    23c6:	ca f7       	brpl	.-14     	; 0x23ba <__divsf3_pse+0x2c>
    23c8:	2b d0       	rcall	.+86     	; 0x2420 <__divsf3_pse+0x92>
    23ca:	fe 2f       	mov	r31, r30
    23cc:	29 d0       	rcall	.+82     	; 0x2420 <__divsf3_pse+0x92>
    23ce:	66 0f       	add	r22, r22
    23d0:	77 1f       	adc	r23, r23
    23d2:	88 1f       	adc	r24, r24
    23d4:	bb 1f       	adc	r27, r27
    23d6:	26 17       	cp	r18, r22
    23d8:	37 07       	cpc	r19, r23
    23da:	48 07       	cpc	r20, r24
    23dc:	ab 07       	cpc	r26, r27
    23de:	b0 e8       	ldi	r27, 0x80	; 128
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <__divsf3_pse+0x56>
    23e2:	bb 0b       	sbc	r27, r27
    23e4:	80 2d       	mov	r24, r0
    23e6:	bf 01       	movw	r22, r30
    23e8:	ff 27       	eor	r31, r31
    23ea:	93 58       	subi	r25, 0x83	; 131
    23ec:	5f 4f       	sbci	r21, 0xFF	; 255
    23ee:	3a f0       	brmi	.+14     	; 0x23fe <__divsf3_pse+0x70>
    23f0:	9e 3f       	cpi	r25, 0xFE	; 254
    23f2:	51 05       	cpc	r21, r1
    23f4:	78 f0       	brcs	.+30     	; 0x2414 <__divsf3_pse+0x86>
    23f6:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__fp_inf>
    23fa:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__fp_szero>
    23fe:	5f 3f       	cpi	r21, 0xFF	; 255
    2400:	e4 f3       	brlt	.-8      	; 0x23fa <__divsf3_pse+0x6c>
    2402:	98 3e       	cpi	r25, 0xE8	; 232
    2404:	d4 f3       	brlt	.-12     	; 0x23fa <__divsf3_pse+0x6c>
    2406:	86 95       	lsr	r24
    2408:	77 95       	ror	r23
    240a:	67 95       	ror	r22
    240c:	b7 95       	ror	r27
    240e:	f7 95       	ror	r31
    2410:	9f 5f       	subi	r25, 0xFF	; 255
    2412:	c9 f7       	brne	.-14     	; 0x2406 <__divsf3_pse+0x78>
    2414:	88 0f       	add	r24, r24
    2416:	91 1d       	adc	r25, r1
    2418:	96 95       	lsr	r25
    241a:	87 95       	ror	r24
    241c:	97 f9       	bld	r25, 7
    241e:	08 95       	ret
    2420:	e1 e0       	ldi	r30, 0x01	; 1
    2422:	66 0f       	add	r22, r22
    2424:	77 1f       	adc	r23, r23
    2426:	88 1f       	adc	r24, r24
    2428:	bb 1f       	adc	r27, r27
    242a:	62 17       	cp	r22, r18
    242c:	73 07       	cpc	r23, r19
    242e:	84 07       	cpc	r24, r20
    2430:	ba 07       	cpc	r27, r26
    2432:	20 f0       	brcs	.+8      	; 0x243c <__divsf3_pse+0xae>
    2434:	62 1b       	sub	r22, r18
    2436:	73 0b       	sbc	r23, r19
    2438:	84 0b       	sbc	r24, r20
    243a:	ba 0b       	sbc	r27, r26
    243c:	ee 1f       	adc	r30, r30
    243e:	88 f7       	brcc	.-30     	; 0x2422 <__divsf3_pse+0x94>
    2440:	e0 95       	com	r30
    2442:	08 95       	ret

00002444 <__fixsfsi>:
    2444:	0e 94 29 12 	call	0x2452	; 0x2452 <__fixunssfsi>
    2448:	68 94       	set
    244a:	b1 11       	cpse	r27, r1
    244c:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__fp_szero>
    2450:	08 95       	ret

00002452 <__fixunssfsi>:
    2452:	0e 94 29 13 	call	0x2652	; 0x2652 <__fp_splitA>
    2456:	88 f0       	brcs	.+34     	; 0x247a <__fixunssfsi+0x28>
    2458:	9f 57       	subi	r25, 0x7F	; 127
    245a:	98 f0       	brcs	.+38     	; 0x2482 <__fixunssfsi+0x30>
    245c:	b9 2f       	mov	r27, r25
    245e:	99 27       	eor	r25, r25
    2460:	b7 51       	subi	r27, 0x17	; 23
    2462:	b0 f0       	brcs	.+44     	; 0x2490 <__fixunssfsi+0x3e>
    2464:	e1 f0       	breq	.+56     	; 0x249e <__fixunssfsi+0x4c>
    2466:	66 0f       	add	r22, r22
    2468:	77 1f       	adc	r23, r23
    246a:	88 1f       	adc	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	1a f0       	brmi	.+6      	; 0x2476 <__fixunssfsi+0x24>
    2470:	ba 95       	dec	r27
    2472:	c9 f7       	brne	.-14     	; 0x2466 <__fixunssfsi+0x14>
    2474:	14 c0       	rjmp	.+40     	; 0x249e <__fixunssfsi+0x4c>
    2476:	b1 30       	cpi	r27, 0x01	; 1
    2478:	91 f0       	breq	.+36     	; 0x249e <__fixunssfsi+0x4c>
    247a:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <__fp_zero>
    247e:	b1 e0       	ldi	r27, 0x01	; 1
    2480:	08 95       	ret
    2482:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__fp_zero>
    2486:	67 2f       	mov	r22, r23
    2488:	78 2f       	mov	r23, r24
    248a:	88 27       	eor	r24, r24
    248c:	b8 5f       	subi	r27, 0xF8	; 248
    248e:	39 f0       	breq	.+14     	; 0x249e <__fixunssfsi+0x4c>
    2490:	b9 3f       	cpi	r27, 0xF9	; 249
    2492:	cc f3       	brlt	.-14     	; 0x2486 <__fixunssfsi+0x34>
    2494:	86 95       	lsr	r24
    2496:	77 95       	ror	r23
    2498:	67 95       	ror	r22
    249a:	b3 95       	inc	r27
    249c:	d9 f7       	brne	.-10     	; 0x2494 <__fixunssfsi+0x42>
    249e:	3e f4       	brtc	.+14     	; 0x24ae <__fixunssfsi+0x5c>
    24a0:	90 95       	com	r25
    24a2:	80 95       	com	r24
    24a4:	70 95       	com	r23
    24a6:	61 95       	neg	r22
    24a8:	7f 4f       	sbci	r23, 0xFF	; 255
    24aa:	8f 4f       	sbci	r24, 0xFF	; 255
    24ac:	9f 4f       	sbci	r25, 0xFF	; 255
    24ae:	08 95       	ret

000024b0 <__floatunsisf>:
    24b0:	e8 94       	clt
    24b2:	09 c0       	rjmp	.+18     	; 0x24c6 <__floatsisf+0x12>

000024b4 <__floatsisf>:
    24b4:	97 fb       	bst	r25, 7
    24b6:	3e f4       	brtc	.+14     	; 0x24c6 <__floatsisf+0x12>
    24b8:	90 95       	com	r25
    24ba:	80 95       	com	r24
    24bc:	70 95       	com	r23
    24be:	61 95       	neg	r22
    24c0:	7f 4f       	sbci	r23, 0xFF	; 255
    24c2:	8f 4f       	sbci	r24, 0xFF	; 255
    24c4:	9f 4f       	sbci	r25, 0xFF	; 255
    24c6:	99 23       	and	r25, r25
    24c8:	a9 f0       	breq	.+42     	; 0x24f4 <__floatsisf+0x40>
    24ca:	f9 2f       	mov	r31, r25
    24cc:	96 e9       	ldi	r25, 0x96	; 150
    24ce:	bb 27       	eor	r27, r27
    24d0:	93 95       	inc	r25
    24d2:	f6 95       	lsr	r31
    24d4:	87 95       	ror	r24
    24d6:	77 95       	ror	r23
    24d8:	67 95       	ror	r22
    24da:	b7 95       	ror	r27
    24dc:	f1 11       	cpse	r31, r1
    24de:	f8 cf       	rjmp	.-16     	; 0x24d0 <__floatsisf+0x1c>
    24e0:	fa f4       	brpl	.+62     	; 0x2520 <__floatsisf+0x6c>
    24e2:	bb 0f       	add	r27, r27
    24e4:	11 f4       	brne	.+4      	; 0x24ea <__floatsisf+0x36>
    24e6:	60 ff       	sbrs	r22, 0
    24e8:	1b c0       	rjmp	.+54     	; 0x2520 <__floatsisf+0x6c>
    24ea:	6f 5f       	subi	r22, 0xFF	; 255
    24ec:	7f 4f       	sbci	r23, 0xFF	; 255
    24ee:	8f 4f       	sbci	r24, 0xFF	; 255
    24f0:	9f 4f       	sbci	r25, 0xFF	; 255
    24f2:	16 c0       	rjmp	.+44     	; 0x2520 <__floatsisf+0x6c>
    24f4:	88 23       	and	r24, r24
    24f6:	11 f0       	breq	.+4      	; 0x24fc <__floatsisf+0x48>
    24f8:	96 e9       	ldi	r25, 0x96	; 150
    24fa:	11 c0       	rjmp	.+34     	; 0x251e <__floatsisf+0x6a>
    24fc:	77 23       	and	r23, r23
    24fe:	21 f0       	breq	.+8      	; 0x2508 <__floatsisf+0x54>
    2500:	9e e8       	ldi	r25, 0x8E	; 142
    2502:	87 2f       	mov	r24, r23
    2504:	76 2f       	mov	r23, r22
    2506:	05 c0       	rjmp	.+10     	; 0x2512 <__floatsisf+0x5e>
    2508:	66 23       	and	r22, r22
    250a:	71 f0       	breq	.+28     	; 0x2528 <__floatsisf+0x74>
    250c:	96 e8       	ldi	r25, 0x86	; 134
    250e:	86 2f       	mov	r24, r22
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	60 e0       	ldi	r22, 0x00	; 0
    2514:	2a f0       	brmi	.+10     	; 0x2520 <__floatsisf+0x6c>
    2516:	9a 95       	dec	r25
    2518:	66 0f       	add	r22, r22
    251a:	77 1f       	adc	r23, r23
    251c:	88 1f       	adc	r24, r24
    251e:	da f7       	brpl	.-10     	; 0x2516 <__floatsisf+0x62>
    2520:	88 0f       	add	r24, r24
    2522:	96 95       	lsr	r25
    2524:	87 95       	ror	r24
    2526:	97 f9       	bld	r25, 7
    2528:	08 95       	ret

0000252a <floor>:
    252a:	0e 94 43 13 	call	0x2686	; 0x2686 <__fp_trunc>
    252e:	90 f0       	brcs	.+36     	; 0x2554 <floor+0x2a>
    2530:	9f 37       	cpi	r25, 0x7F	; 127
    2532:	48 f4       	brcc	.+18     	; 0x2546 <floor+0x1c>
    2534:	91 11       	cpse	r25, r1
    2536:	16 f0       	brts	.+4      	; 0x253c <floor+0x12>
    2538:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__fp_szero>
    253c:	60 e0       	ldi	r22, 0x00	; 0
    253e:	70 e0       	ldi	r23, 0x00	; 0
    2540:	80 e8       	ldi	r24, 0x80	; 128
    2542:	9f eb       	ldi	r25, 0xBF	; 191
    2544:	08 95       	ret
    2546:	26 f4       	brtc	.+8      	; 0x2550 <floor+0x26>
    2548:	1b 16       	cp	r1, r27
    254a:	61 1d       	adc	r22, r1
    254c:	71 1d       	adc	r23, r1
    254e:	81 1d       	adc	r24, r1
    2550:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__fp_mintl>
    2554:	0c 94 f1 12 	jmp	0x25e2	; 0x25e2 <__fp_mpack>

00002558 <__fp_cmp>:
    2558:	99 0f       	add	r25, r25
    255a:	00 08       	sbc	r0, r0
    255c:	55 0f       	add	r21, r21
    255e:	aa 0b       	sbc	r26, r26
    2560:	e0 e8       	ldi	r30, 0x80	; 128
    2562:	fe ef       	ldi	r31, 0xFE	; 254
    2564:	16 16       	cp	r1, r22
    2566:	17 06       	cpc	r1, r23
    2568:	e8 07       	cpc	r30, r24
    256a:	f9 07       	cpc	r31, r25
    256c:	c0 f0       	brcs	.+48     	; 0x259e <__fp_cmp+0x46>
    256e:	12 16       	cp	r1, r18
    2570:	13 06       	cpc	r1, r19
    2572:	e4 07       	cpc	r30, r20
    2574:	f5 07       	cpc	r31, r21
    2576:	98 f0       	brcs	.+38     	; 0x259e <__fp_cmp+0x46>
    2578:	62 1b       	sub	r22, r18
    257a:	73 0b       	sbc	r23, r19
    257c:	84 0b       	sbc	r24, r20
    257e:	95 0b       	sbc	r25, r21
    2580:	39 f4       	brne	.+14     	; 0x2590 <__fp_cmp+0x38>
    2582:	0a 26       	eor	r0, r26
    2584:	61 f0       	breq	.+24     	; 0x259e <__fp_cmp+0x46>
    2586:	23 2b       	or	r18, r19
    2588:	24 2b       	or	r18, r20
    258a:	25 2b       	or	r18, r21
    258c:	21 f4       	brne	.+8      	; 0x2596 <__fp_cmp+0x3e>
    258e:	08 95       	ret
    2590:	0a 26       	eor	r0, r26
    2592:	09 f4       	brne	.+2      	; 0x2596 <__fp_cmp+0x3e>
    2594:	a1 40       	sbci	r26, 0x01	; 1
    2596:	a6 95       	lsr	r26
    2598:	8f ef       	ldi	r24, 0xFF	; 255
    259a:	81 1d       	adc	r24, r1
    259c:	81 1d       	adc	r24, r1
    259e:	08 95       	ret

000025a0 <__fp_inf>:
    25a0:	97 f9       	bld	r25, 7
    25a2:	9f 67       	ori	r25, 0x7F	; 127
    25a4:	80 e8       	ldi	r24, 0x80	; 128
    25a6:	70 e0       	ldi	r23, 0x00	; 0
    25a8:	60 e0       	ldi	r22, 0x00	; 0
    25aa:	08 95       	ret

000025ac <__fp_mintl>:
    25ac:	88 23       	and	r24, r24
    25ae:	71 f4       	brne	.+28     	; 0x25cc <__fp_mintl+0x20>
    25b0:	77 23       	and	r23, r23
    25b2:	21 f0       	breq	.+8      	; 0x25bc <__fp_mintl+0x10>
    25b4:	98 50       	subi	r25, 0x08	; 8
    25b6:	87 2b       	or	r24, r23
    25b8:	76 2f       	mov	r23, r22
    25ba:	07 c0       	rjmp	.+14     	; 0x25ca <__fp_mintl+0x1e>
    25bc:	66 23       	and	r22, r22
    25be:	11 f4       	brne	.+4      	; 0x25c4 <__fp_mintl+0x18>
    25c0:	99 27       	eor	r25, r25
    25c2:	0d c0       	rjmp	.+26     	; 0x25de <__fp_mintl+0x32>
    25c4:	90 51       	subi	r25, 0x10	; 16
    25c6:	86 2b       	or	r24, r22
    25c8:	70 e0       	ldi	r23, 0x00	; 0
    25ca:	60 e0       	ldi	r22, 0x00	; 0
    25cc:	2a f0       	brmi	.+10     	; 0x25d8 <__fp_mintl+0x2c>
    25ce:	9a 95       	dec	r25
    25d0:	66 0f       	add	r22, r22
    25d2:	77 1f       	adc	r23, r23
    25d4:	88 1f       	adc	r24, r24
    25d6:	da f7       	brpl	.-10     	; 0x25ce <__fp_mintl+0x22>
    25d8:	88 0f       	add	r24, r24
    25da:	96 95       	lsr	r25
    25dc:	87 95       	ror	r24
    25de:	97 f9       	bld	r25, 7
    25e0:	08 95       	ret

000025e2 <__fp_mpack>:
    25e2:	9f 3f       	cpi	r25, 0xFF	; 255
    25e4:	31 f0       	breq	.+12     	; 0x25f2 <__fp_mpack_finite+0xc>

000025e6 <__fp_mpack_finite>:
    25e6:	91 50       	subi	r25, 0x01	; 1
    25e8:	20 f4       	brcc	.+8      	; 0x25f2 <__fp_mpack_finite+0xc>
    25ea:	87 95       	ror	r24
    25ec:	77 95       	ror	r23
    25ee:	67 95       	ror	r22
    25f0:	b7 95       	ror	r27
    25f2:	88 0f       	add	r24, r24
    25f4:	91 1d       	adc	r25, r1
    25f6:	96 95       	lsr	r25
    25f8:	87 95       	ror	r24
    25fa:	97 f9       	bld	r25, 7
    25fc:	08 95       	ret

000025fe <__fp_nan>:
    25fe:	9f ef       	ldi	r25, 0xFF	; 255
    2600:	80 ec       	ldi	r24, 0xC0	; 192
    2602:	08 95       	ret

00002604 <__fp_pscA>:
    2604:	00 24       	eor	r0, r0
    2606:	0a 94       	dec	r0
    2608:	16 16       	cp	r1, r22
    260a:	17 06       	cpc	r1, r23
    260c:	18 06       	cpc	r1, r24
    260e:	09 06       	cpc	r0, r25
    2610:	08 95       	ret

00002612 <__fp_pscB>:
    2612:	00 24       	eor	r0, r0
    2614:	0a 94       	dec	r0
    2616:	12 16       	cp	r1, r18
    2618:	13 06       	cpc	r1, r19
    261a:	14 06       	cpc	r1, r20
    261c:	05 06       	cpc	r0, r21
    261e:	08 95       	ret

00002620 <__fp_round>:
    2620:	09 2e       	mov	r0, r25
    2622:	03 94       	inc	r0
    2624:	00 0c       	add	r0, r0
    2626:	11 f4       	brne	.+4      	; 0x262c <__fp_round+0xc>
    2628:	88 23       	and	r24, r24
    262a:	52 f0       	brmi	.+20     	; 0x2640 <__fp_round+0x20>
    262c:	bb 0f       	add	r27, r27
    262e:	40 f4       	brcc	.+16     	; 0x2640 <__fp_round+0x20>
    2630:	bf 2b       	or	r27, r31
    2632:	11 f4       	brne	.+4      	; 0x2638 <__fp_round+0x18>
    2634:	60 ff       	sbrs	r22, 0
    2636:	04 c0       	rjmp	.+8      	; 0x2640 <__fp_round+0x20>
    2638:	6f 5f       	subi	r22, 0xFF	; 255
    263a:	7f 4f       	sbci	r23, 0xFF	; 255
    263c:	8f 4f       	sbci	r24, 0xFF	; 255
    263e:	9f 4f       	sbci	r25, 0xFF	; 255
    2640:	08 95       	ret

00002642 <__fp_split3>:
    2642:	57 fd       	sbrc	r21, 7
    2644:	90 58       	subi	r25, 0x80	; 128
    2646:	44 0f       	add	r20, r20
    2648:	55 1f       	adc	r21, r21
    264a:	59 f0       	breq	.+22     	; 0x2662 <__fp_splitA+0x10>
    264c:	5f 3f       	cpi	r21, 0xFF	; 255
    264e:	71 f0       	breq	.+28     	; 0x266c <__fp_splitA+0x1a>
    2650:	47 95       	ror	r20

00002652 <__fp_splitA>:
    2652:	88 0f       	add	r24, r24
    2654:	97 fb       	bst	r25, 7
    2656:	99 1f       	adc	r25, r25
    2658:	61 f0       	breq	.+24     	; 0x2672 <__fp_splitA+0x20>
    265a:	9f 3f       	cpi	r25, 0xFF	; 255
    265c:	79 f0       	breq	.+30     	; 0x267c <__fp_splitA+0x2a>
    265e:	87 95       	ror	r24
    2660:	08 95       	ret
    2662:	12 16       	cp	r1, r18
    2664:	13 06       	cpc	r1, r19
    2666:	14 06       	cpc	r1, r20
    2668:	55 1f       	adc	r21, r21
    266a:	f2 cf       	rjmp	.-28     	; 0x2650 <__fp_split3+0xe>
    266c:	46 95       	lsr	r20
    266e:	f1 df       	rcall	.-30     	; 0x2652 <__fp_splitA>
    2670:	08 c0       	rjmp	.+16     	; 0x2682 <__fp_splitA+0x30>
    2672:	16 16       	cp	r1, r22
    2674:	17 06       	cpc	r1, r23
    2676:	18 06       	cpc	r1, r24
    2678:	99 1f       	adc	r25, r25
    267a:	f1 cf       	rjmp	.-30     	; 0x265e <__fp_splitA+0xc>
    267c:	86 95       	lsr	r24
    267e:	71 05       	cpc	r23, r1
    2680:	61 05       	cpc	r22, r1
    2682:	08 94       	sec
    2684:	08 95       	ret

00002686 <__fp_trunc>:
    2686:	0e 94 29 13 	call	0x2652	; 0x2652 <__fp_splitA>
    268a:	a0 f0       	brcs	.+40     	; 0x26b4 <__fp_trunc+0x2e>
    268c:	be e7       	ldi	r27, 0x7E	; 126
    268e:	b9 17       	cp	r27, r25
    2690:	88 f4       	brcc	.+34     	; 0x26b4 <__fp_trunc+0x2e>
    2692:	bb 27       	eor	r27, r27
    2694:	9f 38       	cpi	r25, 0x8F	; 143
    2696:	60 f4       	brcc	.+24     	; 0x26b0 <__fp_trunc+0x2a>
    2698:	16 16       	cp	r1, r22
    269a:	b1 1d       	adc	r27, r1
    269c:	67 2f       	mov	r22, r23
    269e:	78 2f       	mov	r23, r24
    26a0:	88 27       	eor	r24, r24
    26a2:	98 5f       	subi	r25, 0xF8	; 248
    26a4:	f7 cf       	rjmp	.-18     	; 0x2694 <__fp_trunc+0xe>
    26a6:	86 95       	lsr	r24
    26a8:	77 95       	ror	r23
    26aa:	67 95       	ror	r22
    26ac:	b1 1d       	adc	r27, r1
    26ae:	93 95       	inc	r25
    26b0:	96 39       	cpi	r25, 0x96	; 150
    26b2:	c8 f3       	brcs	.-14     	; 0x26a6 <__fp_trunc+0x20>
    26b4:	08 95       	ret

000026b6 <__fp_zero>:
    26b6:	e8 94       	clt

000026b8 <__fp_szero>:
    26b8:	bb 27       	eor	r27, r27
    26ba:	66 27       	eor	r22, r22
    26bc:	77 27       	eor	r23, r23
    26be:	cb 01       	movw	r24, r22
    26c0:	97 f9       	bld	r25, 7
    26c2:	08 95       	ret

000026c4 <__gesf2>:
    26c4:	0e 94 ac 12 	call	0x2558	; 0x2558 <__fp_cmp>
    26c8:	08 f4       	brcc	.+2      	; 0x26cc <__gesf2+0x8>
    26ca:	8f ef       	ldi	r24, 0xFF	; 255
    26cc:	08 95       	ret

000026ce <__mulsf3>:
    26ce:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__mulsf3x>
    26d2:	0c 94 10 13 	jmp	0x2620	; 0x2620 <__fp_round>
    26d6:	0e 94 02 13 	call	0x2604	; 0x2604 <__fp_pscA>
    26da:	38 f0       	brcs	.+14     	; 0x26ea <__mulsf3+0x1c>
    26dc:	0e 94 09 13 	call	0x2612	; 0x2612 <__fp_pscB>
    26e0:	20 f0       	brcs	.+8      	; 0x26ea <__mulsf3+0x1c>
    26e2:	95 23       	and	r25, r21
    26e4:	11 f0       	breq	.+4      	; 0x26ea <__mulsf3+0x1c>
    26e6:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__fp_inf>
    26ea:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__fp_nan>
    26ee:	11 24       	eor	r1, r1
    26f0:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__fp_szero>

000026f4 <__mulsf3x>:
    26f4:	0e 94 21 13 	call	0x2642	; 0x2642 <__fp_split3>
    26f8:	70 f3       	brcs	.-36     	; 0x26d6 <__mulsf3+0x8>

000026fa <__mulsf3_pse>:
    26fa:	95 9f       	mul	r25, r21
    26fc:	c1 f3       	breq	.-16     	; 0x26ee <__mulsf3+0x20>
    26fe:	95 0f       	add	r25, r21
    2700:	50 e0       	ldi	r21, 0x00	; 0
    2702:	55 1f       	adc	r21, r21
    2704:	62 9f       	mul	r22, r18
    2706:	f0 01       	movw	r30, r0
    2708:	72 9f       	mul	r23, r18
    270a:	bb 27       	eor	r27, r27
    270c:	f0 0d       	add	r31, r0
    270e:	b1 1d       	adc	r27, r1
    2710:	63 9f       	mul	r22, r19
    2712:	aa 27       	eor	r26, r26
    2714:	f0 0d       	add	r31, r0
    2716:	b1 1d       	adc	r27, r1
    2718:	aa 1f       	adc	r26, r26
    271a:	64 9f       	mul	r22, r20
    271c:	66 27       	eor	r22, r22
    271e:	b0 0d       	add	r27, r0
    2720:	a1 1d       	adc	r26, r1
    2722:	66 1f       	adc	r22, r22
    2724:	82 9f       	mul	r24, r18
    2726:	22 27       	eor	r18, r18
    2728:	b0 0d       	add	r27, r0
    272a:	a1 1d       	adc	r26, r1
    272c:	62 1f       	adc	r22, r18
    272e:	73 9f       	mul	r23, r19
    2730:	b0 0d       	add	r27, r0
    2732:	a1 1d       	adc	r26, r1
    2734:	62 1f       	adc	r22, r18
    2736:	83 9f       	mul	r24, r19
    2738:	a0 0d       	add	r26, r0
    273a:	61 1d       	adc	r22, r1
    273c:	22 1f       	adc	r18, r18
    273e:	74 9f       	mul	r23, r20
    2740:	33 27       	eor	r19, r19
    2742:	a0 0d       	add	r26, r0
    2744:	61 1d       	adc	r22, r1
    2746:	23 1f       	adc	r18, r19
    2748:	84 9f       	mul	r24, r20
    274a:	60 0d       	add	r22, r0
    274c:	21 1d       	adc	r18, r1
    274e:	82 2f       	mov	r24, r18
    2750:	76 2f       	mov	r23, r22
    2752:	6a 2f       	mov	r22, r26
    2754:	11 24       	eor	r1, r1
    2756:	9f 57       	subi	r25, 0x7F	; 127
    2758:	50 40       	sbci	r21, 0x00	; 0
    275a:	9a f0       	brmi	.+38     	; 0x2782 <__mulsf3_pse+0x88>
    275c:	f1 f0       	breq	.+60     	; 0x279a <__mulsf3_pse+0xa0>
    275e:	88 23       	and	r24, r24
    2760:	4a f0       	brmi	.+18     	; 0x2774 <__mulsf3_pse+0x7a>
    2762:	ee 0f       	add	r30, r30
    2764:	ff 1f       	adc	r31, r31
    2766:	bb 1f       	adc	r27, r27
    2768:	66 1f       	adc	r22, r22
    276a:	77 1f       	adc	r23, r23
    276c:	88 1f       	adc	r24, r24
    276e:	91 50       	subi	r25, 0x01	; 1
    2770:	50 40       	sbci	r21, 0x00	; 0
    2772:	a9 f7       	brne	.-22     	; 0x275e <__mulsf3_pse+0x64>
    2774:	9e 3f       	cpi	r25, 0xFE	; 254
    2776:	51 05       	cpc	r21, r1
    2778:	80 f0       	brcs	.+32     	; 0x279a <__mulsf3_pse+0xa0>
    277a:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__fp_inf>
    277e:	0c 94 5c 13 	jmp	0x26b8	; 0x26b8 <__fp_szero>
    2782:	5f 3f       	cpi	r21, 0xFF	; 255
    2784:	e4 f3       	brlt	.-8      	; 0x277e <__mulsf3_pse+0x84>
    2786:	98 3e       	cpi	r25, 0xE8	; 232
    2788:	d4 f3       	brlt	.-12     	; 0x277e <__mulsf3_pse+0x84>
    278a:	86 95       	lsr	r24
    278c:	77 95       	ror	r23
    278e:	67 95       	ror	r22
    2790:	b7 95       	ror	r27
    2792:	f7 95       	ror	r31
    2794:	e7 95       	ror	r30
    2796:	9f 5f       	subi	r25, 0xFF	; 255
    2798:	c1 f7       	brne	.-16     	; 0x278a <__mulsf3_pse+0x90>
    279a:	fe 2b       	or	r31, r30
    279c:	88 0f       	add	r24, r24
    279e:	91 1d       	adc	r25, r1
    27a0:	96 95       	lsr	r25
    27a2:	87 95       	ror	r24
    27a4:	97 f9       	bld	r25, 7
    27a6:	08 95       	ret

000027a8 <sin>:
    27a8:	9f 93       	push	r25
    27aa:	0e 94 de 13 	call	0x27bc	; 0x27bc <__fp_rempio2>
    27ae:	0f 90       	pop	r0
    27b0:	07 fc       	sbrc	r0, 7
    27b2:	ee 5f       	subi	r30, 0xFE	; 254
    27b4:	0c 94 07 14 	jmp	0x280e	; 0x280e <__fp_sinus>
    27b8:	0c 94 ff 12 	jmp	0x25fe	; 0x25fe <__fp_nan>

000027bc <__fp_rempio2>:
    27bc:	0e 94 29 13 	call	0x2652	; 0x2652 <__fp_splitA>
    27c0:	d8 f3       	brcs	.-10     	; 0x27b8 <sin+0x10>
    27c2:	e8 94       	clt
    27c4:	e0 e0       	ldi	r30, 0x00	; 0
    27c6:	bb 27       	eor	r27, r27
    27c8:	9f 57       	subi	r25, 0x7F	; 127
    27ca:	f0 f0       	brcs	.+60     	; 0x2808 <__fp_rempio2+0x4c>
    27cc:	2a ed       	ldi	r18, 0xDA	; 218
    27ce:	3f e0       	ldi	r19, 0x0F	; 15
    27d0:	49 ec       	ldi	r20, 0xC9	; 201
    27d2:	06 c0       	rjmp	.+12     	; 0x27e0 <__fp_rempio2+0x24>
    27d4:	ee 0f       	add	r30, r30
    27d6:	bb 0f       	add	r27, r27
    27d8:	66 1f       	adc	r22, r22
    27da:	77 1f       	adc	r23, r23
    27dc:	88 1f       	adc	r24, r24
    27de:	28 f0       	brcs	.+10     	; 0x27ea <__fp_rempio2+0x2e>
    27e0:	b2 3a       	cpi	r27, 0xA2	; 162
    27e2:	62 07       	cpc	r22, r18
    27e4:	73 07       	cpc	r23, r19
    27e6:	84 07       	cpc	r24, r20
    27e8:	28 f0       	brcs	.+10     	; 0x27f4 <__fp_rempio2+0x38>
    27ea:	b2 5a       	subi	r27, 0xA2	; 162
    27ec:	62 0b       	sbc	r22, r18
    27ee:	73 0b       	sbc	r23, r19
    27f0:	84 0b       	sbc	r24, r20
    27f2:	e3 95       	inc	r30
    27f4:	9a 95       	dec	r25
    27f6:	72 f7       	brpl	.-36     	; 0x27d4 <__fp_rempio2+0x18>
    27f8:	80 38       	cpi	r24, 0x80	; 128
    27fa:	30 f4       	brcc	.+12     	; 0x2808 <__fp_rempio2+0x4c>
    27fc:	9a 95       	dec	r25
    27fe:	bb 0f       	add	r27, r27
    2800:	66 1f       	adc	r22, r22
    2802:	77 1f       	adc	r23, r23
    2804:	88 1f       	adc	r24, r24
    2806:	d2 f7       	brpl	.-12     	; 0x27fc <__fp_rempio2+0x40>
    2808:	90 48       	sbci	r25, 0x80	; 128
    280a:	0c 94 f3 12 	jmp	0x25e6	; 0x25e6 <__fp_mpack_finite>

0000280e <__fp_sinus>:
    280e:	ef 93       	push	r30
    2810:	e0 ff       	sbrs	r30, 0
    2812:	07 c0       	rjmp	.+14     	; 0x2822 <__fp_sinus+0x14>
    2814:	a2 ea       	ldi	r26, 0xA2	; 162
    2816:	2a ed       	ldi	r18, 0xDA	; 218
    2818:	3f e0       	ldi	r19, 0x0F	; 15
    281a:	49 ec       	ldi	r20, 0xC9	; 201
    281c:	5f eb       	ldi	r21, 0xBF	; 191
    281e:	0e 94 56 11 	call	0x22ac	; 0x22ac <__addsf3x>
    2822:	0e 94 10 13 	call	0x2620	; 0x2620 <__fp_round>
    2826:	0f 90       	pop	r0
    2828:	03 94       	inc	r0
    282a:	01 fc       	sbrc	r0, 1
    282c:	90 58       	subi	r25, 0x80	; 128
    282e:	e4 e5       	ldi	r30, 0x54	; 84
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__fp_powsodd>

00002836 <__fp_powsodd>:
    2836:	9f 93       	push	r25
    2838:	8f 93       	push	r24
    283a:	7f 93       	push	r23
    283c:	6f 93       	push	r22
    283e:	ff 93       	push	r31
    2840:	ef 93       	push	r30
    2842:	9b 01       	movw	r18, r22
    2844:	ac 01       	movw	r20, r24
    2846:	0e 94 67 13 	call	0x26ce	; 0x26ce <__mulsf3>
    284a:	ef 91       	pop	r30
    284c:	ff 91       	pop	r31
    284e:	0e 94 2f 14 	call	0x285e	; 0x285e <__fp_powser>
    2852:	2f 91       	pop	r18
    2854:	3f 91       	pop	r19
    2856:	4f 91       	pop	r20
    2858:	5f 91       	pop	r21
    285a:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__mulsf3>

0000285e <__fp_powser>:
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	1f 93       	push	r17
    2864:	0f 93       	push	r16
    2866:	ff 92       	push	r15
    2868:	ef 92       	push	r14
    286a:	df 92       	push	r13
    286c:	7b 01       	movw	r14, r22
    286e:	8c 01       	movw	r16, r24
    2870:	68 94       	set
    2872:	06 c0       	rjmp	.+12     	; 0x2880 <__fp_powser+0x22>
    2874:	da 2e       	mov	r13, r26
    2876:	ef 01       	movw	r28, r30
    2878:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <__mulsf3x>
    287c:	fe 01       	movw	r30, r28
    287e:	e8 94       	clt
    2880:	a5 91       	lpm	r26, Z+
    2882:	25 91       	lpm	r18, Z+
    2884:	35 91       	lpm	r19, Z+
    2886:	45 91       	lpm	r20, Z+
    2888:	55 91       	lpm	r21, Z+
    288a:	a6 f3       	brts	.-24     	; 0x2874 <__fp_powser+0x16>
    288c:	ef 01       	movw	r28, r30
    288e:	0e 94 56 11 	call	0x22ac	; 0x22ac <__addsf3x>
    2892:	fe 01       	movw	r30, r28
    2894:	97 01       	movw	r18, r14
    2896:	a8 01       	movw	r20, r16
    2898:	da 94       	dec	r13
    289a:	69 f7       	brne	.-38     	; 0x2876 <__fp_powser+0x18>
    289c:	df 90       	pop	r13
    289e:	ef 90       	pop	r14
    28a0:	ff 90       	pop	r15
    28a2:	0f 91       	pop	r16
    28a4:	1f 91       	pop	r17
    28a6:	cf 91       	pop	r28
    28a8:	df 91       	pop	r29
    28aa:	08 95       	ret

000028ac <__divmodhi4>:
    28ac:	97 fb       	bst	r25, 7
    28ae:	07 2e       	mov	r0, r23
    28b0:	16 f4       	brtc	.+4      	; 0x28b6 <__divmodhi4+0xa>
    28b2:	00 94       	com	r0
    28b4:	07 d0       	rcall	.+14     	; 0x28c4 <__divmodhi4_neg1>
    28b6:	77 fd       	sbrc	r23, 7
    28b8:	09 d0       	rcall	.+18     	; 0x28cc <__divmodhi4_neg2>
    28ba:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__udivmodhi4>
    28be:	07 fc       	sbrc	r0, 7
    28c0:	05 d0       	rcall	.+10     	; 0x28cc <__divmodhi4_neg2>
    28c2:	3e f4       	brtc	.+14     	; 0x28d2 <__divmodhi4_exit>

000028c4 <__divmodhi4_neg1>:
    28c4:	90 95       	com	r25
    28c6:	81 95       	neg	r24
    28c8:	9f 4f       	sbci	r25, 0xFF	; 255
    28ca:	08 95       	ret

000028cc <__divmodhi4_neg2>:
    28cc:	70 95       	com	r23
    28ce:	61 95       	neg	r22
    28d0:	7f 4f       	sbci	r23, 0xFF	; 255

000028d2 <__divmodhi4_exit>:
    28d2:	08 95       	ret

000028d4 <__udivmodhi4>:
    28d4:	aa 1b       	sub	r26, r26
    28d6:	bb 1b       	sub	r27, r27
    28d8:	51 e1       	ldi	r21, 0x11	; 17
    28da:	07 c0       	rjmp	.+14     	; 0x28ea <__udivmodhi4_ep>

000028dc <__udivmodhi4_loop>:
    28dc:	aa 1f       	adc	r26, r26
    28de:	bb 1f       	adc	r27, r27
    28e0:	a6 17       	cp	r26, r22
    28e2:	b7 07       	cpc	r27, r23
    28e4:	10 f0       	brcs	.+4      	; 0x28ea <__udivmodhi4_ep>
    28e6:	a6 1b       	sub	r26, r22
    28e8:	b7 0b       	sbc	r27, r23

000028ea <__udivmodhi4_ep>:
    28ea:	88 1f       	adc	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	5a 95       	dec	r21
    28f0:	a9 f7       	brne	.-22     	; 0x28dc <__udivmodhi4_loop>
    28f2:	80 95       	com	r24
    28f4:	90 95       	com	r25
    28f6:	bc 01       	movw	r22, r24
    28f8:	cd 01       	movw	r24, r26
    28fa:	08 95       	ret

000028fc <_exit>:
    28fc:	f8 94       	cli

000028fe <__stop_program>:
    28fe:	ff cf       	rjmp	.-2      	; 0x28fe <__stop_program>
