
Test_MAX7219.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000013a  000001ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000792  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ca  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002a9  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001264  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032c  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a4  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000016a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  7a:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <spiSendByte>:
char digitsInUse = 8;

void spiSendByte (uint8_t databyte)
{
	// Copy data into the SPI data register
	SPDR = databyte;
  82:	8f b9       	out	0x0f, r24	; 15
	// Wait until transfer is complete
	while (!(SPSR & (1 << SPIF)));
  84:	77 9b       	sbis	0x0e, 7	; 14
  86:	fe cf       	rjmp	.-4      	; 0x84 <spiSendByte+0x2>
}
  88:	08 95       	ret

0000008a <MAX7219_writeData>:

void MAX7219_writeData(uint8_t data_register, uint8_t data)
{
  8a:	cf 93       	push	r28
  8c:	c6 2f       	mov	r28, r22
	MAX7219_LOAD0;
  8e:	98 b3       	in	r25, 0x18	; 24
  90:	9f 7e       	andi	r25, 0xEF	; 239
  92:	98 bb       	out	0x18, r25	; 24
	// Send the register where the data will be stored
	spiSendByte(data_register);
  94:	0e 94 41 00 	call	0x82	; 0x82 <spiSendByte>
	// Send the data to be stored
	spiSendByte(data);
  98:	8c 2f       	mov	r24, r28
  9a:	0e 94 41 00 	call	0x82	; 0x82 <spiSendByte>
	MAX7219_LOAD1;
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	80 61       	ori	r24, 0x10	; 16
  a2:	88 bb       	out	0x18, r24	; 24
}
  a4:	cf 91       	pop	r28
  a6:	08 95       	ret

000000a8 <MAX7219_clearDisplay>:

void MAX7219_clearDisplay()
{
  a8:	cf 93       	push	r28
	char i = digitsInUse;
  aa:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	// Loop until 0, but don't run for zero
	do {
		// Set each display in use to blank
		MAX7219_writeData(i, MAX7219_CHAR_BLANK);
  ae:	6f e0       	ldi	r22, 0x0F	; 15
  b0:	8c 2f       	mov	r24, r28
  b2:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
	} while (--i);
  b6:	c1 50       	subi	r28, 0x01	; 1
  b8:	d1 f7       	brne	.-12     	; 0xae <MAX7219_clearDisplay+0x6>
}
  ba:	cf 91       	pop	r28
  bc:	08 95       	ret

000000be <init_SPI>:
void init_SPI()
{
	// SCK MOSI CS/LOAD/SS
	DDRB |= (1 << PIN_SCK) | (1 << PIN_MOSI) | (1 << PIN_SS);
  be:	87 b3       	in	r24, 0x17	; 23
  c0:	80 6b       	ori	r24, 0xB0	; 176
  c2:	87 bb       	out	0x17, r24	; 23

	// SPI Enable, Master mode
	SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
  c4:	8d b1       	in	r24, 0x0d	; 13
  c6:	82 65       	ori	r24, 0x52	; 82
  c8:	8d b9       	out	0x0d, r24	; 13
  ca:	08 95       	ret

000000cc <main>:
}
int main(void)
{
	init_SPI();
  cc:	0e 94 5f 00 	call	0xbe	; 0xbe <init_SPI>
	// Decode mode to "Font Code-B"
	MAX7219_clearDisplay();
  d0:	0e 94 54 00 	call	0xa8	; 0xa8 <MAX7219_clearDisplay>
	MAX7219_writeData(MAX7219_MODE_DECODE, 0xFD);
  d4:	6d ef       	ldi	r22, 0xFD	; 253
  d6:	89 e0       	ldi	r24, 0x09	; 9
  d8:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>

	// Scan limit runs from 0.
	MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, 0x07);
  dc:	67 e0       	ldi	r22, 0x07	; 7
  de:	8b e0       	ldi	r24, 0x0B	; 11
  e0:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_INTENSITY, 0x01);
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	8a e0       	ldi	r24, 0x0A	; 10
  e8:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_POWER, ON);
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
	MAX7219_writeData(0x01,1);
  f4:	61 e0       	ldi	r22, 0x01	; 1
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
	MAX7219_writeData(0x02,0x0F);
  fc:	6f e0       	ldi	r22, 0x0F	; 15
  fe:	82 e0       	ldi	r24, 0x02	; 2
 100:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
	MAX7219_writeData(0x03,3);
 104:	63 e0       	ldi	r22, 0x03	; 3
 106:	83 e0       	ldi	r24, 0x03	; 3
 108:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
	MAX7219_writeData(0x04,4);
 10c:	64 e0       	ldi	r22, 0x04	; 4
 10e:	84 e0       	ldi	r24, 0x04	; 4
 110:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
	MAX7219_writeData(0x05,5);
 114:	65 e0       	ldi	r22, 0x05	; 5
 116:	85 e0       	ldi	r24, 0x05	; 5
 118:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
	MAX7219_writeData(0x06,6);
 11c:	66 e0       	ldi	r22, 0x06	; 6
 11e:	86 e0       	ldi	r24, 0x06	; 6
 120:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
	MAX7219_writeData(0x07,7);
 124:	67 e0       	ldi	r22, 0x07	; 7
 126:	87 e0       	ldi	r24, 0x07	; 7
 128:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
	MAX7219_writeData(0x08,8);
 12c:	68 e0       	ldi	r22, 0x08	; 8
 12e:	88 e0       	ldi	r24, 0x08	; 8
 130:	0e 94 45 00 	call	0x8a	; 0x8a <MAX7219_writeData>
 134:	ff cf       	rjmp	.-2      	; 0x134 <main+0x68>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
