
Final-calendar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002d82  00002e16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  00800068  00800068  00002e1e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e1e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002e50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00002e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c5f  00000000  00000000  00002f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007a7  00000000  00000000  00004bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001152  00000000  00000000  0000537a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000488  00000000  00000000  000064cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000582  00000000  00000000  00006954  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014fd  00000000  00000000  00006ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000083d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 39 00 	jmp	0x72	; 0x72 <__ctors_end>
       4:	0c 94 c0 11 	jmp	0x2380	; 0x2380 <__vector_1>
       8:	0c 94 26 12 	jmp	0x244c	; 0x244c <__vector_2>
       c:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__vector_3>
      10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      2c:	0c 94 52 11 	jmp	0x22a4	; 0x22a4 <__vector_11>
      30:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
      54:	05 a8       	ldd	r0, Z+53	; 0x35
      56:	4c cd       	rjmp	.-1384   	; 0xfffffaf0 <__eeprom_end+0xff7efaf0>
      58:	b2 d4       	rcall	.+2404   	; 0x9be <__stack+0x15f>
      5a:	4e b9       	out	0x0e, r20	; 14
      5c:	38 36       	cpi	r19, 0x68	; 104
      5e:	a9 02       	muls	r26, r25
      60:	0c 50       	subi	r16, 0x0C	; 12
      62:	b9 91       	ld	r27, Y+
      64:	86 88       	ldd	r8, Z+22	; 0x16
      66:	08 3c       	cpi	r16, 0xC8	; 200
      68:	a6 aa       	std	Z+54, r10	; 0x36
      6a:	aa 2a       	or	r10, r26
      6c:	be 00       	.word	0x00be	; ????
      6e:	00 00       	nop
      70:	80 3f       	cpi	r24, 0xF0	; 240

00000072 <__ctors_end>:
      72:	11 24       	eor	r1, r1
      74:	1f be       	out	0x3f, r1	; 63
      76:	cf e5       	ldi	r28, 0x5F	; 95
      78:	d8 e0       	ldi	r29, 0x08	; 8
      7a:	de bf       	out	0x3e, r29	; 62
      7c:	cd bf       	out	0x3d, r28	; 61

0000007e <__do_copy_data>:
      7e:	10 e0       	ldi	r17, 0x00	; 0
      80:	a0 e6       	ldi	r26, 0x60	; 96
      82:	b0 e0       	ldi	r27, 0x00	; 0
      84:	e2 e8       	ldi	r30, 0x82	; 130
      86:	fd e2       	ldi	r31, 0x2D	; 45
      88:	02 c0       	rjmp	.+4      	; 0x8e <__do_copy_data+0x10>
      8a:	05 90       	lpm	r0, Z+
      8c:	0d 92       	st	X+, r0
      8e:	a8 36       	cpi	r26, 0x68	; 104
      90:	b1 07       	cpc	r27, r17
      92:	d9 f7       	brne	.-10     	; 0x8a <__do_copy_data+0xc>

00000094 <__do_clear_bss>:
      94:	20 e0       	ldi	r18, 0x00	; 0
      96:	a8 e6       	ldi	r26, 0x68	; 104
      98:	b0 e0       	ldi	r27, 0x00	; 0
      9a:	01 c0       	rjmp	.+2      	; 0x9e <.do_clear_bss_start>

0000009c <.do_clear_bss_loop>:
      9c:	1d 92       	st	X+, r1

0000009e <.do_clear_bss_start>:
      9e:	a8 38       	cpi	r26, 0x88	; 136
      a0:	b2 07       	cpc	r27, r18
      a2:	e1 f7       	brne	.-8      	; 0x9c <.do_clear_bss_loop>
      a4:	0e 94 0e 11 	call	0x221c	; 0x221c <main>
      a8:	0c 94 bf 16 	jmp	0x2d7e	; 0x2d7e <_exit>

000000ac <__bad_interrupt>:
      ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <TWI_Init>:
#define TWI_Clear_TWINT	(1 << TWINT)|(1 << TWEN)	//xoa TWIN de bat dau doc, doc xong thi NOT ACK
#define TWI_Read_ACK	(1 << TWINT)|(1 << TWEN)|(1 << TWEA)	//xoa TWIN de bat dau doc, sau khi doc set ACK

//khoi tao TWI
void TWI_Init(void){
	TWSR = 0x00;	//Prescaler=1 chia t?n cho 1
      b0:	11 b8       	out	0x01, r1	; 1
	TWBR = _100K;
      b2:	88 e4       	ldi	r24, 0x48	; 72
      b4:	80 b9       	out	0x00, r24	; 0
	TWCR = (1 << TWINT) | (1 << TWEN);
      b6:	84 e8       	ldi	r24, 0x84	; 132
      b8:	86 bf       	out	0x36, r24	; 54
      ba:	08 95       	ret

000000bc <TWI_DS1307_wadr>:
}

//chon dia chi thanh ghi can thao tac, dummy write
//Addr: dia thi thanh ghi can ghi
uint8_t TWI_DS1307_wadr(uint8_t Addr){
	TWCR = TWI_START;						//goi START condition
      bc:	94 ea       	ldi	r25, 0xA4	; 164
      be:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80) == 0x00);			//cho TWINT bit=1
      c0:	06 b6       	in	r0, 0x36	; 54
      c2:	07 fe       	sbrs	r0, 7
      c4:	fd cf       	rjmp	.-6      	; 0xc0 <TWI_DS1307_wadr+0x4>
	if((TWSR & 0xF8) != 0x08) return TWSR;	//neu goi Start co loi thi thoat
      c6:	91 b1       	in	r25, 0x01	; 1
      c8:	98 7f       	andi	r25, 0xF8	; 248
      ca:	98 30       	cpi	r25, 0x08	; 8
      cc:	11 f0       	breq	.+4      	; 0xd2 <TWI_DS1307_wadr+0x16>
      ce:	81 b1       	in	r24, 0x01	; 1
      d0:	08 95       	ret

	TWDR = (DS1307_SLA << 1) + TWI_W;		//dia chi DS va bit W
      d2:	90 ed       	ldi	r25, 0xD0	; 208
      d4:	93 b9       	out	0x03, r25	; 3
	TWCR = TWI_Clear_TWINT;					//xoa TWINT, bat dau goi SLA
      d6:	94 e8       	ldi	r25, 0x84	; 132
      d8:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80) == 0x00);			//cho TWINT bit=1
      da:	06 b6       	in	r0, 0x36	; 54
      dc:	07 fe       	sbrs	r0, 7
      de:	fd cf       	rjmp	.-6      	; 0xda <TWI_DS1307_wadr+0x1e>
	if((TWSR & 0xF8) != 0x18) return TWSR;	//neu co loi truyen SLA, thoat
      e0:	91 b1       	in	r25, 0x01	; 1
      e2:	98 7f       	andi	r25, 0xF8	; 248
      e4:	98 31       	cpi	r25, 0x18	; 24
      e6:	11 f0       	breq	.+4      	; 0xec <TWI_DS1307_wadr+0x30>
      e8:	81 b1       	in	r24, 0x01	; 1
      ea:	08 95       	ret

	TWDR = Addr;							//goi dia chi thanh ghi can ghi vao
      ec:	83 b9       	out	0x03, r24	; 3
	TWCR = TWI_Clear_TWINT;					//xoa TWINT de bat dau goi
      ee:	84 e8       	ldi	r24, 0x84	; 132
      f0:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80) == 0x00);			//check and wait for TWINT bit=1
      f2:	06 b6       	in	r0, 0x36	; 54
      f4:	07 fe       	sbrs	r0, 7
      f6:	fd cf       	rjmp	.-6      	; 0xf2 <TWI_DS1307_wadr+0x36>
	if((TWSR & 0xF8) != 0x28) return TWSR;	//neu du lieu goi ko thanh cong thi thoat
      f8:	81 b1       	in	r24, 0x01	; 1
      fa:	88 7f       	andi	r24, 0xF8	; 248
      fc:	88 32       	cpi	r24, 0x28	; 40
      fe:	11 f0       	breq	.+4      	; 0x104 <TWI_DS1307_wadr+0x48>
     100:	81 b1       	in	r24, 0x01	; 1
     102:	08 95       	ret
	
	TWCR = TWI_STOP;						//STOP condition
     104:	84 e9       	ldi	r24, 0x94	; 148
     106:	86 bf       	out	0x36, r24	; 54
	return 0;
     108:	80 e0       	ldi	r24, 0x00	; 0
}
     10a:	08 95       	ret

0000010c <TWI_DS1307_wblock>:
//Addr: dia thi thanh ghi can ghi
//Data[]: mang du lieu
//len: so luong byte can ghi
uint8_t TWI_DS1307_wblock(uint8_t Addr, uint8_t Data[], uint8_t len){
	
	TWCR = TWI_START;
     10c:	94 ea       	ldi	r25, 0xA4	; 164
     10e:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80) == 0x00);
     110:	06 b6       	in	r0, 0x36	; 54
     112:	07 fe       	sbrs	r0, 7
     114:	fd cf       	rjmp	.-6      	; 0x110 <TWI_DS1307_wblock+0x4>
	if((TWSR & 0xF8) != 0x08) return TWSR;
     116:	91 b1       	in	r25, 0x01	; 1
     118:	98 7f       	andi	r25, 0xF8	; 248
     11a:	98 30       	cpi	r25, 0x08	; 8
     11c:	11 f0       	breq	.+4      	; 0x122 <TWI_DS1307_wblock+0x16>
     11e:	81 b1       	in	r24, 0x01	; 1
     120:	08 95       	ret
	
	TWDR = (DS1307_SLA << 1) + TWI_W;
     122:	90 ed       	ldi	r25, 0xD0	; 208
     124:	93 b9       	out	0x03, r25	; 3
	TWCR = TWI_Clear_TWINT;
     126:	94 e8       	ldi	r25, 0x84	; 132
     128:	96 bf       	out	0x36, r25	; 54
	while((TWCR & 0x80) == 0x00);
     12a:	06 b6       	in	r0, 0x36	; 54
     12c:	07 fe       	sbrs	r0, 7
     12e:	fd cf       	rjmp	.-6      	; 0x12a <TWI_DS1307_wblock+0x1e>
	if((TWSR & 0xF8) != 0x18) return TWSR;
     130:	91 b1       	in	r25, 0x01	; 1
     132:	98 7f       	andi	r25, 0xF8	; 248
     134:	98 31       	cpi	r25, 0x18	; 24
     136:	11 f0       	breq	.+4      	; 0x13c <TWI_DS1307_wblock+0x30>
     138:	81 b1       	in	r24, 0x01	; 1
     13a:	08 95       	ret
	
	TWDR = Addr;
     13c:	83 b9       	out	0x03, r24	; 3
	TWCR = TWI_Clear_TWINT;
     13e:	84 e8       	ldi	r24, 0x84	; 132
     140:	86 bf       	out	0x36, r24	; 54
	while((TWCR & 0x80) == 0x00);
     142:	06 b6       	in	r0, 0x36	; 54
     144:	07 fe       	sbrs	r0, 7
     146:	fd cf       	rjmp	.-6      	; 0x142 <TWI_DS1307_wblock+0x36>
	if((TWSR & 0xF8) != 0x28) return TWSR;
     148:	81 b1       	in	r24, 0x01	; 1
     14a:	88 7f       	andi	r24, 0xF8	; 248
     14c:	88 32       	cpi	r24, 0x28	; 40
     14e:	a1 f0       	breq	.+40     	; 0x178 <TWI_DS1307_wblock+0x6c>
     150:	81 b1       	in	r24, 0x01	; 1
     152:	08 95       	ret

	for (uint8_t i = 0; i < len; i++){
		TWDR = Data[i];							//chuan bi xuat du lieu
     154:	fb 01       	movw	r30, r22
     156:	e8 0f       	add	r30, r24
     158:	f1 1d       	adc	r31, r1
     15a:	90 81       	ld	r25, Z
     15c:	93 b9       	out	0x03, r25	; 3
		TWCR = TWI_Clear_TWINT;					//xoa TWINT, bat dau send
     15e:	94 e8       	ldi	r25, 0x84	; 132
     160:	96 bf       	out	0x36, r25	; 54
		while((TWCR & 0x80) == 0x00);			//cho TWINT bit=1
     162:	06 b6       	in	r0, 0x36	; 54
     164:	07 fe       	sbrs	r0, 7
     166:	fd cf       	rjmp	.-6      	; 0x162 <TWI_DS1307_wblock+0x56>
		if((TWSR & 0xF8) != 0x28) return TWSR;	//neu status ko phai la 0x28 thi return
     168:	91 b1       	in	r25, 0x01	; 1
     16a:	98 7f       	andi	r25, 0xF8	; 248
     16c:	98 32       	cpi	r25, 0x28	; 40
     16e:	11 f0       	breq	.+4      	; 0x174 <TWI_DS1307_wblock+0x68>
     170:	81 b1       	in	r24, 0x01	; 1
     172:	08 95       	ret
	TWDR = Addr;
	TWCR = TWI_Clear_TWINT;
	while((TWCR & 0x80) == 0x00);
	if((TWSR & 0xF8) != 0x28) return TWSR;

	for (uint8_t i = 0; i < len; i++){
     174:	8f 5f       	subi	r24, 0xFF	; 255
     176:	01 c0       	rjmp	.+2      	; 0x17a <TWI_DS1307_wblock+0x6e>
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	84 17       	cp	r24, r20
     17c:	58 f3       	brcs	.-42     	; 0x154 <TWI_DS1307_wblock+0x48>
		TWCR = TWI_Clear_TWINT;					//xoa TWINT, bat dau send
		while((TWCR & 0x80) == 0x00);			//cho TWINT bit=1
		if((TWSR & 0xF8) != 0x28) return TWSR;	//neu status ko phai la 0x28 thi return
	}
	
	TWCR = TWI_STOP;							//STOP condition
     17e:	84 e9       	ldi	r24, 0x94	; 148
     180:	86 bf       	out	0x36, r24	; 54
	return 0;
     182:	80 e0       	ldi	r24, 0x00	; 0
}
     184:	08 95       	ret

00000186 <TWI_DS1307_rblock>:

//doc 1 mang tu DS1307
uint8_t TWI_DS1307_rblock(uint8_t Data[], uint8_t len){
     186:	dc 01       	movw	r26, r24
	uint8_t i;
	
	
	TWCR = TWI_START;
     188:	84 ea       	ldi	r24, 0xA4	; 164
     18a:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x08));
     18c:	06 b6       	in	r0, 0x36	; 54
     18e:	07 fe       	sbrs	r0, 7
     190:	fd cf       	rjmp	.-6      	; 0x18c <TWI_DS1307_rblock+0x6>
     192:	81 b1       	in	r24, 0x01	; 1
     194:	88 7f       	andi	r24, 0xF8	; 248
     196:	88 30       	cpi	r24, 0x08	; 8
     198:	c9 f7       	brne	.-14     	; 0x18c <TWI_DS1307_rblock+0x6>

	TWDR = (DS1307_SLA << 1) + TWI_R;
     19a:	81 ed       	ldi	r24, 0xD1	; 209
     19c:	83 b9       	out	0x03, r24	; 3
	TWCR = TWI_Clear_TWINT;
     19e:	84 e8       	ldi	r24, 0x84	; 132
     1a0:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x40));
     1a2:	06 b6       	in	r0, 0x36	; 54
     1a4:	07 fe       	sbrs	r0, 7
     1a6:	fd cf       	rjmp	.-6      	; 0x1a2 <TWI_DS1307_rblock+0x1c>
     1a8:	91 b1       	in	r25, 0x01	; 1
     1aa:	98 7f       	andi	r25, 0xF8	; 248
     1ac:	90 34       	cpi	r25, 0x40	; 64
     1ae:	c9 f7       	brne	.-14     	; 0x1a2 <TWI_DS1307_rblock+0x1c>
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <TWI_DS1307_rblock+0x4c>
	
	for (i = 0; i < len-1; i++){
		TWCR = TWI_Read_ACK;
     1b4:	84 ec       	ldi	r24, 0xC4	; 196
     1b6:	86 bf       	out	0x36, r24	; 54
		while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x50));
     1b8:	06 b6       	in	r0, 0x36	; 54
     1ba:	07 fe       	sbrs	r0, 7
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <TWI_DS1307_rblock+0x32>
     1be:	91 b1       	in	r25, 0x01	; 1
     1c0:	98 7f       	andi	r25, 0xF8	; 248
     1c2:	90 35       	cpi	r25, 0x50	; 80
     1c4:	c9 f7       	brne	.-14     	; 0x1b8 <TWI_DS1307_rblock+0x32>
		Data[i] = TWDR;
     1c6:	fd 01       	movw	r30, r26
     1c8:	e2 0f       	add	r30, r18
     1ca:	f1 1d       	adc	r31, r1
     1cc:	83 b1       	in	r24, 0x03	; 3
     1ce:	80 83       	st	Z, r24

	TWDR = (DS1307_SLA << 1) + TWI_R;
	TWCR = TWI_Clear_TWINT;
	while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x40));
	
	for (i = 0; i < len-1; i++){
     1d0:	2f 5f       	subi	r18, 0xFF	; 255
     1d2:	e2 2f       	mov	r30, r18
     1d4:	f0 e0       	ldi	r31, 0x00	; 0
     1d6:	46 2f       	mov	r20, r22
     1d8:	50 e0       	ldi	r21, 0x00	; 0
     1da:	41 50       	subi	r20, 0x01	; 1
     1dc:	51 09       	sbc	r21, r1
     1de:	e4 17       	cp	r30, r20
     1e0:	f5 07       	cpc	r31, r21
     1e2:	44 f3       	brlt	.-48     	; 0x1b4 <TWI_DS1307_rblock+0x2e>
		TWCR = TWI_Read_ACK;
		while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x50));
		Data[i] = TWDR;
	}
	
	TWCR = TWI_Clear_TWINT;
     1e4:	84 e8       	ldi	r24, 0x84	; 132
     1e6:	86 bf       	out	0x36, r24	; 54
	while (((TWCR & 0x80) == 0x00) || ((TWSR & 0xF8) != 0x58));
     1e8:	06 b6       	in	r0, 0x36	; 54
     1ea:	07 fe       	sbrs	r0, 7
     1ec:	fd cf       	rjmp	.-6      	; 0x1e8 <TWI_DS1307_rblock+0x62>
     1ee:	91 b1       	in	r25, 0x01	; 1
     1f0:	98 7f       	andi	r25, 0xF8	; 248
     1f2:	98 35       	cpi	r25, 0x58	; 88
     1f4:	c9 f7       	brne	.-14     	; 0x1e8 <TWI_DS1307_rblock+0x62>
	Data[len-1] = TWDR;
     1f6:	86 2f       	mov	r24, r22
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	a8 0f       	add	r26, r24
     1fe:	b9 1f       	adc	r27, r25
     200:	83 b1       	in	r24, 0x03	; 3
     202:	8c 93       	st	X, r24
	
	TWCR = TWI_STOP;
     204:	84 e9       	ldi	r24, 0x94	; 148
     206:	86 bf       	out	0x36, r24	; 54
	return 0;
     208:	80 e0       	ldi	r24, 0x00	; 0
     20a:	08 95       	ret

0000020c <BCDToDec>:
char SW_time_date = 0;

// chuyen doi nhi phan sang thap phan
uint8_t BCDToDec(uint8_t BCD){
	uint8_t L, H;
	L=BCD & 0x0F;
     20c:	38 2f       	mov	r19, r24
     20e:	3f 70       	andi	r19, 0x0F	; 15
	H=(BCD>>4)*10;
     210:	98 2f       	mov	r25, r24
     212:	92 95       	swap	r25
     214:	9f 70       	andi	r25, 0x0F	; 15
     216:	99 0f       	add	r25, r25
     218:	29 2f       	mov	r18, r25
     21a:	22 0f       	add	r18, r18
     21c:	22 0f       	add	r18, r18
     21e:	89 2f       	mov	r24, r25
     220:	82 0f       	add	r24, r18
	return (H+L);
}
     222:	83 0f       	add	r24, r19
     224:	08 95       	ret

00000226 <DecToBCD>:
// chuyen doi thap phan sang nhi phan
uint8_t DecToBCD(uint8_t Dec){
	uint8_t L, H;
	L=Dec % 10;
     226:	2d ec       	ldi	r18, 0xCD	; 205
     228:	82 9f       	mul	r24, r18
     22a:	21 2d       	mov	r18, r1
     22c:	11 24       	eor	r1, r1
     22e:	92 2f       	mov	r25, r18
     230:	96 95       	lsr	r25
     232:	96 95       	lsr	r25
     234:	96 95       	lsr	r25
     236:	99 0f       	add	r25, r25
     238:	39 2f       	mov	r19, r25
     23a:	33 0f       	add	r19, r19
     23c:	33 0f       	add	r19, r19
     23e:	93 0f       	add	r25, r19
     240:	89 1b       	sub	r24, r25
	H=(Dec/10)<<4;
     242:	26 95       	lsr	r18
     244:	26 95       	lsr	r18
     246:	26 95       	lsr	r18
	return (H+L);
}
     248:	30 e1       	ldi	r19, 0x10	; 16
     24a:	23 9f       	mul	r18, r19
     24c:	80 0d       	add	r24, r0
     24e:	11 24       	eor	r1, r1
     250:	08 95       	ret

00000252 <Decode>:

void Decode(void){
     252:	cf 93       	push	r28
     254:	df 93       	push	r29
    //BCD data converter function from DS1307 to DEC
	Second 	= BCDToDec(tData[0] & 0x7F);
     256:	cf e7       	ldi	r28, 0x7F	; 127
     258:	d0 e0       	ldi	r29, 0x00	; 0
     25a:	88 81       	ld	r24, Y
     25c:	8f 77       	andi	r24, 0x7F	; 127
     25e:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     262:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <Second>

	Minute 	= BCDToDec(tData[1]);
     266:	89 81       	ldd	r24, Y+1	; 0x01
     268:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     26c:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <Minute>
	
	if (Mode != 0)
     270:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <Mode>
     274:	88 23       	and	r24, r24
     276:	41 f0       	breq	.+16     	; 0x288 <Decode+0x36>
	{ 	
		Hour = BCDToDec(tData[2] & 0x1F); //Mode for 12h
     278:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <tData+0x2>
     27c:	8f 71       	andi	r24, 0x1F	; 31
     27e:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     282:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Hour>
     286:	07 c0       	rjmp	.+14     	; 0x296 <Decode+0x44>
	}
	else 
	{
	  	Hour = BCDToDec(tData[2] & 0x3F); //Mode for 24h	
     288:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <tData+0x2>
     28c:	8f 73       	andi	r24, 0x3F	; 63
     28e:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     292:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <Hour>
	}
	Day		= BCDToDec(tData[3]);
     296:	cf e7       	ldi	r28, 0x7F	; 127
     298:	d0 e0       	ldi	r29, 0x00	; 0
     29a:	8b 81       	ldd	r24, Y+3	; 0x03
     29c:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2a0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Day>
	Date   	= BCDToDec(tData[4]);
     2a4:	8c 81       	ldd	r24, Y+4	; 0x04
     2a6:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2aa:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <Date>
	Month	= BCDToDec(tData[5]);
     2ae:	8d 81       	ldd	r24, Y+5	; 0x05
     2b0:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2b4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <Month>
	Year	= BCDToDec(tData[6]);
     2b8:	8e 81       	ldd	r24, Y+6	; 0x06
     2ba:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
     2be:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <Year>
}
     2c2:	df 91       	pop	r29
     2c4:	cf 91       	pop	r28
     2c6:	08 95       	ret

000002c8 <FixTime>:

//Write to DS1307 time that want to change
void FixTime(){
     2c8:	cf 93       	push	r28
     2ca:	df 93       	push	r29
	tData[0] = DecToBCD(Second);
     2cc:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <Second>
     2d0:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     2d4:	cf e7       	ldi	r28, 0x7F	; 127
     2d6:	d0 e0       	ldi	r29, 0x00	; 0
     2d8:	88 83       	st	Y, r24
	tData[1] = DecToBCD(Minute);
     2da:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <Minute>
     2de:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     2e2:	89 83       	std	Y+1, r24	; 0x01
	if (Mode != 0) tData[2] = DecToBCD(Hour)|(Mode << 6)|(AP << 5); //mode 12h
     2e4:	c0 91 73 00 	lds	r28, 0x0073	; 0x800073 <Mode>
     2e8:	cc 23       	and	r28, r28
     2ea:	99 f0       	breq	.+38     	; 0x312 <FixTime+0x4a>
     2ec:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Hour>
     2f0:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     2f4:	90 e4       	ldi	r25, 0x40	; 64
     2f6:	c9 9f       	mul	r28, r25
     2f8:	90 01       	movw	r18, r0
     2fa:	11 24       	eor	r1, r1
     2fc:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <AP>
     300:	90 e2       	ldi	r25, 0x20	; 32
     302:	49 9f       	mul	r20, r25
     304:	a0 01       	movw	r20, r0
     306:	11 24       	eor	r1, r1
     308:	82 2b       	or	r24, r18
     30a:	84 2b       	or	r24, r20
     30c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <tData+0x2>
     310:	06 c0       	rjmp	.+12     	; 0x31e <FixTime+0x56>
	else tData[2] = DecToBCD(Hour);
     312:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <Hour>
     316:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     31a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <tData+0x2>
	tData[3] = DecToBCD(Day);
     31e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Day>
     322:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     326:	cf e7       	ldi	r28, 0x7F	; 127
     328:	d0 e0       	ldi	r29, 0x00	; 0
     32a:	8b 83       	std	Y+3, r24	; 0x03
	tData[4] = DecToBCD(Date);
     32c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Date>
     330:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     334:	8c 83       	std	Y+4, r24	; 0x04
	tData[5] = DecToBCD(Month);
     336:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Month>
     33a:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     33e:	8d 83       	std	Y+5, r24	; 0x05
	tData[6] = DecToBCD(Year);
     340:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <Year>
     344:	0e 94 13 01 	call	0x226	; 0x226 <DecToBCD>
     348:	8e 83       	std	Y+6, r24	; 0x06
	TWI_DS1307_wblock(0x00, tData, 7);
     34a:	47 e0       	ldi	r20, 0x07	; 7
     34c:	be 01       	movw	r22, r28
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	0e 94 86 00 	call	0x10c	; 0x10c <TWI_DS1307_wblock>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     354:	8f ec       	ldi	r24, 0xCF	; 207
     356:	97 e0       	ldi	r25, 0x07	; 7
     358:	01 97       	sbiw	r24, 0x01	; 1
     35a:	f1 f7       	brne	.-4      	; 0x358 <FixTime+0x90>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <FixTime+0x96>
     35e:	00 00       	nop
	_delay_ms(1);
	TWI_DS1307_wadr(0x00);
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	0e 94 5e 00 	call	0xbc	; 0xbc <TWI_DS1307_wadr>
     366:	8f ec       	ldi	r24, 0xCF	; 207
     368:	97 e0       	ldi	r25, 0x07	; 7
     36a:	01 97       	sbiw	r24, 0x01	; 1
     36c:	f1 f7       	brne	.-4      	; 0x36a <FixTime+0xa2>
     36e:	00 c0       	rjmp	.+0      	; 0x370 <FixTime+0xa8>
     370:	00 00       	nop
	_delay_ms(1);
}
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	08 95       	ret

00000378 <spiSendByte>:

void spiSendByte (char databyte)
{
	// Copy data into the SPI data register
	SPDR = databyte;
     378:	8f b9       	out	0x0f, r24	; 15
	// Wait until transfer is complete
	while (!(SPSR & (1 << SPIF)));
     37a:	77 9b       	sbis	0x0e, 7	; 14
     37c:	fe cf       	rjmp	.-4      	; 0x37a <spiSendByte+0x2>
}
     37e:	08 95       	ret

00000380 <MAX7219_writeData>:

void MAX7219_writeData(uint8_t data_register, uint8_t data)
{
     380:	cf 93       	push	r28
     382:	c6 2f       	mov	r28, r22
	MAX7219_LOAD0;
     384:	98 b3       	in	r25, 0x18	; 24
     386:	9f 7e       	andi	r25, 0xEF	; 239
     388:	98 bb       	out	0x18, r25	; 24
	// Send the register where the data will be stored
	spiSendByte(data_register);
     38a:	0e 94 bc 01 	call	0x378	; 0x378 <spiSendByte>
	// Send the data to be stored
	spiSendByte(data);
     38e:	8c 2f       	mov	r24, r28
     390:	0e 94 bc 01 	call	0x378	; 0x378 <spiSendByte>
	MAX7219_LOAD1;
     394:	88 b3       	in	r24, 0x18	; 24
     396:	80 61       	ori	r24, 0x10	; 16
     398:	88 bb       	out	0x18, r24	; 24
}
     39a:	cf 91       	pop	r28
     39c:	08 95       	ret

0000039e <MAX7219_clearDisplay>:

void MAX7219_clearDisplay()
{
     39e:	cf 93       	push	r28
	char i = digitsInUse;
     3a0:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
	// Loop until 0, but don't run for zero
	do {
		// Set each display in use to blank
		MAX7219_writeData(i, MAX7219_CHAR_BLANK);
     3a4:	6f e0       	ldi	r22, 0x0F	; 15
     3a6:	8c 2f       	mov	r24, r28
     3a8:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
	} while (--i);
     3ac:	c1 50       	subi	r28, 0x01	; 1
     3ae:	d1 f7       	brne	.-12     	; 0x3a4 <MAX7219_clearDisplay+0x6>
}
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <Display_7seg>:

void Display_7seg (void){
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
	if (blinkmode==0)
     3b8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <blinkmode>
     3bc:	81 11       	cpse	r24, r1
     3be:	f6 c2       	rjmp	.+1516   	; 0x9ac <__stack+0x14d>
	{
		/********display time -> hh:mm:ss***************/
		
		if (SW_time_date == 0)
     3c0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     3c4:	81 11       	cpse	r24, r1
     3c6:	74 c0       	rjmp	.+232    	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
		{
			MAX7219_clearDisplay();
     3c8:	0e 94 cf 01 	call	0x39e	; 0x39e <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(Minute%10));
     3cc:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Minute>
     3d0:	cd ec       	ldi	r28, 0xCD	; 205
     3d2:	6c 9f       	mul	r22, r28
     3d4:	81 2d       	mov	r24, r1
     3d6:	11 24       	eor	r1, r1
     3d8:	86 95       	lsr	r24
     3da:	86 95       	lsr	r24
     3dc:	86 95       	lsr	r24
     3de:	88 0f       	add	r24, r24
     3e0:	98 2f       	mov	r25, r24
     3e2:	99 0f       	add	r25, r25
     3e4:	99 0f       	add	r25, r25
     3e6:	89 0f       	add	r24, r25
     3e8:	68 1b       	sub	r22, r24
     3ea:	88 e0       	ldi	r24, 0x08	; 8
     3ec:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(Minute/10));
     3f0:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Minute>
     3f4:	6c 9f       	mul	r22, r28
     3f6:	61 2d       	mov	r22, r1
     3f8:	11 24       	eor	r1, r1
     3fa:	66 95       	lsr	r22
     3fc:	66 95       	lsr	r22
     3fe:	66 95       	lsr	r22
     400:	87 e0       	ldi	r24, 0x07	; 7
     402:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(Hour%10));
     406:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <Hour>
     40a:	6c 9f       	mul	r22, r28
     40c:	81 2d       	mov	r24, r1
     40e:	11 24       	eor	r1, r1
     410:	86 95       	lsr	r24
     412:	86 95       	lsr	r24
     414:	86 95       	lsr	r24
     416:	88 0f       	add	r24, r24
     418:	98 2f       	mov	r25, r24
     41a:	99 0f       	add	r25, r25
     41c:	99 0f       	add	r25, r25
     41e:	89 0f       	add	r24, r25
     420:	68 1b       	sub	r22, r24
     422:	86 e0       	ldi	r24, 0x06	; 6
     424:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(Hour/10));
     428:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <Hour>
     42c:	6c 9f       	mul	r22, r28
     42e:	61 2d       	mov	r22, r1
     430:	11 24       	eor	r1, r1
     432:	66 95       	lsr	r22
     434:	66 95       	lsr	r22
     436:	66 95       	lsr	r22
     438:	85 e0       	ldi	r24, 0x05	; 5
     43a:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
     43e:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Month>
     442:	6c 9f       	mul	r22, r28
     444:	81 2d       	mov	r24, r1
     446:	11 24       	eor	r1, r1
     448:	86 95       	lsr	r24
     44a:	86 95       	lsr	r24
     44c:	86 95       	lsr	r24
     44e:	88 0f       	add	r24, r24
     450:	98 2f       	mov	r25, r24
     452:	99 0f       	add	r25, r25
     454:	99 0f       	add	r25, r25
     456:	89 0f       	add	r24, r25
     458:	68 1b       	sub	r22, r24
     45a:	84 e0       	ldi	r24, 0x04	; 4
     45c:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
     460:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Month>
     464:	6c 9f       	mul	r22, r28
     466:	61 2d       	mov	r22, r1
     468:	11 24       	eor	r1, r1
     46a:	66 95       	lsr	r22
     46c:	66 95       	lsr	r22
     46e:	66 95       	lsr	r22
     470:	83 e0       	ldi	r24, 0x03	; 3
     472:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
     476:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Date>
     47a:	6c 9f       	mul	r22, r28
     47c:	81 2d       	mov	r24, r1
     47e:	11 24       	eor	r1, r1
     480:	86 95       	lsr	r24
     482:	86 95       	lsr	r24
     484:	86 95       	lsr	r24
     486:	88 0f       	add	r24, r24
     488:	98 2f       	mov	r25, r24
     48a:	99 0f       	add	r25, r25
     48c:	99 0f       	add	r25, r25
     48e:	89 0f       	add	r24, r25
     490:	68 1b       	sub	r22, r24
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
     498:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Date>
     49c:	6c 9f       	mul	r22, r28
     49e:	61 2d       	mov	r22, r1
     4a0:	11 24       	eor	r1, r1
     4a2:	66 95       	lsr	r22
     4a4:	66 95       	lsr	r22
     4a6:	66 95       	lsr	r22
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
     4ae:	f7 c6       	rjmp	.+3566   	; 0x129e <__stack+0xa3f>
			
		}
		/********display date -> DD:MM:YY***************/
		else if (SW_time_date == 1)
     4b0:	81 30       	cpi	r24, 0x01	; 1
     4b2:	09 f0       	breq	.+2      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4b4:	1e c1       	rjmp	.+572    	; 0x6f2 <__EEPROM_REGION_LENGTH__+0x2f2>
		{
			MAX7219_clearDisplay();
     4b6:	0e 94 cf 01 	call	0x39e	; 0x39e <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
     4ba:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <yyyy>
     4be:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <yyyy+0x1>
     4c2:	9f 01       	movw	r18, r30
     4c4:	36 95       	lsr	r19
     4c6:	27 95       	ror	r18
     4c8:	36 95       	lsr	r19
     4ca:	27 95       	ror	r18
     4cc:	36 95       	lsr	r19
     4ce:	27 95       	ror	r18
     4d0:	a5 ec       	ldi	r26, 0xC5	; 197
     4d2:	b0 e2       	ldi	r27, 0x20	; 32
     4d4:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     4d8:	ac 01       	movw	r20, r24
     4da:	52 95       	swap	r21
     4dc:	42 95       	swap	r20
     4de:	4f 70       	andi	r20, 0x0F	; 15
     4e0:	45 27       	eor	r20, r21
     4e2:	5f 70       	andi	r21, 0x0F	; 15
     4e4:	45 27       	eor	r20, r21
     4e6:	c8 ee       	ldi	r28, 0xE8	; 232
     4e8:	d3 e0       	ldi	r29, 0x03	; 3
     4ea:	4c 9f       	mul	r20, r28
     4ec:	c0 01       	movw	r24, r0
     4ee:	4d 9f       	mul	r20, r29
     4f0:	90 0d       	add	r25, r0
     4f2:	5c 9f       	mul	r21, r28
     4f4:	90 0d       	add	r25, r0
     4f6:	11 24       	eor	r1, r1
     4f8:	af 01       	movw	r20, r30
     4fa:	48 1b       	sub	r20, r24
     4fc:	59 0b       	sbc	r21, r25
     4fe:	9a 01       	movw	r18, r20
     500:	ad ec       	ldi	r26, 0xCD	; 205
     502:	bc ec       	ldi	r27, 0xCC	; 204
     504:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     508:	96 95       	lsr	r25
     50a:	87 95       	ror	r24
     50c:	96 95       	lsr	r25
     50e:	87 95       	ror	r24
     510:	96 95       	lsr	r25
     512:	87 95       	ror	r24
     514:	bc 01       	movw	r22, r24
     516:	66 0f       	add	r22, r22
     518:	77 1f       	adc	r23, r23
     51a:	88 0f       	add	r24, r24
     51c:	99 1f       	adc	r25, r25
     51e:	88 0f       	add	r24, r24
     520:	99 1f       	adc	r25, r25
     522:	88 0f       	add	r24, r24
     524:	99 1f       	adc	r25, r25
     526:	86 0f       	add	r24, r22
     528:	97 1f       	adc	r25, r23
     52a:	28 1b       	sub	r18, r24
     52c:	39 0b       	sbc	r19, r25
     52e:	62 2f       	mov	r22, r18
     530:	88 e0       	ldi	r24, 0x08	; 8
     532:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
     536:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <yyyy>
     53a:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <yyyy+0x1>
     53e:	9a 01       	movw	r18, r20
     540:	36 95       	lsr	r19
     542:	27 95       	ror	r18
     544:	36 95       	lsr	r19
     546:	27 95       	ror	r18
     548:	36 95       	lsr	r19
     54a:	27 95       	ror	r18
     54c:	a5 ec       	ldi	r26, 0xC5	; 197
     54e:	b0 e2       	ldi	r27, 0x20	; 32
     550:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     554:	9c 01       	movw	r18, r24
     556:	32 95       	swap	r19
     558:	22 95       	swap	r18
     55a:	2f 70       	andi	r18, 0x0F	; 15
     55c:	23 27       	eor	r18, r19
     55e:	3f 70       	andi	r19, 0x0F	; 15
     560:	23 27       	eor	r18, r19
     562:	2c 9f       	mul	r18, r28
     564:	c0 01       	movw	r24, r0
     566:	2d 9f       	mul	r18, r29
     568:	90 0d       	add	r25, r0
     56a:	3c 9f       	mul	r19, r28
     56c:	90 0d       	add	r25, r0
     56e:	11 24       	eor	r1, r1
     570:	9a 01       	movw	r18, r20
     572:	28 1b       	sub	r18, r24
     574:	39 0b       	sbc	r19, r25
     576:	ad ec       	ldi	r26, 0xCD	; 205
     578:	bc ec       	ldi	r27, 0xCC	; 204
     57a:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     57e:	ac 01       	movw	r20, r24
     580:	56 95       	lsr	r21
     582:	47 95       	ror	r20
     584:	56 95       	lsr	r21
     586:	47 95       	ror	r20
     588:	56 95       	lsr	r21
     58a:	47 95       	ror	r20
     58c:	9a 01       	movw	r18, r20
     58e:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     592:	96 95       	lsr	r25
     594:	87 95       	ror	r24
     596:	96 95       	lsr	r25
     598:	87 95       	ror	r24
     59a:	96 95       	lsr	r25
     59c:	87 95       	ror	r24
     59e:	bc 01       	movw	r22, r24
     5a0:	66 0f       	add	r22, r22
     5a2:	77 1f       	adc	r23, r23
     5a4:	88 0f       	add	r24, r24
     5a6:	99 1f       	adc	r25, r25
     5a8:	88 0f       	add	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	86 0f       	add	r24, r22
     5b2:	97 1f       	adc	r25, r23
     5b4:	28 1b       	sub	r18, r24
     5b6:	39 0b       	sbc	r19, r25
     5b8:	62 2f       	mov	r22, r18
     5ba:	87 e0       	ldi	r24, 0x07	; 7
     5bc:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
     5c0:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <yyyy>
     5c4:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <yyyy+0x1>
     5c8:	9a 01       	movw	r18, r20
     5ca:	36 95       	lsr	r19
     5cc:	27 95       	ror	r18
     5ce:	36 95       	lsr	r19
     5d0:	27 95       	ror	r18
     5d2:	36 95       	lsr	r19
     5d4:	27 95       	ror	r18
     5d6:	a5 ec       	ldi	r26, 0xC5	; 197
     5d8:	b0 e2       	ldi	r27, 0x20	; 32
     5da:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     5de:	92 95       	swap	r25
     5e0:	82 95       	swap	r24
     5e2:	8f 70       	andi	r24, 0x0F	; 15
     5e4:	89 27       	eor	r24, r25
     5e6:	9f 70       	andi	r25, 0x0F	; 15
     5e8:	89 27       	eor	r24, r25
     5ea:	8c 9f       	mul	r24, r28
     5ec:	90 01       	movw	r18, r0
     5ee:	8d 9f       	mul	r24, r29
     5f0:	30 0d       	add	r19, r0
     5f2:	9c 9f       	mul	r25, r28
     5f4:	30 0d       	add	r19, r0
     5f6:	11 24       	eor	r1, r1
     5f8:	ca 01       	movw	r24, r20
     5fa:	82 1b       	sub	r24, r18
     5fc:	93 0b       	sbc	r25, r19
     5fe:	9c 01       	movw	r18, r24
     600:	36 95       	lsr	r19
     602:	27 95       	ror	r18
     604:	36 95       	lsr	r19
     606:	27 95       	ror	r18
     608:	ab e7       	ldi	r26, 0x7B	; 123
     60a:	b4 e1       	ldi	r27, 0x14	; 20
     60c:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     610:	ac 01       	movw	r20, r24
     612:	56 95       	lsr	r21
     614:	47 95       	ror	r20
     616:	9a 01       	movw	r18, r20
     618:	ad ec       	ldi	r26, 0xCD	; 205
     61a:	bc ec       	ldi	r27, 0xCC	; 204
     61c:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     620:	96 95       	lsr	r25
     622:	87 95       	ror	r24
     624:	96 95       	lsr	r25
     626:	87 95       	ror	r24
     628:	96 95       	lsr	r25
     62a:	87 95       	ror	r24
     62c:	bc 01       	movw	r22, r24
     62e:	66 0f       	add	r22, r22
     630:	77 1f       	adc	r23, r23
     632:	88 0f       	add	r24, r24
     634:	99 1f       	adc	r25, r25
     636:	88 0f       	add	r24, r24
     638:	99 1f       	adc	r25, r25
     63a:	88 0f       	add	r24, r24
     63c:	99 1f       	adc	r25, r25
     63e:	86 0f       	add	r24, r22
     640:	97 1f       	adc	r25, r23
     642:	28 1b       	sub	r18, r24
     644:	39 0b       	sbc	r19, r25
     646:	62 2f       	mov	r22, r18
     648:	86 e0       	ldi	r24, 0x06	; 6
     64a:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
     64e:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <yyyy>
     652:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <yyyy+0x1>
     656:	36 95       	lsr	r19
     658:	27 95       	ror	r18
     65a:	36 95       	lsr	r19
     65c:	27 95       	ror	r18
     65e:	36 95       	lsr	r19
     660:	27 95       	ror	r18
     662:	a5 ec       	ldi	r26, 0xC5	; 197
     664:	b0 e2       	ldi	r27, 0x20	; 32
     666:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     66a:	92 95       	swap	r25
     66c:	82 95       	swap	r24
     66e:	8f 70       	andi	r24, 0x0F	; 15
     670:	89 27       	eor	r24, r25
     672:	9f 70       	andi	r25, 0x0F	; 15
     674:	89 27       	eor	r24, r25
     676:	68 2f       	mov	r22, r24
     678:	85 e0       	ldi	r24, 0x05	; 5
     67a:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
     67e:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Month>
     682:	cd ec       	ldi	r28, 0xCD	; 205
     684:	6c 9f       	mul	r22, r28
     686:	81 2d       	mov	r24, r1
     688:	11 24       	eor	r1, r1
     68a:	86 95       	lsr	r24
     68c:	86 95       	lsr	r24
     68e:	86 95       	lsr	r24
     690:	88 0f       	add	r24, r24
     692:	98 2f       	mov	r25, r24
     694:	99 0f       	add	r25, r25
     696:	99 0f       	add	r25, r25
     698:	89 0f       	add	r24, r25
     69a:	68 1b       	sub	r22, r24
     69c:	84 e0       	ldi	r24, 0x04	; 4
     69e:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
     6a2:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Month>
     6a6:	6c 9f       	mul	r22, r28
     6a8:	61 2d       	mov	r22, r1
     6aa:	11 24       	eor	r1, r1
     6ac:	66 95       	lsr	r22
     6ae:	66 95       	lsr	r22
     6b0:	66 95       	lsr	r22
     6b2:	83 e0       	ldi	r24, 0x03	; 3
     6b4:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
     6b8:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Date>
     6bc:	6c 9f       	mul	r22, r28
     6be:	81 2d       	mov	r24, r1
     6c0:	11 24       	eor	r1, r1
     6c2:	86 95       	lsr	r24
     6c4:	86 95       	lsr	r24
     6c6:	86 95       	lsr	r24
     6c8:	88 0f       	add	r24, r24
     6ca:	98 2f       	mov	r25, r24
     6cc:	99 0f       	add	r25, r25
     6ce:	99 0f       	add	r25, r25
     6d0:	89 0f       	add	r24, r25
     6d2:	68 1b       	sub	r22, r24
     6d4:	82 e0       	ldi	r24, 0x02	; 2
     6d6:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
     6da:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Date>
     6de:	6c 9f       	mul	r22, r28
     6e0:	61 2d       	mov	r22, r1
     6e2:	11 24       	eor	r1, r1
     6e4:	66 95       	lsr	r22
     6e6:	66 95       	lsr	r22
     6e8:	66 95       	lsr	r22
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
     6f0:	d6 c5       	rjmp	.+2988   	; 0x129e <__stack+0xa3f>
			
		}
		/********display AM LICH *********************/
		else if (SW_time_date==2)
     6f2:	82 30       	cpi	r24, 0x02	; 2
     6f4:	09 f0       	breq	.+2      	; 0x6f8 <__EEPROM_REGION_LENGTH__+0x2f8>
     6f6:	1e c1       	rjmp	.+572    	; 0x934 <__stack+0xd5>
		{
			MAX7219_clearDisplay();
     6f8:	0e 94 cf 01 	call	0x39e	; 0x39e <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,((lunarYear%1000)%10));
     6fc:	e0 91 86 00 	lds	r30, 0x0086	; 0x800086 <lunarYear>
     700:	f0 91 87 00 	lds	r31, 0x0087	; 0x800087 <lunarYear+0x1>
     704:	9f 01       	movw	r18, r30
     706:	36 95       	lsr	r19
     708:	27 95       	ror	r18
     70a:	36 95       	lsr	r19
     70c:	27 95       	ror	r18
     70e:	36 95       	lsr	r19
     710:	27 95       	ror	r18
     712:	a5 ec       	ldi	r26, 0xC5	; 197
     714:	b0 e2       	ldi	r27, 0x20	; 32
     716:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     71a:	ac 01       	movw	r20, r24
     71c:	52 95       	swap	r21
     71e:	42 95       	swap	r20
     720:	4f 70       	andi	r20, 0x0F	; 15
     722:	45 27       	eor	r20, r21
     724:	5f 70       	andi	r21, 0x0F	; 15
     726:	45 27       	eor	r20, r21
     728:	c8 ee       	ldi	r28, 0xE8	; 232
     72a:	d3 e0       	ldi	r29, 0x03	; 3
     72c:	4c 9f       	mul	r20, r28
     72e:	c0 01       	movw	r24, r0
     730:	4d 9f       	mul	r20, r29
     732:	90 0d       	add	r25, r0
     734:	5c 9f       	mul	r21, r28
     736:	90 0d       	add	r25, r0
     738:	11 24       	eor	r1, r1
     73a:	af 01       	movw	r20, r30
     73c:	48 1b       	sub	r20, r24
     73e:	59 0b       	sbc	r21, r25
     740:	9a 01       	movw	r18, r20
     742:	ad ec       	ldi	r26, 0xCD	; 205
     744:	bc ec       	ldi	r27, 0xCC	; 204
     746:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     74a:	96 95       	lsr	r25
     74c:	87 95       	ror	r24
     74e:	96 95       	lsr	r25
     750:	87 95       	ror	r24
     752:	96 95       	lsr	r25
     754:	87 95       	ror	r24
     756:	bc 01       	movw	r22, r24
     758:	66 0f       	add	r22, r22
     75a:	77 1f       	adc	r23, r23
     75c:	88 0f       	add	r24, r24
     75e:	99 1f       	adc	r25, r25
     760:	88 0f       	add	r24, r24
     762:	99 1f       	adc	r25, r25
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	86 0f       	add	r24, r22
     76a:	97 1f       	adc	r25, r23
     76c:	28 1b       	sub	r18, r24
     76e:	39 0b       	sbc	r19, r25
     770:	62 2f       	mov	r22, r18
     772:	88 e0       	ldi	r24, 0x08	; 8
     774:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(((lunarYear%1000)/10)%10));
     778:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <lunarYear>
     77c:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <lunarYear+0x1>
     780:	9a 01       	movw	r18, r20
     782:	36 95       	lsr	r19
     784:	27 95       	ror	r18
     786:	36 95       	lsr	r19
     788:	27 95       	ror	r18
     78a:	36 95       	lsr	r19
     78c:	27 95       	ror	r18
     78e:	a5 ec       	ldi	r26, 0xC5	; 197
     790:	b0 e2       	ldi	r27, 0x20	; 32
     792:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     796:	9c 01       	movw	r18, r24
     798:	32 95       	swap	r19
     79a:	22 95       	swap	r18
     79c:	2f 70       	andi	r18, 0x0F	; 15
     79e:	23 27       	eor	r18, r19
     7a0:	3f 70       	andi	r19, 0x0F	; 15
     7a2:	23 27       	eor	r18, r19
     7a4:	2c 9f       	mul	r18, r28
     7a6:	c0 01       	movw	r24, r0
     7a8:	2d 9f       	mul	r18, r29
     7aa:	90 0d       	add	r25, r0
     7ac:	3c 9f       	mul	r19, r28
     7ae:	90 0d       	add	r25, r0
     7b0:	11 24       	eor	r1, r1
     7b2:	9a 01       	movw	r18, r20
     7b4:	28 1b       	sub	r18, r24
     7b6:	39 0b       	sbc	r19, r25
     7b8:	ad ec       	ldi	r26, 0xCD	; 205
     7ba:	bc ec       	ldi	r27, 0xCC	; 204
     7bc:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     7c0:	ac 01       	movw	r20, r24
     7c2:	56 95       	lsr	r21
     7c4:	47 95       	ror	r20
     7c6:	56 95       	lsr	r21
     7c8:	47 95       	ror	r20
     7ca:	56 95       	lsr	r21
     7cc:	47 95       	ror	r20
     7ce:	9a 01       	movw	r18, r20
     7d0:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     7d4:	96 95       	lsr	r25
     7d6:	87 95       	ror	r24
     7d8:	96 95       	lsr	r25
     7da:	87 95       	ror	r24
     7dc:	96 95       	lsr	r25
     7de:	87 95       	ror	r24
     7e0:	bc 01       	movw	r22, r24
     7e2:	66 0f       	add	r22, r22
     7e4:	77 1f       	adc	r23, r23
     7e6:	88 0f       	add	r24, r24
     7e8:	99 1f       	adc	r25, r25
     7ea:	88 0f       	add	r24, r24
     7ec:	99 1f       	adc	r25, r25
     7ee:	88 0f       	add	r24, r24
     7f0:	99 1f       	adc	r25, r25
     7f2:	86 0f       	add	r24, r22
     7f4:	97 1f       	adc	r25, r23
     7f6:	28 1b       	sub	r18, r24
     7f8:	39 0b       	sbc	r19, r25
     7fa:	62 2f       	mov	r22, r18
     7fc:	87 e0       	ldi	r24, 0x07	; 7
     7fe:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(((lunarYear%1000)/100)%10));
     802:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <lunarYear>
     806:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <lunarYear+0x1>
     80a:	9a 01       	movw	r18, r20
     80c:	36 95       	lsr	r19
     80e:	27 95       	ror	r18
     810:	36 95       	lsr	r19
     812:	27 95       	ror	r18
     814:	36 95       	lsr	r19
     816:	27 95       	ror	r18
     818:	a5 ec       	ldi	r26, 0xC5	; 197
     81a:	b0 e2       	ldi	r27, 0x20	; 32
     81c:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     820:	92 95       	swap	r25
     822:	82 95       	swap	r24
     824:	8f 70       	andi	r24, 0x0F	; 15
     826:	89 27       	eor	r24, r25
     828:	9f 70       	andi	r25, 0x0F	; 15
     82a:	89 27       	eor	r24, r25
     82c:	8c 9f       	mul	r24, r28
     82e:	90 01       	movw	r18, r0
     830:	8d 9f       	mul	r24, r29
     832:	30 0d       	add	r19, r0
     834:	9c 9f       	mul	r25, r28
     836:	30 0d       	add	r19, r0
     838:	11 24       	eor	r1, r1
     83a:	ca 01       	movw	r24, r20
     83c:	82 1b       	sub	r24, r18
     83e:	93 0b       	sbc	r25, r19
     840:	9c 01       	movw	r18, r24
     842:	36 95       	lsr	r19
     844:	27 95       	ror	r18
     846:	36 95       	lsr	r19
     848:	27 95       	ror	r18
     84a:	ab e7       	ldi	r26, 0x7B	; 123
     84c:	b4 e1       	ldi	r27, 0x14	; 20
     84e:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     852:	ac 01       	movw	r20, r24
     854:	56 95       	lsr	r21
     856:	47 95       	ror	r20
     858:	9a 01       	movw	r18, r20
     85a:	ad ec       	ldi	r26, 0xCD	; 205
     85c:	bc ec       	ldi	r27, 0xCC	; 204
     85e:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     862:	96 95       	lsr	r25
     864:	87 95       	ror	r24
     866:	96 95       	lsr	r25
     868:	87 95       	ror	r24
     86a:	96 95       	lsr	r25
     86c:	87 95       	ror	r24
     86e:	bc 01       	movw	r22, r24
     870:	66 0f       	add	r22, r22
     872:	77 1f       	adc	r23, r23
     874:	88 0f       	add	r24, r24
     876:	99 1f       	adc	r25, r25
     878:	88 0f       	add	r24, r24
     87a:	99 1f       	adc	r25, r25
     87c:	88 0f       	add	r24, r24
     87e:	99 1f       	adc	r25, r25
     880:	86 0f       	add	r24, r22
     882:	97 1f       	adc	r25, r23
     884:	28 1b       	sub	r18, r24
     886:	39 0b       	sbc	r19, r25
     888:	62 2f       	mov	r22, r18
     88a:	86 e0       	ldi	r24, 0x06	; 6
     88c:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(lunarYear/1000));
     890:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <lunarYear>
     894:	30 91 87 00 	lds	r19, 0x0087	; 0x800087 <lunarYear+0x1>
     898:	36 95       	lsr	r19
     89a:	27 95       	ror	r18
     89c:	36 95       	lsr	r19
     89e:	27 95       	ror	r18
     8a0:	36 95       	lsr	r19
     8a2:	27 95       	ror	r18
     8a4:	a5 ec       	ldi	r26, 0xC5	; 197
     8a6:	b0 e2       	ldi	r27, 0x20	; 32
     8a8:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     8ac:	92 95       	swap	r25
     8ae:	82 95       	swap	r24
     8b0:	8f 70       	andi	r24, 0x0F	; 15
     8b2:	89 27       	eor	r24, r25
     8b4:	9f 70       	andi	r25, 0x0F	; 15
     8b6:	89 27       	eor	r24, r25
     8b8:	68 2f       	mov	r22, r24
     8ba:	85 e0       	ldi	r24, 0x05	; 5
     8bc:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(lunarMonth%10));
     8c0:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <lunarMonth>
     8c4:	cd ec       	ldi	r28, 0xCD	; 205
     8c6:	6c 9f       	mul	r22, r28
     8c8:	81 2d       	mov	r24, r1
     8ca:	11 24       	eor	r1, r1
     8cc:	86 95       	lsr	r24
     8ce:	86 95       	lsr	r24
     8d0:	86 95       	lsr	r24
     8d2:	88 0f       	add	r24, r24
     8d4:	98 2f       	mov	r25, r24
     8d6:	99 0f       	add	r25, r25
     8d8:	99 0f       	add	r25, r25
     8da:	89 0f       	add	r24, r25
     8dc:	68 1b       	sub	r22, r24
     8de:	84 e0       	ldi	r24, 0x04	; 4
     8e0:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(lunarMonth/10));
     8e4:	60 91 79 00 	lds	r22, 0x0079	; 0x800079 <lunarMonth>
     8e8:	6c 9f       	mul	r22, r28
     8ea:	61 2d       	mov	r22, r1
     8ec:	11 24       	eor	r1, r1
     8ee:	66 95       	lsr	r22
     8f0:	66 95       	lsr	r22
     8f2:	66 95       	lsr	r22
     8f4:	83 e0       	ldi	r24, 0x03	; 3
     8f6:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(lunarDate%10));
     8fa:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <lunarDate>
     8fe:	6c 9f       	mul	r22, r28
     900:	81 2d       	mov	r24, r1
     902:	11 24       	eor	r1, r1
     904:	86 95       	lsr	r24
     906:	86 95       	lsr	r24
     908:	86 95       	lsr	r24
     90a:	88 0f       	add	r24, r24
     90c:	98 2f       	mov	r25, r24
     90e:	99 0f       	add	r25, r25
     910:	99 0f       	add	r25, r25
     912:	89 0f       	add	r24, r25
     914:	68 1b       	sub	r22, r24
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(lunarDate/10));
     91c:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <lunarDate>
     920:	6c 9f       	mul	r22, r28
     922:	61 2d       	mov	r22, r1
     924:	11 24       	eor	r1, r1
     926:	66 95       	lsr	r22
     928:	66 95       	lsr	r22
     92a:	66 95       	lsr	r22
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
     932:	b5 c4       	rjmp	.+2410   	; 0x129e <__stack+0xa3f>
			
		}
		else
		{
			MAX7219_clearDisplay();
     934:	0e 94 cf 01 	call	0x39e	; 0x39e <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(A_Minute%10));
     938:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <A_Minute>
     93c:	cd ec       	ldi	r28, 0xCD	; 205
     93e:	6c 9f       	mul	r22, r28
     940:	81 2d       	mov	r24, r1
     942:	11 24       	eor	r1, r1
     944:	86 95       	lsr	r24
     946:	86 95       	lsr	r24
     948:	86 95       	lsr	r24
     94a:	88 0f       	add	r24, r24
     94c:	98 2f       	mov	r25, r24
     94e:	99 0f       	add	r25, r25
     950:	99 0f       	add	r25, r25
     952:	89 0f       	add	r24, r25
     954:	68 1b       	sub	r22, r24
     956:	88 e0       	ldi	r24, 0x08	; 8
     958:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(A_Minute/10));
     95c:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <A_Minute>
     960:	6c 9f       	mul	r22, r28
     962:	61 2d       	mov	r22, r1
     964:	11 24       	eor	r1, r1
     966:	66 95       	lsr	r22
     968:	66 95       	lsr	r22
     96a:	66 95       	lsr	r22
     96c:	87 e0       	ldi	r24, 0x07	; 7
     96e:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(A_Hour%10));
     972:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <A_Hour>
     976:	6c 9f       	mul	r22, r28
     978:	81 2d       	mov	r24, r1
     97a:	11 24       	eor	r1, r1
     97c:	86 95       	lsr	r24
     97e:	86 95       	lsr	r24
     980:	86 95       	lsr	r24
     982:	88 0f       	add	r24, r24
     984:	98 2f       	mov	r25, r24
     986:	99 0f       	add	r25, r25
     988:	99 0f       	add	r25, r25
     98a:	89 0f       	add	r24, r25
     98c:	68 1b       	sub	r22, r24
     98e:	86 e0       	ldi	r24, 0x06	; 6
     990:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(A_Hour/10));
     994:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <A_Hour>
     998:	6c 9f       	mul	r22, r28
     99a:	61 2d       	mov	r22, r1
     99c:	11 24       	eor	r1, r1
     99e:	66 95       	lsr	r22
     9a0:	66 95       	lsr	r22
     9a2:	66 95       	lsr	r22
     9a4:	85 e0       	ldi	r24, 0x05	; 5
     9a6:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
     9aa:	79 c4       	rjmp	.+2290   	; 0x129e <__stack+0xa3f>
		}
	} 
	else
	{
		if ((count==1)&&(SW_time_date==0))	//blink date
     9ac:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count>
     9b0:	81 30       	cpi	r24, 0x01	; 1
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <__stack+0x157>
     9b4:	63 c0       	rjmp	.+198    	; 0xa7c <__stack+0x21d>
     9b6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     9ba:	81 11       	cpse	r24, r1
     9bc:	5f c0       	rjmp	.+190    	; 0xa7c <__stack+0x21d>
		{
			MAX7219_clearDisplay();
     9be:	0e 94 cf 01 	call	0x39e	; 0x39e <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(Minute%10));
     9c2:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Minute>
     9c6:	cd ec       	ldi	r28, 0xCD	; 205
     9c8:	6c 9f       	mul	r22, r28
     9ca:	81 2d       	mov	r24, r1
     9cc:	11 24       	eor	r1, r1
     9ce:	86 95       	lsr	r24
     9d0:	86 95       	lsr	r24
     9d2:	86 95       	lsr	r24
     9d4:	88 0f       	add	r24, r24
     9d6:	98 2f       	mov	r25, r24
     9d8:	99 0f       	add	r25, r25
     9da:	99 0f       	add	r25, r25
     9dc:	89 0f       	add	r24, r25
     9de:	68 1b       	sub	r22, r24
     9e0:	88 e0       	ldi	r24, 0x08	; 8
     9e2:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(Minute/10));
     9e6:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Minute>
     9ea:	6c 9f       	mul	r22, r28
     9ec:	61 2d       	mov	r22, r1
     9ee:	11 24       	eor	r1, r1
     9f0:	66 95       	lsr	r22
     9f2:	66 95       	lsr	r22
     9f4:	66 95       	lsr	r22
     9f6:	87 e0       	ldi	r24, 0x07	; 7
     9f8:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(Hour%10));
     9fc:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <Hour>
     a00:	6c 9f       	mul	r22, r28
     a02:	81 2d       	mov	r24, r1
     a04:	11 24       	eor	r1, r1
     a06:	86 95       	lsr	r24
     a08:	86 95       	lsr	r24
     a0a:	86 95       	lsr	r24
     a0c:	88 0f       	add	r24, r24
     a0e:	98 2f       	mov	r25, r24
     a10:	99 0f       	add	r25, r25
     a12:	99 0f       	add	r25, r25
     a14:	89 0f       	add	r24, r25
     a16:	68 1b       	sub	r22, r24
     a18:	86 e0       	ldi	r24, 0x06	; 6
     a1a:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(Hour/10));
     a1e:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <Hour>
     a22:	6c 9f       	mul	r22, r28
     a24:	61 2d       	mov	r22, r1
     a26:	11 24       	eor	r1, r1
     a28:	66 95       	lsr	r22
     a2a:	66 95       	lsr	r22
     a2c:	66 95       	lsr	r22
     a2e:	85 e0       	ldi	r24, 0x05	; 5
     a30:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
     a34:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Month>
     a38:	6c 9f       	mul	r22, r28
     a3a:	81 2d       	mov	r24, r1
     a3c:	11 24       	eor	r1, r1
     a3e:	86 95       	lsr	r24
     a40:	86 95       	lsr	r24
     a42:	86 95       	lsr	r24
     a44:	88 0f       	add	r24, r24
     a46:	98 2f       	mov	r25, r24
     a48:	99 0f       	add	r25, r25
     a4a:	99 0f       	add	r25, r25
     a4c:	89 0f       	add	r24, r25
     a4e:	68 1b       	sub	r22, r24
     a50:	84 e0       	ldi	r24, 0x04	; 4
     a52:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
     a56:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Month>
     a5a:	6c 9f       	mul	r22, r28
     a5c:	61 2d       	mov	r22, r1
     a5e:	11 24       	eor	r1, r1
     a60:	66 95       	lsr	r22
     a62:	66 95       	lsr	r22
     a64:	66 95       	lsr	r22
     a66:	83 e0       	ldi	r24, 0x03	; 3
     a68:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,MAX7219_CHAR_BLANK);
     a6c:	6f e0       	ldi	r22, 0x0F	; 15
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,MAX7219_CHAR_BLANK);
     a74:	6f e0       	ldi	r22, 0x0F	; 15
     a76:	81 e0       	ldi	r24, 0x01	; 1
     a78:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
		}
		if ((count==2)&&(SW_time_date==0))	//blink month
     a7c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count>
     a80:	82 30       	cpi	r24, 0x02	; 2
     a82:	09 f0       	breq	.+2      	; 0xa86 <__stack+0x227>
     a84:	63 c0       	rjmp	.+198    	; 0xb4c <__stack+0x2ed>
     a86:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     a8a:	81 11       	cpse	r24, r1
     a8c:	5f c0       	rjmp	.+190    	; 0xb4c <__stack+0x2ed>
		{
			MAX7219_clearDisplay();
     a8e:	0e 94 cf 01 	call	0x39e	; 0x39e <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(Minute%10));
     a92:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Minute>
     a96:	cd ec       	ldi	r28, 0xCD	; 205
     a98:	6c 9f       	mul	r22, r28
     a9a:	81 2d       	mov	r24, r1
     a9c:	11 24       	eor	r1, r1
     a9e:	86 95       	lsr	r24
     aa0:	86 95       	lsr	r24
     aa2:	86 95       	lsr	r24
     aa4:	88 0f       	add	r24, r24
     aa6:	98 2f       	mov	r25, r24
     aa8:	99 0f       	add	r25, r25
     aaa:	99 0f       	add	r25, r25
     aac:	89 0f       	add	r24, r25
     aae:	68 1b       	sub	r22, r24
     ab0:	88 e0       	ldi	r24, 0x08	; 8
     ab2:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(Minute/10));
     ab6:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Minute>
     aba:	6c 9f       	mul	r22, r28
     abc:	61 2d       	mov	r22, r1
     abe:	11 24       	eor	r1, r1
     ac0:	66 95       	lsr	r22
     ac2:	66 95       	lsr	r22
     ac4:	66 95       	lsr	r22
     ac6:	87 e0       	ldi	r24, 0x07	; 7
     ac8:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(Hour%10));
     acc:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <Hour>
     ad0:	6c 9f       	mul	r22, r28
     ad2:	81 2d       	mov	r24, r1
     ad4:	11 24       	eor	r1, r1
     ad6:	86 95       	lsr	r24
     ad8:	86 95       	lsr	r24
     ada:	86 95       	lsr	r24
     adc:	88 0f       	add	r24, r24
     ade:	98 2f       	mov	r25, r24
     ae0:	99 0f       	add	r25, r25
     ae2:	99 0f       	add	r25, r25
     ae4:	89 0f       	add	r24, r25
     ae6:	68 1b       	sub	r22, r24
     ae8:	86 e0       	ldi	r24, 0x06	; 6
     aea:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(Hour/10));
     aee:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <Hour>
     af2:	6c 9f       	mul	r22, r28
     af4:	61 2d       	mov	r22, r1
     af6:	11 24       	eor	r1, r1
     af8:	66 95       	lsr	r22
     afa:	66 95       	lsr	r22
     afc:	66 95       	lsr	r22
     afe:	85 e0       	ldi	r24, 0x05	; 5
     b00:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,MAX7219_CHAR_BLANK);
     b04:	6f e0       	ldi	r22, 0x0F	; 15
     b06:	84 e0       	ldi	r24, 0x04	; 4
     b08:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,MAX7219_CHAR_BLANK);
     b0c:	6f e0       	ldi	r22, 0x0F	; 15
     b0e:	83 e0       	ldi	r24, 0x03	; 3
     b10:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
     b14:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Date>
     b18:	6c 9f       	mul	r22, r28
     b1a:	81 2d       	mov	r24, r1
     b1c:	11 24       	eor	r1, r1
     b1e:	86 95       	lsr	r24
     b20:	86 95       	lsr	r24
     b22:	86 95       	lsr	r24
     b24:	88 0f       	add	r24, r24
     b26:	98 2f       	mov	r25, r24
     b28:	99 0f       	add	r25, r25
     b2a:	99 0f       	add	r25, r25
     b2c:	89 0f       	add	r24, r25
     b2e:	68 1b       	sub	r22, r24
     b30:	82 e0       	ldi	r24, 0x02	; 2
     b32:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
     b36:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Date>
     b3a:	6c 9f       	mul	r22, r28
     b3c:	61 2d       	mov	r22, r1
     b3e:	11 24       	eor	r1, r1
     b40:	66 95       	lsr	r22
     b42:	66 95       	lsr	r22
     b44:	66 95       	lsr	r22
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
		}
		if ((count==3)&&(SW_time_date==0))	//blink hour
     b4c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count>
     b50:	83 30       	cpi	r24, 0x03	; 3
     b52:	09 f0       	breq	.+2      	; 0xb56 <__stack+0x2f7>
     b54:	63 c0       	rjmp	.+198    	; 0xc1c <__stack+0x3bd>
     b56:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     b5a:	81 11       	cpse	r24, r1
     b5c:	5f c0       	rjmp	.+190    	; 0xc1c <__stack+0x3bd>
		{
			MAX7219_clearDisplay();
     b5e:	0e 94 cf 01 	call	0x39e	; 0x39e <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(Minute%10));
     b62:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Minute>
     b66:	cd ec       	ldi	r28, 0xCD	; 205
     b68:	6c 9f       	mul	r22, r28
     b6a:	81 2d       	mov	r24, r1
     b6c:	11 24       	eor	r1, r1
     b6e:	86 95       	lsr	r24
     b70:	86 95       	lsr	r24
     b72:	86 95       	lsr	r24
     b74:	88 0f       	add	r24, r24
     b76:	98 2f       	mov	r25, r24
     b78:	99 0f       	add	r25, r25
     b7a:	99 0f       	add	r25, r25
     b7c:	89 0f       	add	r24, r25
     b7e:	68 1b       	sub	r22, r24
     b80:	88 e0       	ldi	r24, 0x08	; 8
     b82:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(Minute/10));
     b86:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <Minute>
     b8a:	6c 9f       	mul	r22, r28
     b8c:	61 2d       	mov	r22, r1
     b8e:	11 24       	eor	r1, r1
     b90:	66 95       	lsr	r22
     b92:	66 95       	lsr	r22
     b94:	66 95       	lsr	r22
     b96:	87 e0       	ldi	r24, 0x07	; 7
     b98:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
     b9c:	6f e0       	ldi	r22, 0x0F	; 15
     b9e:	86 e0       	ldi	r24, 0x06	; 6
     ba0:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
     ba4:	6f e0       	ldi	r22, 0x0F	; 15
     ba6:	85 e0       	ldi	r24, 0x05	; 5
     ba8:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
     bac:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Month>
     bb0:	6c 9f       	mul	r22, r28
     bb2:	81 2d       	mov	r24, r1
     bb4:	11 24       	eor	r1, r1
     bb6:	86 95       	lsr	r24
     bb8:	86 95       	lsr	r24
     bba:	86 95       	lsr	r24
     bbc:	88 0f       	add	r24, r24
     bbe:	98 2f       	mov	r25, r24
     bc0:	99 0f       	add	r25, r25
     bc2:	99 0f       	add	r25, r25
     bc4:	89 0f       	add	r24, r25
     bc6:	68 1b       	sub	r22, r24
     bc8:	84 e0       	ldi	r24, 0x04	; 4
     bca:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
     bce:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Month>
     bd2:	6c 9f       	mul	r22, r28
     bd4:	61 2d       	mov	r22, r1
     bd6:	11 24       	eor	r1, r1
     bd8:	66 95       	lsr	r22
     bda:	66 95       	lsr	r22
     bdc:	66 95       	lsr	r22
     bde:	83 e0       	ldi	r24, 0x03	; 3
     be0:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
     be4:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Date>
     be8:	6c 9f       	mul	r22, r28
     bea:	81 2d       	mov	r24, r1
     bec:	11 24       	eor	r1, r1
     bee:	86 95       	lsr	r24
     bf0:	86 95       	lsr	r24
     bf2:	86 95       	lsr	r24
     bf4:	88 0f       	add	r24, r24
     bf6:	98 2f       	mov	r25, r24
     bf8:	99 0f       	add	r25, r25
     bfa:	99 0f       	add	r25, r25
     bfc:	89 0f       	add	r24, r25
     bfe:	68 1b       	sub	r22, r24
     c00:	82 e0       	ldi	r24, 0x02	; 2
     c02:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
     c06:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Date>
     c0a:	6c 9f       	mul	r22, r28
     c0c:	61 2d       	mov	r22, r1
     c0e:	11 24       	eor	r1, r1
     c10:	66 95       	lsr	r22
     c12:	66 95       	lsr	r22
     c14:	66 95       	lsr	r22
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
		}
		if ((count==4)&&(SW_time_date==0))	//blink min
     c1c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count>
     c20:	84 30       	cpi	r24, 0x04	; 4
     c22:	09 f0       	breq	.+2      	; 0xc26 <__stack+0x3c7>
     c24:	63 c0       	rjmp	.+198    	; 0xcec <__stack+0x48d>
     c26:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     c2a:	81 11       	cpse	r24, r1
     c2c:	5f c0       	rjmp	.+190    	; 0xcec <__stack+0x48d>
		{
			MAX7219_clearDisplay();
     c2e:	0e 94 cf 01 	call	0x39e	; 0x39e <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
     c32:	6f e0       	ldi	r22, 0x0F	; 15
     c34:	88 e0       	ldi	r24, 0x08	; 8
     c36:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
     c3a:	6f e0       	ldi	r22, 0x0F	; 15
     c3c:	87 e0       	ldi	r24, 0x07	; 7
     c3e:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(Hour%10));
     c42:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <Hour>
     c46:	cd ec       	ldi	r28, 0xCD	; 205
     c48:	6c 9f       	mul	r22, r28
     c4a:	81 2d       	mov	r24, r1
     c4c:	11 24       	eor	r1, r1
     c4e:	86 95       	lsr	r24
     c50:	86 95       	lsr	r24
     c52:	86 95       	lsr	r24
     c54:	88 0f       	add	r24, r24
     c56:	98 2f       	mov	r25, r24
     c58:	99 0f       	add	r25, r25
     c5a:	99 0f       	add	r25, r25
     c5c:	89 0f       	add	r24, r25
     c5e:	68 1b       	sub	r22, r24
     c60:	86 e0       	ldi	r24, 0x06	; 6
     c62:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(Hour/10));
     c66:	60 91 74 00 	lds	r22, 0x0074	; 0x800074 <Hour>
     c6a:	6c 9f       	mul	r22, r28
     c6c:	61 2d       	mov	r22, r1
     c6e:	11 24       	eor	r1, r1
     c70:	66 95       	lsr	r22
     c72:	66 95       	lsr	r22
     c74:	66 95       	lsr	r22
     c76:	85 e0       	ldi	r24, 0x05	; 5
     c78:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
     c7c:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Month>
     c80:	6c 9f       	mul	r22, r28
     c82:	81 2d       	mov	r24, r1
     c84:	11 24       	eor	r1, r1
     c86:	86 95       	lsr	r24
     c88:	86 95       	lsr	r24
     c8a:	86 95       	lsr	r24
     c8c:	88 0f       	add	r24, r24
     c8e:	98 2f       	mov	r25, r24
     c90:	99 0f       	add	r25, r25
     c92:	99 0f       	add	r25, r25
     c94:	89 0f       	add	r24, r25
     c96:	68 1b       	sub	r22, r24
     c98:	84 e0       	ldi	r24, 0x04	; 4
     c9a:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
     c9e:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Month>
     ca2:	6c 9f       	mul	r22, r28
     ca4:	61 2d       	mov	r22, r1
     ca6:	11 24       	eor	r1, r1
     ca8:	66 95       	lsr	r22
     caa:	66 95       	lsr	r22
     cac:	66 95       	lsr	r22
     cae:	83 e0       	ldi	r24, 0x03	; 3
     cb0:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
     cb4:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Date>
     cb8:	6c 9f       	mul	r22, r28
     cba:	81 2d       	mov	r24, r1
     cbc:	11 24       	eor	r1, r1
     cbe:	86 95       	lsr	r24
     cc0:	86 95       	lsr	r24
     cc2:	86 95       	lsr	r24
     cc4:	88 0f       	add	r24, r24
     cc6:	98 2f       	mov	r25, r24
     cc8:	99 0f       	add	r25, r25
     cca:	99 0f       	add	r25, r25
     ccc:	89 0f       	add	r24, r25
     cce:	68 1b       	sub	r22, r24
     cd0:	82 e0       	ldi	r24, 0x02	; 2
     cd2:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
     cd6:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Date>
     cda:	6c 9f       	mul	r22, r28
     cdc:	61 2d       	mov	r22, r1
     cde:	11 24       	eor	r1, r1
     ce0:	66 95       	lsr	r22
     ce2:	66 95       	lsr	r22
     ce4:	66 95       	lsr	r22
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
		}
		if ((count==1)&&(SW_time_date==1))	//blink date
     cec:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count>
     cf0:	81 30       	cpi	r24, 0x01	; 1
     cf2:	09 f0       	breq	.+2      	; 0xcf6 <__stack+0x497>
     cf4:	0e c1       	rjmp	.+540    	; 0xf12 <__stack+0x6b3>
     cf6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     cfa:	81 30       	cpi	r24, 0x01	; 1
     cfc:	09 f0       	breq	.+2      	; 0xd00 <__stack+0x4a1>
     cfe:	09 c1       	rjmp	.+530    	; 0xf12 <__stack+0x6b3>
		{
			
			MAX7219_clearDisplay();
     d00:	0e 94 cf 01 	call	0x39e	; 0x39e <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
     d04:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <yyyy>
     d08:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <yyyy+0x1>
     d0c:	9f 01       	movw	r18, r30
     d0e:	36 95       	lsr	r19
     d10:	27 95       	ror	r18
     d12:	36 95       	lsr	r19
     d14:	27 95       	ror	r18
     d16:	36 95       	lsr	r19
     d18:	27 95       	ror	r18
     d1a:	a5 ec       	ldi	r26, 0xC5	; 197
     d1c:	b0 e2       	ldi	r27, 0x20	; 32
     d1e:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     d22:	ac 01       	movw	r20, r24
     d24:	52 95       	swap	r21
     d26:	42 95       	swap	r20
     d28:	4f 70       	andi	r20, 0x0F	; 15
     d2a:	45 27       	eor	r20, r21
     d2c:	5f 70       	andi	r21, 0x0F	; 15
     d2e:	45 27       	eor	r20, r21
     d30:	c8 ee       	ldi	r28, 0xE8	; 232
     d32:	d3 e0       	ldi	r29, 0x03	; 3
     d34:	4c 9f       	mul	r20, r28
     d36:	c0 01       	movw	r24, r0
     d38:	4d 9f       	mul	r20, r29
     d3a:	90 0d       	add	r25, r0
     d3c:	5c 9f       	mul	r21, r28
     d3e:	90 0d       	add	r25, r0
     d40:	11 24       	eor	r1, r1
     d42:	af 01       	movw	r20, r30
     d44:	48 1b       	sub	r20, r24
     d46:	59 0b       	sbc	r21, r25
     d48:	9a 01       	movw	r18, r20
     d4a:	ad ec       	ldi	r26, 0xCD	; 205
     d4c:	bc ec       	ldi	r27, 0xCC	; 204
     d4e:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     d52:	96 95       	lsr	r25
     d54:	87 95       	ror	r24
     d56:	96 95       	lsr	r25
     d58:	87 95       	ror	r24
     d5a:	96 95       	lsr	r25
     d5c:	87 95       	ror	r24
     d5e:	bc 01       	movw	r22, r24
     d60:	66 0f       	add	r22, r22
     d62:	77 1f       	adc	r23, r23
     d64:	88 0f       	add	r24, r24
     d66:	99 1f       	adc	r25, r25
     d68:	88 0f       	add	r24, r24
     d6a:	99 1f       	adc	r25, r25
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	86 0f       	add	r24, r22
     d72:	97 1f       	adc	r25, r23
     d74:	28 1b       	sub	r18, r24
     d76:	39 0b       	sbc	r19, r25
     d78:	62 2f       	mov	r22, r18
     d7a:	88 e0       	ldi	r24, 0x08	; 8
     d7c:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
     d80:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <yyyy>
     d84:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <yyyy+0x1>
     d88:	9a 01       	movw	r18, r20
     d8a:	36 95       	lsr	r19
     d8c:	27 95       	ror	r18
     d8e:	36 95       	lsr	r19
     d90:	27 95       	ror	r18
     d92:	36 95       	lsr	r19
     d94:	27 95       	ror	r18
     d96:	a5 ec       	ldi	r26, 0xC5	; 197
     d98:	b0 e2       	ldi	r27, 0x20	; 32
     d9a:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     d9e:	9c 01       	movw	r18, r24
     da0:	32 95       	swap	r19
     da2:	22 95       	swap	r18
     da4:	2f 70       	andi	r18, 0x0F	; 15
     da6:	23 27       	eor	r18, r19
     da8:	3f 70       	andi	r19, 0x0F	; 15
     daa:	23 27       	eor	r18, r19
     dac:	2c 9f       	mul	r18, r28
     dae:	c0 01       	movw	r24, r0
     db0:	2d 9f       	mul	r18, r29
     db2:	90 0d       	add	r25, r0
     db4:	3c 9f       	mul	r19, r28
     db6:	90 0d       	add	r25, r0
     db8:	11 24       	eor	r1, r1
     dba:	9a 01       	movw	r18, r20
     dbc:	28 1b       	sub	r18, r24
     dbe:	39 0b       	sbc	r19, r25
     dc0:	ad ec       	ldi	r26, 0xCD	; 205
     dc2:	bc ec       	ldi	r27, 0xCC	; 204
     dc4:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     dc8:	ac 01       	movw	r20, r24
     dca:	56 95       	lsr	r21
     dcc:	47 95       	ror	r20
     dce:	56 95       	lsr	r21
     dd0:	47 95       	ror	r20
     dd2:	56 95       	lsr	r21
     dd4:	47 95       	ror	r20
     dd6:	9a 01       	movw	r18, r20
     dd8:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     ddc:	96 95       	lsr	r25
     dde:	87 95       	ror	r24
     de0:	96 95       	lsr	r25
     de2:	87 95       	ror	r24
     de4:	96 95       	lsr	r25
     de6:	87 95       	ror	r24
     de8:	bc 01       	movw	r22, r24
     dea:	66 0f       	add	r22, r22
     dec:	77 1f       	adc	r23, r23
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	88 0f       	add	r24, r24
     df8:	99 1f       	adc	r25, r25
     dfa:	86 0f       	add	r24, r22
     dfc:	97 1f       	adc	r25, r23
     dfe:	28 1b       	sub	r18, r24
     e00:	39 0b       	sbc	r19, r25
     e02:	62 2f       	mov	r22, r18
     e04:	87 e0       	ldi	r24, 0x07	; 7
     e06:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
     e0a:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <yyyy>
     e0e:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <yyyy+0x1>
     e12:	9a 01       	movw	r18, r20
     e14:	36 95       	lsr	r19
     e16:	27 95       	ror	r18
     e18:	36 95       	lsr	r19
     e1a:	27 95       	ror	r18
     e1c:	36 95       	lsr	r19
     e1e:	27 95       	ror	r18
     e20:	a5 ec       	ldi	r26, 0xC5	; 197
     e22:	b0 e2       	ldi	r27, 0x20	; 32
     e24:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     e28:	92 95       	swap	r25
     e2a:	82 95       	swap	r24
     e2c:	8f 70       	andi	r24, 0x0F	; 15
     e2e:	89 27       	eor	r24, r25
     e30:	9f 70       	andi	r25, 0x0F	; 15
     e32:	89 27       	eor	r24, r25
     e34:	8c 9f       	mul	r24, r28
     e36:	90 01       	movw	r18, r0
     e38:	8d 9f       	mul	r24, r29
     e3a:	30 0d       	add	r19, r0
     e3c:	9c 9f       	mul	r25, r28
     e3e:	30 0d       	add	r19, r0
     e40:	11 24       	eor	r1, r1
     e42:	ca 01       	movw	r24, r20
     e44:	82 1b       	sub	r24, r18
     e46:	93 0b       	sbc	r25, r19
     e48:	9c 01       	movw	r18, r24
     e4a:	36 95       	lsr	r19
     e4c:	27 95       	ror	r18
     e4e:	36 95       	lsr	r19
     e50:	27 95       	ror	r18
     e52:	ab e7       	ldi	r26, 0x7B	; 123
     e54:	b4 e1       	ldi	r27, 0x14	; 20
     e56:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     e5a:	ac 01       	movw	r20, r24
     e5c:	56 95       	lsr	r21
     e5e:	47 95       	ror	r20
     e60:	9a 01       	movw	r18, r20
     e62:	ad ec       	ldi	r26, 0xCD	; 205
     e64:	bc ec       	ldi	r27, 0xCC	; 204
     e66:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     e6a:	96 95       	lsr	r25
     e6c:	87 95       	ror	r24
     e6e:	96 95       	lsr	r25
     e70:	87 95       	ror	r24
     e72:	96 95       	lsr	r25
     e74:	87 95       	ror	r24
     e76:	bc 01       	movw	r22, r24
     e78:	66 0f       	add	r22, r22
     e7a:	77 1f       	adc	r23, r23
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	86 0f       	add	r24, r22
     e8a:	97 1f       	adc	r25, r23
     e8c:	28 1b       	sub	r18, r24
     e8e:	39 0b       	sbc	r19, r25
     e90:	62 2f       	mov	r22, r18
     e92:	86 e0       	ldi	r24, 0x06	; 6
     e94:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
     e98:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <yyyy>
     e9c:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <yyyy+0x1>
     ea0:	36 95       	lsr	r19
     ea2:	27 95       	ror	r18
     ea4:	36 95       	lsr	r19
     ea6:	27 95       	ror	r18
     ea8:	36 95       	lsr	r19
     eaa:	27 95       	ror	r18
     eac:	a5 ec       	ldi	r26, 0xC5	; 197
     eae:	b0 e2       	ldi	r27, 0x20	; 32
     eb0:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     eb4:	92 95       	swap	r25
     eb6:	82 95       	swap	r24
     eb8:	8f 70       	andi	r24, 0x0F	; 15
     eba:	89 27       	eor	r24, r25
     ebc:	9f 70       	andi	r25, 0x0F	; 15
     ebe:	89 27       	eor	r24, r25
     ec0:	68 2f       	mov	r22, r24
     ec2:	85 e0       	ldi	r24, 0x05	; 5
     ec4:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
     ec8:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Month>
     ecc:	cd ec       	ldi	r28, 0xCD	; 205
     ece:	6c 9f       	mul	r22, r28
     ed0:	81 2d       	mov	r24, r1
     ed2:	11 24       	eor	r1, r1
     ed4:	86 95       	lsr	r24
     ed6:	86 95       	lsr	r24
     ed8:	86 95       	lsr	r24
     eda:	88 0f       	add	r24, r24
     edc:	98 2f       	mov	r25, r24
     ede:	99 0f       	add	r25, r25
     ee0:	99 0f       	add	r25, r25
     ee2:	89 0f       	add	r24, r25
     ee4:	68 1b       	sub	r22, r24
     ee6:	84 e0       	ldi	r24, 0x04	; 4
     ee8:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
     eec:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Month>
     ef0:	6c 9f       	mul	r22, r28
     ef2:	61 2d       	mov	r22, r1
     ef4:	11 24       	eor	r1, r1
     ef6:	66 95       	lsr	r22
     ef8:	66 95       	lsr	r22
     efa:	66 95       	lsr	r22
     efc:	83 e0       	ldi	r24, 0x03	; 3
     efe:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,MAX7219_CHAR_BLANK);
     f02:	6f e0       	ldi	r22, 0x0F	; 15
     f04:	82 e0       	ldi	r24, 0x02	; 2
     f06:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,MAX7219_CHAR_BLANK);
     f0a:	6f e0       	ldi	r22, 0x0F	; 15
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
		}
		if ((count==2)&&(SW_time_date==1))	//blink month
     f12:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count>
     f16:	82 30       	cpi	r24, 0x02	; 2
     f18:	09 f0       	breq	.+2      	; 0xf1c <__stack+0x6bd>
     f1a:	0e c1       	rjmp	.+540    	; 0x1138 <__stack+0x8d9>
     f1c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
     f20:	81 30       	cpi	r24, 0x01	; 1
     f22:	09 f0       	breq	.+2      	; 0xf26 <__stack+0x6c7>
     f24:	09 c1       	rjmp	.+530    	; 0x1138 <__stack+0x8d9>
		{
			
			MAX7219_clearDisplay();
     f26:	0e 94 cf 01 	call	0x39e	; 0x39e <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,((yyyy%1000)%10));
     f2a:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <yyyy>
     f2e:	f0 91 77 00 	lds	r31, 0x0077	; 0x800077 <yyyy+0x1>
     f32:	9f 01       	movw	r18, r30
     f34:	36 95       	lsr	r19
     f36:	27 95       	ror	r18
     f38:	36 95       	lsr	r19
     f3a:	27 95       	ror	r18
     f3c:	36 95       	lsr	r19
     f3e:	27 95       	ror	r18
     f40:	a5 ec       	ldi	r26, 0xC5	; 197
     f42:	b0 e2       	ldi	r27, 0x20	; 32
     f44:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     f48:	ac 01       	movw	r20, r24
     f4a:	52 95       	swap	r21
     f4c:	42 95       	swap	r20
     f4e:	4f 70       	andi	r20, 0x0F	; 15
     f50:	45 27       	eor	r20, r21
     f52:	5f 70       	andi	r21, 0x0F	; 15
     f54:	45 27       	eor	r20, r21
     f56:	c8 ee       	ldi	r28, 0xE8	; 232
     f58:	d3 e0       	ldi	r29, 0x03	; 3
     f5a:	4c 9f       	mul	r20, r28
     f5c:	c0 01       	movw	r24, r0
     f5e:	4d 9f       	mul	r20, r29
     f60:	90 0d       	add	r25, r0
     f62:	5c 9f       	mul	r21, r28
     f64:	90 0d       	add	r25, r0
     f66:	11 24       	eor	r1, r1
     f68:	af 01       	movw	r20, r30
     f6a:	48 1b       	sub	r20, r24
     f6c:	59 0b       	sbc	r21, r25
     f6e:	9a 01       	movw	r18, r20
     f70:	ad ec       	ldi	r26, 0xCD	; 205
     f72:	bc ec       	ldi	r27, 0xCC	; 204
     f74:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     f78:	96 95       	lsr	r25
     f7a:	87 95       	ror	r24
     f7c:	96 95       	lsr	r25
     f7e:	87 95       	ror	r24
     f80:	96 95       	lsr	r25
     f82:	87 95       	ror	r24
     f84:	bc 01       	movw	r22, r24
     f86:	66 0f       	add	r22, r22
     f88:	77 1f       	adc	r23, r23
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	86 0f       	add	r24, r22
     f98:	97 1f       	adc	r25, r23
     f9a:	28 1b       	sub	r18, r24
     f9c:	39 0b       	sbc	r19, r25
     f9e:	62 2f       	mov	r22, r18
     fa0:	88 e0       	ldi	r24, 0x08	; 8
     fa2:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(((yyyy%1000)/10)%10));
     fa6:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <yyyy>
     faa:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <yyyy+0x1>
     fae:	9a 01       	movw	r18, r20
     fb0:	36 95       	lsr	r19
     fb2:	27 95       	ror	r18
     fb4:	36 95       	lsr	r19
     fb6:	27 95       	ror	r18
     fb8:	36 95       	lsr	r19
     fba:	27 95       	ror	r18
     fbc:	a5 ec       	ldi	r26, 0xC5	; 197
     fbe:	b0 e2       	ldi	r27, 0x20	; 32
     fc0:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     fc4:	9c 01       	movw	r18, r24
     fc6:	32 95       	swap	r19
     fc8:	22 95       	swap	r18
     fca:	2f 70       	andi	r18, 0x0F	; 15
     fcc:	23 27       	eor	r18, r19
     fce:	3f 70       	andi	r19, 0x0F	; 15
     fd0:	23 27       	eor	r18, r19
     fd2:	2c 9f       	mul	r18, r28
     fd4:	c0 01       	movw	r24, r0
     fd6:	2d 9f       	mul	r18, r29
     fd8:	90 0d       	add	r25, r0
     fda:	3c 9f       	mul	r19, r28
     fdc:	90 0d       	add	r25, r0
     fde:	11 24       	eor	r1, r1
     fe0:	9a 01       	movw	r18, r20
     fe2:	28 1b       	sub	r18, r24
     fe4:	39 0b       	sbc	r19, r25
     fe6:	ad ec       	ldi	r26, 0xCD	; 205
     fe8:	bc ec       	ldi	r27, 0xCC	; 204
     fea:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
     fee:	ac 01       	movw	r20, r24
     ff0:	56 95       	lsr	r21
     ff2:	47 95       	ror	r20
     ff4:	56 95       	lsr	r21
     ff6:	47 95       	ror	r20
     ff8:	56 95       	lsr	r21
     ffa:	47 95       	ror	r20
     ffc:	9a 01       	movw	r18, r20
     ffe:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
    1002:	96 95       	lsr	r25
    1004:	87 95       	ror	r24
    1006:	96 95       	lsr	r25
    1008:	87 95       	ror	r24
    100a:	96 95       	lsr	r25
    100c:	87 95       	ror	r24
    100e:	bc 01       	movw	r22, r24
    1010:	66 0f       	add	r22, r22
    1012:	77 1f       	adc	r23, r23
    1014:	88 0f       	add	r24, r24
    1016:	99 1f       	adc	r25, r25
    1018:	88 0f       	add	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	86 0f       	add	r24, r22
    1022:	97 1f       	adc	r25, r23
    1024:	28 1b       	sub	r18, r24
    1026:	39 0b       	sbc	r19, r25
    1028:	62 2f       	mov	r22, r18
    102a:	87 e0       	ldi	r24, 0x07	; 7
    102c:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(((yyyy%1000)/100)%10));
    1030:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <yyyy>
    1034:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <yyyy+0x1>
    1038:	9a 01       	movw	r18, r20
    103a:	36 95       	lsr	r19
    103c:	27 95       	ror	r18
    103e:	36 95       	lsr	r19
    1040:	27 95       	ror	r18
    1042:	36 95       	lsr	r19
    1044:	27 95       	ror	r18
    1046:	a5 ec       	ldi	r26, 0xC5	; 197
    1048:	b0 e2       	ldi	r27, 0x20	; 32
    104a:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
    104e:	92 95       	swap	r25
    1050:	82 95       	swap	r24
    1052:	8f 70       	andi	r24, 0x0F	; 15
    1054:	89 27       	eor	r24, r25
    1056:	9f 70       	andi	r25, 0x0F	; 15
    1058:	89 27       	eor	r24, r25
    105a:	8c 9f       	mul	r24, r28
    105c:	90 01       	movw	r18, r0
    105e:	8d 9f       	mul	r24, r29
    1060:	30 0d       	add	r19, r0
    1062:	9c 9f       	mul	r25, r28
    1064:	30 0d       	add	r19, r0
    1066:	11 24       	eor	r1, r1
    1068:	ca 01       	movw	r24, r20
    106a:	82 1b       	sub	r24, r18
    106c:	93 0b       	sbc	r25, r19
    106e:	9c 01       	movw	r18, r24
    1070:	36 95       	lsr	r19
    1072:	27 95       	ror	r18
    1074:	36 95       	lsr	r19
    1076:	27 95       	ror	r18
    1078:	ab e7       	ldi	r26, 0x7B	; 123
    107a:	b4 e1       	ldi	r27, 0x14	; 20
    107c:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
    1080:	ac 01       	movw	r20, r24
    1082:	56 95       	lsr	r21
    1084:	47 95       	ror	r20
    1086:	9a 01       	movw	r18, r20
    1088:	ad ec       	ldi	r26, 0xCD	; 205
    108a:	bc ec       	ldi	r27, 0xCC	; 204
    108c:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
    1090:	96 95       	lsr	r25
    1092:	87 95       	ror	r24
    1094:	96 95       	lsr	r25
    1096:	87 95       	ror	r24
    1098:	96 95       	lsr	r25
    109a:	87 95       	ror	r24
    109c:	bc 01       	movw	r22, r24
    109e:	66 0f       	add	r22, r22
    10a0:	77 1f       	adc	r23, r23
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	88 0f       	add	r24, r24
    10a8:	99 1f       	adc	r25, r25
    10aa:	88 0f       	add	r24, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	86 0f       	add	r24, r22
    10b0:	97 1f       	adc	r25, r23
    10b2:	28 1b       	sub	r18, r24
    10b4:	39 0b       	sbc	r19, r25
    10b6:	62 2f       	mov	r22, r18
    10b8:	86 e0       	ldi	r24, 0x06	; 6
    10ba:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(yyyy/1000));
    10be:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <yyyy>
    10c2:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <yyyy+0x1>
    10c6:	36 95       	lsr	r19
    10c8:	27 95       	ror	r18
    10ca:	36 95       	lsr	r19
    10cc:	27 95       	ror	r18
    10ce:	36 95       	lsr	r19
    10d0:	27 95       	ror	r18
    10d2:	a5 ec       	ldi	r26, 0xC5	; 197
    10d4:	b0 e2       	ldi	r27, 0x20	; 32
    10d6:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__umulhisi3>
    10da:	92 95       	swap	r25
    10dc:	82 95       	swap	r24
    10de:	8f 70       	andi	r24, 0x0F	; 15
    10e0:	89 27       	eor	r24, r25
    10e2:	9f 70       	andi	r25, 0x0F	; 15
    10e4:	89 27       	eor	r24, r25
    10e6:	68 2f       	mov	r22, r24
    10e8:	85 e0       	ldi	r24, 0x05	; 5
    10ea:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,MAX7219_CHAR_BLANK);
    10ee:	6f e0       	ldi	r22, 0x0F	; 15
    10f0:	84 e0       	ldi	r24, 0x04	; 4
    10f2:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,MAX7219_CHAR_BLANK);
    10f6:	6f e0       	ldi	r22, 0x0F	; 15
    10f8:	83 e0       	ldi	r24, 0x03	; 3
    10fa:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    10fe:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Date>
    1102:	cd ec       	ldi	r28, 0xCD	; 205
    1104:	6c 9f       	mul	r22, r28
    1106:	81 2d       	mov	r24, r1
    1108:	11 24       	eor	r1, r1
    110a:	86 95       	lsr	r24
    110c:	86 95       	lsr	r24
    110e:	86 95       	lsr	r24
    1110:	88 0f       	add	r24, r24
    1112:	98 2f       	mov	r25, r24
    1114:	99 0f       	add	r25, r25
    1116:	99 0f       	add	r25, r25
    1118:	89 0f       	add	r24, r25
    111a:	68 1b       	sub	r22, r24
    111c:	82 e0       	ldi	r24, 0x02	; 2
    111e:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    1122:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Date>
    1126:	6c 9f       	mul	r22, r28
    1128:	61 2d       	mov	r22, r1
    112a:	11 24       	eor	r1, r1
    112c:	66 95       	lsr	r22
    112e:	66 95       	lsr	r22
    1130:	66 95       	lsr	r22
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
		}
		if ((count==3)&&(SW_time_date==1))	//blink year
    1138:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count>
    113c:	83 30       	cpi	r24, 0x03	; 3
    113e:	09 f0       	breq	.+2      	; 0x1142 <__stack+0x8e3>
    1140:	50 c0       	rjmp	.+160    	; 0x11e2 <__stack+0x983>
    1142:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
    1146:	81 30       	cpi	r24, 0x01	; 1
    1148:	09 f0       	breq	.+2      	; 0x114c <__stack+0x8ed>
    114a:	4b c0       	rjmp	.+150    	; 0x11e2 <__stack+0x983>
		{
			
			MAX7219_clearDisplay();
    114c:	0e 94 cf 01 	call	0x39e	; 0x39e <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    1150:	6f e0       	ldi	r22, 0x0F	; 15
    1152:	88 e0       	ldi	r24, 0x08	; 8
    1154:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    1158:	6f e0       	ldi	r22, 0x0F	; 15
    115a:	87 e0       	ldi	r24, 0x07	; 7
    115c:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    1160:	6f e0       	ldi	r22, 0x0F	; 15
    1162:	86 e0       	ldi	r24, 0x06	; 6
    1164:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    1168:	6f e0       	ldi	r22, 0x0F	; 15
    116a:	85 e0       	ldi	r24, 0x05	; 5
    116c:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT3,(Month%10));
    1170:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Month>
    1174:	cd ec       	ldi	r28, 0xCD	; 205
    1176:	6c 9f       	mul	r22, r28
    1178:	81 2d       	mov	r24, r1
    117a:	11 24       	eor	r1, r1
    117c:	86 95       	lsr	r24
    117e:	86 95       	lsr	r24
    1180:	86 95       	lsr	r24
    1182:	88 0f       	add	r24, r24
    1184:	98 2f       	mov	r25, r24
    1186:	99 0f       	add	r25, r25
    1188:	99 0f       	add	r25, r25
    118a:	89 0f       	add	r24, r25
    118c:	68 1b       	sub	r22, r24
    118e:	84 e0       	ldi	r24, 0x04	; 4
    1190:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT2,(Month/10));
    1194:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Month>
    1198:	6c 9f       	mul	r22, r28
    119a:	61 2d       	mov	r22, r1
    119c:	11 24       	eor	r1, r1
    119e:	66 95       	lsr	r22
    11a0:	66 95       	lsr	r22
    11a2:	66 95       	lsr	r22
    11a4:	83 e0       	ldi	r24, 0x03	; 3
    11a6:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT1,(Date%10));
    11aa:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Date>
    11ae:	6c 9f       	mul	r22, r28
    11b0:	81 2d       	mov	r24, r1
    11b2:	11 24       	eor	r1, r1
    11b4:	86 95       	lsr	r24
    11b6:	86 95       	lsr	r24
    11b8:	86 95       	lsr	r24
    11ba:	88 0f       	add	r24, r24
    11bc:	98 2f       	mov	r25, r24
    11be:	99 0f       	add	r25, r25
    11c0:	99 0f       	add	r25, r25
    11c2:	89 0f       	add	r24, r25
    11c4:	68 1b       	sub	r22, r24
    11c6:	82 e0       	ldi	r24, 0x02	; 2
    11c8:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT0,(Date/10));
    11cc:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <Date>
    11d0:	6c 9f       	mul	r22, r28
    11d2:	61 2d       	mov	r22, r1
    11d4:	11 24       	eor	r1, r1
    11d6:	66 95       	lsr	r22
    11d8:	66 95       	lsr	r22
    11da:	66 95       	lsr	r22
    11dc:	81 e0       	ldi	r24, 0x01	; 1
    11de:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
		}
		if ((count==1)&&(SW_time_date==3))	//blink A_HOUR
    11e2:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count>
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	59 f5       	brne	.+86     	; 0x1240 <__stack+0x9e1>
    11ea:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
    11ee:	83 30       	cpi	r24, 0x03	; 3
    11f0:	39 f5       	brne	.+78     	; 0x1240 <__stack+0x9e1>
		{
			
			MAX7219_clearDisplay();
    11f2:	0e 94 cf 01 	call	0x39e	; 0x39e <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,(A_Minute%10));
    11f6:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <A_Minute>
    11fa:	cd ec       	ldi	r28, 0xCD	; 205
    11fc:	6c 9f       	mul	r22, r28
    11fe:	81 2d       	mov	r24, r1
    1200:	11 24       	eor	r1, r1
    1202:	86 95       	lsr	r24
    1204:	86 95       	lsr	r24
    1206:	86 95       	lsr	r24
    1208:	88 0f       	add	r24, r24
    120a:	98 2f       	mov	r25, r24
    120c:	99 0f       	add	r25, r25
    120e:	99 0f       	add	r25, r25
    1210:	89 0f       	add	r24, r25
    1212:	68 1b       	sub	r22, r24
    1214:	88 e0       	ldi	r24, 0x08	; 8
    1216:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,(A_Minute/10));
    121a:	60 91 71 00 	lds	r22, 0x0071	; 0x800071 <A_Minute>
    121e:	6c 9f       	mul	r22, r28
    1220:	61 2d       	mov	r22, r1
    1222:	11 24       	eor	r1, r1
    1224:	66 95       	lsr	r22
    1226:	66 95       	lsr	r22
    1228:	66 95       	lsr	r22
    122a:	87 e0       	ldi	r24, 0x07	; 7
    122c:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,MAX7219_CHAR_BLANK);
    1230:	6f e0       	ldi	r22, 0x0F	; 15
    1232:	86 e0       	ldi	r24, 0x06	; 6
    1234:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,MAX7219_CHAR_BLANK);
    1238:	6f e0       	ldi	r22, 0x0F	; 15
    123a:	85 e0       	ldi	r24, 0x05	; 5
    123c:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>

		}
		if ((count==2)&&(SW_time_date==3))	//blink A_MIN
    1240:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count>
    1244:	82 30       	cpi	r24, 0x02	; 2
    1246:	59 f5       	brne	.+86     	; 0x129e <__stack+0xa3f>
    1248:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
    124c:	83 30       	cpi	r24, 0x03	; 3
    124e:	39 f5       	brne	.+78     	; 0x129e <__stack+0xa3f>
		{
			
			MAX7219_clearDisplay();
    1250:	0e 94 cf 01 	call	0x39e	; 0x39e <MAX7219_clearDisplay>
			
			MAX7219_writeData(MAX7219_DIGIT7,MAX7219_CHAR_BLANK);
    1254:	6f e0       	ldi	r22, 0x0F	; 15
    1256:	88 e0       	ldi	r24, 0x08	; 8
    1258:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT6,MAX7219_CHAR_BLANK);
    125c:	6f e0       	ldi	r22, 0x0F	; 15
    125e:	87 e0       	ldi	r24, 0x07	; 7
    1260:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT5,(A_Hour%10));
    1264:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <A_Hour>
    1268:	cd ec       	ldi	r28, 0xCD	; 205
    126a:	6c 9f       	mul	r22, r28
    126c:	81 2d       	mov	r24, r1
    126e:	11 24       	eor	r1, r1
    1270:	86 95       	lsr	r24
    1272:	86 95       	lsr	r24
    1274:	86 95       	lsr	r24
    1276:	88 0f       	add	r24, r24
    1278:	98 2f       	mov	r25, r24
    127a:	99 0f       	add	r25, r25
    127c:	99 0f       	add	r25, r25
    127e:	89 0f       	add	r24, r25
    1280:	68 1b       	sub	r22, r24
    1282:	86 e0       	ldi	r24, 0x06	; 6
    1284:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
			MAX7219_writeData(MAX7219_DIGIT4,(A_Hour/10));
    1288:	60 91 72 00 	lds	r22, 0x0072	; 0x800072 <A_Hour>
    128c:	6c 9f       	mul	r22, r28
    128e:	61 2d       	mov	r22, r1
    1290:	11 24       	eor	r1, r1
    1292:	66 95       	lsr	r22
    1294:	66 95       	lsr	r22
    1296:	66 95       	lsr	r22
    1298:	85 e0       	ldi	r24, 0x05	; 5
    129a:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
		}
	}
	

}
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	08 95       	ret

000012a4 <jdFromDate>:

//-----------------------DOI DUONG LICH - AM LICH---------------------

double jdFromDate(uint8_t dd, uint8_t mm, uint16_t yy)
{
    12a4:	4f 92       	push	r4
    12a6:	5f 92       	push	r5
    12a8:	6f 92       	push	r6
    12aa:	7f 92       	push	r7
    12ac:	8f 92       	push	r8
    12ae:	9f 92       	push	r9
    12b0:	af 92       	push	r10
    12b2:	bf 92       	push	r11
    12b4:	cf 92       	push	r12
    12b6:	df 92       	push	r13
    12b8:	ef 92       	push	r14
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	f8 2e       	mov	r15, r24
    12c6:	8a 01       	movw	r16, r20
	long double a, y, m, jd;
	a = floorf((14 - mm) / 12);
    12c8:	c6 2f       	mov	r28, r22
    12ca:	d0 e0       	ldi	r29, 0x00	; 0
    12cc:	8e e0       	ldi	r24, 0x0E	; 14
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	8c 1b       	sub	r24, r28
    12d2:	9d 0b       	sbc	r25, r29
    12d4:	6c e0       	ldi	r22, 0x0C	; 12
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	0e 94 88 16 	call	0x2d10	; 0x2d10 <__divmodhi4>
    12dc:	07 2e       	mov	r0, r23
    12de:	00 0c       	add	r0, r0
    12e0:	88 0b       	sbc	r24, r24
    12e2:	99 0b       	sbc	r25, r25
    12e4:	0e 94 8c 14 	call	0x2918	; 0x2918 <__floatsisf>
    12e8:	0e 94 c7 14 	call	0x298e	; 0x298e <floor>
    12ec:	4b 01       	movw	r8, r22
    12ee:	5c 01       	movw	r10, r24
	y = yy+4800-a;
    12f0:	b8 01       	movw	r22, r16
    12f2:	60 54       	subi	r22, 0x40	; 64
    12f4:	7d 4e       	sbci	r23, 0xED	; 237
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 8a 14 	call	0x2914	; 0x2914 <__floatunsisf>
    12fe:	a5 01       	movw	r20, r10
    1300:	94 01       	movw	r18, r8
    1302:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1306:	2b 01       	movw	r4, r22
    1308:	3c 01       	movw	r6, r24
	m = mm+12*a-3;
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e4       	ldi	r20, 0x40	; 64
    1310:	51 e4       	ldi	r21, 0x41	; 65
    1312:	c5 01       	movw	r24, r10
    1314:	b4 01       	movw	r22, r8
    1316:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    131a:	4b 01       	movw	r8, r22
    131c:	5c 01       	movw	r10, r24
    131e:	be 01       	movw	r22, r28
    1320:	dd 0f       	add	r29, r29
    1322:	88 0b       	sbc	r24, r24
    1324:	99 0b       	sbc	r25, r25
    1326:	0e 94 8c 14 	call	0x2918	; 0x2918 <__floatsisf>
    132a:	a5 01       	movw	r20, r10
    132c:	94 01       	movw	r18, r8
    132e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1332:	20 e0       	ldi	r18, 0x00	; 0
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	40 e4       	ldi	r20, 0x40	; 64
    1338:	50 e4       	ldi	r21, 0x40	; 64
    133a:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    133e:	4b 01       	movw	r8, r22
    1340:	5c 01       	movw	r10, r24
	jd = dd + floorf((153*m+2)/5) + 365*y + floorf(y/4) - floorf(y/100) + floorf(y/400) - 32045;
    1342:	6f 2d       	mov	r22, r15
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	80 e0       	ldi	r24, 0x00	; 0
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 8c 14 	call	0x2918	; 0x2918 <__floatsisf>
    134e:	6b 01       	movw	r12, r22
    1350:	7c 01       	movw	r14, r24
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	49 e1       	ldi	r20, 0x19	; 25
    1358:	53 e4       	ldi	r21, 0x43	; 67
    135a:	c5 01       	movw	r24, r10
    135c:	b4 01       	movw	r22, r8
    135e:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e0       	ldi	r20, 0x00	; 0
    1368:	50 e4       	ldi	r21, 0x40	; 64
    136a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 ea       	ldi	r20, 0xA0	; 160
    1374:	50 e4       	ldi	r21, 0x40	; 64
    1376:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__divsf3>
    137a:	0e 94 c7 14 	call	0x298e	; 0x298e <floor>
    137e:	9b 01       	movw	r18, r22
    1380:	ac 01       	movw	r20, r24
    1382:	c7 01       	movw	r24, r14
    1384:	b6 01       	movw	r22, r12
    1386:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    138a:	6b 01       	movw	r12, r22
    138c:	7c 01       	movw	r14, r24
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e8       	ldi	r19, 0x80	; 128
    1392:	46 eb       	ldi	r20, 0xB6	; 182
    1394:	53 e4       	ldi	r21, 0x43	; 67
    1396:	c3 01       	movw	r24, r6
    1398:	b2 01       	movw	r22, r4
    139a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    139e:	9b 01       	movw	r18, r22
    13a0:	ac 01       	movw	r20, r24
    13a2:	c7 01       	movw	r24, r14
    13a4:	b6 01       	movw	r22, r12
    13a6:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    13aa:	6b 01       	movw	r12, r22
    13ac:	7c 01       	movw	r14, r24
    13ae:	20 e0       	ldi	r18, 0x00	; 0
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	40 e8       	ldi	r20, 0x80	; 128
    13b4:	5e e3       	ldi	r21, 0x3E	; 62
    13b6:	c3 01       	movw	r24, r6
    13b8:	b2 01       	movw	r22, r4
    13ba:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    13be:	0e 94 c7 14 	call	0x298e	; 0x298e <floor>
    13c2:	9b 01       	movw	r18, r22
    13c4:	ac 01       	movw	r20, r24
    13c6:	c7 01       	movw	r24, r14
    13c8:	b6 01       	movw	r22, r12
    13ca:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    13ce:	6b 01       	movw	r12, r22
    13d0:	7c 01       	movw	r14, r24
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	48 ec       	ldi	r20, 0xC8	; 200
    13d8:	52 e4       	ldi	r21, 0x42	; 66
    13da:	c3 01       	movw	r24, r6
    13dc:	b2 01       	movw	r22, r4
    13de:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__divsf3>
    13e2:	0e 94 c7 14 	call	0x298e	; 0x298e <floor>
    13e6:	9b 01       	movw	r18, r22
    13e8:	ac 01       	movw	r20, r24
    13ea:	c7 01       	movw	r24, r14
    13ec:	b6 01       	movw	r22, r12
    13ee:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    13f2:	4b 01       	movw	r8, r22
    13f4:	5c 01       	movw	r10, r24
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	48 ec       	ldi	r20, 0xC8	; 200
    13fc:	53 e4       	ldi	r21, 0x43	; 67
    13fe:	c3 01       	movw	r24, r6
    1400:	b2 01       	movw	r22, r4
    1402:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__divsf3>
    1406:	0e 94 c7 14 	call	0x298e	; 0x298e <floor>
    140a:	9b 01       	movw	r18, r22
    140c:	ac 01       	movw	r20, r24
    140e:	c5 01       	movw	r24, r10
    1410:	b4 01       	movw	r22, r8
    1412:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1416:	20 e0       	ldi	r18, 0x00	; 0
    1418:	3a e5       	ldi	r19, 0x5A	; 90
    141a:	4a ef       	ldi	r20, 0xFA	; 250
    141c:	56 e4       	ldi	r21, 0x46	; 70
    141e:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1422:	4b 01       	movw	r8, r22
    1424:	5c 01       	movw	r10, r24
	if (jd < 2299161) {
    1426:	24 e6       	ldi	r18, 0x64	; 100
    1428:	34 e5       	ldi	r19, 0x54	; 84
    142a:	4c e0       	ldi	r20, 0x0C	; 12
    142c:	5a e4       	ldi	r21, 0x4A	; 74
    142e:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__cmpsf2>
    1432:	88 23       	and	r24, r24
    1434:	54 f4       	brge	.+20     	; 0x144a <jdFromDate+0x1a6>
		jd = dd + floorf((153*m+2)/5) + 365*y + floorf(y/4) - 32083;
    1436:	20 e0       	ldi	r18, 0x00	; 0
    1438:	36 ea       	ldi	r19, 0xA6	; 166
    143a:	4a ef       	ldi	r20, 0xFA	; 250
    143c:	56 e4       	ldi	r21, 0x46	; 70
    143e:	c7 01       	movw	r24, r14
    1440:	b6 01       	movw	r22, r12
    1442:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1446:	4b 01       	movw	r8, r22
    1448:	5c 01       	movw	r10, r24
	}
	return jd;
}
    144a:	c5 01       	movw	r24, r10
    144c:	b4 01       	movw	r22, r8
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	ff 90       	pop	r15
    1458:	ef 90       	pop	r14
    145a:	df 90       	pop	r13
    145c:	cf 90       	pop	r12
    145e:	bf 90       	pop	r11
    1460:	af 90       	pop	r10
    1462:	9f 90       	pop	r9
    1464:	8f 90       	pop	r8
    1466:	7f 90       	pop	r7
    1468:	6f 90       	pop	r6
    146a:	5f 90       	pop	r5
    146c:	4f 90       	pop	r4
    146e:	08 95       	ret

00001470 <getNewMoonDay>:

double getNewMoonDay(long double k, int timeZone)
{
    1470:	4f 92       	push	r4
    1472:	5f 92       	push	r5
    1474:	6f 92       	push	r6
    1476:	7f 92       	push	r7
    1478:	8f 92       	push	r8
    147a:	9f 92       	push	r9
    147c:	af 92       	push	r10
    147e:	bf 92       	push	r11
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	66 97       	sbiw	r28, 0x16	; 22
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61
    149c:	6b 01       	movw	r12, r22
    149e:	7c 01       	movw	r14, r24
    14a0:	5e 8b       	std	Y+22, r21	; 0x16
    14a2:	4d 8b       	std	Y+21, r20	; 0x15
	long double T, T2, T3, dr, Jd1, M, Mpr, F, C1, deltat, JdNew;
	T = k/1236.85; // Time in Julian centuries from 1900 January 0.5
    14a4:	23 e3       	ldi	r18, 0x33	; 51
    14a6:	3b e9       	ldi	r19, 0x9B	; 155
    14a8:	4a e9       	ldi	r20, 0x9A	; 154
    14aa:	54 e4       	ldi	r21, 0x44	; 68
    14ac:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__divsf3>
    14b0:	69 83       	std	Y+1, r22	; 0x01
    14b2:	7a 83       	std	Y+2, r23	; 0x02
    14b4:	8b 83       	std	Y+3, r24	; 0x03
    14b6:	9c 83       	std	Y+4, r25	; 0x04
	T2 = T * T;
    14b8:	9b 01       	movw	r18, r22
    14ba:	ac 01       	movw	r20, r24
    14bc:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    14c0:	6d 83       	std	Y+5, r22	; 0x05
    14c2:	7e 83       	std	Y+6, r23	; 0x06
    14c4:	8f 83       	std	Y+7, r24	; 0x07
    14c6:	98 87       	std	Y+8, r25	; 0x08
	T3 = T2 * T;
    14c8:	9b 01       	movw	r18, r22
    14ca:	ac 01       	movw	r20, r24
    14cc:	69 81       	ldd	r22, Y+1	; 0x01
    14ce:	7a 81       	ldd	r23, Y+2	; 0x02
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	9c 81       	ldd	r25, Y+4	; 0x04
    14d4:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    14d8:	6d 87       	std	Y+13, r22	; 0x0d
    14da:	7e 87       	std	Y+14, r23	; 0x0e
    14dc:	8f 87       	std	Y+15, r24	; 0x0f
    14de:	98 8b       	std	Y+16, r25	; 0x10
	dr = M_PI/180;
	Jd1 = 2415020.75933 + 29.53058868*k + 0.0001178*T2 - 0.000000155*T3;
    14e0:	25 ea       	ldi	r18, 0xA5	; 165
    14e2:	3e e3       	ldi	r19, 0x3E	; 62
    14e4:	4c ee       	ldi	r20, 0xEC	; 236
    14e6:	51 e4       	ldi	r21, 0x41	; 65
    14e8:	c7 01       	movw	r24, r14
    14ea:	b6 01       	movw	r22, r12
    14ec:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    14f0:	23 eb       	ldi	r18, 0xB3	; 179
    14f2:	36 e6       	ldi	r19, 0x66	; 102
    14f4:	43 e1       	ldi	r20, 0x13	; 19
    14f6:	5a e4       	ldi	r21, 0x4A	; 74
    14f8:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    14fc:	4b 01       	movw	r8, r22
    14fe:	5c 01       	movw	r10, r24
    1500:	25 e6       	ldi	r18, 0x65	; 101
    1502:	3b e0       	ldi	r19, 0x0B	; 11
    1504:	47 ef       	ldi	r20, 0xF7	; 247
    1506:	58 e3       	ldi	r21, 0x38	; 56
    1508:	6d 81       	ldd	r22, Y+5	; 0x05
    150a:	7e 81       	ldd	r23, Y+6	; 0x06
    150c:	8f 81       	ldd	r24, Y+7	; 0x07
    150e:	98 85       	ldd	r25, Y+8	; 0x08
    1510:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1514:	9b 01       	movw	r18, r22
    1516:	ac 01       	movw	r20, r24
    1518:	c5 01       	movw	r24, r10
    151a:	b4 01       	movw	r22, r8
    151c:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1520:	4b 01       	movw	r8, r22
    1522:	5c 01       	movw	r10, r24
    1524:	23 e1       	ldi	r18, 0x13	; 19
    1526:	3e e6       	ldi	r19, 0x6E	; 110
    1528:	46 e2       	ldi	r20, 0x26	; 38
    152a:	54 e3       	ldi	r21, 0x34	; 52
    152c:	6d 85       	ldd	r22, Y+13	; 0x0d
    152e:	7e 85       	ldd	r23, Y+14	; 0x0e
    1530:	8f 85       	ldd	r24, Y+15	; 0x0f
    1532:	98 89       	ldd	r25, Y+16	; 0x10
    1534:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1538:	9b 01       	movw	r18, r22
    153a:	ac 01       	movw	r20, r24
    153c:	c5 01       	movw	r24, r10
    153e:	b4 01       	movw	r22, r8
    1540:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1544:	4b 01       	movw	r8, r22
    1546:	5c 01       	movw	r10, r24
	Jd1 = Jd1 + 0.00033*sinf((166.56 + 132.87*T - 0.009173*T2)*dr); // Mean new moon
    1548:	28 eb       	ldi	r18, 0xB8	; 184
    154a:	3e ed       	ldi	r19, 0xDE	; 222
    154c:	44 e0       	ldi	r20, 0x04	; 4
    154e:	53 e4       	ldi	r21, 0x43	; 67
    1550:	69 81       	ldd	r22, Y+1	; 0x01
    1552:	7a 81       	ldd	r23, Y+2	; 0x02
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    155c:	2c e5       	ldi	r18, 0x5C	; 92
    155e:	3f e8       	ldi	r19, 0x8F	; 143
    1560:	46 e2       	ldi	r20, 0x26	; 38
    1562:	53 e4       	ldi	r21, 0x43	; 67
    1564:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1568:	2b 01       	movw	r4, r22
    156a:	3c 01       	movw	r6, r24
    156c:	2a e5       	ldi	r18, 0x5A	; 90
    156e:	3a e4       	ldi	r19, 0x4A	; 74
    1570:	46 e1       	ldi	r20, 0x16	; 22
    1572:	5c e3       	ldi	r21, 0x3C	; 60
    1574:	6d 81       	ldd	r22, Y+5	; 0x05
    1576:	7e 81       	ldd	r23, Y+6	; 0x06
    1578:	8f 81       	ldd	r24, Y+7	; 0x07
    157a:	98 85       	ldd	r25, Y+8	; 0x08
    157c:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1580:	9b 01       	movw	r18, r22
    1582:	ac 01       	movw	r20, r24
    1584:	c3 01       	movw	r24, r6
    1586:	b2 01       	movw	r22, r4
    1588:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    158c:	25 e3       	ldi	r18, 0x35	; 53
    158e:	3a ef       	ldi	r19, 0xFA	; 250
    1590:	4e e8       	ldi	r20, 0x8E	; 142
    1592:	5c e3       	ldi	r21, 0x3C	; 60
    1594:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1598:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <sin>
    159c:	2a ed       	ldi	r18, 0xDA	; 218
    159e:	33 e0       	ldi	r19, 0x03	; 3
    15a0:	4d ea       	ldi	r20, 0xAD	; 173
    15a2:	59 e3       	ldi	r21, 0x39	; 57
    15a4:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    15a8:	9b 01       	movw	r18, r22
    15aa:	ac 01       	movw	r20, r24
    15ac:	c5 01       	movw	r24, r10
    15ae:	b4 01       	movw	r22, r8
    15b0:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    15b4:	69 8b       	std	Y+17, r22	; 0x11
    15b6:	7a 8b       	std	Y+18, r23	; 0x12
    15b8:	8b 8b       	std	Y+19, r24	; 0x13
    15ba:	9c 8b       	std	Y+20, r25	; 0x14
	M = 359.2242 + 29.10535608*k - 0.0000333*T2 - 0.00000347*T3; // Sun's mean anomaly
    15bc:	25 ec       	ldi	r18, 0xC5	; 197
    15be:	37 ed       	ldi	r19, 0xD7	; 215
    15c0:	48 ee       	ldi	r20, 0xE8	; 232
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	c7 01       	movw	r24, r14
    15c6:	b6 01       	movw	r22, r12
    15c8:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    15cc:	23 eb       	ldi	r18, 0xB3	; 179
    15ce:	3c e9       	ldi	r19, 0x9C	; 156
    15d0:	43 eb       	ldi	r20, 0xB3	; 179
    15d2:	53 e4       	ldi	r21, 0x43	; 67
    15d4:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    15d8:	4b 01       	movw	r8, r22
    15da:	5c 01       	movw	r10, r24
    15dc:	2a e9       	ldi	r18, 0x9A	; 154
    15de:	3b ea       	ldi	r19, 0xAB	; 171
    15e0:	4b e0       	ldi	r20, 0x0B	; 11
    15e2:	58 e3       	ldi	r21, 0x38	; 56
    15e4:	6d 81       	ldd	r22, Y+5	; 0x05
    15e6:	7e 81       	ldd	r23, Y+6	; 0x06
    15e8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ea:	98 85       	ldd	r25, Y+8	; 0x08
    15ec:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    15f0:	9b 01       	movw	r18, r22
    15f2:	ac 01       	movw	r20, r24
    15f4:	c5 01       	movw	r24, r10
    15f6:	b4 01       	movw	r22, r8
    15f8:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    15fc:	4b 01       	movw	r8, r22
    15fe:	5c 01       	movw	r10, r24
    1600:	25 e2       	ldi	r18, 0x25	; 37
    1602:	3e ed       	ldi	r19, 0xDE	; 222
    1604:	48 e6       	ldi	r20, 0x68	; 104
    1606:	56 e3       	ldi	r21, 0x36	; 54
    1608:	6d 85       	ldd	r22, Y+13	; 0x0d
    160a:	7e 85       	ldd	r23, Y+14	; 0x0e
    160c:	8f 85       	ldd	r24, Y+15	; 0x0f
    160e:	98 89       	ldd	r25, Y+16	; 0x10
    1610:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1614:	9b 01       	movw	r18, r22
    1616:	ac 01       	movw	r20, r24
    1618:	c5 01       	movw	r24, r10
    161a:	b4 01       	movw	r22, r8
    161c:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1620:	69 87       	std	Y+9, r22	; 0x09
    1622:	7a 87       	std	Y+10, r23	; 0x0a
    1624:	8b 87       	std	Y+11, r24	; 0x0b
    1626:	9c 87       	std	Y+12, r25	; 0x0c
	Mpr = 306.0253 + 385.81691806*k + 0.0107306*T2 + 0.00001236*T3; // Moon's mean anomaly
    1628:	21 e9       	ldi	r18, 0x91	; 145
    162a:	38 ee       	ldi	r19, 0xE8	; 232
    162c:	40 ec       	ldi	r20, 0xC0	; 192
    162e:	53 e4       	ldi	r21, 0x43	; 67
    1630:	c7 01       	movw	r24, r14
    1632:	b6 01       	movw	r22, r12
    1634:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1638:	2d e3       	ldi	r18, 0x3D	; 61
    163a:	33 e0       	ldi	r19, 0x03	; 3
    163c:	49 e9       	ldi	r20, 0x99	; 153
    163e:	53 e4       	ldi	r21, 0x43	; 67
    1640:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1644:	4b 01       	movw	r8, r22
    1646:	5c 01       	movw	r10, r24
    1648:	26 e6       	ldi	r18, 0x66	; 102
    164a:	3f ec       	ldi	r19, 0xCF	; 207
    164c:	4f e2       	ldi	r20, 0x2F	; 47
    164e:	5c e3       	ldi	r21, 0x3C	; 60
    1650:	6d 81       	ldd	r22, Y+5	; 0x05
    1652:	7e 81       	ldd	r23, Y+6	; 0x06
    1654:	8f 81       	ldd	r24, Y+7	; 0x07
    1656:	98 85       	ldd	r25, Y+8	; 0x08
    1658:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    165c:	9b 01       	movw	r18, r22
    165e:	ac 01       	movw	r20, r24
    1660:	c5 01       	movw	r24, r10
    1662:	b4 01       	movw	r22, r8
    1664:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1668:	4b 01       	movw	r8, r22
    166a:	5c 01       	movw	r10, r24
    166c:	2c ec       	ldi	r18, 0xCC	; 204
    166e:	3d e5       	ldi	r19, 0x5D	; 93
    1670:	4f e4       	ldi	r20, 0x4F	; 79
    1672:	57 e3       	ldi	r21, 0x37	; 55
    1674:	6d 85       	ldd	r22, Y+13	; 0x0d
    1676:	7e 85       	ldd	r23, Y+14	; 0x0e
    1678:	8f 85       	ldd	r24, Y+15	; 0x0f
    167a:	98 89       	ldd	r25, Y+16	; 0x10
    167c:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1680:	9b 01       	movw	r18, r22
    1682:	ac 01       	movw	r20, r24
    1684:	c5 01       	movw	r24, r10
    1686:	b4 01       	movw	r22, r8
    1688:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    168c:	2b 01       	movw	r4, r22
    168e:	3c 01       	movw	r6, r24
	F = 21.2964 + 390.67050646*k - 0.0016528*T2 - 0.00000239*T3; // Moon's argument of latitude
    1690:	23 ed       	ldi	r18, 0xD3	; 211
    1692:	35 e5       	ldi	r19, 0x55	; 85
    1694:	43 ec       	ldi	r20, 0xC3	; 195
    1696:	53 e4       	ldi	r21, 0x43	; 67
    1698:	c7 01       	movw	r24, r14
    169a:	b6 01       	movw	r22, r12
    169c:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    16a0:	27 e0       	ldi	r18, 0x07	; 7
    16a2:	3f e5       	ldi	r19, 0x5F	; 95
    16a4:	4a ea       	ldi	r20, 0xAA	; 170
    16a6:	51 e4       	ldi	r21, 0x41	; 65
    16a8:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    16ac:	6b 01       	movw	r12, r22
    16ae:	7c 01       	movw	r14, r24
    16b0:	24 ec       	ldi	r18, 0xC4	; 196
    16b2:	32 ea       	ldi	r19, 0xA2	; 162
    16b4:	48 ed       	ldi	r20, 0xD8	; 216
    16b6:	5a e3       	ldi	r21, 0x3A	; 58
    16b8:	6d 81       	ldd	r22, Y+5	; 0x05
    16ba:	7e 81       	ldd	r23, Y+6	; 0x06
    16bc:	8f 81       	ldd	r24, Y+7	; 0x07
    16be:	98 85       	ldd	r25, Y+8	; 0x08
    16c0:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    16c4:	9b 01       	movw	r18, r22
    16c6:	ac 01       	movw	r20, r24
    16c8:	c7 01       	movw	r24, r14
    16ca:	b6 01       	movw	r22, r12
    16cc:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    16d0:	6b 01       	movw	r12, r22
    16d2:	7c 01       	movw	r14, r24
    16d4:	23 ee       	ldi	r18, 0xE3	; 227
    16d6:	33 e6       	ldi	r19, 0x63	; 99
    16d8:	40 e2       	ldi	r20, 0x20	; 32
    16da:	56 e3       	ldi	r21, 0x36	; 54
    16dc:	6d 85       	ldd	r22, Y+13	; 0x0d
    16de:	7e 85       	ldd	r23, Y+14	; 0x0e
    16e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e2:	98 89       	ldd	r25, Y+16	; 0x10
    16e4:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    16e8:	9b 01       	movw	r18, r22
    16ea:	ac 01       	movw	r20, r24
    16ec:	c7 01       	movw	r24, r14
    16ee:	b6 01       	movw	r22, r12
    16f0:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    16f4:	6b 01       	movw	r12, r22
    16f6:	7c 01       	movw	r14, r24
	C1=(0.1734 - 0.000393*T)*sinf(M*dr) + 0.0021*sinf(2*dr*M);
    16f8:	21 e9       	ldi	r18, 0x91	; 145
    16fa:	3b e0       	ldi	r19, 0x0B	; 11
    16fc:	4e ec       	ldi	r20, 0xCE	; 206
    16fe:	59 e3       	ldi	r21, 0x39	; 57
    1700:	69 81       	ldd	r22, Y+1	; 0x01
    1702:	7a 81       	ldd	r23, Y+2	; 0x02
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    170c:	9b 01       	movw	r18, r22
    170e:	ac 01       	movw	r20, r24
    1710:	65 ec       	ldi	r22, 0xC5	; 197
    1712:	7f e8       	ldi	r23, 0x8F	; 143
    1714:	81 e3       	ldi	r24, 0x31	; 49
    1716:	9e e3       	ldi	r25, 0x3E	; 62
    1718:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    171c:	4b 01       	movw	r8, r22
    171e:	5c 01       	movw	r10, r24
    1720:	25 e3       	ldi	r18, 0x35	; 53
    1722:	3a ef       	ldi	r19, 0xFA	; 250
    1724:	4e e8       	ldi	r20, 0x8E	; 142
    1726:	5c e3       	ldi	r21, 0x3C	; 60
    1728:	69 85       	ldd	r22, Y+9	; 0x09
    172a:	7a 85       	ldd	r23, Y+10	; 0x0a
    172c:	8b 85       	ldd	r24, Y+11	; 0x0b
    172e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1730:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1734:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <sin>
    1738:	9b 01       	movw	r18, r22
    173a:	ac 01       	movw	r20, r24
    173c:	c5 01       	movw	r24, r10
    173e:	b4 01       	movw	r22, r8
    1740:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1744:	4b 01       	movw	r8, r22
    1746:	5c 01       	movw	r10, r24
    1748:	25 e3       	ldi	r18, 0x35	; 53
    174a:	3a ef       	ldi	r19, 0xFA	; 250
    174c:	4e e0       	ldi	r20, 0x0E	; 14
    174e:	5d e3       	ldi	r21, 0x3D	; 61
    1750:	69 85       	ldd	r22, Y+9	; 0x09
    1752:	7a 85       	ldd	r23, Y+10	; 0x0a
    1754:	8b 85       	ldd	r24, Y+11	; 0x0b
    1756:	9c 85       	ldd	r25, Y+12	; 0x0c
    1758:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    175c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <sin>
    1760:	27 e2       	ldi	r18, 0x27	; 39
    1762:	30 ea       	ldi	r19, 0xA0	; 160
    1764:	49 e0       	ldi	r20, 0x09	; 9
    1766:	5b e3       	ldi	r21, 0x3B	; 59
    1768:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    176c:	9b 01       	movw	r18, r22
    176e:	ac 01       	movw	r20, r24
    1770:	c5 01       	movw	r24, r10
    1772:	b4 01       	movw	r22, r8
    1774:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1778:	4b 01       	movw	r8, r22
    177a:	5c 01       	movw	r10, r24
	C1 = C1 - 0.4068*sinf(Mpr*dr) + 0.0161*sinf(dr*2*Mpr);
    177c:	25 e3       	ldi	r18, 0x35	; 53
    177e:	3a ef       	ldi	r19, 0xFA	; 250
    1780:	4e e8       	ldi	r20, 0x8E	; 142
    1782:	5c e3       	ldi	r21, 0x3C	; 60
    1784:	c3 01       	movw	r24, r6
    1786:	b2 01       	movw	r22, r4
    1788:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    178c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <sin>
    1790:	27 e1       	ldi	r18, 0x17	; 23
    1792:	38 e4       	ldi	r19, 0x48	; 72
    1794:	40 ed       	ldi	r20, 0xD0	; 208
    1796:	5e e3       	ldi	r21, 0x3E	; 62
    1798:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    179c:	9b 01       	movw	r18, r22
    179e:	ac 01       	movw	r20, r24
    17a0:	c5 01       	movw	r24, r10
    17a2:	b4 01       	movw	r22, r8
    17a4:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    17a8:	4b 01       	movw	r8, r22
    17aa:	5c 01       	movw	r10, r24
    17ac:	25 e3       	ldi	r18, 0x35	; 53
    17ae:	3a ef       	ldi	r19, 0xFA	; 250
    17b0:	4e e0       	ldi	r20, 0x0E	; 14
    17b2:	5d e3       	ldi	r21, 0x3D	; 61
    17b4:	c3 01       	movw	r24, r6
    17b6:	b2 01       	movw	r22, r4
    17b8:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    17bc:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <sin>
    17c0:	26 e2       	ldi	r18, 0x26	; 38
    17c2:	34 ee       	ldi	r19, 0xE4	; 228
    17c4:	43 e8       	ldi	r20, 0x83	; 131
    17c6:	5c e3       	ldi	r21, 0x3C	; 60
    17c8:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    17cc:	9b 01       	movw	r18, r22
    17ce:	ac 01       	movw	r20, r24
    17d0:	c5 01       	movw	r24, r10
    17d2:	b4 01       	movw	r22, r8
    17d4:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    17d8:	4b 01       	movw	r8, r22
    17da:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0004*sinf(dr*3*Mpr);
    17dc:	20 e5       	ldi	r18, 0x50	; 80
    17de:	37 e7       	ldi	r19, 0x77	; 119
    17e0:	46 e5       	ldi	r20, 0x56	; 86
    17e2:	5d e3       	ldi	r21, 0x3D	; 61
    17e4:	c3 01       	movw	r24, r6
    17e6:	b2 01       	movw	r22, r4
    17e8:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    17ec:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <sin>
    17f0:	27 e1       	ldi	r18, 0x17	; 23
    17f2:	37 eb       	ldi	r19, 0xB7	; 183
    17f4:	41 ed       	ldi	r20, 0xD1	; 209
    17f6:	59 e3       	ldi	r21, 0x39	; 57
    17f8:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    17fc:	9b 01       	movw	r18, r22
    17fe:	ac 01       	movw	r20, r24
    1800:	c5 01       	movw	r24, r10
    1802:	b4 01       	movw	r22, r8
    1804:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1808:	4b 01       	movw	r8, r22
    180a:	5c 01       	movw	r10, r24
	C1 = C1 + 0.0104*sinf(dr*2*F) - 0.0051*sinf(dr*(M+Mpr));
    180c:	25 e3       	ldi	r18, 0x35	; 53
    180e:	3a ef       	ldi	r19, 0xFA	; 250
    1810:	4e e0       	ldi	r20, 0x0E	; 14
    1812:	5d e3       	ldi	r21, 0x3D	; 61
    1814:	c7 01       	movw	r24, r14
    1816:	b6 01       	movw	r22, r12
    1818:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    181c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <sin>
    1820:	23 ec       	ldi	r18, 0xC3	; 195
    1822:	34 e6       	ldi	r19, 0x64	; 100
    1824:	4a e2       	ldi	r20, 0x2A	; 42
    1826:	5c e3       	ldi	r21, 0x3C	; 60
    1828:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    182c:	9b 01       	movw	r18, r22
    182e:	ac 01       	movw	r20, r24
    1830:	c5 01       	movw	r24, r10
    1832:	b4 01       	movw	r22, r8
    1834:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1838:	4b 01       	movw	r8, r22
    183a:	5c 01       	movw	r10, r24
    183c:	a3 01       	movw	r20, r6
    183e:	92 01       	movw	r18, r4
    1840:	69 85       	ldd	r22, Y+9	; 0x09
    1842:	7a 85       	ldd	r23, Y+10	; 0x0a
    1844:	8b 85       	ldd	r24, Y+11	; 0x0b
    1846:	9c 85       	ldd	r25, Y+12	; 0x0c
    1848:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    184c:	25 e3       	ldi	r18, 0x35	; 53
    184e:	3a ef       	ldi	r19, 0xFA	; 250
    1850:	4e e8       	ldi	r20, 0x8E	; 142
    1852:	5c e3       	ldi	r21, 0x3C	; 60
    1854:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1858:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <sin>
    185c:	27 ee       	ldi	r18, 0xE7	; 231
    185e:	3d e1       	ldi	r19, 0x1D	; 29
    1860:	47 ea       	ldi	r20, 0xA7	; 167
    1862:	5b e3       	ldi	r21, 0x3B	; 59
    1864:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1868:	9b 01       	movw	r18, r22
    186a:	ac 01       	movw	r20, r24
    186c:	c5 01       	movw	r24, r10
    186e:	b4 01       	movw	r22, r8
    1870:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1874:	4b 01       	movw	r8, r22
    1876:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0074*sinf(dr*(M-Mpr)) + 0.0004*sinf(dr*(2*F+M));
    1878:	a3 01       	movw	r20, r6
    187a:	92 01       	movw	r18, r4
    187c:	69 85       	ldd	r22, Y+9	; 0x09
    187e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1880:	8b 85       	ldd	r24, Y+11	; 0x0b
    1882:	9c 85       	ldd	r25, Y+12	; 0x0c
    1884:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1888:	25 e3       	ldi	r18, 0x35	; 53
    188a:	3a ef       	ldi	r19, 0xFA	; 250
    188c:	4e e8       	ldi	r20, 0x8E	; 142
    188e:	5c e3       	ldi	r21, 0x3C	; 60
    1890:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1894:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <sin>
    1898:	23 eb       	ldi	r18, 0xB3	; 179
    189a:	3b e7       	ldi	r19, 0x7B	; 123
    189c:	42 ef       	ldi	r20, 0xF2	; 242
    189e:	5b e3       	ldi	r21, 0x3B	; 59
    18a0:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    18a4:	9b 01       	movw	r18, r22
    18a6:	ac 01       	movw	r20, r24
    18a8:	c5 01       	movw	r24, r10
    18aa:	b4 01       	movw	r22, r8
    18ac:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    18b0:	4b 01       	movw	r8, r22
    18b2:	5c 01       	movw	r10, r24
    18b4:	a7 01       	movw	r20, r14
    18b6:	96 01       	movw	r18, r12
    18b8:	c7 01       	movw	r24, r14
    18ba:	b6 01       	movw	r22, r12
    18bc:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    18c0:	6b 01       	movw	r12, r22
    18c2:	7c 01       	movw	r14, r24
    18c4:	9b 01       	movw	r18, r22
    18c6:	ac 01       	movw	r20, r24
    18c8:	69 85       	ldd	r22, Y+9	; 0x09
    18ca:	7a 85       	ldd	r23, Y+10	; 0x0a
    18cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    18ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    18d0:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    18d4:	25 e3       	ldi	r18, 0x35	; 53
    18d6:	3a ef       	ldi	r19, 0xFA	; 250
    18d8:	4e e8       	ldi	r20, 0x8E	; 142
    18da:	5c e3       	ldi	r21, 0x3C	; 60
    18dc:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    18e0:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <sin>
    18e4:	27 e1       	ldi	r18, 0x17	; 23
    18e6:	37 eb       	ldi	r19, 0xB7	; 183
    18e8:	41 ed       	ldi	r20, 0xD1	; 209
    18ea:	59 e3       	ldi	r21, 0x39	; 57
    18ec:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    18f0:	9b 01       	movw	r18, r22
    18f2:	ac 01       	movw	r20, r24
    18f4:	c5 01       	movw	r24, r10
    18f6:	b4 01       	movw	r22, r8
    18f8:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    18fc:	4b 01       	movw	r8, r22
    18fe:	5c 01       	movw	r10, r24
	C1 = C1 - 0.0004*sinf(dr*(2*F-M)) - 0.0006*sinf(dr*(2*F+Mpr));
    1900:	29 85       	ldd	r18, Y+9	; 0x09
    1902:	3a 85       	ldd	r19, Y+10	; 0x0a
    1904:	4b 85       	ldd	r20, Y+11	; 0x0b
    1906:	5c 85       	ldd	r21, Y+12	; 0x0c
    1908:	c7 01       	movw	r24, r14
    190a:	b6 01       	movw	r22, r12
    190c:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1910:	25 e3       	ldi	r18, 0x35	; 53
    1912:	3a ef       	ldi	r19, 0xFA	; 250
    1914:	4e e8       	ldi	r20, 0x8E	; 142
    1916:	5c e3       	ldi	r21, 0x3C	; 60
    1918:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    191c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <sin>
    1920:	27 e1       	ldi	r18, 0x17	; 23
    1922:	37 eb       	ldi	r19, 0xB7	; 183
    1924:	41 ed       	ldi	r20, 0xD1	; 209
    1926:	59 e3       	ldi	r21, 0x39	; 57
    1928:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    192c:	9b 01       	movw	r18, r22
    192e:	ac 01       	movw	r20, r24
    1930:	c5 01       	movw	r24, r10
    1932:	b4 01       	movw	r22, r8
    1934:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1938:	4b 01       	movw	r8, r22
    193a:	5c 01       	movw	r10, r24
    193c:	a7 01       	movw	r20, r14
    193e:	96 01       	movw	r18, r12
    1940:	c3 01       	movw	r24, r6
    1942:	b2 01       	movw	r22, r4
    1944:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1948:	25 e3       	ldi	r18, 0x35	; 53
    194a:	3a ef       	ldi	r19, 0xFA	; 250
    194c:	4e e8       	ldi	r20, 0x8E	; 142
    194e:	5c e3       	ldi	r21, 0x3C	; 60
    1950:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1954:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <sin>
    1958:	22 e5       	ldi	r18, 0x52	; 82
    195a:	39 e4       	ldi	r19, 0x49	; 73
    195c:	4d e1       	ldi	r20, 0x1D	; 29
    195e:	5a e3       	ldi	r21, 0x3A	; 58
    1960:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1964:	9b 01       	movw	r18, r22
    1966:	ac 01       	movw	r20, r24
    1968:	c5 01       	movw	r24, r10
    196a:	b4 01       	movw	r22, r8
    196c:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1970:	4b 01       	movw	r8, r22
    1972:	5c 01       	movw	r10, r24
	C1 = C1 + 0.0010*sinf(dr*(2*F-Mpr)) + 0.0005*sinf(dr*(2*Mpr+M));
    1974:	a3 01       	movw	r20, r6
    1976:	92 01       	movw	r18, r4
    1978:	c7 01       	movw	r24, r14
    197a:	b6 01       	movw	r22, r12
    197c:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1980:	25 e3       	ldi	r18, 0x35	; 53
    1982:	3a ef       	ldi	r19, 0xFA	; 250
    1984:	4e e8       	ldi	r20, 0x8E	; 142
    1986:	5c e3       	ldi	r21, 0x3C	; 60
    1988:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    198c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <sin>
    1990:	2f e6       	ldi	r18, 0x6F	; 111
    1992:	32 e1       	ldi	r19, 0x12	; 18
    1994:	43 e8       	ldi	r20, 0x83	; 131
    1996:	5a e3       	ldi	r21, 0x3A	; 58
    1998:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    199c:	9b 01       	movw	r18, r22
    199e:	ac 01       	movw	r20, r24
    19a0:	c5 01       	movw	r24, r10
    19a2:	b4 01       	movw	r22, r8
    19a4:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    19a8:	6b 01       	movw	r12, r22
    19aa:	7c 01       	movw	r14, r24
    19ac:	a3 01       	movw	r20, r6
    19ae:	92 01       	movw	r18, r4
    19b0:	c3 01       	movw	r24, r6
    19b2:	b2 01       	movw	r22, r4
    19b4:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    19b8:	9b 01       	movw	r18, r22
    19ba:	ac 01       	movw	r20, r24
    19bc:	69 85       	ldd	r22, Y+9	; 0x09
    19be:	7a 85       	ldd	r23, Y+10	; 0x0a
    19c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    19c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    19c4:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    19c8:	25 e3       	ldi	r18, 0x35	; 53
    19ca:	3a ef       	ldi	r19, 0xFA	; 250
    19cc:	4e e8       	ldi	r20, 0x8E	; 142
    19ce:	5c e3       	ldi	r21, 0x3C	; 60
    19d0:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    19d4:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <sin>
    19d8:	2f e6       	ldi	r18, 0x6F	; 111
    19da:	32 e1       	ldi	r19, 0x12	; 18
    19dc:	43 e0       	ldi	r20, 0x03	; 3
    19de:	5a e3       	ldi	r21, 0x3A	; 58
    19e0:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    19e4:	9b 01       	movw	r18, r22
    19e6:	ac 01       	movw	r20, r24
    19e8:	c7 01       	movw	r24, r14
    19ea:	b6 01       	movw	r22, r12
    19ec:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    19f0:	6b 01       	movw	r12, r22
    19f2:	7c 01       	movw	r14, r24
	if (T < -11) {
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e3       	ldi	r20, 0x30	; 48
    19fa:	51 ec       	ldi	r21, 0xC1	; 193
    19fc:	69 81       	ldd	r22, Y+1	; 0x01
    19fe:	7a 81       	ldd	r23, Y+2	; 0x02
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__cmpsf2>
    1a08:	88 23       	and	r24, r24
    1a0a:	0c f0       	brlt	.+2      	; 0x1a0e <getNewMoonDay+0x59e>
    1a0c:	51 c0       	rjmp	.+162    	; 0x1ab0 <getNewMoonDay+0x640>
		deltat= 0.001 + 0.000839*T + 0.0002261*T2 - 0.00000845*T3 - 0.000000081*T*T3;
    1a0e:	26 e5       	ldi	r18, 0x56	; 86
    1a10:	30 ef       	ldi	r19, 0xF0	; 240
    1a12:	4b e5       	ldi	r20, 0x5B	; 91
    1a14:	5a e3       	ldi	r21, 0x3A	; 58
    1a16:	69 81       	ldd	r22, Y+1	; 0x01
    1a18:	7a 81       	ldd	r23, Y+2	; 0x02
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1a22:	2f e6       	ldi	r18, 0x6F	; 111
    1a24:	32 e1       	ldi	r19, 0x12	; 18
    1a26:	43 e8       	ldi	r20, 0x83	; 131
    1a28:	5a e3       	ldi	r21, 0x3A	; 58
    1a2a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1a2e:	4b 01       	movw	r8, r22
    1a30:	5c 01       	movw	r10, r24
    1a32:	22 e4       	ldi	r18, 0x42	; 66
    1a34:	35 e1       	ldi	r19, 0x15	; 21
    1a36:	4d e6       	ldi	r20, 0x6D	; 109
    1a38:	59 e3       	ldi	r21, 0x39	; 57
    1a3a:	6d 81       	ldd	r22, Y+5	; 0x05
    1a3c:	7e 81       	ldd	r23, Y+6	; 0x06
    1a3e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a40:	98 85       	ldd	r25, Y+8	; 0x08
    1a42:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1a46:	9b 01       	movw	r18, r22
    1a48:	ac 01       	movw	r20, r24
    1a4a:	c5 01       	movw	r24, r10
    1a4c:	b4 01       	movw	r22, r8
    1a4e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1a52:	4b 01       	movw	r8, r22
    1a54:	5c 01       	movw	r10, r24
    1a56:	29 e7       	ldi	r18, 0x79	; 121
    1a58:	34 ec       	ldi	r19, 0xC4	; 196
    1a5a:	4d e0       	ldi	r20, 0x0D	; 13
    1a5c:	57 e3       	ldi	r21, 0x37	; 55
    1a5e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a60:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a64:	98 89       	ldd	r25, Y+16	; 0x10
    1a66:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1a6a:	9b 01       	movw	r18, r22
    1a6c:	ac 01       	movw	r20, r24
    1a6e:	c5 01       	movw	r24, r10
    1a70:	b4 01       	movw	r22, r8
    1a72:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1a76:	4b 01       	movw	r8, r22
    1a78:	5c 01       	movw	r10, r24
    1a7a:	29 e3       	ldi	r18, 0x39	; 57
    1a7c:	32 ef       	ldi	r19, 0xF2	; 242
    1a7e:	4d ea       	ldi	r20, 0xAD	; 173
    1a80:	53 e3       	ldi	r21, 0x33	; 51
    1a82:	69 81       	ldd	r22, Y+1	; 0x01
    1a84:	7a 81       	ldd	r23, Y+2	; 0x02
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1a8e:	9b 01       	movw	r18, r22
    1a90:	ac 01       	movw	r20, r24
    1a92:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a94:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a96:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a98:	98 89       	ldd	r25, Y+16	; 0x10
    1a9a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1a9e:	9b 01       	movw	r18, r22
    1aa0:	ac 01       	movw	r20, r24
    1aa2:	c5 01       	movw	r24, r10
    1aa4:	b4 01       	movw	r22, r8
    1aa6:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1aaa:	4b 01       	movw	r8, r22
    1aac:	5c 01       	movw	r10, r24
    1aae:	24 c0       	rjmp	.+72     	; 0x1af8 <getNewMoonDay+0x688>
		} else {
		deltat= -0.000278 + 0.000265*T + 0.000262*T2;
    1ab0:	23 eb       	ldi	r18, 0xB3	; 179
    1ab2:	3f ee       	ldi	r19, 0xEF	; 239
    1ab4:	4a e8       	ldi	r20, 0x8A	; 138
    1ab6:	59 e3       	ldi	r21, 0x39	; 57
    1ab8:	69 81       	ldd	r22, Y+1	; 0x01
    1aba:	7a 81       	ldd	r23, Y+2	; 0x02
    1abc:	8b 81       	ldd	r24, Y+3	; 0x03
    1abe:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac0:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1ac4:	27 e8       	ldi	r18, 0x87	; 135
    1ac6:	30 ec       	ldi	r19, 0xC0	; 192
    1ac8:	41 e9       	ldi	r20, 0x91	; 145
    1aca:	59 e3       	ldi	r21, 0x39	; 57
    1acc:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1ad0:	4b 01       	movw	r8, r22
    1ad2:	5c 01       	movw	r10, r24
    1ad4:	2b e0       	ldi	r18, 0x0B	; 11
    1ad6:	3d e5       	ldi	r19, 0x5D	; 93
    1ad8:	49 e8       	ldi	r20, 0x89	; 137
    1ada:	59 e3       	ldi	r21, 0x39	; 57
    1adc:	6d 81       	ldd	r22, Y+5	; 0x05
    1ade:	7e 81       	ldd	r23, Y+6	; 0x06
    1ae0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ae2:	98 85       	ldd	r25, Y+8	; 0x08
    1ae4:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1ae8:	9b 01       	movw	r18, r22
    1aea:	ac 01       	movw	r20, r24
    1aec:	c5 01       	movw	r24, r10
    1aee:	b4 01       	movw	r22, r8
    1af0:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1af4:	4b 01       	movw	r8, r22
    1af6:	5c 01       	movw	r10, r24
	};
	JdNew = Jd1 + C1 - deltat;
    1af8:	a7 01       	movw	r20, r14
    1afa:	96 01       	movw	r18, r12
    1afc:	69 89       	ldd	r22, Y+17	; 0x11
    1afe:	7a 89       	ldd	r23, Y+18	; 0x12
    1b00:	8b 89       	ldd	r24, Y+19	; 0x13
    1b02:	9c 89       	ldd	r25, Y+20	; 0x14
    1b04:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1b08:	a5 01       	movw	r20, r10
    1b0a:	94 01       	movw	r18, r8
    1b0c:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
	return floorf(JdNew + 0.5 + timeZone/24);
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	40 e0       	ldi	r20, 0x00	; 0
    1b16:	5f e3       	ldi	r21, 0x3F	; 63
    1b18:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1b1c:	6b 01       	movw	r12, r22
    1b1e:	7c 01       	movw	r14, r24
    1b20:	8d 89       	ldd	r24, Y+21	; 0x15
    1b22:	9e 89       	ldd	r25, Y+22	; 0x16
    1b24:	68 e1       	ldi	r22, 0x18	; 24
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	0e 94 88 16 	call	0x2d10	; 0x2d10 <__divmodhi4>
    1b2c:	07 2e       	mov	r0, r23
    1b2e:	00 0c       	add	r0, r0
    1b30:	88 0b       	sbc	r24, r24
    1b32:	99 0b       	sbc	r25, r25
    1b34:	0e 94 8c 14 	call	0x2918	; 0x2918 <__floatsisf>
    1b38:	9b 01       	movw	r18, r22
    1b3a:	ac 01       	movw	r20, r24
    1b3c:	c7 01       	movw	r24, r14
    1b3e:	b6 01       	movw	r22, r12
    1b40:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1b44:	0e 94 c7 14 	call	0x298e	; 0x298e <floor>
}
    1b48:	66 96       	adiw	r28, 0x16	; 22
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	de bf       	out	0x3e, r29	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	cd bf       	out	0x3d, r28	; 61
    1b54:	df 91       	pop	r29
    1b56:	cf 91       	pop	r28
    1b58:	ff 90       	pop	r15
    1b5a:	ef 90       	pop	r14
    1b5c:	df 90       	pop	r13
    1b5e:	cf 90       	pop	r12
    1b60:	bf 90       	pop	r11
    1b62:	af 90       	pop	r10
    1b64:	9f 90       	pop	r9
    1b66:	8f 90       	pop	r8
    1b68:	7f 90       	pop	r7
    1b6a:	6f 90       	pop	r6
    1b6c:	5f 90       	pop	r5
    1b6e:	4f 90       	pop	r4
    1b70:	08 95       	ret

00001b72 <getSunLongitude>:

double getSunLongitude(long double jdn, int timeZone)
{
    1b72:	4f 92       	push	r4
    1b74:	5f 92       	push	r5
    1b76:	6f 92       	push	r6
    1b78:	7f 92       	push	r7
    1b7a:	8f 92       	push	r8
    1b7c:	9f 92       	push	r9
    1b7e:	af 92       	push	r10
    1b80:	bf 92       	push	r11
    1b82:	cf 92       	push	r12
    1b84:	df 92       	push	r13
    1b86:	ef 92       	push	r14
    1b88:	ff 92       	push	r15
    1b8a:	cf 93       	push	r28
    1b8c:	df 93       	push	r29
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	28 97       	sbiw	r28, 0x08	; 8
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	5a 01       	movw	r10, r20
	long double T, T2, dr, M, L0, DL, L;
	T = (jdn - 2451545.5 - timeZone/24) / 36525; // Time in Julian centuries from 2000-01-01 12:00:00 GMT
    1ba0:	26 e6       	ldi	r18, 0x66	; 102
    1ba2:	31 ea       	ldi	r19, 0xA1	; 161
    1ba4:	45 e1       	ldi	r20, 0x15	; 21
    1ba6:	5a e4       	ldi	r21, 0x4A	; 74
    1ba8:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1bac:	6b 01       	movw	r12, r22
    1bae:	7c 01       	movw	r14, r24
    1bb0:	c5 01       	movw	r24, r10
    1bb2:	68 e1       	ldi	r22, 0x18	; 24
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	0e 94 88 16 	call	0x2d10	; 0x2d10 <__divmodhi4>
    1bba:	07 2e       	mov	r0, r23
    1bbc:	00 0c       	add	r0, r0
    1bbe:	88 0b       	sbc	r24, r24
    1bc0:	99 0b       	sbc	r25, r25
    1bc2:	0e 94 8c 14 	call	0x2918	; 0x2918 <__floatsisf>
    1bc6:	9b 01       	movw	r18, r22
    1bc8:	ac 01       	movw	r20, r24
    1bca:	c7 01       	movw	r24, r14
    1bcc:	b6 01       	movw	r22, r12
    1bce:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	3d ea       	ldi	r19, 0xAD	; 173
    1bd6:	4e e0       	ldi	r20, 0x0E	; 14
    1bd8:	57 e4       	ldi	r21, 0x47	; 71
    1bda:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__divsf3>
    1bde:	6b 01       	movw	r12, r22
    1be0:	7c 01       	movw	r14, r24
	T2 = T*T;
    1be2:	9b 01       	movw	r18, r22
    1be4:	ac 01       	movw	r20, r24
    1be6:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1bea:	4b 01       	movw	r8, r22
    1bec:	5c 01       	movw	r10, r24
	dr = M_PI/180; // degree to radian
	M = 357.52910 + 35999.05030*T - 0.0001559*T2 - 0.00000048*T*T2; // mean anomaly, degree
    1bee:	2d e0       	ldi	r18, 0x0D	; 13
    1bf0:	3f e9       	ldi	r19, 0x9F	; 159
    1bf2:	4c e0       	ldi	r20, 0x0C	; 12
    1bf4:	57 e4       	ldi	r21, 0x47	; 71
    1bf6:	c7 01       	movw	r24, r14
    1bf8:	b6 01       	movw	r22, r12
    1bfa:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1bfe:	2a eb       	ldi	r18, 0xBA	; 186
    1c00:	33 ec       	ldi	r19, 0xC3	; 195
    1c02:	42 eb       	ldi	r20, 0xB2	; 178
    1c04:	53 e4       	ldi	r21, 0x43	; 67
    1c06:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1c0a:	2b 01       	movw	r4, r22
    1c0c:	3c 01       	movw	r6, r24
    1c0e:	26 e1       	ldi	r18, 0x16	; 22
    1c10:	39 e7       	ldi	r19, 0x79	; 121
    1c12:	43 e2       	ldi	r20, 0x23	; 35
    1c14:	59 e3       	ldi	r21, 0x39	; 57
    1c16:	c5 01       	movw	r24, r10
    1c18:	b4 01       	movw	r22, r8
    1c1a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1c1e:	9b 01       	movw	r18, r22
    1c20:	ac 01       	movw	r20, r24
    1c22:	c3 01       	movw	r24, r6
    1c24:	b2 01       	movw	r22, r4
    1c26:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1c2a:	2b 01       	movw	r4, r22
    1c2c:	3c 01       	movw	r6, r24
    1c2e:	29 e5       	ldi	r18, 0x59	; 89
    1c30:	39 ed       	ldi	r19, 0xD9	; 217
    1c32:	40 e0       	ldi	r20, 0x00	; 0
    1c34:	55 e3       	ldi	r21, 0x35	; 53
    1c36:	c7 01       	movw	r24, r14
    1c38:	b6 01       	movw	r22, r12
    1c3a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1c3e:	9b 01       	movw	r18, r22
    1c40:	ac 01       	movw	r20, r24
    1c42:	c5 01       	movw	r24, r10
    1c44:	b4 01       	movw	r22, r8
    1c46:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1c4a:	9b 01       	movw	r18, r22
    1c4c:	ac 01       	movw	r20, r24
    1c4e:	c3 01       	movw	r24, r6
    1c50:	b2 01       	movw	r22, r4
    1c52:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1c56:	2b 01       	movw	r4, r22
    1c58:	3c 01       	movw	r6, r24
	L0 = 280.46645 + 36000.76983*T + 0.0003032*T2; // mean longitude, degree
    1c5a:	25 ec       	ldi	r18, 0xC5	; 197
    1c5c:	30 ea       	ldi	r19, 0xA0	; 160
    1c5e:	4c e0       	ldi	r20, 0x0C	; 12
    1c60:	57 e4       	ldi	r21, 0x47	; 71
    1c62:	c7 01       	movw	r24, r14
    1c64:	b6 01       	movw	r22, r12
    1c66:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1c6a:	25 eb       	ldi	r18, 0xB5	; 181
    1c6c:	3b e3       	ldi	r19, 0x3B	; 59
    1c6e:	4c e8       	ldi	r20, 0x8C	; 140
    1c70:	53 e4       	ldi	r21, 0x43	; 67
    1c72:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1c76:	69 83       	std	Y+1, r22	; 0x01
    1c78:	7a 83       	std	Y+2, r23	; 0x02
    1c7a:	8b 83       	std	Y+3, r24	; 0x03
    1c7c:	9c 83       	std	Y+4, r25	; 0x04
    1c7e:	21 ed       	ldi	r18, 0xD1	; 209
    1c80:	36 ef       	ldi	r19, 0xF6	; 246
    1c82:	4e e9       	ldi	r20, 0x9E	; 158
    1c84:	59 e3       	ldi	r21, 0x39	; 57
    1c86:	c5 01       	movw	r24, r10
    1c88:	b4 01       	movw	r22, r8
    1c8a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1c8e:	9b 01       	movw	r18, r22
    1c90:	ac 01       	movw	r20, r24
    1c92:	69 81       	ldd	r22, Y+1	; 0x01
    1c94:	7a 81       	ldd	r23, Y+2	; 0x02
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1c9e:	69 83       	std	Y+1, r22	; 0x01
    1ca0:	7a 83       	std	Y+2, r23	; 0x02
    1ca2:	8b 83       	std	Y+3, r24	; 0x03
    1ca4:	9c 83       	std	Y+4, r25	; 0x04
	DL = (1.914600 - 0.004817*T - 0.000014*T2)*sinf(dr*M);
    1ca6:	2d ee       	ldi	r18, 0xED	; 237
    1ca8:	37 ed       	ldi	r19, 0xD7	; 215
    1caa:	4d e9       	ldi	r20, 0x9D	; 157
    1cac:	5b e3       	ldi	r21, 0x3B	; 59
    1cae:	c7 01       	movw	r24, r14
    1cb0:	b6 01       	movw	r22, r12
    1cb2:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1cb6:	9b 01       	movw	r18, r22
    1cb8:	ac 01       	movw	r20, r24
    1cba:	6d e9       	ldi	r22, 0x9D	; 157
    1cbc:	71 e1       	ldi	r23, 0x11	; 17
    1cbe:	85 ef       	ldi	r24, 0xF5	; 245
    1cc0:	9f e3       	ldi	r25, 0x3F	; 63
    1cc2:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1cc6:	6d 83       	std	Y+5, r22	; 0x05
    1cc8:	7e 83       	std	Y+6, r23	; 0x06
    1cca:	8f 83       	std	Y+7, r24	; 0x07
    1ccc:	98 87       	std	Y+8, r25	; 0x08
    1cce:	2b e8       	ldi	r18, 0x8B	; 139
    1cd0:	31 ee       	ldi	r19, 0xE1	; 225
    1cd2:	4a e6       	ldi	r20, 0x6A	; 106
    1cd4:	57 e3       	ldi	r21, 0x37	; 55
    1cd6:	c5 01       	movw	r24, r10
    1cd8:	b4 01       	movw	r22, r8
    1cda:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1cde:	9b 01       	movw	r18, r22
    1ce0:	ac 01       	movw	r20, r24
    1ce2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ce4:	7e 81       	ldd	r23, Y+6	; 0x06
    1ce6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ce8:	98 85       	ldd	r25, Y+8	; 0x08
    1cea:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1cee:	4b 01       	movw	r8, r22
    1cf0:	5c 01       	movw	r10, r24
    1cf2:	25 e3       	ldi	r18, 0x35	; 53
    1cf4:	3a ef       	ldi	r19, 0xFA	; 250
    1cf6:	4e e8       	ldi	r20, 0x8E	; 142
    1cf8:	5c e3       	ldi	r21, 0x3C	; 60
    1cfa:	c3 01       	movw	r24, r6
    1cfc:	b2 01       	movw	r22, r4
    1cfe:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1d02:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <sin>
    1d06:	9b 01       	movw	r18, r22
    1d08:	ac 01       	movw	r20, r24
    1d0a:	c5 01       	movw	r24, r10
    1d0c:	b4 01       	movw	r22, r8
    1d0e:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1d12:	4b 01       	movw	r8, r22
    1d14:	5c 01       	movw	r10, r24
	DL = DL + (0.019993 - 0.000101*T)*sinf(dr*2*M) + 0.000290*sinf(dr*3*M);
    1d16:	26 ef       	ldi	r18, 0xF6	; 246
    1d18:	3f ec       	ldi	r19, 0xCF	; 207
    1d1a:	43 ed       	ldi	r20, 0xD3	; 211
    1d1c:	58 e3       	ldi	r21, 0x38	; 56
    1d1e:	c7 01       	movw	r24, r14
    1d20:	b6 01       	movw	r22, r12
    1d22:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1d26:	9b 01       	movw	r18, r22
    1d28:	ac 01       	movw	r20, r24
    1d2a:	6c e5       	ldi	r22, 0x5C	; 92
    1d2c:	78 ec       	ldi	r23, 0xC8	; 200
    1d2e:	83 ea       	ldi	r24, 0xA3	; 163
    1d30:	9c e3       	ldi	r25, 0x3C	; 60
    1d32:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1d36:	6b 01       	movw	r12, r22
    1d38:	7c 01       	movw	r14, r24
    1d3a:	25 e3       	ldi	r18, 0x35	; 53
    1d3c:	3a ef       	ldi	r19, 0xFA	; 250
    1d3e:	4e e0       	ldi	r20, 0x0E	; 14
    1d40:	5d e3       	ldi	r21, 0x3D	; 61
    1d42:	c3 01       	movw	r24, r6
    1d44:	b2 01       	movw	r22, r4
    1d46:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1d4a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <sin>
    1d4e:	9b 01       	movw	r18, r22
    1d50:	ac 01       	movw	r20, r24
    1d52:	c7 01       	movw	r24, r14
    1d54:	b6 01       	movw	r22, r12
    1d56:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1d5a:	9b 01       	movw	r18, r22
    1d5c:	ac 01       	movw	r20, r24
    1d5e:	c5 01       	movw	r24, r10
    1d60:	b4 01       	movw	r22, r8
    1d62:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1d66:	6b 01       	movw	r12, r22
    1d68:	7c 01       	movw	r14, r24
    1d6a:	20 e5       	ldi	r18, 0x50	; 80
    1d6c:	37 e7       	ldi	r19, 0x77	; 119
    1d6e:	46 e5       	ldi	r20, 0x56	; 86
    1d70:	5d e3       	ldi	r21, 0x3D	; 61
    1d72:	c3 01       	movw	r24, r6
    1d74:	b2 01       	movw	r22, r4
    1d76:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1d7a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <sin>
    1d7e:	24 e2       	ldi	r18, 0x24	; 36
    1d80:	3b e0       	ldi	r19, 0x0B	; 11
    1d82:	48 e9       	ldi	r20, 0x98	; 152
    1d84:	59 e3       	ldi	r21, 0x39	; 57
    1d86:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1d8a:	9b 01       	movw	r18, r22
    1d8c:	ac 01       	movw	r20, r24
    1d8e:	c7 01       	movw	r24, r14
    1d90:	b6 01       	movw	r22, r12
    1d92:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1d96:	9b 01       	movw	r18, r22
    1d98:	ac 01       	movw	r20, r24
	L = L0 + DL; // true longitude, degree
    1d9a:	69 81       	ldd	r22, Y+1	; 0x01
    1d9c:	7a 81       	ldd	r23, Y+2	; 0x02
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
	L = L*dr;
    1da6:	25 e3       	ldi	r18, 0x35	; 53
    1da8:	3a ef       	ldi	r19, 0xFA	; 250
    1daa:	4e e8       	ldi	r20, 0x8E	; 142
    1dac:	5c e3       	ldi	r21, 0x3C	; 60
    1dae:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1db2:	6b 01       	movw	r12, r22
    1db4:	7c 01       	movw	r14, r24
	L = L - M_PI*2*(floorf(L/(M_PI*2))); // Normalize to (0, 2*PI)
    1db6:	2b ed       	ldi	r18, 0xDB	; 219
    1db8:	3f e0       	ldi	r19, 0x0F	; 15
    1dba:	49 ec       	ldi	r20, 0xC9	; 201
    1dbc:	50 e4       	ldi	r21, 0x40	; 64
    1dbe:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__divsf3>
    1dc2:	0e 94 c7 14 	call	0x298e	; 0x298e <floor>
    1dc6:	2b ed       	ldi	r18, 0xDB	; 219
    1dc8:	3f e0       	ldi	r19, 0x0F	; 15
    1dca:	49 ec       	ldi	r20, 0xC9	; 201
    1dcc:	50 e4       	ldi	r21, 0x40	; 64
    1dce:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1dd2:	9b 01       	movw	r18, r22
    1dd4:	ac 01       	movw	r20, r24
    1dd6:	c7 01       	movw	r24, r14
    1dd8:	b6 01       	movw	r22, r12
    1dda:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
	return floorf(L / M_PI * 6);
    1dde:	2b ed       	ldi	r18, 0xDB	; 219
    1de0:	3f e0       	ldi	r19, 0x0F	; 15
    1de2:	49 e4       	ldi	r20, 0x49	; 73
    1de4:	50 e4       	ldi	r21, 0x40	; 64
    1de6:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__divsf3>
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 ec       	ldi	r20, 0xC0	; 192
    1df0:	50 e4       	ldi	r21, 0x40	; 64
    1df2:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    1df6:	0e 94 c7 14 	call	0x298e	; 0x298e <floor>
}
    1dfa:	28 96       	adiw	r28, 0x08	; 8
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	df 91       	pop	r29
    1e08:	cf 91       	pop	r28
    1e0a:	ff 90       	pop	r15
    1e0c:	ef 90       	pop	r14
    1e0e:	df 90       	pop	r13
    1e10:	cf 90       	pop	r12
    1e12:	bf 90       	pop	r11
    1e14:	af 90       	pop	r10
    1e16:	9f 90       	pop	r9
    1e18:	8f 90       	pop	r8
    1e1a:	7f 90       	pop	r7
    1e1c:	6f 90       	pop	r6
    1e1e:	5f 90       	pop	r5
    1e20:	4f 90       	pop	r4
    1e22:	08 95       	ret

00001e24 <getLunarMonth11>:

double getLunarMonth11(uint16_t yy, int timeZone)
{
    1e24:	8f 92       	push	r8
    1e26:	9f 92       	push	r9
    1e28:	af 92       	push	r10
    1e2a:	bf 92       	push	r11
    1e2c:	cf 92       	push	r12
    1e2e:	df 92       	push	r13
    1e30:	ef 92       	push	r14
    1e32:	ff 92       	push	r15
    1e34:	cf 93       	push	r28
    1e36:	df 93       	push	r29
    1e38:	eb 01       	movw	r28, r22
	long double k, off, nm, sunLong;
	off = jdFromDate(31, 12, yy) - 2415021;
    1e3a:	ac 01       	movw	r20, r24
    1e3c:	6c e0       	ldi	r22, 0x0C	; 12
    1e3e:	8f e1       	ldi	r24, 0x1F	; 31
    1e40:	0e 94 52 09 	call	0x12a4	; 0x12a4 <jdFromDate>
    1e44:	24 eb       	ldi	r18, 0xB4	; 180
    1e46:	36 e6       	ldi	r19, 0x66	; 102
    1e48:	43 e1       	ldi	r20, 0x13	; 19
    1e4a:	5a e4       	ldi	r21, 0x4A	; 74
    1e4c:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
	k = floorf(off / 29.530588853);
    1e50:	25 ea       	ldi	r18, 0xA5	; 165
    1e52:	3e e3       	ldi	r19, 0x3E	; 62
    1e54:	4c ee       	ldi	r20, 0xEC	; 236
    1e56:	51 e4       	ldi	r21, 0x41	; 65
    1e58:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__divsf3>
    1e5c:	0e 94 c7 14 	call	0x298e	; 0x298e <floor>
    1e60:	4b 01       	movw	r8, r22
    1e62:	5c 01       	movw	r10, r24
	nm = getNewMoonDay(k, timeZone);
    1e64:	ae 01       	movw	r20, r28
    1e66:	0e 94 38 0a 	call	0x1470	; 0x1470 <getNewMoonDay>
    1e6a:	6b 01       	movw	r12, r22
    1e6c:	7c 01       	movw	r14, r24
	sunLong = getSunLongitude(nm, timeZone); // sun longitude at local midnight
    1e6e:	ae 01       	movw	r20, r28
    1e70:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <getSunLongitude>
	if (sunLong >= 9) {
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e1       	ldi	r20, 0x10	; 16
    1e7a:	51 e4       	ldi	r21, 0x41	; 65
    1e7c:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__gesf2>
    1e80:	88 23       	and	r24, r24
    1e82:	6c f0       	brlt	.+26     	; 0x1e9e <getLunarMonth11+0x7a>
		nm = getNewMoonDay(k-1, timeZone);
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	40 e8       	ldi	r20, 0x80	; 128
    1e8a:	5f e3       	ldi	r21, 0x3F	; 63
    1e8c:	c5 01       	movw	r24, r10
    1e8e:	b4 01       	movw	r22, r8
    1e90:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1e94:	ae 01       	movw	r20, r28
    1e96:	0e 94 38 0a 	call	0x1470	; 0x1470 <getNewMoonDay>
    1e9a:	6b 01       	movw	r12, r22
    1e9c:	7c 01       	movw	r14, r24
	}
	return nm;
}
    1e9e:	c7 01       	movw	r24, r14
    1ea0:	b6 01       	movw	r22, r12
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	ff 90       	pop	r15
    1ea8:	ef 90       	pop	r14
    1eaa:	df 90       	pop	r13
    1eac:	cf 90       	pop	r12
    1eae:	bf 90       	pop	r11
    1eb0:	af 90       	pop	r10
    1eb2:	9f 90       	pop	r9
    1eb4:	8f 90       	pop	r8
    1eb6:	08 95       	ret

00001eb8 <getLeapMonthOffset>:

double getLeapMonthOffset(long double a11, int timeZone)
{
    1eb8:	2f 92       	push	r2
    1eba:	3f 92       	push	r3
    1ebc:	4f 92       	push	r4
    1ebe:	5f 92       	push	r5
    1ec0:	6f 92       	push	r6
    1ec2:	7f 92       	push	r7
    1ec4:	8f 92       	push	r8
    1ec6:	9f 92       	push	r9
    1ec8:	af 92       	push	r10
    1eca:	bf 92       	push	r11
    1ecc:	cf 92       	push	r12
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	ea 01       	movw	r28, r20
	long double k, last, arc, i;
	k = floorf((a11 - 2415021.076998695) / 29.530588853 + 0.5);
    1ede:	24 eb       	ldi	r18, 0xB4	; 180
    1ee0:	36 e6       	ldi	r19, 0x66	; 102
    1ee2:	43 e1       	ldi	r20, 0x13	; 19
    1ee4:	5a e4       	ldi	r21, 0x4A	; 74
    1ee6:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    1eea:	25 ea       	ldi	r18, 0xA5	; 165
    1eec:	3e e3       	ldi	r19, 0x3E	; 62
    1eee:	4c ee       	ldi	r20, 0xEC	; 236
    1ef0:	51 e4       	ldi	r21, 0x41	; 65
    1ef2:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__divsf3>
    1ef6:	20 e0       	ldi	r18, 0x00	; 0
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	40 e0       	ldi	r20, 0x00	; 0
    1efc:	5f e3       	ldi	r21, 0x3F	; 63
    1efe:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1f02:	0e 94 c7 14 	call	0x298e	; 0x298e <floor>
    1f06:	4b 01       	movw	r8, r22
    1f08:	5c 01       	movw	r10, r24
	last = 0;
	i = 1; // We start with the month following lunar month 11
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	40 e8       	ldi	r20, 0x80	; 128
    1f10:	5f e3       	ldi	r21, 0x3F	; 63
    1f12:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1f16:	ae 01       	movw	r20, r28
    1f18:	0e 94 38 0a 	call	0x1470	; 0x1470 <getNewMoonDay>
    1f1c:	ae 01       	movw	r20, r28
    1f1e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <getSunLongitude>
    1f22:	56 2e       	mov	r5, r22
    1f24:	47 2e       	mov	r4, r23
    1f26:	38 2e       	mov	r3, r24
    1f28:	29 2e       	mov	r2, r25
double getLeapMonthOffset(long double a11, int timeZone)
{
	long double k, last, arc, i;
	k = floorf((a11 - 2415021.076998695) / 29.530588853 + 0.5);
	last = 0;
	i = 1; // We start with the month following lunar month 11
    1f2a:	0f 2e       	mov	r0, r31
    1f2c:	c1 2c       	mov	r12, r1
    1f2e:	d1 2c       	mov	r13, r1
    1f30:	f0 e8       	ldi	r31, 0x80	; 128
    1f32:	ef 2e       	mov	r14, r31
    1f34:	ff e3       	ldi	r31, 0x3F	; 63
    1f36:	ff 2e       	mov	r15, r31
    1f38:	f0 2d       	mov	r31, r0
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
	do {
		last = arc;
		i++;
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e8       	ldi	r20, 0x80	; 128
    1f40:	5f e3       	ldi	r21, 0x3F	; 63
    1f42:	c7 01       	movw	r24, r14
    1f44:	b6 01       	movw	r22, r12
    1f46:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1f4a:	6b 01       	movw	r12, r22
    1f4c:	7c 01       	movw	r14, r24
		arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    1f4e:	9b 01       	movw	r18, r22
    1f50:	ac 01       	movw	r20, r24
    1f52:	c5 01       	movw	r24, r10
    1f54:	b4 01       	movw	r22, r8
    1f56:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    1f5a:	ae 01       	movw	r20, r28
    1f5c:	0e 94 38 0a 	call	0x1470	; 0x1470 <getNewMoonDay>
    1f60:	ae 01       	movw	r20, r28
    1f62:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <getSunLongitude>
    1f66:	16 2f       	mov	r17, r22
    1f68:	07 2f       	mov	r16, r23
    1f6a:	78 2e       	mov	r7, r24
    1f6c:	69 2e       	mov	r6, r25
	} while (arc != last && i < 14);
    1f6e:	26 2f       	mov	r18, r22
    1f70:	37 2f       	mov	r19, r23
    1f72:	48 2f       	mov	r20, r24
    1f74:	59 2f       	mov	r21, r25
    1f76:	65 2d       	mov	r22, r5
    1f78:	74 2d       	mov	r23, r4
    1f7a:	83 2d       	mov	r24, r3
    1f7c:	92 2d       	mov	r25, r2
    1f7e:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__cmpsf2>
    1f82:	88 23       	and	r24, r24
    1f84:	71 f0       	breq	.+28     	; 0x1fa2 <getLeapMonthOffset+0xea>
	i = 1; // We start with the month following lunar month 11
	arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
	do {
		last = arc;
		i++;
		arc = getSunLongitude(getNewMoonDay(k+i, timeZone), timeZone);
    1f86:	51 2e       	mov	r5, r17
    1f88:	40 2e       	mov	r4, r16
    1f8a:	37 2c       	mov	r3, r7
    1f8c:	26 2c       	mov	r2, r6
	} while (arc != last && i < 14);
    1f8e:	20 e0       	ldi	r18, 0x00	; 0
    1f90:	30 e0       	ldi	r19, 0x00	; 0
    1f92:	40 e6       	ldi	r20, 0x60	; 96
    1f94:	51 e4       	ldi	r21, 0x41	; 65
    1f96:	c7 01       	movw	r24, r14
    1f98:	b6 01       	movw	r22, r12
    1f9a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__cmpsf2>
    1f9e:	88 23       	and	r24, r24
    1fa0:	64 f2       	brlt	.-104    	; 0x1f3a <getLeapMonthOffset+0x82>
	return i-1;
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e8       	ldi	r20, 0x80	; 128
    1fa8:	5f e3       	ldi	r21, 0x3F	; 63
    1faa:	c7 01       	movw	r24, r14
    1fac:	b6 01       	movw	r22, r12
    1fae:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
}
    1fb2:	df 91       	pop	r29
    1fb4:	cf 91       	pop	r28
    1fb6:	1f 91       	pop	r17
    1fb8:	0f 91       	pop	r16
    1fba:	ff 90       	pop	r15
    1fbc:	ef 90       	pop	r14
    1fbe:	df 90       	pop	r13
    1fc0:	cf 90       	pop	r12
    1fc2:	bf 90       	pop	r11
    1fc4:	af 90       	pop	r10
    1fc6:	9f 90       	pop	r9
    1fc8:	8f 90       	pop	r8
    1fca:	7f 90       	pop	r7
    1fcc:	6f 90       	pop	r6
    1fce:	5f 90       	pop	r5
    1fd0:	4f 90       	pop	r4
    1fd2:	3f 90       	pop	r3
    1fd4:	2f 90       	pop	r2
    1fd6:	08 95       	ret

00001fd8 <convertSolar2Lunar>:

double convertSolar2Lunar(uint8_t dd, uint8_t mm, uint16_t yy, int timeZone)
{
    1fd8:	2f 92       	push	r2
    1fda:	3f 92       	push	r3
    1fdc:	4f 92       	push	r4
    1fde:	5f 92       	push	r5
    1fe0:	6f 92       	push	r6
    1fe2:	7f 92       	push	r7
    1fe4:	8f 92       	push	r8
    1fe6:	9f 92       	push	r9
    1fe8:	af 92       	push	r10
    1fea:	bf 92       	push	r11
    1fec:	cf 92       	push	r12
    1fee:	df 92       	push	r13
    1ff0:	ef 92       	push	r14
    1ff2:	ff 92       	push	r15
    1ff4:	0f 93       	push	r16
    1ff6:	1f 93       	push	r17
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	ea 01       	movw	r28, r20
    1ffe:	19 01       	movw	r2, r18
	long double k, dayNumber, monthStart, a11, b11, diff, leapMonthDiff;
	dayNumber = jdFromDate(dd, mm, yy);
    2000:	0e 94 52 09 	call	0x12a4	; 0x12a4 <jdFromDate>
    2004:	4b 01       	movw	r8, r22
    2006:	5c 01       	movw	r10, r24
	k = floorf((dayNumber - 2415021.076998695) / 29.530588853);
    2008:	24 eb       	ldi	r18, 0xB4	; 180
    200a:	36 e6       	ldi	r19, 0x66	; 102
    200c:	43 e1       	ldi	r20, 0x13	; 19
    200e:	5a e4       	ldi	r21, 0x4A	; 74
    2010:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    2014:	25 ea       	ldi	r18, 0xA5	; 165
    2016:	3e e3       	ldi	r19, 0x3E	; 62
    2018:	4c ee       	ldi	r20, 0xEC	; 236
    201a:	51 e4       	ldi	r21, 0x41	; 65
    201c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__divsf3>
    2020:	0e 94 c7 14 	call	0x298e	; 0x298e <floor>
    2024:	2b 01       	movw	r4, r22
    2026:	3c 01       	movw	r6, r24
	monthStart = getNewMoonDay(k+1, timeZone);
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    2034:	a1 01       	movw	r20, r2
    2036:	0e 94 38 0a 	call	0x1470	; 0x1470 <getNewMoonDay>
    203a:	6b 01       	movw	r12, r22
    203c:	7c 01       	movw	r14, r24
	if (monthStart > dayNumber) {
    203e:	9b 01       	movw	r18, r22
    2040:	ac 01       	movw	r20, r24
    2042:	c5 01       	movw	r24, r10
    2044:	b4 01       	movw	r22, r8
    2046:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__cmpsf2>
    204a:	88 23       	and	r24, r24
    204c:	3c f4       	brge	.+14     	; 0x205c <convertSolar2Lunar+0x84>
		monthStart = getNewMoonDay(k, timeZone);
    204e:	a1 01       	movw	r20, r2
    2050:	c3 01       	movw	r24, r6
    2052:	b2 01       	movw	r22, r4
    2054:	0e 94 38 0a 	call	0x1470	; 0x1470 <getNewMoonDay>
    2058:	6b 01       	movw	r12, r22
    205a:	7c 01       	movw	r14, r24
	}
	a11 = getLunarMonth11(yy, timeZone);
    205c:	b1 01       	movw	r22, r2
    205e:	ce 01       	movw	r24, r28
    2060:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <getLunarMonth11>
    2064:	16 2f       	mov	r17, r22
    2066:	07 2f       	mov	r16, r23
    2068:	78 2e       	mov	r7, r24
    206a:	69 2e       	mov	r6, r25
	b11 = a11;
	if (a11 >= monthStart) {
    206c:	26 2f       	mov	r18, r22
    206e:	37 2f       	mov	r19, r23
    2070:	48 2f       	mov	r20, r24
    2072:	59 2f       	mov	r21, r25
    2074:	c7 01       	movw	r24, r14
    2076:	b6 01       	movw	r22, r12
    2078:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__cmpsf2>
    207c:	18 16       	cp	r1, r24
    207e:	94 f0       	brlt	.+36     	; 0x20a4 <convertSolar2Lunar+0xcc>
		lunarYear = yy;
    2080:	d0 93 87 00 	sts	0x0087, r29	; 0x800087 <lunarYear+0x1>
    2084:	c0 93 86 00 	sts	0x0086, r28	; 0x800086 <lunarYear>
		a11 = getLunarMonth11(yy-1, timeZone);
    2088:	b1 01       	movw	r22, r2
    208a:	ce 01       	movw	r24, r28
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <getLunarMonth11>
	monthStart = getNewMoonDay(k+1, timeZone);
	if (monthStart > dayNumber) {
		monthStart = getNewMoonDay(k, timeZone);
	}
	a11 = getLunarMonth11(yy, timeZone);
	b11 = a11;
    2092:	c1 2f       	mov	r28, r17
    2094:	d0 2f       	mov	r29, r16
    2096:	57 2c       	mov	r5, r7
    2098:	46 2c       	mov	r4, r6
	if (a11 >= monthStart) {
		lunarYear = yy;
		a11 = getLunarMonth11(yy-1, timeZone);
    209a:	16 2f       	mov	r17, r22
    209c:	07 2f       	mov	r16, r23
    209e:	78 2e       	mov	r7, r24
    20a0:	69 2e       	mov	r6, r25
    20a2:	0d c0       	rjmp	.+26     	; 0x20be <convertSolar2Lunar+0xe6>
		} else {
		lunarYear = yy+1;
    20a4:	ce 01       	movw	r24, r28
    20a6:	01 96       	adiw	r24, 0x01	; 1
    20a8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <lunarYear+0x1>
    20ac:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <lunarYear>
		b11 = getLunarMonth11(yy+1, timeZone);
    20b0:	b1 01       	movw	r22, r2
    20b2:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <getLunarMonth11>
    20b6:	c6 2f       	mov	r28, r22
    20b8:	d7 2f       	mov	r29, r23
    20ba:	58 2e       	mov	r5, r24
    20bc:	49 2e       	mov	r4, r25
	}
	lunarDate = dayNumber-monthStart+1;
    20be:	a7 01       	movw	r20, r14
    20c0:	96 01       	movw	r18, r12
    20c2:	c5 01       	movw	r24, r10
    20c4:	b4 01       	movw	r22, r8
    20c6:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e8       	ldi	r20, 0x80	; 128
    20d0:	5f e3       	ldi	r21, 0x3F	; 63
    20d2:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    20d6:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__fixunssfsi>
    20da:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <lunarDate>
	diff = floorf((monthStart - a11)/29);
    20de:	21 2f       	mov	r18, r17
    20e0:	30 2f       	mov	r19, r16
    20e2:	47 2d       	mov	r20, r7
    20e4:	56 2d       	mov	r21, r6
    20e6:	c7 01       	movw	r24, r14
    20e8:	b6 01       	movw	r22, r12
    20ea:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	48 ee       	ldi	r20, 0xE8	; 232
    20f4:	51 e4       	ldi	r21, 0x41	; 65
    20f6:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <__divsf3>
    20fa:	0e 94 c7 14 	call	0x298e	; 0x298e <floor>
    20fe:	6b 01       	movw	r12, r22
    2100:	7c 01       	movw	r14, r24
	lunarMonth = diff+11;
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e3       	ldi	r20, 0x30	; 48
    2108:	51 e4       	ldi	r21, 0x41	; 65
    210a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    210e:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__fixunssfsi>
    2112:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <lunarMonth>
	if (b11 - a11 > 365) {
    2116:	21 2f       	mov	r18, r17
    2118:	30 2f       	mov	r19, r16
    211a:	47 2d       	mov	r20, r7
    211c:	56 2d       	mov	r21, r6
    211e:	6c 2f       	mov	r22, r28
    2120:	7d 2f       	mov	r23, r29
    2122:	85 2d       	mov	r24, r5
    2124:	94 2d       	mov	r25, r4
    2126:	0e 94 77 13 	call	0x26ee	; 0x26ee <__subsf3>
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e8       	ldi	r19, 0x80	; 128
    212e:	46 eb       	ldi	r20, 0xB6	; 182
    2130:	53 e4       	ldi	r21, 0x43	; 67
    2132:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__gesf2>
    2136:	18 16       	cp	r1, r24
    2138:	dc f4       	brge	.+54     	; 0x2170 <convertSolar2Lunar+0x198>
		leapMonthDiff = getLeapMonthOffset(a11, timeZone);
    213a:	a1 01       	movw	r20, r2
    213c:	61 2f       	mov	r22, r17
    213e:	70 2f       	mov	r23, r16
    2140:	87 2d       	mov	r24, r7
    2142:	96 2d       	mov	r25, r6
    2144:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <getLeapMonthOffset>
    2148:	9b 01       	movw	r18, r22
    214a:	ac 01       	movw	r20, r24
		if (diff >= leapMonthDiff) {
    214c:	c7 01       	movw	r24, r14
    214e:	b6 01       	movw	r22, r12
    2150:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__gesf2>
    2154:	88 23       	and	r24, r24
    2156:	64 f0       	brlt	.+24     	; 0x2170 <convertSolar2Lunar+0x198>
			lunarMonth = diff + 10;
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e2       	ldi	r20, 0x20	; 32
    215e:	51 e4       	ldi	r21, 0x41	; 65
    2160:	c7 01       	movw	r24, r14
    2162:	b6 01       	movw	r22, r12
    2164:	0e 94 78 13 	call	0x26f0	; 0x26f0 <__addsf3>
    2168:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <__fixunssfsi>
    216c:	60 93 79 00 	sts	0x0079, r22	; 0x800079 <lunarMonth>
		}
	}
	if (lunarMonth > 12) {
    2170:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <lunarMonth>
    2174:	8d 30       	cpi	r24, 0x0D	; 13
    2176:	18 f0       	brcs	.+6      	; 0x217e <convertSolar2Lunar+0x1a6>
		lunarMonth = lunarMonth - 12;
    2178:	8c 50       	subi	r24, 0x0C	; 12
    217a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <lunarMonth>
	}
	if (lunarMonth >= 11 && diff < 4) {
    217e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <lunarMonth>
    2182:	8b 30       	cpi	r24, 0x0B	; 11
    2184:	98 f0       	brcs	.+38     	; 0x21ac <convertSolar2Lunar+0x1d4>
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e8       	ldi	r20, 0x80	; 128
    218c:	50 e4       	ldi	r21, 0x40	; 64
    218e:	c7 01       	movw	r24, r14
    2190:	b6 01       	movw	r22, r12
    2192:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__cmpsf2>
    2196:	88 23       	and	r24, r24
    2198:	4c f4       	brge	.+18     	; 0x21ac <convertSolar2Lunar+0x1d4>
		lunarYear -= 1;
    219a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <lunarYear>
    219e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <lunarYear+0x1>
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <lunarYear+0x1>
    21a8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <lunarYear>
	}
	return 0;
}
    21ac:	60 e0       	ldi	r22, 0x00	; 0
    21ae:	70 e0       	ldi	r23, 0x00	; 0
    21b0:	cb 01       	movw	r24, r22
    21b2:	df 91       	pop	r29
    21b4:	cf 91       	pop	r28
    21b6:	1f 91       	pop	r17
    21b8:	0f 91       	pop	r16
    21ba:	ff 90       	pop	r15
    21bc:	ef 90       	pop	r14
    21be:	df 90       	pop	r13
    21c0:	cf 90       	pop	r12
    21c2:	bf 90       	pop	r11
    21c4:	af 90       	pop	r10
    21c6:	9f 90       	pop	r9
    21c8:	8f 90       	pop	r8
    21ca:	7f 90       	pop	r7
    21cc:	6f 90       	pop	r6
    21ce:	5f 90       	pop	r5
    21d0:	4f 90       	pop	r4
    21d2:	3f 90       	pop	r3
    21d4:	2f 90       	pop	r2
    21d6:	08 95       	ret

000021d8 <Init_Timer0>:
//--------------------------------------------------------------------

void Init_Timer0(void){
	//Initialize Timer0 to 1s - overflow interrupt--------------------
    TCCR0=(1<<CS02)|(0<<CS01)|(1<<CS00);	//prescaler, clk/1024
    21d8:	85 e0       	ldi	r24, 0x05	; 5
    21da:	83 bf       	out	0x33, r24	; 51
	
    TIMSK=(1<<TOIE0);						
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	89 bf       	out	0x39, r24	; 57
    sei();                      			
    21e0:	78 94       	sei
    21e2:	08 95       	ret

000021e4 <Init_btn>:


void Init_btn(void){

	//------------------Initialize button------------
	BTN_DDRD  &= ~((1<<SW)|(1<<ADJ));		// set input cho button setting
    21e4:	81 b3       	in	r24, 0x11	; 17
    21e6:	83 7f       	andi	r24, 0xF3	; 243
    21e8:	81 bb       	out	0x11, r24	; 17
	BTN_DDRD |= (1<<BUZ_LED);			// set output cho buzzer + led
    21ea:	81 b3       	in	r24, 0x11	; 17
    21ec:	80 68       	ori	r24, 0x80	; 128
    21ee:	81 bb       	out	0x11, r24	; 17
	BTN_DDRD &= ~(1<<BUZ_LED);
    21f0:	81 b3       	in	r24, 0x11	; 17
    21f2:	8f 77       	andi	r24, 0x7F	; 127
    21f4:	81 bb       	out	0x11, r24	; 17
	BTN_PORTD |= (1<<SW)|(1<<ADJ);	// set dien tro keo len cho button setting
    21f6:	82 b3       	in	r24, 0x12	; 18
    21f8:	8c 60       	ori	r24, 0x0C	; 12
    21fa:	82 bb       	out	0x12, r24	; 18
	BTN_DDRB &= ~(1<<INCR);
    21fc:	87 b3       	in	r24, 0x17	; 23
    21fe:	8b 7f       	andi	r24, 0xFB	; 251
    2200:	87 bb       	out	0x17, r24	; 23
	BTN_PORTB |= (1<<INCR);
    2202:	88 b3       	in	r24, 0x18	; 24
    2204:	84 60       	ori	r24, 0x04	; 4
    2206:	88 bb       	out	0x18, r24	; 24
	userled_DDR|=(1<<userled);
    2208:	8a b3       	in	r24, 0x1a	; 26
    220a:	81 60       	ori	r24, 0x01	; 1
    220c:	8a bb       	out	0x1a, r24	; 26
    220e:	08 95       	ret

00002210 <Init_interupt>:
}

void Init_interupt(void){
	MCUCR=(0<<ISC11)|(0<<ISC10)|(0<<ISC01)|(0<<ISC00);
    2210:	15 be       	out	0x35, r1	; 53
	MCUCSR=(0<<ISC2);
    2212:	14 be       	out	0x34, r1	; 52
	GICR=(1<<INT2)|(1<<INT1)|(1<<INT0);
    2214:	80 ee       	ldi	r24, 0xE0	; 224
    2216:	8b bf       	out	0x3b, r24	; 59
	sei();
    2218:	78 94       	sei
    221a:	08 95       	ret

0000221c <main>:
//Main program
int main(void){	
	
	//MAX7219 init
	// SCK MOSI CS/LOAD/SS
	DDRB |= (1 << PIN_SCK) | (1 << PIN_MOSI) | (1 << PIN_SS);
    221c:	87 b3       	in	r24, 0x17	; 23
    221e:	80 6b       	ori	r24, 0xB0	; 176
    2220:	87 bb       	out	0x17, r24	; 23

	// SPI Enable, Master mode
	SPCR |= (1 << SPE) | (1 << MSTR)| (1<<SPR1);
    2222:	8d b1       	in	r24, 0x0d	; 13
    2224:	82 65       	ori	r24, 0x52	; 82
    2226:	8d b9       	out	0x0d, r24	; 13

	
	// Scan limit runs from 0.
	MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT, 0x07);
    2228:	67 e0       	ldi	r22, 0x07	; 7
    222a:	8b e0       	ldi	r24, 0x0B	; 11
    222c:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_INTENSITY, 0x05);
    2230:	65 e0       	ldi	r22, 0x05	; 5
    2232:	8a e0       	ldi	r24, 0x0A	; 10
    2234:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_POWER, ON);
    2238:	61 e0       	ldi	r22, 0x01	; 1
    223a:	8c e0       	ldi	r24, 0x0C	; 12
    223c:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_DECODE, 0xFF);
    2240:	6f ef       	ldi	r22, 0xFF	; 255
    2242:	89 e0       	ldi	r24, 0x09	; 9
    2244:	0e 94 c0 01 	call	0x380	; 0x380 <MAX7219_writeData>
	
	//FixTime();
	Init_btn();// KEY_PORT=0xF8;
    2248:	0e 94 f2 10 	call	0x21e4	; 0x21e4 <Init_btn>

	
	//------------------------------------
	sei();
    224c:	78 94       	sei
	Init_Timer0();
    224e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <Init_Timer0>
	
	Init_interupt();
    2252:	0e 94 08 11 	call	0x2210	; 0x2210 <Init_interupt>
	
	TWI_Init(); 
    2256:	0e 94 58 00 	call	0xb0	; 0xb0 <TWI_Init>
			
	TWI_DS1307_rblock(tData,7); 
    225a:	67 e0       	ldi	r22, 0x07	; 7
    225c:	8f e7       	ldi	r24, 0x7F	; 127
    225e:	90 e0       	ldi	r25, 0x00	; 0
    2260:	0e 94 c3 00 	call	0x186	; 0x186 <TWI_DS1307_rblock>
	
	Decode(); 	//BCD data converter function from DS1307 to DEC
    2264:	0e 94 29 01 	call	0x252	; 0x252 <Decode>
    2268:	8f ec       	ldi	r24, 0xCF	; 207
    226a:	97 e0       	ldi	r25, 0x07	; 7
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	f1 f7       	brne	.-4      	; 0x226c <main+0x50>
    2270:	00 c0       	rjmp	.+0      	; 0x2272 <main+0x56>
    2272:	00 00       	nop
	
	_delay_ms(1);	
	userled_PORT |= (1<<userled);
    2274:	8b b3       	in	r24, 0x1b	; 27
    2276:	81 60       	ori	r24, 0x01	; 1
    2278:	8b bb       	out	0x1b, r24	; 27
	//************************************************************************************
	while(1){
		
		yyyy=Year+2000;
    227a:	40 91 63 00 	lds	r20, 0x0063	; 0x800063 <Year>
    227e:	50 e0       	ldi	r21, 0x00	; 0
    2280:	40 53       	subi	r20, 0x30	; 48
    2282:	58 4f       	sbci	r21, 0xF8	; 248
    2284:	50 93 77 00 	sts	0x0077, r21	; 0x800077 <yyyy+0x1>
    2288:	40 93 76 00 	sts	0x0076, r20	; 0x800076 <yyyy>
		convertSolar2Lunar(Date, Month, yyyy, timeZone);	
    228c:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <timeZone>
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <Month>
    2296:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <Date>
    229a:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <convertSolar2Lunar>
		
		Display_7seg();
    229e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Display_7seg>
    22a2:	eb cf       	rjmp	.-42     	; 0x227a <main+0x5e>

000022a4 <__vector_11>:
	return 0;
}

char data[5];

ISR(TIMER0_OVF_vect){ 	
    22a4:	1f 92       	push	r1
    22a6:	0f 92       	push	r0
    22a8:	0f b6       	in	r0, 0x3f	; 63
    22aa:	0f 92       	push	r0
    22ac:	11 24       	eor	r1, r1
    22ae:	2f 93       	push	r18
    22b0:	3f 93       	push	r19
    22b2:	4f 93       	push	r20
    22b4:	5f 93       	push	r21
    22b6:	6f 93       	push	r22
    22b8:	7f 93       	push	r23
    22ba:	8f 93       	push	r24
    22bc:	9f 93       	push	r25
    22be:	af 93       	push	r26
    22c0:	bf 93       	push	r27
    22c2:	ef 93       	push	r30
    22c4:	ff 93       	push	r31
	Time_count++;
    22c6:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <Time_count>
    22ca:	90 91 70 00 	lds	r25, 0x0070	; 0x800070 <Time_count+0x1>
    22ce:	01 96       	adiw	r24, 0x01	; 1
    22d0:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <Time_count+0x1>
    22d4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <Time_count>
	blink_count++;
    22d8:	20 91 6d 00 	lds	r18, 0x006D	; 0x80006d <blink_count>
    22dc:	30 91 6e 00 	lds	r19, 0x006E	; 0x80006e <blink_count+0x1>
    22e0:	2f 5f       	subi	r18, 0xFF	; 255
    22e2:	3f 4f       	sbci	r19, 0xFF	; 255
    22e4:	30 93 6e 00 	sts	0x006E, r19	; 0x80006e <blink_count+0x1>
    22e8:	20 93 6d 00 	sts	0x006D, r18	; 0x80006d <blink_count>
	if(Time_count>=10){ 	//1s Exactly
    22ec:	0a 97       	sbiw	r24, 0x0a	; 10
    22ee:	08 f1       	brcs	.+66     	; 0x2332 <__vector_11+0x8e>
		                
		if(set == false ){
    22f0:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <set>
    22f4:	81 11       	cpse	r24, r1
    22f6:	19 c0       	rjmp	.+50     	; 0x232a <__vector_11+0x86>
			//Read DS1307
			TWI_DS1307_wadr(0x00); 				
    22f8:	0e 94 5e 00 	call	0xbc	; 0xbc <TWI_DS1307_wadr>
    22fc:	8f ec       	ldi	r24, 0xCF	; 207
    22fe:	97 e0       	ldi	r25, 0x07	; 7
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <__vector_11+0x5c>
    2304:	00 c0       	rjmp	.+0      	; 0x2306 <__vector_11+0x62>
    2306:	00 00       	nop
			_delay_ms(1);		   				
			TWI_DS1307_rblock(tData,7); 
    2308:	67 e0       	ldi	r22, 0x07	; 7
    230a:	8f e7       	ldi	r24, 0x7F	; 127
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 c3 00 	call	0x186	; 0x186 <TWI_DS1307_rblock>
					
			//Print result on 7Seg led		
			if(BCDToDec(tData[0]) !=Second){ 
    2312:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <tData>
    2316:	0e 94 06 01 	call	0x20c	; 0x20c <BCDToDec>
    231a:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <Second>
    231e:	89 17       	cp	r24, r25
    2320:	21 f0       	breq	.+8      	; 0x232a <__vector_11+0x86>
				Decode();			
    2322:	0e 94 29 01 	call	0x252	; 0x252 <Decode>
				Display_7seg();
    2326:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Display_7seg>
			} 
		}
		Time_count=0; 
    232a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <Time_count+0x1>
    232e:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <Time_count>
	}
	if (blink_count>=15)	//blink 500ms
    2332:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <blink_count>
    2336:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <blink_count+0x1>
    233a:	0f 97       	sbiw	r24, 0x0f	; 15
    233c:	80 f0       	brcs	.+32     	; 0x235e <__vector_11+0xba>
	{
		if(set == true ){
    233e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <set>
    2342:	88 23       	and	r24, r24
    2344:	41 f0       	breq	.+16     	; 0x2356 <__vector_11+0xb2>
				blinkmode^=1;
    2346:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <blinkmode>
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	89 27       	eor	r24, r25
    234e:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <blinkmode>
				Display_7seg();
    2352:	0e 94 da 01 	call	0x3b4	; 0x3b4 <Display_7seg>
		}
		blink_count=0;
    2356:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <blink_count+0x1>
    235a:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <blink_count>
	}
}
    235e:	ff 91       	pop	r31
    2360:	ef 91       	pop	r30
    2362:	bf 91       	pop	r27
    2364:	af 91       	pop	r26
    2366:	9f 91       	pop	r25
    2368:	8f 91       	pop	r24
    236a:	7f 91       	pop	r23
    236c:	6f 91       	pop	r22
    236e:	5f 91       	pop	r21
    2370:	4f 91       	pop	r20
    2372:	3f 91       	pop	r19
    2374:	2f 91       	pop	r18
    2376:	0f 90       	pop	r0
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	0f 90       	pop	r0
    237c:	1f 90       	pop	r1
    237e:	18 95       	reti

00002380 <__vector_1>:


//SW mode button
ISR(INT0_vect){
    2380:	1f 92       	push	r1
    2382:	0f 92       	push	r0
    2384:	0f b6       	in	r0, 0x3f	; 63
    2386:	0f 92       	push	r0
    2388:	11 24       	eor	r1, r1
    238a:	2f 93       	push	r18
    238c:	3f 93       	push	r19
    238e:	4f 93       	push	r20
    2390:	5f 93       	push	r21
    2392:	6f 93       	push	r22
    2394:	7f 93       	push	r23
    2396:	8f 93       	push	r24
    2398:	9f 93       	push	r25
    239a:	af 93       	push	r26
    239c:	bf 93       	push	r27
    239e:	ef 93       	push	r30
    23a0:	ff 93       	push	r31
	
	if(set==false){
    23a2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <set>
    23a6:	81 11       	cpse	r24, r1
    23a8:	09 c0       	rjmp	.+18     	; 0x23bc <__vector_1+0x3c>
		SW_time_date++;
    23aa:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__data_end>
    23ae:	9f 5f       	subi	r25, 0xFF	; 255
    23b0:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__data_end>
		if(SW_time_date > 3){
    23b4:	94 30       	cpi	r25, 0x04	; 4
    23b6:	10 f0       	brcs	.+4      	; 0x23bc <__vector_1+0x3c>
			SW_time_date = 0;
    23b8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
		}
	}
	if(SW_time_date==0 && set==true) {
    23bc:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__data_end>
    23c0:	91 11       	cpse	r25, r1
    23c2:	0c c0       	rjmp	.+24     	; 0x23dc <__vector_1+0x5c>
    23c4:	88 23       	and	r24, r24
    23c6:	51 f0       	breq	.+20     	; 0x23dc <__vector_1+0x5c>
		SW_time_date = 0;
    23c8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
		count=0;
    23cc:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <count>
		blinkmode=0;
    23d0:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <blinkmode>
		FixTime();
    23d4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <FixTime>
		set=false;
    23d8:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <set>
	}
	if(SW_time_date==1 && set==true) {
    23dc:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
    23e0:	81 30       	cpi	r24, 0x01	; 1
    23e2:	79 f4       	brne	.+30     	; 0x2402 <__vector_1+0x82>
    23e4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <set>
    23e8:	88 23       	and	r24, r24
    23ea:	59 f0       	breq	.+22     	; 0x2402 <__vector_1+0x82>
		SW_time_date = 1;
    23ec:	81 e0       	ldi	r24, 0x01	; 1
    23ee:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
		count=0;
    23f2:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <count>
		blinkmode=0;
    23f6:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <blinkmode>
		FixTime();
    23fa:	0e 94 64 01 	call	0x2c8	; 0x2c8 <FixTime>
		set=false;
    23fe:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <set>
	}
	if(SW_time_date==3 && set==true) {
    2402:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
    2406:	83 30       	cpi	r24, 0x03	; 3
    2408:	81 f4       	brne	.+32     	; 0x242a <__vector_1+0xaa>
    240a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <set>
    240e:	88 23       	and	r24, r24
    2410:	61 f0       	breq	.+24     	; 0x242a <__vector_1+0xaa>
		SW_time_date = 3;
    2412:	83 e0       	ldi	r24, 0x03	; 3
    2414:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
		count=0;
    2418:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <count>
		blinkmode=0;
    241c:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <blinkmode>
		EN_alarm=true;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <EN_alarm>
		set=false;
    2426:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <set>
	}
}
    242a:	ff 91       	pop	r31
    242c:	ef 91       	pop	r30
    242e:	bf 91       	pop	r27
    2430:	af 91       	pop	r26
    2432:	9f 91       	pop	r25
    2434:	8f 91       	pop	r24
    2436:	7f 91       	pop	r23
    2438:	6f 91       	pop	r22
    243a:	5f 91       	pop	r21
    243c:	4f 91       	pop	r20
    243e:	3f 91       	pop	r19
    2440:	2f 91       	pop	r18
    2442:	0f 90       	pop	r0
    2444:	0f be       	out	0x3f, r0	; 63
    2446:	0f 90       	pop	r0
    2448:	1f 90       	pop	r1
    244a:	18 95       	reti

0000244c <__vector_2>:


//Set time button
ISR(INT1_vect){
    244c:	1f 92       	push	r1
    244e:	0f 92       	push	r0
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	0f 92       	push	r0
    2454:	11 24       	eor	r1, r1
    2456:	8f 93       	push	r24
    2458:	9f 93       	push	r25

	if (SW_time_date==0)
    245a:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
    245e:	81 11       	cpse	r24, r1
    2460:	10 c0       	rjmp	.+32     	; 0x2482 <__vector_2+0x36>
	{
		set = true;
    2462:	91 e0       	ldi	r25, 0x01	; 1
    2464:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <set>
		count++;
    2468:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <count>
    246c:	9f 5f       	subi	r25, 0xFF	; 255
    246e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <count>
		if(count > 4) {
    2472:	95 30       	cpi	r25, 0x05	; 5
    2474:	30 f0       	brcs	.+12     	; 0x2482 <__vector_2+0x36>
			count = 0;
    2476:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <count>
			blinkmode=0;
    247a:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <blinkmode>
			set=false;
    247e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <set>
		}
	}
	if (SW_time_date==1)
    2482:	81 30       	cpi	r24, 0x01	; 1
    2484:	81 f4       	brne	.+32     	; 0x24a6 <__vector_2+0x5a>
	{
		set = true;
    2486:	91 e0       	ldi	r25, 0x01	; 1
    2488:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <set>
		count++;
    248c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <count>
    2490:	9f 5f       	subi	r25, 0xFF	; 255
    2492:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <count>
		if(count > 3) {
    2496:	94 30       	cpi	r25, 0x04	; 4
    2498:	30 f0       	brcs	.+12     	; 0x24a6 <__vector_2+0x5a>
			count = 0;
    249a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <count>
			blinkmode=0;
    249e:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <blinkmode>
			set=false;
    24a2:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <set>
		}
	}
	if (SW_time_date==3)
    24a6:	83 30       	cpi	r24, 0x03	; 3
    24a8:	91 f4       	brne	.+36     	; 0x24ce <__vector_2+0x82>
	{
		set = true;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <set>
		count++;
    24b0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count>
    24b4:	8f 5f       	subi	r24, 0xFF	; 255
    24b6:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <count>
		if(count > 2) {
    24ba:	83 30       	cpi	r24, 0x03	; 3
    24bc:	40 f0       	brcs	.+16     	; 0x24ce <__vector_2+0x82>
			count = 0;
    24be:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <count>
			blinkmode=0;
    24c2:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <blinkmode>
			EN_alarm=false;
    24c6:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <EN_alarm>
			set=false;
    24ca:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <set>
		}
	}
}
    24ce:	9f 91       	pop	r25
    24d0:	8f 91       	pop	r24
    24d2:	0f 90       	pop	r0
    24d4:	0f be       	out	0x3f, r0	; 63
    24d6:	0f 90       	pop	r0
    24d8:	1f 90       	pop	r1
    24da:	18 95       	reti

000024dc <__vector_3>:

//increase button
ISR(INT2_vect){
    24dc:	1f 92       	push	r1
    24de:	0f 92       	push	r0
    24e0:	0f b6       	in	r0, 0x3f	; 63
    24e2:	0f 92       	push	r0
    24e4:	11 24       	eor	r1, r1
    24e6:	2f 93       	push	r18
    24e8:	3f 93       	push	r19
    24ea:	4f 93       	push	r20
    24ec:	5f 93       	push	r21
    24ee:	8f 93       	push	r24
    24f0:	9f 93       	push	r25
	if (EN_alarm == true && set==false)
    24f2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <EN_alarm>
    24f6:	88 23       	and	r24, r24
    24f8:	49 f0       	breq	.+18     	; 0x250c <__vector_3+0x30>
    24fa:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <set>
    24fe:	81 11       	cpse	r24, r1
    2500:	05 c0       	rjmp	.+10     	; 0x250c <__vector_3+0x30>
	{
		EN_alarm=false;
    2502:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <EN_alarm>
		BTN_PORTD &= ~(1<<BUZ_LED);
    2506:	82 b3       	in	r24, 0x12	; 18
    2508:	8f 77       	andi	r24, 0x7F	; 127
    250a:	82 bb       	out	0x12, r24	; 18
	}
	if((set == true) && (SW_time_date==0)){		//icrease dd, mm, h, min
    250c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <set>
    2510:	88 23       	and	r24, r24
    2512:	09 f4       	brne	.+2      	; 0x2516 <__vector_3+0x3a>
    2514:	65 c0       	rjmp	.+202    	; 0x25e0 <__vector_3+0x104>
    2516:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__data_end>
    251a:	91 11       	cpse	r25, r1
    251c:	61 c0       	rjmp	.+194    	; 0x25e0 <__vector_3+0x104>
		if(count == 1) {
    251e:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <count>
    2522:	91 30       	cpi	r25, 0x01	; 1
    2524:	d9 f5       	brne	.+118    	; 0x259c <__vector_3+0xc0>
			Date++;
    2526:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <Date>
    252a:	2f 5f       	subi	r18, 0xFF	; 255
    252c:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Date>
			if(Month == 4 || Month == 6  || Month == 9  || Month == 11)
    2530:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <Month>
    2534:	34 30       	cpi	r19, 0x04	; 4
    2536:	31 f0       	breq	.+12     	; 0x2544 <__vector_3+0x68>
    2538:	36 30       	cpi	r19, 0x06	; 6
    253a:	21 f0       	breq	.+8      	; 0x2544 <__vector_3+0x68>
    253c:	39 30       	cpi	r19, 0x09	; 9
    253e:	11 f0       	breq	.+4      	; 0x2544 <__vector_3+0x68>
    2540:	3b 30       	cpi	r19, 0x0B	; 11
    2542:	31 f4       	brne	.+12     	; 0x2550 <__vector_3+0x74>
			{
				if(Date > 30)
    2544:	2f 31       	cpi	r18, 0x1F	; 31
    2546:	50 f1       	brcs	.+84     	; 0x259c <__vector_3+0xc0>
				Date=1;
    2548:	21 e0       	ldi	r18, 0x01	; 1
    254a:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Date>
    254e:	26 c0       	rjmp	.+76     	; 0x259c <__vector_3+0xc0>
			}
			else if(Month == 1 || Month == 3  || Month == 5  || Month == 7 || Month == 8  || Month == 10  || Month == 12)
    2550:	31 30       	cpi	r19, 0x01	; 1
    2552:	61 f0       	breq	.+24     	; 0x256c <__vector_3+0x90>
    2554:	33 30       	cpi	r19, 0x03	; 3
    2556:	51 f0       	breq	.+20     	; 0x256c <__vector_3+0x90>
    2558:	35 30       	cpi	r19, 0x05	; 5
    255a:	41 f0       	breq	.+16     	; 0x256c <__vector_3+0x90>
    255c:	37 30       	cpi	r19, 0x07	; 7
    255e:	31 f0       	breq	.+12     	; 0x256c <__vector_3+0x90>
    2560:	38 30       	cpi	r19, 0x08	; 8
    2562:	21 f0       	breq	.+8      	; 0x256c <__vector_3+0x90>
    2564:	3a 30       	cpi	r19, 0x0A	; 10
    2566:	11 f0       	breq	.+4      	; 0x256c <__vector_3+0x90>
    2568:	3c 30       	cpi	r19, 0x0C	; 12
    256a:	31 f4       	brne	.+12     	; 0x2578 <__vector_3+0x9c>
			{
				if(Date >31)
    256c:	20 32       	cpi	r18, 0x20	; 32
    256e:	b0 f0       	brcs	.+44     	; 0x259c <__vector_3+0xc0>
				Date=1;
    2570:	21 e0       	ldi	r18, 0x01	; 1
    2572:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Date>
    2576:	12 c0       	rjmp	.+36     	; 0x259c <__vector_3+0xc0>
			}
			
			else if(yyyy/4 == 0 && yyyy/400 == 0)
    2578:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <yyyy>
    257c:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <yyyy+0x1>
    2580:	44 30       	cpi	r20, 0x04	; 4
    2582:	51 05       	cpc	r21, r1
    2584:	30 f4       	brcc	.+12     	; 0x2592 <__vector_3+0xb6>
			{
				if(Date > 29)
    2586:	2e 31       	cpi	r18, 0x1E	; 30
    2588:	48 f0       	brcs	.+18     	; 0x259c <__vector_3+0xc0>
				Date=1;
    258a:	21 e0       	ldi	r18, 0x01	; 1
    258c:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Date>
    2590:	05 c0       	rjmp	.+10     	; 0x259c <__vector_3+0xc0>
			}
			else
			{
				if(Date > 28)
    2592:	2d 31       	cpi	r18, 0x1D	; 29
    2594:	18 f0       	brcs	.+6      	; 0x259c <__vector_3+0xc0>
				Date=1;
    2596:	21 e0       	ldi	r18, 0x01	; 1
    2598:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Date>
			}
		}
		if(count == 2) {
    259c:	92 30       	cpi	r25, 0x02	; 2
    259e:	51 f4       	brne	.+20     	; 0x25b4 <__vector_3+0xd8>
			Month++;
    25a0:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <Month>
    25a4:	2f 5f       	subi	r18, 0xFF	; 255
    25a6:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <Month>
			if(Month > 12) Month = 1;
    25aa:	2d 30       	cpi	r18, 0x0D	; 13
    25ac:	18 f0       	brcs	.+6      	; 0x25b4 <__vector_3+0xd8>
    25ae:	21 e0       	ldi	r18, 0x01	; 1
    25b0:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <Month>
		}
		if(count == 3) {
    25b4:	93 30       	cpi	r25, 0x03	; 3
    25b6:	49 f4       	brne	.+18     	; 0x25ca <__vector_3+0xee>
			Hour++;
    25b8:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <Hour>
    25bc:	2f 5f       	subi	r18, 0xFF	; 255
    25be:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <Hour>
			if(Hour > 23) Hour = 0;
    25c2:	28 31       	cpi	r18, 0x18	; 24
    25c4:	10 f0       	brcs	.+4      	; 0x25ca <__vector_3+0xee>
    25c6:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <Hour>
		}
		if(count == 4) {
    25ca:	94 30       	cpi	r25, 0x04	; 4
    25cc:	49 f4       	brne	.+18     	; 0x25e0 <__vector_3+0x104>
			Minute++;
    25ce:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <Minute>
    25d2:	9f 5f       	subi	r25, 0xFF	; 255
    25d4:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <Minute>
			if(Minute > 59) Minute = 0;
    25d8:	9c 33       	cpi	r25, 0x3C	; 60
    25da:	10 f0       	brcs	.+4      	; 0x25e0 <__vector_3+0x104>
    25dc:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <Minute>
		}
	}
	
	if((set == true) && (SW_time_date==1)){		//increase dd, mm, yyyy
    25e0:	88 23       	and	r24, r24
    25e2:	09 f4       	brne	.+2      	; 0x25e6 <__vector_3+0x10a>
    25e4:	5b c0       	rjmp	.+182    	; 0x269c <__vector_3+0x1c0>
    25e6:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <__data_end>
    25ea:	91 30       	cpi	r25, 0x01	; 1
    25ec:	09 f0       	breq	.+2      	; 0x25f0 <__vector_3+0x114>
    25ee:	56 c0       	rjmp	.+172    	; 0x269c <__vector_3+0x1c0>
		if(count == 1) {
    25f0:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <count>
    25f4:	91 30       	cpi	r25, 0x01	; 1
    25f6:	d9 f5       	brne	.+118    	; 0x266e <__vector_3+0x192>
			Date++;
    25f8:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <Date>
    25fc:	2f 5f       	subi	r18, 0xFF	; 255
    25fe:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Date>
			if(Month == 4 || Month == 6  || Month == 9  || Month == 11)
    2602:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <Month>
    2606:	34 30       	cpi	r19, 0x04	; 4
    2608:	31 f0       	breq	.+12     	; 0x2616 <__vector_3+0x13a>
    260a:	36 30       	cpi	r19, 0x06	; 6
    260c:	21 f0       	breq	.+8      	; 0x2616 <__vector_3+0x13a>
    260e:	39 30       	cpi	r19, 0x09	; 9
    2610:	11 f0       	breq	.+4      	; 0x2616 <__vector_3+0x13a>
    2612:	3b 30       	cpi	r19, 0x0B	; 11
    2614:	31 f4       	brne	.+12     	; 0x2622 <__vector_3+0x146>
			{
				if(Date > 30)
    2616:	2f 31       	cpi	r18, 0x1F	; 31
    2618:	50 f1       	brcs	.+84     	; 0x266e <__vector_3+0x192>
				Date=1;
    261a:	21 e0       	ldi	r18, 0x01	; 1
    261c:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Date>
    2620:	26 c0       	rjmp	.+76     	; 0x266e <__vector_3+0x192>
			}
			else if(Month == 1 || Month == 3  || Month == 5  || Month == 7 || Month == 8  || Month == 10  || Month == 12)
    2622:	31 30       	cpi	r19, 0x01	; 1
    2624:	61 f0       	breq	.+24     	; 0x263e <__vector_3+0x162>
    2626:	33 30       	cpi	r19, 0x03	; 3
    2628:	51 f0       	breq	.+20     	; 0x263e <__vector_3+0x162>
    262a:	35 30       	cpi	r19, 0x05	; 5
    262c:	41 f0       	breq	.+16     	; 0x263e <__vector_3+0x162>
    262e:	37 30       	cpi	r19, 0x07	; 7
    2630:	31 f0       	breq	.+12     	; 0x263e <__vector_3+0x162>
    2632:	38 30       	cpi	r19, 0x08	; 8
    2634:	21 f0       	breq	.+8      	; 0x263e <__vector_3+0x162>
    2636:	3a 30       	cpi	r19, 0x0A	; 10
    2638:	11 f0       	breq	.+4      	; 0x263e <__vector_3+0x162>
    263a:	3c 30       	cpi	r19, 0x0C	; 12
    263c:	31 f4       	brne	.+12     	; 0x264a <__vector_3+0x16e>
			{
				if(Date >31)
    263e:	20 32       	cpi	r18, 0x20	; 32
    2640:	b0 f0       	brcs	.+44     	; 0x266e <__vector_3+0x192>
				Date=1;
    2642:	21 e0       	ldi	r18, 0x01	; 1
    2644:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Date>
    2648:	12 c0       	rjmp	.+36     	; 0x266e <__vector_3+0x192>
			}
			
			else if(yyyy/4 == 0 && yyyy/400 == 0)
    264a:	40 91 76 00 	lds	r20, 0x0076	; 0x800076 <yyyy>
    264e:	50 91 77 00 	lds	r21, 0x0077	; 0x800077 <yyyy+0x1>
    2652:	44 30       	cpi	r20, 0x04	; 4
    2654:	51 05       	cpc	r21, r1
    2656:	30 f4       	brcc	.+12     	; 0x2664 <__vector_3+0x188>
			{
				if(Date > 29)
    2658:	2e 31       	cpi	r18, 0x1E	; 30
    265a:	48 f0       	brcs	.+18     	; 0x266e <__vector_3+0x192>
				Date=1;
    265c:	21 e0       	ldi	r18, 0x01	; 1
    265e:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Date>
    2662:	05 c0       	rjmp	.+10     	; 0x266e <__vector_3+0x192>
			}
			else
			{
				if(Date > 28)
    2664:	2d 31       	cpi	r18, 0x1D	; 29
    2666:	18 f0       	brcs	.+6      	; 0x266e <__vector_3+0x192>
				Date=1;
    2668:	21 e0       	ldi	r18, 0x01	; 1
    266a:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <Date>
			}
		}
		if(count == 2) {
    266e:	92 30       	cpi	r25, 0x02	; 2
    2670:	51 f4       	brne	.+20     	; 0x2686 <__vector_3+0x1aa>
			Month++;
    2672:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <Month>
    2676:	2f 5f       	subi	r18, 0xFF	; 255
    2678:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <Month>
			if(Month > 12) Month = 1;
    267c:	2d 30       	cpi	r18, 0x0D	; 13
    267e:	18 f0       	brcs	.+6      	; 0x2686 <__vector_3+0x1aa>
    2680:	21 e0       	ldi	r18, 0x01	; 1
    2682:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <Month>
		}
		if(count == 3) {
    2686:	93 30       	cpi	r25, 0x03	; 3
    2688:	49 f4       	brne	.+18     	; 0x269c <__vector_3+0x1c0>
			Year++;
    268a:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <Year>
    268e:	9f 5f       	subi	r25, 0xFF	; 255
    2690:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <Year>
			if(Year > 99) Year = 0;
    2694:	94 36       	cpi	r25, 0x64	; 100
    2696:	10 f0       	brcs	.+4      	; 0x269c <__vector_3+0x1c0>
    2698:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <Year>
		}
	}
	
	if((set == true) && (SW_time_date==3)){		//increase alarm
    269c:	88 23       	and	r24, r24
    269e:	e1 f0       	breq	.+56     	; 0x26d8 <__vector_3+0x1fc>
    26a0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
    26a4:	83 30       	cpi	r24, 0x03	; 3
    26a6:	c1 f4       	brne	.+48     	; 0x26d8 <__vector_3+0x1fc>

		if(count == 1) {
    26a8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <count>
    26ac:	81 30       	cpi	r24, 0x01	; 1
    26ae:	49 f4       	brne	.+18     	; 0x26c2 <__vector_3+0x1e6>
			A_Hour++;
    26b0:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <A_Hour>
    26b4:	9f 5f       	subi	r25, 0xFF	; 255
    26b6:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <A_Hour>
			if(A_Hour > 23) A_Hour = 0;
    26ba:	98 31       	cpi	r25, 0x18	; 24
    26bc:	10 f0       	brcs	.+4      	; 0x26c2 <__vector_3+0x1e6>
    26be:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <A_Hour>
		}
		if(count == 2) {
    26c2:	82 30       	cpi	r24, 0x02	; 2
    26c4:	49 f4       	brne	.+18     	; 0x26d8 <__vector_3+0x1fc>
			A_Minute++;
    26c6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <A_Minute>
    26ca:	8f 5f       	subi	r24, 0xFF	; 255
    26cc:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <A_Minute>
			if(A_Minute > 59) A_Minute = 0;
    26d0:	8c 33       	cpi	r24, 0x3C	; 60
    26d2:	10 f0       	brcs	.+4      	; 0x26d8 <__vector_3+0x1fc>
    26d4:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <A_Minute>
		}
	}
}
    26d8:	9f 91       	pop	r25
    26da:	8f 91       	pop	r24
    26dc:	5f 91       	pop	r21
    26de:	4f 91       	pop	r20
    26e0:	3f 91       	pop	r19
    26e2:	2f 91       	pop	r18
    26e4:	0f 90       	pop	r0
    26e6:	0f be       	out	0x3f, r0	; 63
    26e8:	0f 90       	pop	r0
    26ea:	1f 90       	pop	r1
    26ec:	18 95       	reti

000026ee <__subsf3>:
    26ee:	50 58       	subi	r21, 0x80	; 128

000026f0 <__addsf3>:
    26f0:	bb 27       	eor	r27, r27
    26f2:	aa 27       	eor	r26, r26
    26f4:	0e 94 8f 13 	call	0x271e	; 0x271e <__addsf3x>
    26f8:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <__fp_round>
    26fc:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__fp_pscA>
    2700:	38 f0       	brcs	.+14     	; 0x2710 <__addsf3+0x20>
    2702:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__fp_pscB>
    2706:	20 f0       	brcs	.+8      	; 0x2710 <__addsf3+0x20>
    2708:	39 f4       	brne	.+14     	; 0x2718 <__addsf3+0x28>
    270a:	9f 3f       	cpi	r25, 0xFF	; 255
    270c:	19 f4       	brne	.+6      	; 0x2714 <__addsf3+0x24>
    270e:	26 f4       	brtc	.+8      	; 0x2718 <__addsf3+0x28>
    2710:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__fp_nan>
    2714:	0e f4       	brtc	.+2      	; 0x2718 <__addsf3+0x28>
    2716:	e0 95       	com	r30
    2718:	e7 fb       	bst	r30, 7
    271a:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__fp_inf>

0000271e <__addsf3x>:
    271e:	e9 2f       	mov	r30, r25
    2720:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <__fp_split3>
    2724:	58 f3       	brcs	.-42     	; 0x26fc <__addsf3+0xc>
    2726:	ba 17       	cp	r27, r26
    2728:	62 07       	cpc	r22, r18
    272a:	73 07       	cpc	r23, r19
    272c:	84 07       	cpc	r24, r20
    272e:	95 07       	cpc	r25, r21
    2730:	20 f0       	brcs	.+8      	; 0x273a <__addsf3x+0x1c>
    2732:	79 f4       	brne	.+30     	; 0x2752 <__addsf3x+0x34>
    2734:	a6 f5       	brtc	.+104    	; 0x279e <__addsf3x+0x80>
    2736:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__fp_zero>
    273a:	0e f4       	brtc	.+2      	; 0x273e <__addsf3x+0x20>
    273c:	e0 95       	com	r30
    273e:	0b 2e       	mov	r0, r27
    2740:	ba 2f       	mov	r27, r26
    2742:	a0 2d       	mov	r26, r0
    2744:	0b 01       	movw	r0, r22
    2746:	b9 01       	movw	r22, r18
    2748:	90 01       	movw	r18, r0
    274a:	0c 01       	movw	r0, r24
    274c:	ca 01       	movw	r24, r20
    274e:	a0 01       	movw	r20, r0
    2750:	11 24       	eor	r1, r1
    2752:	ff 27       	eor	r31, r31
    2754:	59 1b       	sub	r21, r25
    2756:	99 f0       	breq	.+38     	; 0x277e <__addsf3x+0x60>
    2758:	59 3f       	cpi	r21, 0xF9	; 249
    275a:	50 f4       	brcc	.+20     	; 0x2770 <__addsf3x+0x52>
    275c:	50 3e       	cpi	r21, 0xE0	; 224
    275e:	68 f1       	brcs	.+90     	; 0x27ba <__addsf3x+0x9c>
    2760:	1a 16       	cp	r1, r26
    2762:	f0 40       	sbci	r31, 0x00	; 0
    2764:	a2 2f       	mov	r26, r18
    2766:	23 2f       	mov	r18, r19
    2768:	34 2f       	mov	r19, r20
    276a:	44 27       	eor	r20, r20
    276c:	58 5f       	subi	r21, 0xF8	; 248
    276e:	f3 cf       	rjmp	.-26     	; 0x2756 <__addsf3x+0x38>
    2770:	46 95       	lsr	r20
    2772:	37 95       	ror	r19
    2774:	27 95       	ror	r18
    2776:	a7 95       	ror	r26
    2778:	f0 40       	sbci	r31, 0x00	; 0
    277a:	53 95       	inc	r21
    277c:	c9 f7       	brne	.-14     	; 0x2770 <__addsf3x+0x52>
    277e:	7e f4       	brtc	.+30     	; 0x279e <__addsf3x+0x80>
    2780:	1f 16       	cp	r1, r31
    2782:	ba 0b       	sbc	r27, r26
    2784:	62 0b       	sbc	r22, r18
    2786:	73 0b       	sbc	r23, r19
    2788:	84 0b       	sbc	r24, r20
    278a:	ba f0       	brmi	.+46     	; 0x27ba <__addsf3x+0x9c>
    278c:	91 50       	subi	r25, 0x01	; 1
    278e:	a1 f0       	breq	.+40     	; 0x27b8 <__addsf3x+0x9a>
    2790:	ff 0f       	add	r31, r31
    2792:	bb 1f       	adc	r27, r27
    2794:	66 1f       	adc	r22, r22
    2796:	77 1f       	adc	r23, r23
    2798:	88 1f       	adc	r24, r24
    279a:	c2 f7       	brpl	.-16     	; 0x278c <__addsf3x+0x6e>
    279c:	0e c0       	rjmp	.+28     	; 0x27ba <__addsf3x+0x9c>
    279e:	ba 0f       	add	r27, r26
    27a0:	62 1f       	adc	r22, r18
    27a2:	73 1f       	adc	r23, r19
    27a4:	84 1f       	adc	r24, r20
    27a6:	48 f4       	brcc	.+18     	; 0x27ba <__addsf3x+0x9c>
    27a8:	87 95       	ror	r24
    27aa:	77 95       	ror	r23
    27ac:	67 95       	ror	r22
    27ae:	b7 95       	ror	r27
    27b0:	f7 95       	ror	r31
    27b2:	9e 3f       	cpi	r25, 0xFE	; 254
    27b4:	08 f0       	brcs	.+2      	; 0x27b8 <__addsf3x+0x9a>
    27b6:	b0 cf       	rjmp	.-160    	; 0x2718 <__addsf3+0x28>
    27b8:	93 95       	inc	r25
    27ba:	88 0f       	add	r24, r24
    27bc:	08 f0       	brcs	.+2      	; 0x27c0 <__addsf3x+0xa2>
    27be:	99 27       	eor	r25, r25
    27c0:	ee 0f       	add	r30, r30
    27c2:	97 95       	ror	r25
    27c4:	87 95       	ror	r24
    27c6:	08 95       	ret

000027c8 <__cmpsf2>:
    27c8:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fp_cmp>
    27cc:	08 f4       	brcc	.+2      	; 0x27d0 <__cmpsf2+0x8>
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	08 95       	ret

000027d2 <__divsf3>:
    27d2:	0e 94 fd 13 	call	0x27fa	; 0x27fa <__divsf3x>
    27d6:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <__fp_round>
    27da:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__fp_pscB>
    27de:	58 f0       	brcs	.+22     	; 0x27f6 <__divsf3+0x24>
    27e0:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__fp_pscA>
    27e4:	40 f0       	brcs	.+16     	; 0x27f6 <__divsf3+0x24>
    27e6:	29 f4       	brne	.+10     	; 0x27f2 <__divsf3+0x20>
    27e8:	5f 3f       	cpi	r21, 0xFF	; 255
    27ea:	29 f0       	breq	.+10     	; 0x27f6 <__divsf3+0x24>
    27ec:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__fp_inf>
    27f0:	51 11       	cpse	r21, r1
    27f2:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__fp_szero>
    27f6:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__fp_nan>

000027fa <__divsf3x>:
    27fa:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <__fp_split3>
    27fe:	68 f3       	brcs	.-38     	; 0x27da <__divsf3+0x8>

00002800 <__divsf3_pse>:
    2800:	99 23       	and	r25, r25
    2802:	b1 f3       	breq	.-20     	; 0x27f0 <__divsf3+0x1e>
    2804:	55 23       	and	r21, r21
    2806:	91 f3       	breq	.-28     	; 0x27ec <__divsf3+0x1a>
    2808:	95 1b       	sub	r25, r21
    280a:	55 0b       	sbc	r21, r21
    280c:	bb 27       	eor	r27, r27
    280e:	aa 27       	eor	r26, r26
    2810:	62 17       	cp	r22, r18
    2812:	73 07       	cpc	r23, r19
    2814:	84 07       	cpc	r24, r20
    2816:	38 f0       	brcs	.+14     	; 0x2826 <__divsf3_pse+0x26>
    2818:	9f 5f       	subi	r25, 0xFF	; 255
    281a:	5f 4f       	sbci	r21, 0xFF	; 255
    281c:	22 0f       	add	r18, r18
    281e:	33 1f       	adc	r19, r19
    2820:	44 1f       	adc	r20, r20
    2822:	aa 1f       	adc	r26, r26
    2824:	a9 f3       	breq	.-22     	; 0x2810 <__divsf3_pse+0x10>
    2826:	35 d0       	rcall	.+106    	; 0x2892 <__divsf3_pse+0x92>
    2828:	0e 2e       	mov	r0, r30
    282a:	3a f0       	brmi	.+14     	; 0x283a <__divsf3_pse+0x3a>
    282c:	e0 e8       	ldi	r30, 0x80	; 128
    282e:	32 d0       	rcall	.+100    	; 0x2894 <__divsf3_pse+0x94>
    2830:	91 50       	subi	r25, 0x01	; 1
    2832:	50 40       	sbci	r21, 0x00	; 0
    2834:	e6 95       	lsr	r30
    2836:	00 1c       	adc	r0, r0
    2838:	ca f7       	brpl	.-14     	; 0x282c <__divsf3_pse+0x2c>
    283a:	2b d0       	rcall	.+86     	; 0x2892 <__divsf3_pse+0x92>
    283c:	fe 2f       	mov	r31, r30
    283e:	29 d0       	rcall	.+82     	; 0x2892 <__divsf3_pse+0x92>
    2840:	66 0f       	add	r22, r22
    2842:	77 1f       	adc	r23, r23
    2844:	88 1f       	adc	r24, r24
    2846:	bb 1f       	adc	r27, r27
    2848:	26 17       	cp	r18, r22
    284a:	37 07       	cpc	r19, r23
    284c:	48 07       	cpc	r20, r24
    284e:	ab 07       	cpc	r26, r27
    2850:	b0 e8       	ldi	r27, 0x80	; 128
    2852:	09 f0       	breq	.+2      	; 0x2856 <__divsf3_pse+0x56>
    2854:	bb 0b       	sbc	r27, r27
    2856:	80 2d       	mov	r24, r0
    2858:	bf 01       	movw	r22, r30
    285a:	ff 27       	eor	r31, r31
    285c:	93 58       	subi	r25, 0x83	; 131
    285e:	5f 4f       	sbci	r21, 0xFF	; 255
    2860:	3a f0       	brmi	.+14     	; 0x2870 <__divsf3_pse+0x70>
    2862:	9e 3f       	cpi	r25, 0xFE	; 254
    2864:	51 05       	cpc	r21, r1
    2866:	78 f0       	brcs	.+30     	; 0x2886 <__divsf3_pse+0x86>
    2868:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__fp_inf>
    286c:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__fp_szero>
    2870:	5f 3f       	cpi	r21, 0xFF	; 255
    2872:	e4 f3       	brlt	.-8      	; 0x286c <__divsf3_pse+0x6c>
    2874:	98 3e       	cpi	r25, 0xE8	; 232
    2876:	d4 f3       	brlt	.-12     	; 0x286c <__divsf3_pse+0x6c>
    2878:	86 95       	lsr	r24
    287a:	77 95       	ror	r23
    287c:	67 95       	ror	r22
    287e:	b7 95       	ror	r27
    2880:	f7 95       	ror	r31
    2882:	9f 5f       	subi	r25, 0xFF	; 255
    2884:	c9 f7       	brne	.-14     	; 0x2878 <__divsf3_pse+0x78>
    2886:	88 0f       	add	r24, r24
    2888:	91 1d       	adc	r25, r1
    288a:	96 95       	lsr	r25
    288c:	87 95       	ror	r24
    288e:	97 f9       	bld	r25, 7
    2890:	08 95       	ret
    2892:	e1 e0       	ldi	r30, 0x01	; 1
    2894:	66 0f       	add	r22, r22
    2896:	77 1f       	adc	r23, r23
    2898:	88 1f       	adc	r24, r24
    289a:	bb 1f       	adc	r27, r27
    289c:	62 17       	cp	r22, r18
    289e:	73 07       	cpc	r23, r19
    28a0:	84 07       	cpc	r24, r20
    28a2:	ba 07       	cpc	r27, r26
    28a4:	20 f0       	brcs	.+8      	; 0x28ae <__divsf3_pse+0xae>
    28a6:	62 1b       	sub	r22, r18
    28a8:	73 0b       	sbc	r23, r19
    28aa:	84 0b       	sbc	r24, r20
    28ac:	ba 0b       	sbc	r27, r26
    28ae:	ee 1f       	adc	r30, r30
    28b0:	88 f7       	brcc	.-30     	; 0x2894 <__divsf3_pse+0x94>
    28b2:	e0 95       	com	r30
    28b4:	08 95       	ret

000028b6 <__fixunssfsi>:
    28b6:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__fp_splitA>
    28ba:	88 f0       	brcs	.+34     	; 0x28de <__fixunssfsi+0x28>
    28bc:	9f 57       	subi	r25, 0x7F	; 127
    28be:	98 f0       	brcs	.+38     	; 0x28e6 <__fixunssfsi+0x30>
    28c0:	b9 2f       	mov	r27, r25
    28c2:	99 27       	eor	r25, r25
    28c4:	b7 51       	subi	r27, 0x17	; 23
    28c6:	b0 f0       	brcs	.+44     	; 0x28f4 <__fixunssfsi+0x3e>
    28c8:	e1 f0       	breq	.+56     	; 0x2902 <__fixunssfsi+0x4c>
    28ca:	66 0f       	add	r22, r22
    28cc:	77 1f       	adc	r23, r23
    28ce:	88 1f       	adc	r24, r24
    28d0:	99 1f       	adc	r25, r25
    28d2:	1a f0       	brmi	.+6      	; 0x28da <__fixunssfsi+0x24>
    28d4:	ba 95       	dec	r27
    28d6:	c9 f7       	brne	.-14     	; 0x28ca <__fixunssfsi+0x14>
    28d8:	14 c0       	rjmp	.+40     	; 0x2902 <__fixunssfsi+0x4c>
    28da:	b1 30       	cpi	r27, 0x01	; 1
    28dc:	91 f0       	breq	.+36     	; 0x2902 <__fixunssfsi+0x4c>
    28de:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <__fp_zero>
    28e2:	b1 e0       	ldi	r27, 0x01	; 1
    28e4:	08 95       	ret
    28e6:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__fp_zero>
    28ea:	67 2f       	mov	r22, r23
    28ec:	78 2f       	mov	r23, r24
    28ee:	88 27       	eor	r24, r24
    28f0:	b8 5f       	subi	r27, 0xF8	; 248
    28f2:	39 f0       	breq	.+14     	; 0x2902 <__fixunssfsi+0x4c>
    28f4:	b9 3f       	cpi	r27, 0xF9	; 249
    28f6:	cc f3       	brlt	.-14     	; 0x28ea <__fixunssfsi+0x34>
    28f8:	86 95       	lsr	r24
    28fa:	77 95       	ror	r23
    28fc:	67 95       	ror	r22
    28fe:	b3 95       	inc	r27
    2900:	d9 f7       	brne	.-10     	; 0x28f8 <__fixunssfsi+0x42>
    2902:	3e f4       	brtc	.+14     	; 0x2912 <__fixunssfsi+0x5c>
    2904:	90 95       	com	r25
    2906:	80 95       	com	r24
    2908:	70 95       	com	r23
    290a:	61 95       	neg	r22
    290c:	7f 4f       	sbci	r23, 0xFF	; 255
    290e:	8f 4f       	sbci	r24, 0xFF	; 255
    2910:	9f 4f       	sbci	r25, 0xFF	; 255
    2912:	08 95       	ret

00002914 <__floatunsisf>:
    2914:	e8 94       	clt
    2916:	09 c0       	rjmp	.+18     	; 0x292a <__floatsisf+0x12>

00002918 <__floatsisf>:
    2918:	97 fb       	bst	r25, 7
    291a:	3e f4       	brtc	.+14     	; 0x292a <__floatsisf+0x12>
    291c:	90 95       	com	r25
    291e:	80 95       	com	r24
    2920:	70 95       	com	r23
    2922:	61 95       	neg	r22
    2924:	7f 4f       	sbci	r23, 0xFF	; 255
    2926:	8f 4f       	sbci	r24, 0xFF	; 255
    2928:	9f 4f       	sbci	r25, 0xFF	; 255
    292a:	99 23       	and	r25, r25
    292c:	a9 f0       	breq	.+42     	; 0x2958 <__floatsisf+0x40>
    292e:	f9 2f       	mov	r31, r25
    2930:	96 e9       	ldi	r25, 0x96	; 150
    2932:	bb 27       	eor	r27, r27
    2934:	93 95       	inc	r25
    2936:	f6 95       	lsr	r31
    2938:	87 95       	ror	r24
    293a:	77 95       	ror	r23
    293c:	67 95       	ror	r22
    293e:	b7 95       	ror	r27
    2940:	f1 11       	cpse	r31, r1
    2942:	f8 cf       	rjmp	.-16     	; 0x2934 <__floatsisf+0x1c>
    2944:	fa f4       	brpl	.+62     	; 0x2984 <__floatsisf+0x6c>
    2946:	bb 0f       	add	r27, r27
    2948:	11 f4       	brne	.+4      	; 0x294e <__floatsisf+0x36>
    294a:	60 ff       	sbrs	r22, 0
    294c:	1b c0       	rjmp	.+54     	; 0x2984 <__floatsisf+0x6c>
    294e:	6f 5f       	subi	r22, 0xFF	; 255
    2950:	7f 4f       	sbci	r23, 0xFF	; 255
    2952:	8f 4f       	sbci	r24, 0xFF	; 255
    2954:	9f 4f       	sbci	r25, 0xFF	; 255
    2956:	16 c0       	rjmp	.+44     	; 0x2984 <__floatsisf+0x6c>
    2958:	88 23       	and	r24, r24
    295a:	11 f0       	breq	.+4      	; 0x2960 <__floatsisf+0x48>
    295c:	96 e9       	ldi	r25, 0x96	; 150
    295e:	11 c0       	rjmp	.+34     	; 0x2982 <__floatsisf+0x6a>
    2960:	77 23       	and	r23, r23
    2962:	21 f0       	breq	.+8      	; 0x296c <__floatsisf+0x54>
    2964:	9e e8       	ldi	r25, 0x8E	; 142
    2966:	87 2f       	mov	r24, r23
    2968:	76 2f       	mov	r23, r22
    296a:	05 c0       	rjmp	.+10     	; 0x2976 <__floatsisf+0x5e>
    296c:	66 23       	and	r22, r22
    296e:	71 f0       	breq	.+28     	; 0x298c <__floatsisf+0x74>
    2970:	96 e8       	ldi	r25, 0x86	; 134
    2972:	86 2f       	mov	r24, r22
    2974:	70 e0       	ldi	r23, 0x00	; 0
    2976:	60 e0       	ldi	r22, 0x00	; 0
    2978:	2a f0       	brmi	.+10     	; 0x2984 <__floatsisf+0x6c>
    297a:	9a 95       	dec	r25
    297c:	66 0f       	add	r22, r22
    297e:	77 1f       	adc	r23, r23
    2980:	88 1f       	adc	r24, r24
    2982:	da f7       	brpl	.-10     	; 0x297a <__floatsisf+0x62>
    2984:	88 0f       	add	r24, r24
    2986:	96 95       	lsr	r25
    2988:	87 95       	ror	r24
    298a:	97 f9       	bld	r25, 7
    298c:	08 95       	ret

0000298e <floor>:
    298e:	0e 94 75 15 	call	0x2aea	; 0x2aea <__fp_trunc>
    2992:	90 f0       	brcs	.+36     	; 0x29b8 <floor+0x2a>
    2994:	9f 37       	cpi	r25, 0x7F	; 127
    2996:	48 f4       	brcc	.+18     	; 0x29aa <floor+0x1c>
    2998:	91 11       	cpse	r25, r1
    299a:	16 f0       	brts	.+4      	; 0x29a0 <floor+0x12>
    299c:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__fp_szero>
    29a0:	60 e0       	ldi	r22, 0x00	; 0
    29a2:	70 e0       	ldi	r23, 0x00	; 0
    29a4:	80 e8       	ldi	r24, 0x80	; 128
    29a6:	9f eb       	ldi	r25, 0xBF	; 191
    29a8:	08 95       	ret
    29aa:	26 f4       	brtc	.+8      	; 0x29b4 <floor+0x26>
    29ac:	1b 16       	cp	r1, r27
    29ae:	61 1d       	adc	r22, r1
    29b0:	71 1d       	adc	r23, r1
    29b2:	81 1d       	adc	r24, r1
    29b4:	0c 94 08 15 	jmp	0x2a10	; 0x2a10 <__fp_mintl>
    29b8:	0c 94 23 15 	jmp	0x2a46	; 0x2a46 <__fp_mpack>

000029bc <__fp_cmp>:
    29bc:	99 0f       	add	r25, r25
    29be:	00 08       	sbc	r0, r0
    29c0:	55 0f       	add	r21, r21
    29c2:	aa 0b       	sbc	r26, r26
    29c4:	e0 e8       	ldi	r30, 0x80	; 128
    29c6:	fe ef       	ldi	r31, 0xFE	; 254
    29c8:	16 16       	cp	r1, r22
    29ca:	17 06       	cpc	r1, r23
    29cc:	e8 07       	cpc	r30, r24
    29ce:	f9 07       	cpc	r31, r25
    29d0:	c0 f0       	brcs	.+48     	; 0x2a02 <__fp_cmp+0x46>
    29d2:	12 16       	cp	r1, r18
    29d4:	13 06       	cpc	r1, r19
    29d6:	e4 07       	cpc	r30, r20
    29d8:	f5 07       	cpc	r31, r21
    29da:	98 f0       	brcs	.+38     	; 0x2a02 <__fp_cmp+0x46>
    29dc:	62 1b       	sub	r22, r18
    29de:	73 0b       	sbc	r23, r19
    29e0:	84 0b       	sbc	r24, r20
    29e2:	95 0b       	sbc	r25, r21
    29e4:	39 f4       	brne	.+14     	; 0x29f4 <__fp_cmp+0x38>
    29e6:	0a 26       	eor	r0, r26
    29e8:	61 f0       	breq	.+24     	; 0x2a02 <__fp_cmp+0x46>
    29ea:	23 2b       	or	r18, r19
    29ec:	24 2b       	or	r18, r20
    29ee:	25 2b       	or	r18, r21
    29f0:	21 f4       	brne	.+8      	; 0x29fa <__fp_cmp+0x3e>
    29f2:	08 95       	ret
    29f4:	0a 26       	eor	r0, r26
    29f6:	09 f4       	brne	.+2      	; 0x29fa <__fp_cmp+0x3e>
    29f8:	a1 40       	sbci	r26, 0x01	; 1
    29fa:	a6 95       	lsr	r26
    29fc:	8f ef       	ldi	r24, 0xFF	; 255
    29fe:	81 1d       	adc	r24, r1
    2a00:	81 1d       	adc	r24, r1
    2a02:	08 95       	ret

00002a04 <__fp_inf>:
    2a04:	97 f9       	bld	r25, 7
    2a06:	9f 67       	ori	r25, 0x7F	; 127
    2a08:	80 e8       	ldi	r24, 0x80	; 128
    2a0a:	70 e0       	ldi	r23, 0x00	; 0
    2a0c:	60 e0       	ldi	r22, 0x00	; 0
    2a0e:	08 95       	ret

00002a10 <__fp_mintl>:
    2a10:	88 23       	and	r24, r24
    2a12:	71 f4       	brne	.+28     	; 0x2a30 <__fp_mintl+0x20>
    2a14:	77 23       	and	r23, r23
    2a16:	21 f0       	breq	.+8      	; 0x2a20 <__fp_mintl+0x10>
    2a18:	98 50       	subi	r25, 0x08	; 8
    2a1a:	87 2b       	or	r24, r23
    2a1c:	76 2f       	mov	r23, r22
    2a1e:	07 c0       	rjmp	.+14     	; 0x2a2e <__fp_mintl+0x1e>
    2a20:	66 23       	and	r22, r22
    2a22:	11 f4       	brne	.+4      	; 0x2a28 <__fp_mintl+0x18>
    2a24:	99 27       	eor	r25, r25
    2a26:	0d c0       	rjmp	.+26     	; 0x2a42 <__fp_mintl+0x32>
    2a28:	90 51       	subi	r25, 0x10	; 16
    2a2a:	86 2b       	or	r24, r22
    2a2c:	70 e0       	ldi	r23, 0x00	; 0
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	2a f0       	brmi	.+10     	; 0x2a3c <__fp_mintl+0x2c>
    2a32:	9a 95       	dec	r25
    2a34:	66 0f       	add	r22, r22
    2a36:	77 1f       	adc	r23, r23
    2a38:	88 1f       	adc	r24, r24
    2a3a:	da f7       	brpl	.-10     	; 0x2a32 <__fp_mintl+0x22>
    2a3c:	88 0f       	add	r24, r24
    2a3e:	96 95       	lsr	r25
    2a40:	87 95       	ror	r24
    2a42:	97 f9       	bld	r25, 7
    2a44:	08 95       	ret

00002a46 <__fp_mpack>:
    2a46:	9f 3f       	cpi	r25, 0xFF	; 255
    2a48:	31 f0       	breq	.+12     	; 0x2a56 <__fp_mpack_finite+0xc>

00002a4a <__fp_mpack_finite>:
    2a4a:	91 50       	subi	r25, 0x01	; 1
    2a4c:	20 f4       	brcc	.+8      	; 0x2a56 <__fp_mpack_finite+0xc>
    2a4e:	87 95       	ror	r24
    2a50:	77 95       	ror	r23
    2a52:	67 95       	ror	r22
    2a54:	b7 95       	ror	r27
    2a56:	88 0f       	add	r24, r24
    2a58:	91 1d       	adc	r25, r1
    2a5a:	96 95       	lsr	r25
    2a5c:	87 95       	ror	r24
    2a5e:	97 f9       	bld	r25, 7
    2a60:	08 95       	ret

00002a62 <__fp_nan>:
    2a62:	9f ef       	ldi	r25, 0xFF	; 255
    2a64:	80 ec       	ldi	r24, 0xC0	; 192
    2a66:	08 95       	ret

00002a68 <__fp_pscA>:
    2a68:	00 24       	eor	r0, r0
    2a6a:	0a 94       	dec	r0
    2a6c:	16 16       	cp	r1, r22
    2a6e:	17 06       	cpc	r1, r23
    2a70:	18 06       	cpc	r1, r24
    2a72:	09 06       	cpc	r0, r25
    2a74:	08 95       	ret

00002a76 <__fp_pscB>:
    2a76:	00 24       	eor	r0, r0
    2a78:	0a 94       	dec	r0
    2a7a:	12 16       	cp	r1, r18
    2a7c:	13 06       	cpc	r1, r19
    2a7e:	14 06       	cpc	r1, r20
    2a80:	05 06       	cpc	r0, r21
    2a82:	08 95       	ret

00002a84 <__fp_round>:
    2a84:	09 2e       	mov	r0, r25
    2a86:	03 94       	inc	r0
    2a88:	00 0c       	add	r0, r0
    2a8a:	11 f4       	brne	.+4      	; 0x2a90 <__fp_round+0xc>
    2a8c:	88 23       	and	r24, r24
    2a8e:	52 f0       	brmi	.+20     	; 0x2aa4 <__fp_round+0x20>
    2a90:	bb 0f       	add	r27, r27
    2a92:	40 f4       	brcc	.+16     	; 0x2aa4 <__fp_round+0x20>
    2a94:	bf 2b       	or	r27, r31
    2a96:	11 f4       	brne	.+4      	; 0x2a9c <__fp_round+0x18>
    2a98:	60 ff       	sbrs	r22, 0
    2a9a:	04 c0       	rjmp	.+8      	; 0x2aa4 <__fp_round+0x20>
    2a9c:	6f 5f       	subi	r22, 0xFF	; 255
    2a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa0:	8f 4f       	sbci	r24, 0xFF	; 255
    2aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa4:	08 95       	ret

00002aa6 <__fp_split3>:
    2aa6:	57 fd       	sbrc	r21, 7
    2aa8:	90 58       	subi	r25, 0x80	; 128
    2aaa:	44 0f       	add	r20, r20
    2aac:	55 1f       	adc	r21, r21
    2aae:	59 f0       	breq	.+22     	; 0x2ac6 <__fp_splitA+0x10>
    2ab0:	5f 3f       	cpi	r21, 0xFF	; 255
    2ab2:	71 f0       	breq	.+28     	; 0x2ad0 <__fp_splitA+0x1a>
    2ab4:	47 95       	ror	r20

00002ab6 <__fp_splitA>:
    2ab6:	88 0f       	add	r24, r24
    2ab8:	97 fb       	bst	r25, 7
    2aba:	99 1f       	adc	r25, r25
    2abc:	61 f0       	breq	.+24     	; 0x2ad6 <__fp_splitA+0x20>
    2abe:	9f 3f       	cpi	r25, 0xFF	; 255
    2ac0:	79 f0       	breq	.+30     	; 0x2ae0 <__fp_splitA+0x2a>
    2ac2:	87 95       	ror	r24
    2ac4:	08 95       	ret
    2ac6:	12 16       	cp	r1, r18
    2ac8:	13 06       	cpc	r1, r19
    2aca:	14 06       	cpc	r1, r20
    2acc:	55 1f       	adc	r21, r21
    2ace:	f2 cf       	rjmp	.-28     	; 0x2ab4 <__fp_split3+0xe>
    2ad0:	46 95       	lsr	r20
    2ad2:	f1 df       	rcall	.-30     	; 0x2ab6 <__fp_splitA>
    2ad4:	08 c0       	rjmp	.+16     	; 0x2ae6 <__fp_splitA+0x30>
    2ad6:	16 16       	cp	r1, r22
    2ad8:	17 06       	cpc	r1, r23
    2ada:	18 06       	cpc	r1, r24
    2adc:	99 1f       	adc	r25, r25
    2ade:	f1 cf       	rjmp	.-30     	; 0x2ac2 <__fp_splitA+0xc>
    2ae0:	86 95       	lsr	r24
    2ae2:	71 05       	cpc	r23, r1
    2ae4:	61 05       	cpc	r22, r1
    2ae6:	08 94       	sec
    2ae8:	08 95       	ret

00002aea <__fp_trunc>:
    2aea:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__fp_splitA>
    2aee:	a0 f0       	brcs	.+40     	; 0x2b18 <__fp_trunc+0x2e>
    2af0:	be e7       	ldi	r27, 0x7E	; 126
    2af2:	b9 17       	cp	r27, r25
    2af4:	88 f4       	brcc	.+34     	; 0x2b18 <__fp_trunc+0x2e>
    2af6:	bb 27       	eor	r27, r27
    2af8:	9f 38       	cpi	r25, 0x8F	; 143
    2afa:	60 f4       	brcc	.+24     	; 0x2b14 <__fp_trunc+0x2a>
    2afc:	16 16       	cp	r1, r22
    2afe:	b1 1d       	adc	r27, r1
    2b00:	67 2f       	mov	r22, r23
    2b02:	78 2f       	mov	r23, r24
    2b04:	88 27       	eor	r24, r24
    2b06:	98 5f       	subi	r25, 0xF8	; 248
    2b08:	f7 cf       	rjmp	.-18     	; 0x2af8 <__fp_trunc+0xe>
    2b0a:	86 95       	lsr	r24
    2b0c:	77 95       	ror	r23
    2b0e:	67 95       	ror	r22
    2b10:	b1 1d       	adc	r27, r1
    2b12:	93 95       	inc	r25
    2b14:	96 39       	cpi	r25, 0x96	; 150
    2b16:	c8 f3       	brcs	.-14     	; 0x2b0a <__fp_trunc+0x20>
    2b18:	08 95       	ret

00002b1a <__fp_zero>:
    2b1a:	e8 94       	clt

00002b1c <__fp_szero>:
    2b1c:	bb 27       	eor	r27, r27
    2b1e:	66 27       	eor	r22, r22
    2b20:	77 27       	eor	r23, r23
    2b22:	cb 01       	movw	r24, r22
    2b24:	97 f9       	bld	r25, 7
    2b26:	08 95       	ret

00002b28 <__gesf2>:
    2b28:	0e 94 de 14 	call	0x29bc	; 0x29bc <__fp_cmp>
    2b2c:	08 f4       	brcc	.+2      	; 0x2b30 <__gesf2+0x8>
    2b2e:	8f ef       	ldi	r24, 0xFF	; 255
    2b30:	08 95       	ret

00002b32 <__mulsf3>:
    2b32:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__mulsf3x>
    2b36:	0c 94 42 15 	jmp	0x2a84	; 0x2a84 <__fp_round>
    2b3a:	0e 94 34 15 	call	0x2a68	; 0x2a68 <__fp_pscA>
    2b3e:	38 f0       	brcs	.+14     	; 0x2b4e <__mulsf3+0x1c>
    2b40:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <__fp_pscB>
    2b44:	20 f0       	brcs	.+8      	; 0x2b4e <__mulsf3+0x1c>
    2b46:	95 23       	and	r25, r21
    2b48:	11 f0       	breq	.+4      	; 0x2b4e <__mulsf3+0x1c>
    2b4a:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__fp_inf>
    2b4e:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__fp_nan>
    2b52:	11 24       	eor	r1, r1
    2b54:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__fp_szero>

00002b58 <__mulsf3x>:
    2b58:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <__fp_split3>
    2b5c:	70 f3       	brcs	.-36     	; 0x2b3a <__mulsf3+0x8>

00002b5e <__mulsf3_pse>:
    2b5e:	95 9f       	mul	r25, r21
    2b60:	c1 f3       	breq	.-16     	; 0x2b52 <__mulsf3+0x20>
    2b62:	95 0f       	add	r25, r21
    2b64:	50 e0       	ldi	r21, 0x00	; 0
    2b66:	55 1f       	adc	r21, r21
    2b68:	62 9f       	mul	r22, r18
    2b6a:	f0 01       	movw	r30, r0
    2b6c:	72 9f       	mul	r23, r18
    2b6e:	bb 27       	eor	r27, r27
    2b70:	f0 0d       	add	r31, r0
    2b72:	b1 1d       	adc	r27, r1
    2b74:	63 9f       	mul	r22, r19
    2b76:	aa 27       	eor	r26, r26
    2b78:	f0 0d       	add	r31, r0
    2b7a:	b1 1d       	adc	r27, r1
    2b7c:	aa 1f       	adc	r26, r26
    2b7e:	64 9f       	mul	r22, r20
    2b80:	66 27       	eor	r22, r22
    2b82:	b0 0d       	add	r27, r0
    2b84:	a1 1d       	adc	r26, r1
    2b86:	66 1f       	adc	r22, r22
    2b88:	82 9f       	mul	r24, r18
    2b8a:	22 27       	eor	r18, r18
    2b8c:	b0 0d       	add	r27, r0
    2b8e:	a1 1d       	adc	r26, r1
    2b90:	62 1f       	adc	r22, r18
    2b92:	73 9f       	mul	r23, r19
    2b94:	b0 0d       	add	r27, r0
    2b96:	a1 1d       	adc	r26, r1
    2b98:	62 1f       	adc	r22, r18
    2b9a:	83 9f       	mul	r24, r19
    2b9c:	a0 0d       	add	r26, r0
    2b9e:	61 1d       	adc	r22, r1
    2ba0:	22 1f       	adc	r18, r18
    2ba2:	74 9f       	mul	r23, r20
    2ba4:	33 27       	eor	r19, r19
    2ba6:	a0 0d       	add	r26, r0
    2ba8:	61 1d       	adc	r22, r1
    2baa:	23 1f       	adc	r18, r19
    2bac:	84 9f       	mul	r24, r20
    2bae:	60 0d       	add	r22, r0
    2bb0:	21 1d       	adc	r18, r1
    2bb2:	82 2f       	mov	r24, r18
    2bb4:	76 2f       	mov	r23, r22
    2bb6:	6a 2f       	mov	r22, r26
    2bb8:	11 24       	eor	r1, r1
    2bba:	9f 57       	subi	r25, 0x7F	; 127
    2bbc:	50 40       	sbci	r21, 0x00	; 0
    2bbe:	9a f0       	brmi	.+38     	; 0x2be6 <__mulsf3_pse+0x88>
    2bc0:	f1 f0       	breq	.+60     	; 0x2bfe <__mulsf3_pse+0xa0>
    2bc2:	88 23       	and	r24, r24
    2bc4:	4a f0       	brmi	.+18     	; 0x2bd8 <__mulsf3_pse+0x7a>
    2bc6:	ee 0f       	add	r30, r30
    2bc8:	ff 1f       	adc	r31, r31
    2bca:	bb 1f       	adc	r27, r27
    2bcc:	66 1f       	adc	r22, r22
    2bce:	77 1f       	adc	r23, r23
    2bd0:	88 1f       	adc	r24, r24
    2bd2:	91 50       	subi	r25, 0x01	; 1
    2bd4:	50 40       	sbci	r21, 0x00	; 0
    2bd6:	a9 f7       	brne	.-22     	; 0x2bc2 <__mulsf3_pse+0x64>
    2bd8:	9e 3f       	cpi	r25, 0xFE	; 254
    2bda:	51 05       	cpc	r21, r1
    2bdc:	80 f0       	brcs	.+32     	; 0x2bfe <__mulsf3_pse+0xa0>
    2bde:	0c 94 02 15 	jmp	0x2a04	; 0x2a04 <__fp_inf>
    2be2:	0c 94 8e 15 	jmp	0x2b1c	; 0x2b1c <__fp_szero>
    2be6:	5f 3f       	cpi	r21, 0xFF	; 255
    2be8:	e4 f3       	brlt	.-8      	; 0x2be2 <__mulsf3_pse+0x84>
    2bea:	98 3e       	cpi	r25, 0xE8	; 232
    2bec:	d4 f3       	brlt	.-12     	; 0x2be2 <__mulsf3_pse+0x84>
    2bee:	86 95       	lsr	r24
    2bf0:	77 95       	ror	r23
    2bf2:	67 95       	ror	r22
    2bf4:	b7 95       	ror	r27
    2bf6:	f7 95       	ror	r31
    2bf8:	e7 95       	ror	r30
    2bfa:	9f 5f       	subi	r25, 0xFF	; 255
    2bfc:	c1 f7       	brne	.-16     	; 0x2bee <__mulsf3_pse+0x90>
    2bfe:	fe 2b       	or	r31, r30
    2c00:	88 0f       	add	r24, r24
    2c02:	91 1d       	adc	r25, r1
    2c04:	96 95       	lsr	r25
    2c06:	87 95       	ror	r24
    2c08:	97 f9       	bld	r25, 7
    2c0a:	08 95       	ret

00002c0c <sin>:
    2c0c:	9f 93       	push	r25
    2c0e:	0e 94 10 16 	call	0x2c20	; 0x2c20 <__fp_rempio2>
    2c12:	0f 90       	pop	r0
    2c14:	07 fc       	sbrc	r0, 7
    2c16:	ee 5f       	subi	r30, 0xFE	; 254
    2c18:	0c 94 39 16 	jmp	0x2c72	; 0x2c72 <__fp_sinus>
    2c1c:	0c 94 31 15 	jmp	0x2a62	; 0x2a62 <__fp_nan>

00002c20 <__fp_rempio2>:
    2c20:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__fp_splitA>
    2c24:	d8 f3       	brcs	.-10     	; 0x2c1c <sin+0x10>
    2c26:	e8 94       	clt
    2c28:	e0 e0       	ldi	r30, 0x00	; 0
    2c2a:	bb 27       	eor	r27, r27
    2c2c:	9f 57       	subi	r25, 0x7F	; 127
    2c2e:	f0 f0       	brcs	.+60     	; 0x2c6c <__fp_rempio2+0x4c>
    2c30:	2a ed       	ldi	r18, 0xDA	; 218
    2c32:	3f e0       	ldi	r19, 0x0F	; 15
    2c34:	49 ec       	ldi	r20, 0xC9	; 201
    2c36:	06 c0       	rjmp	.+12     	; 0x2c44 <__fp_rempio2+0x24>
    2c38:	ee 0f       	add	r30, r30
    2c3a:	bb 0f       	add	r27, r27
    2c3c:	66 1f       	adc	r22, r22
    2c3e:	77 1f       	adc	r23, r23
    2c40:	88 1f       	adc	r24, r24
    2c42:	28 f0       	brcs	.+10     	; 0x2c4e <__fp_rempio2+0x2e>
    2c44:	b2 3a       	cpi	r27, 0xA2	; 162
    2c46:	62 07       	cpc	r22, r18
    2c48:	73 07       	cpc	r23, r19
    2c4a:	84 07       	cpc	r24, r20
    2c4c:	28 f0       	brcs	.+10     	; 0x2c58 <__fp_rempio2+0x38>
    2c4e:	b2 5a       	subi	r27, 0xA2	; 162
    2c50:	62 0b       	sbc	r22, r18
    2c52:	73 0b       	sbc	r23, r19
    2c54:	84 0b       	sbc	r24, r20
    2c56:	e3 95       	inc	r30
    2c58:	9a 95       	dec	r25
    2c5a:	72 f7       	brpl	.-36     	; 0x2c38 <__fp_rempio2+0x18>
    2c5c:	80 38       	cpi	r24, 0x80	; 128
    2c5e:	30 f4       	brcc	.+12     	; 0x2c6c <__fp_rempio2+0x4c>
    2c60:	9a 95       	dec	r25
    2c62:	bb 0f       	add	r27, r27
    2c64:	66 1f       	adc	r22, r22
    2c66:	77 1f       	adc	r23, r23
    2c68:	88 1f       	adc	r24, r24
    2c6a:	d2 f7       	brpl	.-12     	; 0x2c60 <__fp_rempio2+0x40>
    2c6c:	90 48       	sbci	r25, 0x80	; 128
    2c6e:	0c 94 25 15 	jmp	0x2a4a	; 0x2a4a <__fp_mpack_finite>

00002c72 <__fp_sinus>:
    2c72:	ef 93       	push	r30
    2c74:	e0 ff       	sbrs	r30, 0
    2c76:	07 c0       	rjmp	.+14     	; 0x2c86 <__fp_sinus+0x14>
    2c78:	a2 ea       	ldi	r26, 0xA2	; 162
    2c7a:	2a ed       	ldi	r18, 0xDA	; 218
    2c7c:	3f e0       	ldi	r19, 0x0F	; 15
    2c7e:	49 ec       	ldi	r20, 0xC9	; 201
    2c80:	5f eb       	ldi	r21, 0xBF	; 191
    2c82:	0e 94 8f 13 	call	0x271e	; 0x271e <__addsf3x>
    2c86:	0e 94 42 15 	call	0x2a84	; 0x2a84 <__fp_round>
    2c8a:	0f 90       	pop	r0
    2c8c:	03 94       	inc	r0
    2c8e:	01 fc       	sbrc	r0, 1
    2c90:	90 58       	subi	r25, 0x80	; 128
    2c92:	e4 e5       	ldi	r30, 0x54	; 84
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	0c 94 4d 16 	jmp	0x2c9a	; 0x2c9a <__fp_powsodd>

00002c9a <__fp_powsodd>:
    2c9a:	9f 93       	push	r25
    2c9c:	8f 93       	push	r24
    2c9e:	7f 93       	push	r23
    2ca0:	6f 93       	push	r22
    2ca2:	ff 93       	push	r31
    2ca4:	ef 93       	push	r30
    2ca6:	9b 01       	movw	r18, r22
    2ca8:	ac 01       	movw	r20, r24
    2caa:	0e 94 99 15 	call	0x2b32	; 0x2b32 <__mulsf3>
    2cae:	ef 91       	pop	r30
    2cb0:	ff 91       	pop	r31
    2cb2:	0e 94 61 16 	call	0x2cc2	; 0x2cc2 <__fp_powser>
    2cb6:	2f 91       	pop	r18
    2cb8:	3f 91       	pop	r19
    2cba:	4f 91       	pop	r20
    2cbc:	5f 91       	pop	r21
    2cbe:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__mulsf3>

00002cc2 <__fp_powser>:
    2cc2:	df 93       	push	r29
    2cc4:	cf 93       	push	r28
    2cc6:	1f 93       	push	r17
    2cc8:	0f 93       	push	r16
    2cca:	ff 92       	push	r15
    2ccc:	ef 92       	push	r14
    2cce:	df 92       	push	r13
    2cd0:	7b 01       	movw	r14, r22
    2cd2:	8c 01       	movw	r16, r24
    2cd4:	68 94       	set
    2cd6:	06 c0       	rjmp	.+12     	; 0x2ce4 <__fp_powser+0x22>
    2cd8:	da 2e       	mov	r13, r26
    2cda:	ef 01       	movw	r28, r30
    2cdc:	0e 94 ac 15 	call	0x2b58	; 0x2b58 <__mulsf3x>
    2ce0:	fe 01       	movw	r30, r28
    2ce2:	e8 94       	clt
    2ce4:	a5 91       	lpm	r26, Z+
    2ce6:	25 91       	lpm	r18, Z+
    2ce8:	35 91       	lpm	r19, Z+
    2cea:	45 91       	lpm	r20, Z+
    2cec:	55 91       	lpm	r21, Z+
    2cee:	a6 f3       	brts	.-24     	; 0x2cd8 <__fp_powser+0x16>
    2cf0:	ef 01       	movw	r28, r30
    2cf2:	0e 94 8f 13 	call	0x271e	; 0x271e <__addsf3x>
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	97 01       	movw	r18, r14
    2cfa:	a8 01       	movw	r20, r16
    2cfc:	da 94       	dec	r13
    2cfe:	69 f7       	brne	.-38     	; 0x2cda <__fp_powser+0x18>
    2d00:	df 90       	pop	r13
    2d02:	ef 90       	pop	r14
    2d04:	ff 90       	pop	r15
    2d06:	0f 91       	pop	r16
    2d08:	1f 91       	pop	r17
    2d0a:	cf 91       	pop	r28
    2d0c:	df 91       	pop	r29
    2d0e:	08 95       	ret

00002d10 <__divmodhi4>:
    2d10:	97 fb       	bst	r25, 7
    2d12:	07 2e       	mov	r0, r23
    2d14:	16 f4       	brtc	.+4      	; 0x2d1a <__divmodhi4+0xa>
    2d16:	00 94       	com	r0
    2d18:	07 d0       	rcall	.+14     	; 0x2d28 <__divmodhi4_neg1>
    2d1a:	77 fd       	sbrc	r23, 7
    2d1c:	09 d0       	rcall	.+18     	; 0x2d30 <__divmodhi4_neg2>
    2d1e:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__udivmodhi4>
    2d22:	07 fc       	sbrc	r0, 7
    2d24:	05 d0       	rcall	.+10     	; 0x2d30 <__divmodhi4_neg2>
    2d26:	3e f4       	brtc	.+14     	; 0x2d36 <__divmodhi4_exit>

00002d28 <__divmodhi4_neg1>:
    2d28:	90 95       	com	r25
    2d2a:	81 95       	neg	r24
    2d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d2e:	08 95       	ret

00002d30 <__divmodhi4_neg2>:
    2d30:	70 95       	com	r23
    2d32:	61 95       	neg	r22
    2d34:	7f 4f       	sbci	r23, 0xFF	; 255

00002d36 <__divmodhi4_exit>:
    2d36:	08 95       	ret

00002d38 <__umulhisi3>:
    2d38:	a2 9f       	mul	r26, r18
    2d3a:	b0 01       	movw	r22, r0
    2d3c:	b3 9f       	mul	r27, r19
    2d3e:	c0 01       	movw	r24, r0
    2d40:	a3 9f       	mul	r26, r19
    2d42:	70 0d       	add	r23, r0
    2d44:	81 1d       	adc	r24, r1
    2d46:	11 24       	eor	r1, r1
    2d48:	91 1d       	adc	r25, r1
    2d4a:	b2 9f       	mul	r27, r18
    2d4c:	70 0d       	add	r23, r0
    2d4e:	81 1d       	adc	r24, r1
    2d50:	11 24       	eor	r1, r1
    2d52:	91 1d       	adc	r25, r1
    2d54:	08 95       	ret

00002d56 <__udivmodhi4>:
    2d56:	aa 1b       	sub	r26, r26
    2d58:	bb 1b       	sub	r27, r27
    2d5a:	51 e1       	ldi	r21, 0x11	; 17
    2d5c:	07 c0       	rjmp	.+14     	; 0x2d6c <__udivmodhi4_ep>

00002d5e <__udivmodhi4_loop>:
    2d5e:	aa 1f       	adc	r26, r26
    2d60:	bb 1f       	adc	r27, r27
    2d62:	a6 17       	cp	r26, r22
    2d64:	b7 07       	cpc	r27, r23
    2d66:	10 f0       	brcs	.+4      	; 0x2d6c <__udivmodhi4_ep>
    2d68:	a6 1b       	sub	r26, r22
    2d6a:	b7 0b       	sbc	r27, r23

00002d6c <__udivmodhi4_ep>:
    2d6c:	88 1f       	adc	r24, r24
    2d6e:	99 1f       	adc	r25, r25
    2d70:	5a 95       	dec	r21
    2d72:	a9 f7       	brne	.-22     	; 0x2d5e <__udivmodhi4_loop>
    2d74:	80 95       	com	r24
    2d76:	90 95       	com	r25
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	08 95       	ret

00002d7e <_exit>:
    2d7e:	f8 94       	cli

00002d80 <__stop_program>:
    2d80:	ff cf       	rjmp	.-2      	; 0x2d80 <__stop_program>
